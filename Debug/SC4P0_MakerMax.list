
SC4P0_MakerMax.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006768  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017a0  08006908  08006908  00016908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080080a8  080080a8  000180a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080080b0  080080b0  000180b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080080b4  080080b4  000180b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000068c  20000000  080080b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002068c  2**0
                  CONTENTS
  8 .bss          0000065c  2000068c  2000068c  0002068c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000ce8  20000ce8  0002068c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002068c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00017949  00000000  00000000  000206bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003217  00000000  00000000  00038005  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000c4ce  00000000  00000000  0003b21c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec8  00000000  00000000  000476f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001398  00000000  00000000  000485b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000081fa  00000000  00000000  00049950  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000056c6  00000000  00000000  00051b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00057210  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000037e8  00000000  00000000  0005728c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000068c 	.word	0x2000068c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080068f0 	.word	0x080068f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000690 	.word	0x20000690
 80001dc:	080068f0 	.word	0x080068f0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca4:	f000 b97a 	b.w	8000f9c <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f806 	bl	8000cc0 <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__udivmoddi4>:
 8000cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc4:	468c      	mov	ip, r1
 8000cc6:	460d      	mov	r5, r1
 8000cc8:	4604      	mov	r4, r0
 8000cca:	9e08      	ldr	r6, [sp, #32]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d151      	bne.n	8000d74 <__udivmoddi4+0xb4>
 8000cd0:	428a      	cmp	r2, r1
 8000cd2:	4617      	mov	r7, r2
 8000cd4:	d96d      	bls.n	8000db2 <__udivmoddi4+0xf2>
 8000cd6:	fab2 fe82 	clz	lr, r2
 8000cda:	f1be 0f00 	cmp.w	lr, #0
 8000cde:	d00b      	beq.n	8000cf8 <__udivmoddi4+0x38>
 8000ce0:	f1ce 0c20 	rsb	ip, lr, #32
 8000ce4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000ce8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cec:	fa02 f70e 	lsl.w	r7, r2, lr
 8000cf0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000cf4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cf8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cfc:	0c25      	lsrs	r5, r4, #16
 8000cfe:	fbbc f8fa 	udiv	r8, ip, sl
 8000d02:	fa1f f987 	uxth.w	r9, r7
 8000d06:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d0a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d0e:	fb08 f309 	mul.w	r3, r8, r9
 8000d12:	42ab      	cmp	r3, r5
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x6c>
 8000d16:	19ed      	adds	r5, r5, r7
 8000d18:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000d1c:	f080 8123 	bcs.w	8000f66 <__udivmoddi4+0x2a6>
 8000d20:	42ab      	cmp	r3, r5
 8000d22:	f240 8120 	bls.w	8000f66 <__udivmoddi4+0x2a6>
 8000d26:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2a:	443d      	add	r5, r7
 8000d2c:	1aed      	subs	r5, r5, r3
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d34:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d38:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d3c:	fb00 f909 	mul.w	r9, r0, r9
 8000d40:	45a1      	cmp	r9, r4
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x98>
 8000d44:	19e4      	adds	r4, r4, r7
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d4a:	f080 810a 	bcs.w	8000f62 <__udivmoddi4+0x2a2>
 8000d4e:	45a1      	cmp	r9, r4
 8000d50:	f240 8107 	bls.w	8000f62 <__udivmoddi4+0x2a2>
 8000d54:	3802      	subs	r0, #2
 8000d56:	443c      	add	r4, r7
 8000d58:	eba4 0409 	sub.w	r4, r4, r9
 8000d5c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d60:	2100      	movs	r1, #0
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d061      	beq.n	8000e2a <__udivmoddi4+0x16a>
 8000d66:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	6034      	str	r4, [r6, #0]
 8000d6e:	6073      	str	r3, [r6, #4]
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0xc8>
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d054      	beq.n	8000e26 <__udivmoddi4+0x166>
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d82:	4608      	mov	r0, r1
 8000d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d88:	fab3 f183 	clz	r1, r3
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	f040 808e 	bne.w	8000eae <__udivmoddi4+0x1ee>
 8000d92:	42ab      	cmp	r3, r5
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xdc>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80fa 	bhi.w	8000f90 <__udivmoddi4+0x2d0>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb65 0503 	sbc.w	r5, r5, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	46ac      	mov	ip, r5
 8000da6:	2e00      	cmp	r6, #0
 8000da8:	d03f      	beq.n	8000e2a <__udivmoddi4+0x16a>
 8000daa:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	b912      	cbnz	r2, 8000dba <__udivmoddi4+0xfa>
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000dba:	fab7 fe87 	clz	lr, r7
 8000dbe:	f1be 0f00 	cmp.w	lr, #0
 8000dc2:	d134      	bne.n	8000e2e <__udivmoddi4+0x16e>
 8000dc4:	1beb      	subs	r3, r5, r7
 8000dc6:	0c3a      	lsrs	r2, r7, #16
 8000dc8:	fa1f fc87 	uxth.w	ip, r7
 8000dcc:	2101      	movs	r1, #1
 8000dce:	fbb3 f8f2 	udiv	r8, r3, r2
 8000dd2:	0c25      	lsrs	r5, r4, #16
 8000dd4:	fb02 3318 	mls	r3, r2, r8, r3
 8000dd8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ddc:	fb0c f308 	mul.w	r3, ip, r8
 8000de0:	42ab      	cmp	r3, r5
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x134>
 8000de4:	19ed      	adds	r5, r5, r7
 8000de6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x132>
 8000dec:	42ab      	cmp	r3, r5
 8000dee:	f200 80d1 	bhi.w	8000f94 <__udivmoddi4+0x2d4>
 8000df2:	4680      	mov	r8, r0
 8000df4:	1aed      	subs	r5, r5, r3
 8000df6:	b2a3      	uxth	r3, r4
 8000df8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dfc:	fb02 5510 	mls	r5, r2, r0, r5
 8000e00:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e04:	fb0c fc00 	mul.w	ip, ip, r0
 8000e08:	45a4      	cmp	ip, r4
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x15c>
 8000e0c:	19e4      	adds	r4, r4, r7
 8000e0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x15a>
 8000e14:	45a4      	cmp	ip, r4
 8000e16:	f200 80b8 	bhi.w	8000f8a <__udivmoddi4+0x2ca>
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	eba4 040c 	sub.w	r4, r4, ip
 8000e20:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e24:	e79d      	b.n	8000d62 <__udivmoddi4+0xa2>
 8000e26:	4631      	mov	r1, r6
 8000e28:	4630      	mov	r0, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	f1ce 0420 	rsb	r4, lr, #32
 8000e32:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e36:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e3a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e3e:	0c3a      	lsrs	r2, r7, #16
 8000e40:	fa25 f404 	lsr.w	r4, r5, r4
 8000e44:	ea48 0803 	orr.w	r8, r8, r3
 8000e48:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e4c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e50:	fb02 4411 	mls	r4, r2, r1, r4
 8000e54:	fa1f fc87 	uxth.w	ip, r7
 8000e58:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e5c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e60:	42ab      	cmp	r3, r5
 8000e62:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e66:	d909      	bls.n	8000e7c <__udivmoddi4+0x1bc>
 8000e68:	19ed      	adds	r5, r5, r7
 8000e6a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000e6e:	f080 808a 	bcs.w	8000f86 <__udivmoddi4+0x2c6>
 8000e72:	42ab      	cmp	r3, r5
 8000e74:	f240 8087 	bls.w	8000f86 <__udivmoddi4+0x2c6>
 8000e78:	3902      	subs	r1, #2
 8000e7a:	443d      	add	r5, r7
 8000e7c:	1aeb      	subs	r3, r5, r3
 8000e7e:	fa1f f588 	uxth.w	r5, r8
 8000e82:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e86:	fb02 3310 	mls	r3, r2, r0, r3
 8000e8a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e8e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e92:	42ab      	cmp	r3, r5
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1e6>
 8000e96:	19ed      	adds	r5, r5, r7
 8000e98:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e9c:	d26f      	bcs.n	8000f7e <__udivmoddi4+0x2be>
 8000e9e:	42ab      	cmp	r3, r5
 8000ea0:	d96d      	bls.n	8000f7e <__udivmoddi4+0x2be>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	443d      	add	r5, r7
 8000ea6:	1aeb      	subs	r3, r5, r3
 8000ea8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eac:	e78f      	b.n	8000dce <__udivmoddi4+0x10e>
 8000eae:	f1c1 0720 	rsb	r7, r1, #32
 8000eb2:	fa22 f807 	lsr.w	r8, r2, r7
 8000eb6:	408b      	lsls	r3, r1
 8000eb8:	fa05 f401 	lsl.w	r4, r5, r1
 8000ebc:	ea48 0303 	orr.w	r3, r8, r3
 8000ec0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ec4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ece:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ed2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ed6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eda:	fa1f f883 	uxth.w	r8, r3
 8000ede:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ee2:	fb09 f408 	mul.w	r4, r9, r8
 8000ee6:	42ac      	cmp	r4, r5
 8000ee8:	fa02 f201 	lsl.w	r2, r2, r1
 8000eec:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x244>
 8000ef2:	18ed      	adds	r5, r5, r3
 8000ef4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ef8:	d243      	bcs.n	8000f82 <__udivmoddi4+0x2c2>
 8000efa:	42ac      	cmp	r4, r5
 8000efc:	d941      	bls.n	8000f82 <__udivmoddi4+0x2c2>
 8000efe:	f1a9 0902 	sub.w	r9, r9, #2
 8000f02:	441d      	add	r5, r3
 8000f04:	1b2d      	subs	r5, r5, r4
 8000f06:	fa1f fe8e 	uxth.w	lr, lr
 8000f0a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f0e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f12:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f16:	fb00 f808 	mul.w	r8, r0, r8
 8000f1a:	45a0      	cmp	r8, r4
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x26e>
 8000f1e:	18e4      	adds	r4, r4, r3
 8000f20:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000f24:	d229      	bcs.n	8000f7a <__udivmoddi4+0x2ba>
 8000f26:	45a0      	cmp	r8, r4
 8000f28:	d927      	bls.n	8000f7a <__udivmoddi4+0x2ba>
 8000f2a:	3802      	subs	r0, #2
 8000f2c:	441c      	add	r4, r3
 8000f2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f32:	eba4 0408 	sub.w	r4, r4, r8
 8000f36:	fba0 8902 	umull	r8, r9, r0, r2
 8000f3a:	454c      	cmp	r4, r9
 8000f3c:	46c6      	mov	lr, r8
 8000f3e:	464d      	mov	r5, r9
 8000f40:	d315      	bcc.n	8000f6e <__udivmoddi4+0x2ae>
 8000f42:	d012      	beq.n	8000f6a <__udivmoddi4+0x2aa>
 8000f44:	b156      	cbz	r6, 8000f5c <__udivmoddi4+0x29c>
 8000f46:	ebba 030e 	subs.w	r3, sl, lr
 8000f4a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f52:	40cb      	lsrs	r3, r1
 8000f54:	431f      	orrs	r7, r3
 8000f56:	40cc      	lsrs	r4, r1
 8000f58:	6037      	str	r7, [r6, #0]
 8000f5a:	6074      	str	r4, [r6, #4]
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f62:	4618      	mov	r0, r3
 8000f64:	e6f8      	b.n	8000d58 <__udivmoddi4+0x98>
 8000f66:	4690      	mov	r8, r2
 8000f68:	e6e0      	b.n	8000d2c <__udivmoddi4+0x6c>
 8000f6a:	45c2      	cmp	sl, r8
 8000f6c:	d2ea      	bcs.n	8000f44 <__udivmoddi4+0x284>
 8000f6e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f72:	eb69 0503 	sbc.w	r5, r9, r3
 8000f76:	3801      	subs	r0, #1
 8000f78:	e7e4      	b.n	8000f44 <__udivmoddi4+0x284>
 8000f7a:	4628      	mov	r0, r5
 8000f7c:	e7d7      	b.n	8000f2e <__udivmoddi4+0x26e>
 8000f7e:	4640      	mov	r0, r8
 8000f80:	e791      	b.n	8000ea6 <__udivmoddi4+0x1e6>
 8000f82:	4681      	mov	r9, r0
 8000f84:	e7be      	b.n	8000f04 <__udivmoddi4+0x244>
 8000f86:	4601      	mov	r1, r0
 8000f88:	e778      	b.n	8000e7c <__udivmoddi4+0x1bc>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	443c      	add	r4, r7
 8000f8e:	e745      	b.n	8000e1c <__udivmoddi4+0x15c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e708      	b.n	8000da6 <__udivmoddi4+0xe6>
 8000f94:	f1a8 0802 	sub.w	r8, r8, #2
 8000f98:	443d      	add	r5, r7
 8000f9a:	e72b      	b.n	8000df4 <__udivmoddi4+0x134>

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <HAL_InitTick+0x3c>)
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_InitTick+0x40>)
{
 8000fa6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa8:	7818      	ldrb	r0, [r3, #0]
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fb2:	6810      	ldr	r0, [r2, #0]
 8000fb4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fb8:	f000 f8a2 	bl	8001100 <HAL_SYSTICK_Config>
 8000fbc:	4604      	mov	r4, r0
 8000fbe:	b958      	cbnz	r0, 8000fd8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc0:	2d0f      	cmp	r5, #15
 8000fc2:	d809      	bhi.n	8000fd8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fcc:	f000 f856 	bl	800107c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <HAL_InitTick+0x44>)
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	601d      	str	r5, [r3, #0]
 8000fd6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000fd8:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000fda:	bd38      	pop	{r3, r4, r5, pc}
 8000fdc:	20000018 	.word	0x20000018
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	20000004 	.word	0x20000004

08000fe8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe8:	4a07      	ldr	r2, [pc, #28]	; (8001008 <HAL_Init+0x20>)
{
 8000fea:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fec:	6813      	ldr	r3, [r2, #0]
 8000fee:	f043 0310 	orr.w	r3, r3, #16
 8000ff2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	f000 f82f 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f7ff ffd0 	bl	8000fa0 <HAL_InitTick>
  HAL_MspInit();
 8001000:	f002 fbc0 	bl	8003784 <HAL_MspInit>
}
 8001004:	2000      	movs	r0, #0
 8001006:	bd08      	pop	{r3, pc}
 8001008:	40022000 	.word	0x40022000

0800100c <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800100c:	4a03      	ldr	r2, [pc, #12]	; (800101c <HAL_IncTick+0x10>)
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <HAL_IncTick+0x14>)
 8001010:	6811      	ldr	r1, [r2, #0]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	440b      	add	r3, r1
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000af4 	.word	0x20000af4
 8001020:	20000000 	.word	0x20000000

08001024 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001024:	4b01      	ldr	r3, [pc, #4]	; (800102c <HAL_GetTick+0x8>)
 8001026:	6818      	ldr	r0, [r3, #0]
}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000af4 	.word	0x20000af4

08001030 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001030:	b538      	push	{r3, r4, r5, lr}
 8001032:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff fff6 	bl	8001024 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001038:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800103a:	bf1c      	itt	ne
 800103c:	4b05      	ldrne	r3, [pc, #20]	; (8001054 <HAL_Delay+0x24>)
 800103e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001040:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001042:	bf18      	it	ne
 8001044:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001046:	f7ff ffed 	bl	8001024 <HAL_GetTick>
 800104a:	1b40      	subs	r0, r0, r5
 800104c:	4284      	cmp	r4, r0
 800104e:	d8fa      	bhi.n	8001046 <HAL_Delay+0x16>
  {
  }
}
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop
 8001054:	20000000 	.word	0x20000000

08001058 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4a07      	ldr	r2, [pc, #28]	; (8001078 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800105a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001060:	041b      	lsls	r3, r3, #16
 8001062:	0c1b      	lsrs	r3, r3, #16
 8001064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001068:	0200      	lsls	r0, r0, #8
 800106a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800106e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001072:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001074:	60d3      	str	r3, [r2, #12]
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107e:	b530      	push	{r4, r5, lr}
 8001080:	68dc      	ldr	r4, [r3, #12]
 8001082:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001086:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800108c:	2b04      	cmp	r3, #4
 800108e:	bf28      	it	cs
 8001090:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	f04f 0501 	mov.w	r5, #1
 8001098:	fa05 f303 	lsl.w	r3, r5, r3
 800109c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a0:	bf8c      	ite	hi
 80010a2:	3c03      	subhi	r4, #3
 80010a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a6:	4019      	ands	r1, r3
 80010a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010aa:	fa05 f404 	lsl.w	r4, r5, r4
 80010ae:	3c01      	subs	r4, #1
 80010b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80010b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	ea42 0201 	orr.w	r2, r2, r1
 80010b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	bfad      	iteet	ge
 80010be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	f000 000f 	andlt.w	r0, r0, #15
 80010c6:	4b06      	ldrlt	r3, [pc, #24]	; (80010e0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010cc:	bfb5      	itete	lt
 80010ce:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80010d8:	bd30      	pop	{r4, r5, pc}
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00
 80010e0:	e000ed14 	.word	0xe000ed14

080010e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80010e4:	2800      	cmp	r0, #0
 80010e6:	db08      	blt.n	80010fa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e8:	0942      	lsrs	r2, r0, #5
 80010ea:	2301      	movs	r3, #1
 80010ec:	f000 001f 	and.w	r0, r0, #31
 80010f0:	fa03 f000 	lsl.w	r0, r3, r0
 80010f4:	4b01      	ldr	r3, [pc, #4]	; (80010fc <HAL_NVIC_EnableIRQ+0x18>)
 80010f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80010fa:	4770      	bx	lr
 80010fc:	e000e100 	.word	0xe000e100

08001100 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001100:	3801      	subs	r0, #1
 8001102:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001106:	d20a      	bcs.n	800111e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110e:	21f0      	movs	r1, #240	; 0xf0
 8001110:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001114:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001116:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001118:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800111e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000e010 	.word	0xe000e010
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800112c:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 800112e:	4604      	mov	r4, r0
 8001130:	b168      	cbz	r0, 800114e <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001132:	7903      	ldrb	r3, [r0, #4]
 8001134:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001138:	b913      	cbnz	r3, 8001140 <HAL_DAC_Init+0x14>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800113a:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800113c:	f002 fb3e 	bl	80037bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001140:	2302      	movs	r3, #2
 8001142:	7123      	strb	r3, [r4, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001144:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001146:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001148:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800114a:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 800114c:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 800114e:	2001      	movs	r0, #1
}
 8001150:	bd10      	pop	{r4, pc}

08001152 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001152:	4770      	bx	lr

08001154 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8001154:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmp = 0U;
 8001156:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8001158:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0U;
 800115a:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t) (hdac->Instance);
 800115c:	9001      	str	r0, [sp, #4]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 800115e:	b941      	cbnz	r1, 8001172 <HAL_DAC_SetValue+0x1e>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001160:	9901      	ldr	r1, [sp, #4]
 8001162:	3108      	adds	r1, #8
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001164:	440a      	add	r2, r1
 8001166:	9201      	str	r2, [sp, #4]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001168:	9a01      	ldr	r2, [sp, #4]
  
  /* Return function status */
  return HAL_OK;
}
 800116a:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 800116c:	6013      	str	r3, [r2, #0]
}
 800116e:	b002      	add	sp, #8
 8001170:	bd10      	pop	{r4, pc}
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001172:	9901      	ldr	r1, [sp, #4]
 8001174:	3114      	adds	r1, #20
 8001176:	e7f5      	b.n	8001164 <HAL_DAC_SetValue+0x10>

08001178 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001178:	7943      	ldrb	r3, [r0, #5]
 800117a:	2b01      	cmp	r3, #1
{
 800117c:	b510      	push	{r4, lr}
 800117e:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 8001182:	d015      	beq.n	80011b0 <HAL_DAC_Start+0x38>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001184:	7103      	strb	r3, [r0, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001186:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdac);
 8001188:	2201      	movs	r2, #1
  __HAL_DAC_ENABLE(hdac, Channel);
 800118a:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hdac);
 800118c:	7142      	strb	r2, [r0, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 800118e:	408a      	lsls	r2, r1
 8001190:	4322      	orrs	r2, r4
 8001192:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001194:	681a      	ldr	r2, [r3, #0]
  if(Channel == DAC_CHANNEL_1)
 8001196:	b969      	cbnz	r1, 80011b4 <HAL_DAC_Start+0x3c>
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001198:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 800119c:	2a3c      	cmp	r2, #60	; 0x3c
 800119e:	d103      	bne.n	80011a8 <HAL_DAC_Start+0x30>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	f042 0201 	orr.w	r2, r2, #1
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80011a6:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80011a8:	2301      	movs	r3, #1
 80011aa:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80011ac:	2300      	movs	r3, #0
 80011ae:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 80011b0:	4618      	mov	r0, r3
    
  /* Return function status */
  return HAL_OK;
}
 80011b2:	bd10      	pop	{r4, pc}
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 80011b4:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 80011b8:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 80011bc:	d1f4      	bne.n	80011a8 <HAL_DAC_Start+0x30>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	f042 0202 	orr.w	r2, r2, #2
 80011c4:	e7ef      	b.n	80011a6 <HAL_DAC_Start+0x2e>

080011c6 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80011c6:	7943      	ldrb	r3, [r0, #5]
 80011c8:	2b01      	cmp	r3, #1
{
 80011ca:	b530      	push	{r4, r5, lr}
 80011cc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 80011d0:	d017      	beq.n	8001202 <HAL_DAC_ConfigChannel+0x3c>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80011d2:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 80011d4:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 80011d6:	6823      	ldr	r3, [r4, #0]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80011d8:	f640 75fe 	movw	r5, #4094	; 0xffe
 80011dc:	4095      	lsls	r5, r2
 80011de:	ea23 0505 	bic.w	r5, r3, r5
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80011e2:	c90a      	ldmia	r1, {r1, r3}
 80011e4:	430b      	orrs	r3, r1
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80011e6:	4093      	lsls	r3, r2
 80011e8:	432b      	orrs	r3, r5
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80011ea:	6023      	str	r3, [r4, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	21c0      	movs	r1, #192	; 0xc0
 80011f0:	fa01 f202 	lsl.w	r2, r1, r2
 80011f4:	ea23 0202 	bic.w	r2, r3, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80011f8:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80011fa:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80011fc:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80011fe:	2300      	movs	r3, #0
 8001200:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8001202:	4618      	mov	r0, r3
  
  /* Return function status */
  return HAL_OK;
}
 8001204:	bd30      	pop	{r4, r5, pc}

08001206 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001206:	4770      	bx	lr

08001208 <HAL_DAC_IRQHandler>:
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001208:	6803      	ldr	r3, [r0, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	0491      	lsls	r1, r2, #18
{
 800120e:	b510      	push	{r4, lr}
 8001210:	4604      	mov	r4, r0
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001212:	d511      	bpl.n	8001238 <HAL_DAC_IRQHandler+0x30>
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001216:	0492      	lsls	r2, r2, #18
 8001218:	d50e      	bpl.n	8001238 <HAL_DAC_IRQHandler+0x30>
      hdac->State = HAL_DAC_STATE_ERROR;
 800121a:	2204      	movs	r2, #4
 800121c:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800121e:	6902      	ldr	r2, [r0, #16]
 8001220:	f042 0201 	orr.w	r2, r2, #1
 8001224:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8001226:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800122a:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001232:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001234:	f7ff ff8d 	bl	8001152 <HAL_DAC_DMAUnderrunCallbackCh1>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001238:	6823      	ldr	r3, [r4, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	0091      	lsls	r1, r2, #2
 800123e:	d512      	bpl.n	8001266 <HAL_DAC_IRQHandler+0x5e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	d50f      	bpl.n	8001266 <HAL_DAC_IRQHandler+0x5e>
      hdac->State = HAL_DAC_STATE_ERROR;
 8001246:	2204      	movs	r2, #4
 8001248:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800124a:	6922      	ldr	r2, [r4, #16]
 800124c:	f042 0202 	orr.w	r2, r2, #2
 8001250:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8001252:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001256:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800125e:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001260:	4620      	mov	r0, r4
 8001262:	f7ff ffd0 	bl	8001206 <HAL_DACEx_DMAUnderrunCallbackCh2>
 8001266:	bd10      	pop	{r4, pc}

08001268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001268:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126c:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001270:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8001404 <HAL_GPIO_Init+0x19c>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001274:	4a61      	ldr	r2, [pc, #388]	; (80013fc <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00u;
 8001276:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001278:	fa38 f403 	lsrs.w	r4, r8, r3
 800127c:	d102      	bne.n	8001284 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800127e:	b003      	add	sp, #12
 8001280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001284:	f04f 0e01 	mov.w	lr, #1
 8001288:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 800128c:	ea18 060e 	ands.w	r6, r8, lr
 8001290:	f000 80a6 	beq.w	80013e0 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001294:	684c      	ldr	r4, [r1, #4]
 8001296:	f024 0710 	bic.w	r7, r4, #16
 800129a:	2f02      	cmp	r7, #2
 800129c:	d116      	bne.n	80012cc <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 800129e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80012a2:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012a6:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80012aa:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012ae:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80012b2:	f04f 0c0f 	mov.w	ip, #15
 80012b6:	fa0c fc0b 	lsl.w	ip, ip, fp
 80012ba:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012be:	690d      	ldr	r5, [r1, #16]
 80012c0:	fa05 f50b 	lsl.w	r5, r5, fp
 80012c4:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 80012c8:	f8ca 5020 	str.w	r5, [sl, #32]
 80012cc:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012d0:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80012d2:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012d6:	fa05 f50a 	lsl.w	r5, r5, sl
 80012da:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012dc:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012e0:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012e4:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012e8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ea:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012ee:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80012f0:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012f4:	d811      	bhi.n	800131a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80012f6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012f8:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012fc:	68cf      	ldr	r7, [r1, #12]
 80012fe:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001302:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001306:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001308:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800130a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800130e:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001312:	409f      	lsls	r7, r3
 8001314:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001318:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800131a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800131c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800131e:	688f      	ldr	r7, [r1, #8]
 8001320:	fa07 f70a 	lsl.w	r7, r7, sl
 8001324:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001326:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001328:	00e5      	lsls	r5, r4, #3
 800132a:	d559      	bpl.n	80013e0 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132c:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8001330:	f045 0501 	orr.w	r5, r5, #1
 8001334:	f8c9 5018 	str.w	r5, [r9, #24]
 8001338:	f8d9 5018 	ldr.w	r5, [r9, #24]
 800133c:	f023 0703 	bic.w	r7, r3, #3
 8001340:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001344:	f005 0501 	and.w	r5, r5, #1
 8001348:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800134c:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800134e:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001354:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001356:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800135a:	f04f 0e0f 	mov.w	lr, #15
 800135e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001362:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001366:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800136a:	d03b      	beq.n	80013e4 <HAL_GPIO_Init+0x17c>
 800136c:	4d24      	ldr	r5, [pc, #144]	; (8001400 <HAL_GPIO_Init+0x198>)
 800136e:	42a8      	cmp	r0, r5
 8001370:	d03a      	beq.n	80013e8 <HAL_GPIO_Init+0x180>
 8001372:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001376:	42a8      	cmp	r0, r5
 8001378:	d038      	beq.n	80013ec <HAL_GPIO_Init+0x184>
 800137a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800137e:	42a8      	cmp	r0, r5
 8001380:	d036      	beq.n	80013f0 <HAL_GPIO_Init+0x188>
 8001382:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001386:	42a8      	cmp	r0, r5
 8001388:	d034      	beq.n	80013f4 <HAL_GPIO_Init+0x18c>
 800138a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800138e:	42a8      	cmp	r0, r5
 8001390:	d032      	beq.n	80013f8 <HAL_GPIO_Init+0x190>
 8001392:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001396:	42a8      	cmp	r0, r5
 8001398:	bf14      	ite	ne
 800139a:	2507      	movne	r5, #7
 800139c:	2506      	moveq	r5, #6
 800139e:	fa05 f50c 	lsl.w	r5, r5, ip
 80013a2:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013a6:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80013a8:	6815      	ldr	r5, [r2, #0]
        temp &= ~(iocurrent);
 80013aa:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ac:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 80013b0:	bf0c      	ite	eq
 80013b2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80013b4:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 80013b6:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80013b8:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013ba:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 80013be:	bf0c      	ite	eq
 80013c0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80013c2:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 80013c4:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80013c6:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80013cc:	bf0c      	ite	eq
 80013ce:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80013d0:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 80013d2:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80013d4:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013d6:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 80013d8:	bf54      	ite	pl
 80013da:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80013dc:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 80013de:	60d5      	str	r5, [r2, #12]
    position++;
 80013e0:	3301      	adds	r3, #1
 80013e2:	e749      	b.n	8001278 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013e4:	2500      	movs	r5, #0
 80013e6:	e7da      	b.n	800139e <HAL_GPIO_Init+0x136>
 80013e8:	2501      	movs	r5, #1
 80013ea:	e7d8      	b.n	800139e <HAL_GPIO_Init+0x136>
 80013ec:	2502      	movs	r5, #2
 80013ee:	e7d6      	b.n	800139e <HAL_GPIO_Init+0x136>
 80013f0:	2503      	movs	r5, #3
 80013f2:	e7d4      	b.n	800139e <HAL_GPIO_Init+0x136>
 80013f4:	2504      	movs	r5, #4
 80013f6:	e7d2      	b.n	800139e <HAL_GPIO_Init+0x136>
 80013f8:	2505      	movs	r5, #5
 80013fa:	e7d0      	b.n	800139e <HAL_GPIO_Init+0x136>
 80013fc:	40010400 	.word	0x40010400
 8001400:	48000400 	.word	0x48000400
 8001404:	40021000 	.word	0x40021000

08001408 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001408:	6903      	ldr	r3, [r0, #16]
 800140a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800140c:	bf14      	ite	ne
 800140e:	2001      	movne	r0, #1
 8001410:	2000      	moveq	r0, #0
 8001412:	4770      	bx	lr

08001414 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001414:	b10a      	cbz	r2, 800141a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001416:	6181      	str	r1, [r0, #24]
 8001418:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800141a:	6281      	str	r1, [r0, #40]	; 0x28
 800141c:	4770      	bx	lr

0800141e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800141e:	6943      	ldr	r3, [r0, #20]
 8001420:	420b      	tst	r3, r1
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001422:	bf18      	it	ne
 8001424:	0409      	lslne	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001426:	6181      	str	r1, [r0, #24]
 8001428:	4770      	bx	lr
	...

0800142c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800142c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001430:	6959      	ldr	r1, [r3, #20]
 8001432:	4201      	tst	r1, r0
 8001434:	d002      	beq.n	800143c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001436:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001438:	f001 ff5c 	bl	80032f4 <HAL_GPIO_EXTI_Callback>
 800143c:	bd08      	pop	{r3, pc}
 800143e:	bf00      	nop
 8001440:	40010400 	.word	0x40010400

08001444 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001444:	6803      	ldr	r3, [r0, #0]
 8001446:	699a      	ldr	r2, [r3, #24]
 8001448:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 800144a:	bf44      	itt	mi
 800144c:	2200      	movmi	r2, #0
 800144e:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001450:	699a      	ldr	r2, [r3, #24]
 8001452:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001454:	bf5e      	ittt	pl
 8001456:	699a      	ldrpl	r2, [r3, #24]
 8001458:	f042 0201 	orrpl.w	r2, r2, #1
 800145c:	619a      	strpl	r2, [r3, #24]
 800145e:	4770      	bx	lr

08001460 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001460:	b530      	push	{r4, r5, lr}
 8001462:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001464:	6805      	ldr	r5, [r0, #0]
 8001466:	4323      	orrs	r3, r4
 8001468:	0d64      	lsrs	r4, r4, #21
 800146a:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 800146e:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8001472:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001476:	6868      	ldr	r0, [r5, #4]
 8001478:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800147c:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8001480:	4319      	orrs	r1, r3
 8001482:	f044 0403 	orr.w	r4, r4, #3
 8001486:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800148a:	ea20 0404 	bic.w	r4, r0, r4
 800148e:	4321      	orrs	r1, r4
 8001490:	6069      	str	r1, [r5, #4]
 8001492:	bd30      	pop	{r4, r5, pc}

08001494 <I2C_WaitOnFlagUntilTimeout>:
{
 8001494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001498:	9f06      	ldr	r7, [sp, #24]
 800149a:	4604      	mov	r4, r0
 800149c:	4688      	mov	r8, r1
 800149e:	4616      	mov	r6, r2
 80014a0:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014a2:	6822      	ldr	r2, [r4, #0]
 80014a4:	6993      	ldr	r3, [r2, #24]
 80014a6:	ea38 0303 	bics.w	r3, r8, r3
 80014aa:	bf0c      	ite	eq
 80014ac:	2301      	moveq	r3, #1
 80014ae:	2300      	movne	r3, #0
 80014b0:	42b3      	cmp	r3, r6
 80014b2:	d002      	beq.n	80014ba <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80014b4:	2000      	movs	r0, #0
}
 80014b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80014ba:	1c6b      	adds	r3, r5, #1
 80014bc:	d0f2      	beq.n	80014a4 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014be:	f7ff fdb1 	bl	8001024 <HAL_GetTick>
 80014c2:	1bc0      	subs	r0, r0, r7
 80014c4:	4285      	cmp	r5, r0
 80014c6:	d301      	bcc.n	80014cc <I2C_WaitOnFlagUntilTimeout+0x38>
 80014c8:	2d00      	cmp	r5, #0
 80014ca:	d1ea      	bne.n	80014a2 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014ce:	f043 0320 	orr.w	r3, r3, #32
 80014d2:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80014d4:	2320      	movs	r3, #32
 80014d6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80014da:	2300      	movs	r3, #0
 80014dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80014e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80014e4:	2001      	movs	r0, #1
 80014e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080014ea <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014ea:	6803      	ldr	r3, [r0, #0]
{
 80014ec:	b570      	push	{r4, r5, r6, lr}
 80014ee:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014f0:	6998      	ldr	r0, [r3, #24]
 80014f2:	f010 0010 	ands.w	r0, r0, #16
{
 80014f6:	460d      	mov	r5, r1
 80014f8:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014fa:	d116      	bne.n	800152a <I2C_IsAcknowledgeFailed+0x40>
 80014fc:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 80014fe:	1c69      	adds	r1, r5, #1
 8001500:	d014      	beq.n	800152c <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001502:	f7ff fd8f 	bl	8001024 <HAL_GetTick>
 8001506:	1b80      	subs	r0, r0, r6
 8001508:	4285      	cmp	r5, r0
 800150a:	d300      	bcc.n	800150e <I2C_IsAcknowledgeFailed+0x24>
 800150c:	b96d      	cbnz	r5, 800152a <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800150e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001510:	f043 0320 	orr.w	r3, r3, #32
 8001514:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001516:	2320      	movs	r3, #32
 8001518:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800151c:	2300      	movs	r3, #0
 800151e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001522:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8001526:	2001      	movs	r0, #1
}
 8001528:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800152a:	6823      	ldr	r3, [r4, #0]
 800152c:	6999      	ldr	r1, [r3, #24]
 800152e:	068a      	lsls	r2, r1, #26
 8001530:	d5e5      	bpl.n	80014fe <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001532:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001534:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001536:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001538:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800153a:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800153c:	f7ff ff82 	bl	8001444 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001540:	6822      	ldr	r2, [r4, #0]
 8001542:	6853      	ldr	r3, [r2, #4]
 8001544:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001548:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800154c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001550:	f023 0301 	bic.w	r3, r3, #1
 8001554:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001556:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800155e:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8001562:	e7db      	b.n	800151c <I2C_IsAcknowledgeFailed+0x32>

08001564 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	4604      	mov	r4, r0
 8001568:	460d      	mov	r5, r1
 800156a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800156c:	6823      	ldr	r3, [r4, #0]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	079b      	lsls	r3, r3, #30
 8001572:	d501      	bpl.n	8001578 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8001574:	2000      	movs	r0, #0
 8001576:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001578:	4632      	mov	r2, r6
 800157a:	4629      	mov	r1, r5
 800157c:	4620      	mov	r0, r4
 800157e:	f7ff ffb4 	bl	80014ea <I2C_IsAcknowledgeFailed>
 8001582:	b9a0      	cbnz	r0, 80015ae <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8001584:	1c6a      	adds	r2, r5, #1
 8001586:	d0f1      	beq.n	800156c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001588:	f7ff fd4c 	bl	8001024 <HAL_GetTick>
 800158c:	1b80      	subs	r0, r0, r6
 800158e:	4285      	cmp	r5, r0
 8001590:	d301      	bcc.n	8001596 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001592:	2d00      	cmp	r5, #0
 8001594:	d1ea      	bne.n	800156c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001596:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001598:	f043 0320 	orr.w	r3, r3, #32
 800159c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800159e:	2320      	movs	r3, #32
 80015a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80015aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80015ae:	2001      	movs	r0, #1
}
 80015b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080015b4 <I2C_RequestMemoryWrite>:
{
 80015b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80015b6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80015b8:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <I2C_RequestMemoryWrite+0x60>)
 80015bc:	9300      	str	r3, [sp, #0]
{
 80015be:	4605      	mov	r5, r0
 80015c0:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80015c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015c6:	b2fa      	uxtb	r2, r7
 80015c8:	f7ff ff4a 	bl	8001460 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015cc:	4632      	mov	r2, r6
 80015ce:	9908      	ldr	r1, [sp, #32]
 80015d0:	4628      	mov	r0, r5
 80015d2:	f7ff ffc7 	bl	8001564 <I2C_WaitOnTXISFlagUntilTimeout>
 80015d6:	b110      	cbz	r0, 80015de <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 80015d8:	2001      	movs	r0, #1
}
 80015da:	b003      	add	sp, #12
 80015dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80015de:	2f01      	cmp	r7, #1
 80015e0:	682b      	ldr	r3, [r5, #0]
 80015e2:	d10c      	bne.n	80015fe <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80015e4:	b2e4      	uxtb	r4, r4
 80015e6:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80015e8:	9b08      	ldr	r3, [sp, #32]
 80015ea:	9600      	str	r6, [sp, #0]
 80015ec:	2200      	movs	r2, #0
 80015ee:	2180      	movs	r1, #128	; 0x80
 80015f0:	4628      	mov	r0, r5
 80015f2:	f7ff ff4f 	bl	8001494 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80015f6:	3000      	adds	r0, #0
 80015f8:	bf18      	it	ne
 80015fa:	2001      	movne	r0, #1
 80015fc:	e7ed      	b.n	80015da <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80015fe:	0a22      	lsrs	r2, r4, #8
 8001600:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001602:	9908      	ldr	r1, [sp, #32]
 8001604:	4632      	mov	r2, r6
 8001606:	4628      	mov	r0, r5
 8001608:	f7ff ffac 	bl	8001564 <I2C_WaitOnTXISFlagUntilTimeout>
 800160c:	2800      	cmp	r0, #0
 800160e:	d1e3      	bne.n	80015d8 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001610:	682b      	ldr	r3, [r5, #0]
 8001612:	e7e7      	b.n	80015e4 <I2C_RequestMemoryWrite+0x30>
 8001614:	80002000 	.word	0x80002000

08001618 <I2C_RequestMemoryRead>:
{
 8001618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800161a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800161c:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800161e:	4b16      	ldr	r3, [pc, #88]	; (8001678 <I2C_RequestMemoryRead+0x60>)
 8001620:	9300      	str	r3, [sp, #0]
{
 8001622:	4605      	mov	r5, r0
 8001624:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001626:	2300      	movs	r3, #0
 8001628:	b2fa      	uxtb	r2, r7
 800162a:	f7ff ff19 	bl	8001460 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800162e:	4632      	mov	r2, r6
 8001630:	9908      	ldr	r1, [sp, #32]
 8001632:	4628      	mov	r0, r5
 8001634:	f7ff ff96 	bl	8001564 <I2C_WaitOnTXISFlagUntilTimeout>
 8001638:	b110      	cbz	r0, 8001640 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 800163a:	2001      	movs	r0, #1
}
 800163c:	b003      	add	sp, #12
 800163e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001640:	2f01      	cmp	r7, #1
 8001642:	682b      	ldr	r3, [r5, #0]
 8001644:	d10c      	bne.n	8001660 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001646:	b2e4      	uxtb	r4, r4
 8001648:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800164a:	9b08      	ldr	r3, [sp, #32]
 800164c:	9600      	str	r6, [sp, #0]
 800164e:	2200      	movs	r2, #0
 8001650:	2140      	movs	r1, #64	; 0x40
 8001652:	4628      	mov	r0, r5
 8001654:	f7ff ff1e 	bl	8001494 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8001658:	3000      	adds	r0, #0
 800165a:	bf18      	it	ne
 800165c:	2001      	movne	r0, #1
 800165e:	e7ed      	b.n	800163c <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001660:	0a22      	lsrs	r2, r4, #8
 8001662:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001664:	9908      	ldr	r1, [sp, #32]
 8001666:	4632      	mov	r2, r6
 8001668:	4628      	mov	r0, r5
 800166a:	f7ff ff7b 	bl	8001564 <I2C_WaitOnTXISFlagUntilTimeout>
 800166e:	2800      	cmp	r0, #0
 8001670:	d1e3      	bne.n	800163a <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001672:	682b      	ldr	r3, [r5, #0]
 8001674:	e7e7      	b.n	8001646 <I2C_RequestMemoryRead+0x2e>
 8001676:	bf00      	nop
 8001678:	80002000 	.word	0x80002000

0800167c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800167c:	b570      	push	{r4, r5, r6, lr}
 800167e:	4604      	mov	r4, r0
 8001680:	460d      	mov	r5, r1
 8001682:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001684:	6823      	ldr	r3, [r4, #0]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	069b      	lsls	r3, r3, #26
 800168a:	d501      	bpl.n	8001690 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800168c:	2000      	movs	r0, #0
 800168e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001690:	4632      	mov	r2, r6
 8001692:	4629      	mov	r1, r5
 8001694:	4620      	mov	r0, r4
 8001696:	f7ff ff28 	bl	80014ea <I2C_IsAcknowledgeFailed>
 800169a:	b990      	cbnz	r0, 80016c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800169c:	f7ff fcc2 	bl	8001024 <HAL_GetTick>
 80016a0:	1b80      	subs	r0, r0, r6
 80016a2:	4285      	cmp	r5, r0
 80016a4:	d301      	bcc.n	80016aa <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80016a6:	2d00      	cmp	r5, #0
 80016a8:	d1ec      	bne.n	8001684 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016ac:	f043 0320 	orr.w	r3, r3, #32
 80016b0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80016b2:	2320      	movs	r3, #32
 80016b4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80016be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80016c2:	2001      	movs	r0, #1
}
 80016c4:	bd70      	pop	{r4, r5, r6, pc}

080016c6 <HAL_I2C_Init>:
{
 80016c6:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80016c8:	4604      	mov	r4, r0
 80016ca:	2800      	cmp	r0, #0
 80016cc:	d04a      	beq.n	8001764 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ce:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80016d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016d6:	b91b      	cbnz	r3, 80016e0 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80016d8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80016dc:	f002 f8a4 	bl	8003828 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80016e0:	2324      	movs	r3, #36	; 0x24
 80016e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80016e6:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016e8:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	f022 0201 	bic.w	r2, r2, #1
 80016f0:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016f2:	6862      	ldr	r2, [r4, #4]
 80016f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016f8:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016fa:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016fc:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001706:	d124      	bne.n	8001752 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001708:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800170c:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800170e:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001710:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001712:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001716:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800171a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001722:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001724:	6922      	ldr	r2, [r4, #16]
 8001726:	430a      	orrs	r2, r1
 8001728:	69a1      	ldr	r1, [r4, #24]
 800172a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800172e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001730:	6a21      	ldr	r1, [r4, #32]
 8001732:	69e2      	ldr	r2, [r4, #28]
 8001734:	430a      	orrs	r2, r1
 8001736:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	f042 0201 	orr.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001740:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001742:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001744:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001746:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800174a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800174c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8001750:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001752:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001756:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001758:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800175a:	bf04      	itt	eq
 800175c:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001760:	605a      	streq	r2, [r3, #4]
 8001762:	e7d4      	b.n	800170e <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001764:	2001      	movs	r0, #1
}
 8001766:	bd10      	pop	{r4, pc}

08001768 <HAL_I2C_Mem_Write>:
{
 8001768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800176c:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800176e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001772:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001774:	2b20      	cmp	r3, #32
{
 8001776:	4604      	mov	r4, r0
 8001778:	460f      	mov	r7, r1
 800177a:	9203      	str	r2, [sp, #12]
 800177c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8001780:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001784:	f040 80a5 	bne.w	80018d2 <HAL_I2C_Mem_Write+0x16a>
    if ((pData == NULL) || (Size == 0U))
 8001788:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800178a:	b113      	cbz	r3, 8001792 <HAL_I2C_Mem_Write+0x2a>
 800178c:	f1ba 0f00 	cmp.w	sl, #0
 8001790:	d106      	bne.n	80017a0 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001792:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001796:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001798:	2001      	movs	r0, #1
}
 800179a:	b005      	add	sp, #20
 800179c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80017a0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	f000 8094 	beq.w	80018d2 <HAL_I2C_Mem_Write+0x16a>
 80017aa:	2501      	movs	r5, #1
 80017ac:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80017b0:	f7ff fc38 	bl	8001024 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017b4:	2319      	movs	r3, #25
 80017b6:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80017b8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017ba:	462a      	mov	r2, r5
 80017bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017c0:	4620      	mov	r0, r4
 80017c2:	f7ff fe67 	bl	8001494 <I2C_WaitOnFlagUntilTimeout>
 80017c6:	4681      	mov	r9, r0
 80017c8:	2800      	cmp	r0, #0
 80017ca:	d1e5      	bne.n	8001798 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017cc:	2321      	movs	r3, #33	; 0x21
 80017ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017d2:	2340      	movs	r3, #64	; 0x40
 80017d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80017d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017da:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80017dc:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 80017de:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80017e0:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017e4:	9601      	str	r6, [sp, #4]
 80017e6:	f8cd 8000 	str.w	r8, [sp]
 80017ea:	465b      	mov	r3, fp
 80017ec:	9a03      	ldr	r2, [sp, #12]
 80017ee:	4639      	mov	r1, r7
 80017f0:	4620      	mov	r0, r4
 80017f2:	f7ff fedf 	bl	80015b4 <I2C_RequestMemoryWrite>
 80017f6:	b110      	cbz	r0, 80017fe <HAL_I2C_Mem_Write+0x96>
      __HAL_UNLOCK(hi2c);
 80017f8:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 80017fc:	e7cc      	b.n	8001798 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001800:	b29b      	uxth	r3, r3
 8001802:	2bff      	cmp	r3, #255	; 0xff
 8001804:	d955      	bls.n	80018b2 <HAL_I2C_Mem_Write+0x14a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001806:	22ff      	movs	r2, #255	; 0xff
 8001808:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800180a:	9000      	str	r0, [sp, #0]
 800180c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001810:	4639      	mov	r1, r7
 8001812:	4620      	mov	r0, r4
 8001814:	f7ff fe24 	bl	8001460 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001818:	4632      	mov	r2, r6
 800181a:	4641      	mov	r1, r8
 800181c:	4620      	mov	r0, r4
 800181e:	f7ff fea1 	bl	8001564 <I2C_WaitOnTXISFlagUntilTimeout>
 8001822:	2800      	cmp	r0, #0
 8001824:	d1b8      	bne.n	8001798 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001828:	6822      	ldr	r2, [r4, #0]
 800182a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800182e:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001830:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001832:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001834:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001836:	3b01      	subs	r3, #1
 8001838:	b29b      	uxth	r3, r3
 800183a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800183c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800183e:	3a01      	subs	r2, #1
 8001840:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001842:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001844:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001846:	b1ab      	cbz	r3, 8001874 <HAL_I2C_Mem_Write+0x10c>
 8001848:	b9a2      	cbnz	r2, 8001874 <HAL_I2C_Mem_Write+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800184a:	9600      	str	r6, [sp, #0]
 800184c:	4643      	mov	r3, r8
 800184e:	2180      	movs	r1, #128	; 0x80
 8001850:	4620      	mov	r0, r4
 8001852:	f7ff fe1f 	bl	8001494 <I2C_WaitOnFlagUntilTimeout>
 8001856:	2800      	cmp	r0, #0
 8001858:	d19e      	bne.n	8001798 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800185a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800185c:	b29b      	uxth	r3, r3
 800185e:	2bff      	cmp	r3, #255	; 0xff
 8001860:	d92f      	bls.n	80018c2 <HAL_I2C_Mem_Write+0x15a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001862:	22ff      	movs	r2, #255	; 0xff
 8001864:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001866:	9000      	str	r0, [sp, #0]
 8001868:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800186c:	4639      	mov	r1, r7
 800186e:	4620      	mov	r0, r4
 8001870:	f7ff fdf6 	bl	8001460 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8001874:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001876:	b29b      	uxth	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1cd      	bne.n	8001818 <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800187c:	4632      	mov	r2, r6
 800187e:	4641      	mov	r1, r8
 8001880:	4620      	mov	r0, r4
 8001882:	f7ff fefb 	bl	800167c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001886:	2800      	cmp	r0, #0
 8001888:	d186      	bne.n	8001798 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800188a:	6823      	ldr	r3, [r4, #0]
 800188c:	2120      	movs	r1, #32
 800188e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001896:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800189a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800189e:	f022 0201 	bic.w	r2, r2, #1
 80018a2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80018a4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80018a8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018ac:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80018b0:	e773      	b.n	800179a <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80018b2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018b4:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80018b6:	b292      	uxth	r2, r2
 80018b8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	e7a6      	b.n	8001810 <HAL_I2C_Mem_Write+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 80018c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018c4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80018c6:	b292      	uxth	r2, r2
 80018c8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	e7cc      	b.n	800186c <HAL_I2C_Mem_Write+0x104>
    return HAL_BUSY;
 80018d2:	2002      	movs	r0, #2
 80018d4:	e761      	b.n	800179a <HAL_I2C_Mem_Write+0x32>
	...

080018d8 <HAL_I2C_Mem_Read>:
{
 80018d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018dc:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80018de:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80018e2:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 80018e4:	2b20      	cmp	r3, #32
{
 80018e6:	4604      	mov	r4, r0
 80018e8:	460f      	mov	r7, r1
 80018ea:	9203      	str	r2, [sp, #12]
 80018ec:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80018f0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80018f4:	f040 80a9 	bne.w	8001a4a <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 80018f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80018fa:	b113      	cbz	r3, 8001902 <HAL_I2C_Mem_Read+0x2a>
 80018fc:	f1ba 0f00 	cmp.w	sl, #0
 8001900:	d106      	bne.n	8001910 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001902:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001906:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001908:	2001      	movs	r0, #1
}
 800190a:	b005      	add	sp, #20
 800190c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001910:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001914:	2b01      	cmp	r3, #1
 8001916:	f000 8098 	beq.w	8001a4a <HAL_I2C_Mem_Read+0x172>
 800191a:	2501      	movs	r5, #1
 800191c:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001920:	f7ff fb80 	bl	8001024 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001924:	2319      	movs	r3, #25
 8001926:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001928:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800192a:	462a      	mov	r2, r5
 800192c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001930:	4620      	mov	r0, r4
 8001932:	f7ff fdaf 	bl	8001494 <I2C_WaitOnFlagUntilTimeout>
 8001936:	4681      	mov	r9, r0
 8001938:	2800      	cmp	r0, #0
 800193a:	d1e5      	bne.n	8001908 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800193c:	2322      	movs	r3, #34	; 0x22
 800193e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001942:	2340      	movs	r3, #64	; 0x40
 8001944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800194a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800194c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800194e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001950:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001954:	9601      	str	r6, [sp, #4]
 8001956:	f8cd 8000 	str.w	r8, [sp]
 800195a:	465b      	mov	r3, fp
 800195c:	9a03      	ldr	r2, [sp, #12]
 800195e:	4639      	mov	r1, r7
 8001960:	4620      	mov	r0, r4
 8001962:	f7ff fe59 	bl	8001618 <I2C_RequestMemoryRead>
 8001966:	b110      	cbz	r0, 800196e <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 8001968:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 800196c:	e7cc      	b.n	8001908 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800196e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001970:	b29b      	uxth	r3, r3
 8001972:	2bff      	cmp	r3, #255	; 0xff
 8001974:	4b36      	ldr	r3, [pc, #216]	; (8001a50 <HAL_I2C_Mem_Read+0x178>)
 8001976:	d958      	bls.n	8001a2a <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001978:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800197a:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800197c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800197e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001982:	4639      	mov	r1, r7
 8001984:	4620      	mov	r0, r4
 8001986:	f7ff fd6b 	bl	8001460 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800198a:	9600      	str	r6, [sp, #0]
 800198c:	4643      	mov	r3, r8
 800198e:	2200      	movs	r2, #0
 8001990:	2104      	movs	r1, #4
 8001992:	4620      	mov	r0, r4
 8001994:	f7ff fd7e 	bl	8001494 <I2C_WaitOnFlagUntilTimeout>
 8001998:	2800      	cmp	r0, #0
 800199a:	d1b5      	bne.n	8001908 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800199c:	6822      	ldr	r2, [r4, #0]
 800199e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019a2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80019a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80019a6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80019a8:	3301      	adds	r3, #1
 80019aa:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80019ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019ae:	3b01      	subs	r3, #1
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80019b6:	3a01      	subs	r2, #1
 80019b8:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019ba:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80019bc:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019be:	b1ab      	cbz	r3, 80019ec <HAL_I2C_Mem_Read+0x114>
 80019c0:	b9a2      	cbnz	r2, 80019ec <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019c2:	9600      	str	r6, [sp, #0]
 80019c4:	4643      	mov	r3, r8
 80019c6:	2180      	movs	r1, #128	; 0x80
 80019c8:	4620      	mov	r0, r4
 80019ca:	f7ff fd63 	bl	8001494 <I2C_WaitOnFlagUntilTimeout>
 80019ce:	2800      	cmp	r0, #0
 80019d0:	d19a      	bne.n	8001908 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	2bff      	cmp	r3, #255	; 0xff
 80019d8:	d92f      	bls.n	8001a3a <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019da:	22ff      	movs	r2, #255	; 0xff
 80019dc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80019de:	9000      	str	r0, [sp, #0]
 80019e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80019e4:	4639      	mov	r1, r7
 80019e6:	4620      	mov	r0, r4
 80019e8:	f7ff fd3a 	bl	8001460 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80019ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1ca      	bne.n	800198a <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019f4:	4632      	mov	r2, r6
 80019f6:	4641      	mov	r1, r8
 80019f8:	4620      	mov	r0, r4
 80019fa:	f7ff fe3f 	bl	800167c <I2C_WaitOnSTOPFlagUntilTimeout>
 80019fe:	2800      	cmp	r0, #0
 8001a00:	d182      	bne.n	8001908 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a02:	6823      	ldr	r3, [r4, #0]
 8001a04:	2120      	movs	r1, #32
 8001a06:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001a0e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001a12:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001a16:	f022 0201 	bic.w	r2, r2, #1
 8001a1a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001a1c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001a20:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a24:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001a28:	e76f      	b.n	800190a <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8001a2a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001a2c:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001a2e:	b292      	uxth	r2, r2
 8001a30:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001a32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	e7a3      	b.n	8001982 <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8001a3a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a3c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001a3e:	b292      	uxth	r2, r2
 8001a40:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	e7cc      	b.n	80019e4 <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 8001a4a:	2002      	movs	r0, #2
 8001a4c:	e75d      	b.n	800190a <HAL_I2C_Mem_Read+0x32>
 8001a4e:	bf00      	nop
 8001a50:	80002400 	.word	0x80002400

08001a54 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a54:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	2a20      	cmp	r2, #32
{
 8001a5c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a5e:	d11d      	bne.n	8001a9c <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a60:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d019      	beq.n	8001a9c <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a68:	2324      	movs	r3, #36	; 0x24
 8001a6a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a6e:	6803      	ldr	r3, [r0, #0]
 8001a70:	681c      	ldr	r4, [r3, #0]
 8001a72:	f024 0401 	bic.w	r4, r4, #1
 8001a76:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a78:	681c      	ldr	r4, [r3, #0]
 8001a7a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001a7e:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a80:	681c      	ldr	r4, [r3, #0]
 8001a82:	4321      	orrs	r1, r4
 8001a84:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a86:	6819      	ldr	r1, [r3, #0]
 8001a88:	f041 0101 	orr.w	r1, r1, #1
 8001a8c:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a8e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001a90:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001a94:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001a98:	4618      	mov	r0, r3
 8001a9a:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001a9c:	2002      	movs	r0, #2
  }
}
 8001a9e:	bd10      	pop	{r4, pc}

08001aa0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001aa0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa2:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8001aa6:	b2e4      	uxtb	r4, r4
 8001aa8:	2c20      	cmp	r4, #32
 8001aaa:	d11c      	bne.n	8001ae6 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aac:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d018      	beq.n	8001ae6 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab4:	2324      	movs	r3, #36	; 0x24
 8001ab6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001aba:	6803      	ldr	r3, [r0, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	f022 0201 	bic.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ac4:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ac6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001aca:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ace:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	f042 0201 	orr.w	r2, r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ad8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001ada:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001ade:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001ae6:	2002      	movs	r0, #2
  }
}
 8001ae8:	bd10      	pop	{r4, pc}
	...

08001aec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001af0:	4605      	mov	r5, r0
 8001af2:	b908      	cbnz	r0, 8001af8 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001af4:	2001      	movs	r0, #1
 8001af6:	e05b      	b.n	8001bb0 <HAL_RCC_OscConfig+0xc4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af8:	6803      	ldr	r3, [r0, #0]
 8001afa:	07df      	lsls	r7, r3, #31
 8001afc:	d411      	bmi.n	8001b22 <HAL_RCC_OscConfig+0x36>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001afe:	682b      	ldr	r3, [r5, #0]
 8001b00:	079e      	lsls	r6, r3, #30
 8001b02:	f100 808a 	bmi.w	8001c1a <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b06:	682b      	ldr	r3, [r5, #0]
 8001b08:	071c      	lsls	r4, r3, #28
 8001b0a:	f100 80fe 	bmi.w	8001d0a <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b0e:	682b      	ldr	r3, [r5, #0]
 8001b10:	0758      	lsls	r0, r3, #29
 8001b12:	f100 8147 	bmi.w	8001da4 <HAL_RCC_OscConfig+0x2b8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b16:	69a8      	ldr	r0, [r5, #24]
 8001b18:	2800      	cmp	r0, #0
 8001b1a:	f040 81de 	bne.w	8001eda <HAL_RCC_OscConfig+0x3ee>
        }
      }
    }
  }

  return HAL_OK;
 8001b1e:	2000      	movs	r0, #0
 8001b20:	e046      	b.n	8001bb0 <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b22:	4cbe      	ldr	r4, [pc, #760]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001b24:	6863      	ldr	r3, [r4, #4]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d00a      	beq.n	8001b44 <HAL_RCC_OscConfig+0x58>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b2e:	6863      	ldr	r3, [r4, #4]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d119      	bne.n	8001b6c <HAL_RCC_OscConfig+0x80>
 8001b38:	6863      	ldr	r3, [r4, #4]
 8001b3a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b42:	d113      	bne.n	8001b6c <HAL_RCC_OscConfig+0x80>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b48:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4c:	6821      	ldr	r1, [r4, #0]
 8001b4e:	fa93 f3a3 	rbit	r3, r3
 8001b52:	fab3 f383 	clz	r3, r3
 8001b56:	f003 031f 	and.w	r3, r3, #31
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	420b      	tst	r3, r1
 8001b62:	d0cc      	beq.n	8001afe <HAL_RCC_OscConfig+0x12>
 8001b64:	686b      	ldr	r3, [r5, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1c9      	bne.n	8001afe <HAL_RCC_OscConfig+0x12>
 8001b6a:	e7c3      	b.n	8001af4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b6c:	686b      	ldr	r3, [r5, #4]
 8001b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b72:	d120      	bne.n	8001bb6 <HAL_RCC_OscConfig+0xca>
 8001b74:	6823      	ldr	r3, [r4, #0]
 8001b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fa52 	bl	8001024 <HAL_GetTick>
 8001b80:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001b84:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b86:	2701      	movs	r7, #1
 8001b88:	fa96 f3a6 	rbit	r3, r6
 8001b8c:	6822      	ldr	r2, [r4, #0]
 8001b8e:	fa96 f3a6 	rbit	r3, r6
 8001b92:	fab3 f383 	clz	r3, r3
 8001b96:	f003 031f 	and.w	r3, r3, #31
 8001b9a:	fa07 f303 	lsl.w	r3, r7, r3
 8001b9e:	4213      	tst	r3, r2
 8001ba0:	d1ad      	bne.n	8001afe <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba2:	f7ff fa3f 	bl	8001024 <HAL_GetTick>
 8001ba6:	eba0 0008 	sub.w	r0, r0, r8
 8001baa:	2864      	cmp	r0, #100	; 0x64
 8001bac:	d9ec      	bls.n	8001b88 <HAL_RCC_OscConfig+0x9c>
            return HAL_TIMEOUT;
 8001bae:	2003      	movs	r0, #3
}
 8001bb0:	b002      	add	sp, #8
 8001bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb6:	bb0b      	cbnz	r3, 8001bfc <HAL_RCC_OscConfig+0x110>
 8001bb8:	6823      	ldr	r3, [r4, #0]
 8001bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bbe:	6023      	str	r3, [r4, #0]
 8001bc0:	6823      	ldr	r3, [r4, #0]
 8001bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fa2c 	bl	8001024 <HAL_GetTick>
 8001bcc:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001bd0:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	2701      	movs	r7, #1
 8001bd4:	fa96 f3a6 	rbit	r3, r6
 8001bd8:	6822      	ldr	r2, [r4, #0]
 8001bda:	fa96 f3a6 	rbit	r3, r6
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	f003 031f 	and.w	r3, r3, #31
 8001be6:	fa07 f303 	lsl.w	r3, r7, r3
 8001bea:	4213      	tst	r3, r2
 8001bec:	d087      	beq.n	8001afe <HAL_RCC_OscConfig+0x12>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bee:	f7ff fa19 	bl	8001024 <HAL_GetTick>
 8001bf2:	eba0 0008 	sub.w	r0, r0, r8
 8001bf6:	2864      	cmp	r0, #100	; 0x64
 8001bf8:	d9ec      	bls.n	8001bd4 <HAL_RCC_OscConfig+0xe8>
 8001bfa:	e7d8      	b.n	8001bae <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c00:	6823      	ldr	r3, [r4, #0]
 8001c02:	d103      	bne.n	8001c0c <HAL_RCC_OscConfig+0x120>
 8001c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c08:	6023      	str	r3, [r4, #0]
 8001c0a:	e7b3      	b.n	8001b74 <HAL_RCC_OscConfig+0x88>
 8001c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c10:	6023      	str	r3, [r4, #0]
 8001c12:	6823      	ldr	r3, [r4, #0]
 8001c14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c18:	e7af      	b.n	8001b7a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c1a:	4c80      	ldr	r4, [pc, #512]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c1c:	6863      	ldr	r3, [r4, #4]
 8001c1e:	f013 0f0c 	tst.w	r3, #12
 8001c22:	d00a      	beq.n	8001c3a <HAL_RCC_OscConfig+0x14e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c24:	6863      	ldr	r3, [r4, #4]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d125      	bne.n	8001c7a <HAL_RCC_OscConfig+0x18e>
 8001c2e:	6863      	ldr	r3, [r4, #4]
 8001c30:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c38:	d11f      	bne.n	8001c7a <HAL_RCC_OscConfig+0x18e>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c40:	6821      	ldr	r1, [r4, #0]
 8001c42:	fa93 f3a3 	rbit	r3, r3
 8001c46:	fab3 f383 	clz	r3, r3
 8001c4a:	f003 031f 	and.w	r3, r3, #31
 8001c4e:	2201      	movs	r2, #1
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	420b      	tst	r3, r1
 8001c56:	d003      	beq.n	8001c60 <HAL_RCC_OscConfig+0x174>
 8001c58:	68eb      	ldr	r3, [r5, #12]
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	f47f af4a 	bne.w	8001af4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c60:	6821      	ldr	r1, [r4, #0]
 8001c62:	23f8      	movs	r3, #248	; 0xf8
 8001c64:	fa93 f3a3 	rbit	r3, r3
 8001c68:	fab3 f283 	clz	r2, r3
 8001c6c:	692b      	ldr	r3, [r5, #16]
 8001c6e:	4093      	lsls	r3, r2
 8001c70:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001c74:	4313      	orrs	r3, r2
 8001c76:	6023      	str	r3, [r4, #0]
 8001c78:	e745      	b.n	8001b06 <HAL_RCC_OscConfig+0x1a>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c7a:	68ea      	ldr	r2, [r5, #12]
 8001c7c:	2601      	movs	r6, #1
 8001c7e:	b30a      	cbz	r2, 8001cc4 <HAL_RCC_OscConfig+0x1d8>
 8001c80:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8001c84:	fab3 f383 	clz	r3, r3
 8001c88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	2702      	movs	r7, #2
 8001c94:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001c96:	f7ff f9c5 	bl	8001024 <HAL_GetTick>
 8001c9a:	4680      	mov	r8, r0
 8001c9c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca0:	6822      	ldr	r2, [r4, #0]
 8001ca2:	fa97 f3a7 	rbit	r3, r7
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	fa06 f303 	lsl.w	r3, r6, r3
 8001cb2:	4213      	tst	r3, r2
 8001cb4:	d1d4      	bne.n	8001c60 <HAL_RCC_OscConfig+0x174>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb6:	f7ff f9b5 	bl	8001024 <HAL_GetTick>
 8001cba:	eba0 0008 	sub.w	r0, r0, r8
 8001cbe:	2802      	cmp	r0, #2
 8001cc0:	d9ec      	bls.n	8001c9c <HAL_RCC_OscConfig+0x1b0>
 8001cc2:	e774      	b.n	8001bae <HAL_RCC_OscConfig+0xc2>
 8001cc4:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8001cc8:	fab3 f383 	clz	r3, r3
 8001ccc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	2702      	movs	r7, #2
 8001cd8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001cda:	f7ff f9a3 	bl	8001024 <HAL_GetTick>
 8001cde:	4680      	mov	r8, r0
 8001ce0:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce4:	6822      	ldr	r2, [r4, #0]
 8001ce6:	fa97 f3a7 	rbit	r3, r7
 8001cea:	fab3 f383 	clz	r3, r3
 8001cee:	f003 031f 	and.w	r3, r3, #31
 8001cf2:	fa06 f303 	lsl.w	r3, r6, r3
 8001cf6:	4213      	tst	r3, r2
 8001cf8:	f43f af05 	beq.w	8001b06 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cfc:	f7ff f992 	bl	8001024 <HAL_GetTick>
 8001d00:	eba0 0008 	sub.w	r0, r0, r8
 8001d04:	2802      	cmp	r0, #2
 8001d06:	d9eb      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x1f4>
 8001d08:	e751      	b.n	8001bae <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d0a:	696a      	ldr	r2, [r5, #20]
 8001d0c:	4e43      	ldr	r6, [pc, #268]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001d0e:	4944      	ldr	r1, [pc, #272]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001d10:	2401      	movs	r4, #1
 8001d12:	b31a      	cbz	r2, 8001d5c <HAL_RCC_OscConfig+0x270>
 8001d14:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8001d18:	fab3 f383 	clz	r3, r3
 8001d1c:	440b      	add	r3, r1
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	2702      	movs	r7, #2
 8001d22:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8001d24:	f7ff f97e 	bl	8001024 <HAL_GetTick>
 8001d28:	4680      	mov	r8, r0
 8001d2a:	fa97 f3a7 	rbit	r3, r7
 8001d2e:	fa97 f3a7 	rbit	r3, r7
 8001d32:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d36:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001d38:	fa97 f3a7 	rbit	r3, r7
 8001d3c:	fab3 f383 	clz	r3, r3
 8001d40:	f003 031f 	and.w	r3, r3, #31
 8001d44:	fa04 f303 	lsl.w	r3, r4, r3
 8001d48:	4213      	tst	r3, r2
 8001d4a:	f47f aee0 	bne.w	8001b0e <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d4e:	f7ff f969 	bl	8001024 <HAL_GetTick>
 8001d52:	eba0 0008 	sub.w	r0, r0, r8
 8001d56:	2802      	cmp	r0, #2
 8001d58:	d9e7      	bls.n	8001d2a <HAL_RCC_OscConfig+0x23e>
 8001d5a:	e728      	b.n	8001bae <HAL_RCC_OscConfig+0xc2>
 8001d5c:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001d60:	fab3 f383 	clz	r3, r3
 8001d64:	440b      	add	r3, r1
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	2702      	movs	r7, #2
 8001d6a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001d6c:	f7ff f95a 	bl	8001024 <HAL_GetTick>
 8001d70:	4680      	mov	r8, r0
 8001d72:	fa97 f3a7 	rbit	r3, r7
 8001d76:	fa97 f3a7 	rbit	r3, r7
 8001d7a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d7e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001d80:	fa97 f3a7 	rbit	r3, r7
 8001d84:	fab3 f383 	clz	r3, r3
 8001d88:	f003 031f 	and.w	r3, r3, #31
 8001d8c:	fa04 f303 	lsl.w	r3, r4, r3
 8001d90:	4213      	tst	r3, r2
 8001d92:	f43f aebc 	beq.w	8001b0e <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d96:	f7ff f945 	bl	8001024 <HAL_GetTick>
 8001d9a:	eba0 0008 	sub.w	r0, r0, r8
 8001d9e:	2802      	cmp	r0, #2
 8001da0:	d9e7      	bls.n	8001d72 <HAL_RCC_OscConfig+0x286>
 8001da2:	e704      	b.n	8001bae <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da4:	4c1d      	ldr	r4, [pc, #116]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001da6:	69e3      	ldr	r3, [r4, #28]
 8001da8:	00d9      	lsls	r1, r3, #3
 8001daa:	d434      	bmi.n	8001e16 <HAL_RCC_OscConfig+0x32a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dac:	69e3      	ldr	r3, [r4, #28]
 8001dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db2:	61e3      	str	r3, [r4, #28]
 8001db4:	69e3      	ldr	r3, [r4, #28]
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dba:	9301      	str	r3, [sp, #4]
 8001dbc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001dbe:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc0:	4f18      	ldr	r7, [pc, #96]	; (8001e24 <HAL_RCC_OscConfig+0x338>)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	05da      	lsls	r2, r3, #23
 8001dc6:	d52f      	bpl.n	8001e28 <HAL_RCC_OscConfig+0x33c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc8:	68ab      	ldr	r3, [r5, #8]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d13d      	bne.n	8001e4a <HAL_RCC_OscConfig+0x35e>
 8001dce:	6a23      	ldr	r3, [r4, #32]
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001dd6:	f7ff f925 	bl	8001024 <HAL_GetTick>
 8001dda:	2702      	movs	r7, #2
 8001ddc:	4682      	mov	sl, r0
 8001dde:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de0:	f04f 0801 	mov.w	r8, #1
 8001de4:	fa97 f3a7 	rbit	r3, r7
 8001de8:	fa97 f3a7 	rbit	r3, r7
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d06c      	beq.n	8001eca <HAL_RCC_OscConfig+0x3de>
 8001df0:	6a22      	ldr	r2, [r4, #32]
 8001df2:	fa99 f3a9 	rbit	r3, r9
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	f003 031f 	and.w	r3, r3, #31
 8001dfe:	fa08 f303 	lsl.w	r3, r8, r3
 8001e02:	4213      	tst	r3, r2
 8001e04:	d058      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 8001e06:	2e00      	cmp	r6, #0
 8001e08:	f43f ae85 	beq.w	8001b16 <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0c:	69e3      	ldr	r3, [r4, #28]
 8001e0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e12:	61e3      	str	r3, [r4, #28]
 8001e14:	e67f      	b.n	8001b16 <HAL_RCC_OscConfig+0x2a>
    FlagStatus       pwrclkchanged = RESET;
 8001e16:	2600      	movs	r6, #0
 8001e18:	e7d2      	b.n	8001dc0 <HAL_RCC_OscConfig+0x2d4>
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	10908120 	.word	0x10908120
 8001e24:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001e30:	f7ff f8f8 	bl	8001024 <HAL_GetTick>
 8001e34:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	05db      	lsls	r3, r3, #23
 8001e3a:	d4c5      	bmi.n	8001dc8 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3c:	f7ff f8f2 	bl	8001024 <HAL_GetTick>
 8001e40:	eba0 0008 	sub.w	r0, r0, r8
 8001e44:	2864      	cmp	r0, #100	; 0x64
 8001e46:	d9f6      	bls.n	8001e36 <HAL_RCC_OscConfig+0x34a>
 8001e48:	e6b1      	b.n	8001bae <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e4a:	bb3b      	cbnz	r3, 8001e9c <HAL_RCC_OscConfig+0x3b0>
 8001e4c:	6a23      	ldr	r3, [r4, #32]
 8001e4e:	f023 0301 	bic.w	r3, r3, #1
 8001e52:	6223      	str	r3, [r4, #32]
 8001e54:	6a23      	ldr	r3, [r4, #32]
 8001e56:	f023 0304 	bic.w	r3, r3, #4
 8001e5a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001e5c:	f7ff f8e2 	bl	8001024 <HAL_GetTick>
 8001e60:	2702      	movs	r7, #2
 8001e62:	4682      	mov	sl, r0
 8001e64:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e66:	f04f 0801 	mov.w	r8, #1
 8001e6a:	fa97 f3a7 	rbit	r3, r7
 8001e6e:	fa97 f3a7 	rbit	r3, r7
 8001e72:	b373      	cbz	r3, 8001ed2 <HAL_RCC_OscConfig+0x3e6>
 8001e74:	6a22      	ldr	r2, [r4, #32]
 8001e76:	fa99 f3a9 	rbit	r3, r9
 8001e7a:	fab3 f383 	clz	r3, r3
 8001e7e:	f003 031f 	and.w	r3, r3, #31
 8001e82:	fa08 f303 	lsl.w	r3, r8, r3
 8001e86:	4213      	tst	r3, r2
 8001e88:	d0bd      	beq.n	8001e06 <HAL_RCC_OscConfig+0x31a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e8a:	f7ff f8cb 	bl	8001024 <HAL_GetTick>
 8001e8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e92:	eba0 000a 	sub.w	r0, r0, sl
 8001e96:	4298      	cmp	r0, r3
 8001e98:	d9e7      	bls.n	8001e6a <HAL_RCC_OscConfig+0x37e>
 8001e9a:	e688      	b.n	8001bae <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e9c:	2b05      	cmp	r3, #5
 8001e9e:	6a23      	ldr	r3, [r4, #32]
 8001ea0:	d103      	bne.n	8001eaa <HAL_RCC_OscConfig+0x3be>
 8001ea2:	f043 0304 	orr.w	r3, r3, #4
 8001ea6:	6223      	str	r3, [r4, #32]
 8001ea8:	e791      	b.n	8001dce <HAL_RCC_OscConfig+0x2e2>
 8001eaa:	f023 0301 	bic.w	r3, r3, #1
 8001eae:	6223      	str	r3, [r4, #32]
 8001eb0:	6a23      	ldr	r3, [r4, #32]
 8001eb2:	f023 0304 	bic.w	r3, r3, #4
 8001eb6:	e78d      	b.n	8001dd4 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb8:	f7ff f8b4 	bl	8001024 <HAL_GetTick>
 8001ebc:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ec0:	eba0 000a 	sub.w	r0, r0, sl
 8001ec4:	4298      	cmp	r0, r3
 8001ec6:	d98d      	bls.n	8001de4 <HAL_RCC_OscConfig+0x2f8>
 8001ec8:	e671      	b.n	8001bae <HAL_RCC_OscConfig+0xc2>
 8001eca:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ece:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ed0:	e78f      	b.n	8001df2 <HAL_RCC_OscConfig+0x306>
 8001ed2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ed8:	e7cd      	b.n	8001e76 <HAL_RCC_OscConfig+0x38a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eda:	4a51      	ldr	r2, [pc, #324]	; (8002020 <HAL_RCC_OscConfig+0x534>)
 8001edc:	6853      	ldr	r3, [r2, #4]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	4614      	mov	r4, r2
 8001ee6:	f000 8082 	beq.w	8001fee <HAL_RCC_OscConfig+0x502>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eea:	2802      	cmp	r0, #2
 8001eec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ef0:	d158      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x4b8>
 8001ef2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001efe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f08:	f7ff f88c 	bl	8001024 <HAL_GetTick>
 8001f0c:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8001f10:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f12:	2601      	movs	r6, #1
 8001f14:	fa97 f3a7 	rbit	r3, r7
 8001f18:	6822      	ldr	r2, [r4, #0]
 8001f1a:	fa97 f3a7 	rbit	r3, r7
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	f003 031f 	and.w	r3, r3, #31
 8001f26:	fa06 f303 	lsl.w	r3, r6, r3
 8001f2a:	4213      	tst	r3, r2
 8001f2c:	d133      	bne.n	8001f96 <HAL_RCC_OscConfig+0x4aa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f30:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001f32:	f023 030f 	bic.w	r3, r3, #15
 8001f36:	4313      	orrs	r3, r2
 8001f38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f3a:	6862      	ldr	r2, [r4, #4]
 8001f3c:	6a2b      	ldr	r3, [r5, #32]
 8001f3e:	69e9      	ldr	r1, [r5, #28]
 8001f40:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8001f44:	430b      	orrs	r3, r1
 8001f46:	4313      	orrs	r3, r2
 8001f48:	6063      	str	r3, [r4, #4]
 8001f4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f4e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f5a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001f64:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001f66:	f7ff f85d 	bl	8001024 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f6a:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8001f6c:	4607      	mov	r7, r0
 8001f6e:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f72:	6822      	ldr	r2, [r4, #0]
 8001f74:	fa95 f3a5 	rbit	r3, r5
 8001f78:	fab3 f383 	clz	r3, r3
 8001f7c:	f003 031f 	and.w	r3, r3, #31
 8001f80:	fa06 f303 	lsl.w	r3, r6, r3
 8001f84:	4213      	tst	r3, r2
 8001f86:	f47f adca 	bne.w	8001b1e <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8a:	f7ff f84b 	bl	8001024 <HAL_GetTick>
 8001f8e:	1bc0      	subs	r0, r0, r7
 8001f90:	2802      	cmp	r0, #2
 8001f92:	d9ec      	bls.n	8001f6e <HAL_RCC_OscConfig+0x482>
 8001f94:	e60b      	b.n	8001bae <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f96:	f7ff f845 	bl	8001024 <HAL_GetTick>
 8001f9a:	eba0 0008 	sub.w	r0, r0, r8
 8001f9e:	2802      	cmp	r0, #2
 8001fa0:	d9b8      	bls.n	8001f14 <HAL_RCC_OscConfig+0x428>
 8001fa2:	e604      	b.n	8001bae <HAL_RCC_OscConfig+0xc2>
 8001fa4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001fa8:	fab3 f383 	clz	r3, r3
 8001fac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fb0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fba:	f7ff f833 	bl	8001024 <HAL_GetTick>
 8001fbe:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001fc2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc4:	2601      	movs	r6, #1
 8001fc6:	fa95 f3a5 	rbit	r3, r5
 8001fca:	6822      	ldr	r2, [r4, #0]
 8001fcc:	fa95 f3a5 	rbit	r3, r5
 8001fd0:	fab3 f383 	clz	r3, r3
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	fa06 f303 	lsl.w	r3, r6, r3
 8001fdc:	4213      	tst	r3, r2
 8001fde:	f43f ad9e 	beq.w	8001b1e <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe2:	f7ff f81f 	bl	8001024 <HAL_GetTick>
 8001fe6:	1bc0      	subs	r0, r0, r7
 8001fe8:	2802      	cmp	r0, #2
 8001fea:	d9ec      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x4da>
 8001fec:	e5df      	b.n	8001bae <HAL_RCC_OscConfig+0xc2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fee:	2801      	cmp	r0, #1
 8001ff0:	f43f adde 	beq.w	8001bb0 <HAL_RCC_OscConfig+0xc4>
        pll_config = RCC->CFGR;
 8001ff4:	6853      	ldr	r3, [r2, #4]
        pll_config2 = RCC->CFGR2;
 8001ff6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ff8:	69ea      	ldr	r2, [r5, #28]
 8001ffa:	f403 31c0 	and.w	r1, r3, #98304	; 0x18000
 8001ffe:	4291      	cmp	r1, r2
 8002000:	f47f ad78 	bne.w	8001af4 <HAL_RCC_OscConfig+0x8>
 8002004:	6a2a      	ldr	r2, [r5, #32]
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002006:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800200a:	4293      	cmp	r3, r2
 800200c:	f47f ad72 	bne.w	8001af4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002010:	6a6b      	ldr	r3, [r5, #36]	; 0x24
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002012:	f000 000f 	and.w	r0, r0, #15
    return HAL_ERROR;
 8002016:	1ac0      	subs	r0, r0, r3
 8002018:	bf18      	it	ne
 800201a:	2001      	movne	r0, #1
 800201c:	e5c8      	b.n	8001bb0 <HAL_RCC_OscConfig+0xc4>
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000

08002024 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8002024:	4911      	ldr	r1, [pc, #68]	; (800206c <HAL_RCC_GetSysClockFreq+0x48>)
 8002026:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002028:	f003 020c 	and.w	r2, r3, #12
 800202c:	2a08      	cmp	r2, #8
 800202e:	d11a      	bne.n	8002066 <HAL_RCC_GetSysClockFreq+0x42>
 8002030:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002034:	fa92 f2a2 	rbit	r2, r2
 8002038:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800203a:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800203e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002040:	fa90 f0a0 	rbit	r0, r0
 8002044:	fab0 f080 	clz	r0, r0
 8002048:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800204c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002050:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002052:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002054:	4a06      	ldr	r2, [pc, #24]	; (8002070 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002056:	4807      	ldr	r0, [pc, #28]	; (8002074 <HAL_RCC_GetSysClockFreq+0x50>)
 8002058:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800205a:	4807      	ldr	r0, [pc, #28]	; (8002078 <HAL_RCC_GetSysClockFreq+0x54>)
 800205c:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002060:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002062:	4348      	muls	r0, r1
 8002064:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8002066:	4804      	ldr	r0, [pc, #16]	; (8002078 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000
 8002070:	08006908 	.word	0x08006908
 8002074:	08006918 	.word	0x08006918
 8002078:	007a1200 	.word	0x007a1200

0800207c <HAL_RCC_ClockConfig>:
{
 800207c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002080:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002082:	4604      	mov	r4, r0
 8002084:	b910      	cbnz	r0, 800208c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002086:	2001      	movs	r0, #1
 8002088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800208c:	4a4d      	ldr	r2, [pc, #308]	; (80021c4 <HAL_RCC_ClockConfig+0x148>)
 800208e:	6813      	ldr	r3, [r2, #0]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	428b      	cmp	r3, r1
 8002096:	d32f      	bcc.n	80020f8 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002098:	6822      	ldr	r2, [r4, #0]
 800209a:	0791      	lsls	r1, r2, #30
 800209c:	d437      	bmi.n	800210e <HAL_RCC_ClockConfig+0x92>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209e:	07d2      	lsls	r2, r2, #31
 80020a0:	d43d      	bmi.n	800211e <HAL_RCC_ClockConfig+0xa2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020a2:	4a48      	ldr	r2, [pc, #288]	; (80021c4 <HAL_RCC_ClockConfig+0x148>)
 80020a4:	6813      	ldr	r3, [r2, #0]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	429d      	cmp	r5, r3
 80020ac:	d376      	bcc.n	800219c <HAL_RCC_ClockConfig+0x120>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ae:	6822      	ldr	r2, [r4, #0]
 80020b0:	4d45      	ldr	r5, [pc, #276]	; (80021c8 <HAL_RCC_ClockConfig+0x14c>)
 80020b2:	f012 0f04 	tst.w	r2, #4
 80020b6:	d17d      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b8:	0713      	lsls	r3, r2, #28
 80020ba:	d506      	bpl.n	80020ca <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020bc:	686b      	ldr	r3, [r5, #4]
 80020be:	6922      	ldr	r2, [r4, #16]
 80020c0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80020c4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80020c8:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020ca:	f7ff ffab 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 80020ce:	686b      	ldr	r3, [r5, #4]
 80020d0:	22f0      	movs	r2, #240	; 0xf0
 80020d2:	fa92 f2a2 	rbit	r2, r2
 80020d6:	fab2 f282 	clz	r2, r2
 80020da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020de:	40d3      	lsrs	r3, r2
 80020e0:	4a3a      	ldr	r2, [pc, #232]	; (80021cc <HAL_RCC_ClockConfig+0x150>)
 80020e2:	5cd3      	ldrb	r3, [r2, r3]
 80020e4:	40d8      	lsrs	r0, r3
 80020e6:	4b3a      	ldr	r3, [pc, #232]	; (80021d0 <HAL_RCC_ClockConfig+0x154>)
 80020e8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80020ea:	4b3a      	ldr	r3, [pc, #232]	; (80021d4 <HAL_RCC_ClockConfig+0x158>)
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	f7fe ff57 	bl	8000fa0 <HAL_InitTick>
  return HAL_OK;
 80020f2:	2000      	movs	r0, #0
 80020f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f8:	6813      	ldr	r3, [r2, #0]
 80020fa:	f023 0307 	bic.w	r3, r3, #7
 80020fe:	430b      	orrs	r3, r1
 8002100:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002102:	6813      	ldr	r3, [r2, #0]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	4299      	cmp	r1, r3
 800210a:	d1bc      	bne.n	8002086 <HAL_RCC_ClockConfig+0xa>
 800210c:	e7c4      	b.n	8002098 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800210e:	492e      	ldr	r1, [pc, #184]	; (80021c8 <HAL_RCC_ClockConfig+0x14c>)
 8002110:	68a0      	ldr	r0, [r4, #8]
 8002112:	684b      	ldr	r3, [r1, #4]
 8002114:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002118:	4303      	orrs	r3, r0
 800211a:	604b      	str	r3, [r1, #4]
 800211c:	e7bf      	b.n	800209e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211e:	6862      	ldr	r2, [r4, #4]
 8002120:	4e29      	ldr	r6, [pc, #164]	; (80021c8 <HAL_RCC_ClockConfig+0x14c>)
 8002122:	2a01      	cmp	r2, #1
 8002124:	d127      	bne.n	8002176 <HAL_RCC_ClockConfig+0xfa>
 8002126:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800212a:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212e:	6831      	ldr	r1, [r6, #0]
 8002130:	fa93 f3a3 	rbit	r3, r3
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002142:	d0a0      	beq.n	8002086 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002144:	6873      	ldr	r3, [r6, #4]
 8002146:	f023 0303 	bic.w	r3, r3, #3
 800214a:	431a      	orrs	r2, r3
 800214c:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 800214e:	f7fe ff69 	bl	8001024 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002152:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002156:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002158:	6873      	ldr	r3, [r6, #4]
 800215a:	6862      	ldr	r2, [r4, #4]
 800215c:	f003 030c 	and.w	r3, r3, #12
 8002160:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002164:	d09d      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002166:	f7fe ff5d 	bl	8001024 <HAL_GetTick>
 800216a:	1bc0      	subs	r0, r0, r7
 800216c:	4540      	cmp	r0, r8
 800216e:	d9f3      	bls.n	8002158 <HAL_RCC_ClockConfig+0xdc>
        return HAL_TIMEOUT;
 8002170:	2003      	movs	r0, #3
}
 8002172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002176:	2a02      	cmp	r2, #2
 8002178:	bf0c      	ite	eq
 800217a:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 800217e:	2302      	movne	r3, #2
 8002180:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002184:	6830      	ldr	r0, [r6, #0]
 8002186:	fa93 f3a3 	rbit	r3, r3
 800218a:	fab3 f383 	clz	r3, r3
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	2101      	movs	r1, #1
 8002194:	fa01 f303 	lsl.w	r3, r1, r3
 8002198:	4203      	tst	r3, r0
 800219a:	e7d2      	b.n	8002142 <HAL_RCC_ClockConfig+0xc6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219c:	6813      	ldr	r3, [r2, #0]
 800219e:	f023 0307 	bic.w	r3, r3, #7
 80021a2:	432b      	orrs	r3, r5
 80021a4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	6813      	ldr	r3, [r2, #0]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	429d      	cmp	r5, r3
 80021ae:	f47f af6a 	bne.w	8002086 <HAL_RCC_ClockConfig+0xa>
 80021b2:	e77c      	b.n	80020ae <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b4:	686b      	ldr	r3, [r5, #4]
 80021b6:	68e1      	ldr	r1, [r4, #12]
 80021b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021bc:	430b      	orrs	r3, r1
 80021be:	606b      	str	r3, [r5, #4]
 80021c0:	e77a      	b.n	80020b8 <HAL_RCC_ClockConfig+0x3c>
 80021c2:	bf00      	nop
 80021c4:	40022000 	.word	0x40022000
 80021c8:	40021000 	.word	0x40021000
 80021cc:	08007e22 	.word	0x08007e22
 80021d0:	20000018 	.word	0x20000018
 80021d4:	20000004 	.word	0x20000004

080021d8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80021d8:	4b08      	ldr	r3, [pc, #32]	; (80021fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	fa92 f2a2 	rbit	r2, r2
 80021e4:	fab2 f282 	clz	r2, r2
 80021e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021ec:	40d3      	lsrs	r3, r2
 80021ee:	4a04      	ldr	r2, [pc, #16]	; (8002200 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021f0:	5cd3      	ldrb	r3, [r2, r3]
 80021f2:	4a04      	ldr	r2, [pc, #16]	; (8002204 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80021f4:	6810      	ldr	r0, [r2, #0]
}    
 80021f6:	40d8      	lsrs	r0, r3
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40021000 	.word	0x40021000
 8002200:	08007e32 	.word	0x08007e32
 8002204:	20000018 	.word	0x20000018

08002208 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <HAL_RCC_GetPCLK2Freq+0x24>)
 800220a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	fa92 f2a2 	rbit	r2, r2
 8002214:	fab2 f282 	clz	r2, r2
 8002218:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800221c:	40d3      	lsrs	r3, r2
 800221e:	4a04      	ldr	r2, [pc, #16]	; (8002230 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002220:	5cd3      	ldrb	r3, [r2, r3]
 8002222:	4a04      	ldr	r2, [pc, #16]	; (8002234 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8002224:	6810      	ldr	r0, [r2, #0]
} 
 8002226:	40d8      	lsrs	r0, r3
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40021000 	.word	0x40021000
 8002230:	08007e32 	.word	0x08007e32
 8002234:	20000018 	.word	0x20000018

08002238 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002238:	6803      	ldr	r3, [r0, #0]
{
 800223a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800223e:	03df      	lsls	r7, r3, #15
{
 8002240:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002242:	d523      	bpl.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002244:	4d9b      	ldr	r5, [pc, #620]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002246:	69eb      	ldr	r3, [r5, #28]
 8002248:	00de      	lsls	r6, r3, #3
 800224a:	f100 80d7 	bmi.w	80023fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224e:	69eb      	ldr	r3, [r5, #28]
 8002250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002254:	61eb      	str	r3, [r5, #28]
 8002256:	69eb      	ldr	r3, [r5, #28]
 8002258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225c:	9301      	str	r3, [sp, #4]
 800225e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002260:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002262:	4f95      	ldr	r7, [pc, #596]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	05d8      	lsls	r0, r3, #23
 8002268:	f140 80ca 	bpl.w	8002400 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800226c:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800226e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002272:	f040 80da 	bne.w	800242a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002276:	6a2b      	ldr	r3, [r5, #32]
 8002278:	6862      	ldr	r2, [r4, #4]
 800227a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800227e:	4313      	orrs	r3, r2
 8002280:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002282:	b11e      	cbz	r6, 800228c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002284:	69eb      	ldr	r3, [r5, #28]
 8002286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800228a:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800228c:	6820      	ldr	r0, [r4, #0]
 800228e:	07c3      	lsls	r3, r0, #31
 8002290:	d506      	bpl.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002292:	4a88      	ldr	r2, [pc, #544]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002294:	68a1      	ldr	r1, [r4, #8]
 8002296:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002298:	f023 0303 	bic.w	r3, r3, #3
 800229c:	430b      	orrs	r3, r1
 800229e:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022a0:	0787      	lsls	r7, r0, #30
 80022a2:	d506      	bpl.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022a4:	4a83      	ldr	r2, [pc, #524]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80022a6:	68e1      	ldr	r1, [r4, #12]
 80022a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022aa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80022ae:	430b      	orrs	r3, r1
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022b2:	0746      	lsls	r6, r0, #29
 80022b4:	d506      	bpl.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022b6:	4a7f      	ldr	r2, [pc, #508]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80022b8:	6921      	ldr	r1, [r4, #16]
 80022ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022bc:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80022c0:	430b      	orrs	r3, r1
 80022c2:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022c4:	0685      	lsls	r5, r0, #26
 80022c6:	d506      	bpl.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022c8:	4a7a      	ldr	r2, [pc, #488]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80022ca:	69e1      	ldr	r1, [r4, #28]
 80022cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022ce:	f023 0310 	bic.w	r3, r3, #16
 80022d2:	430b      	orrs	r3, r1
 80022d4:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022d6:	0381      	lsls	r1, r0, #14
 80022d8:	d506      	bpl.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80022da:	4a76      	ldr	r2, [pc, #472]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80022dc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80022de:	6853      	ldr	r3, [r2, #4]
 80022e0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80022e4:	430b      	orrs	r3, r1
 80022e6:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022e8:	0642      	lsls	r2, r0, #25
 80022ea:	d506      	bpl.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022ec:	4a71      	ldr	r2, [pc, #452]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80022ee:	6a21      	ldr	r1, [r4, #32]
 80022f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022f2:	f023 0320 	bic.w	r3, r3, #32
 80022f6:	430b      	orrs	r3, r1
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022fa:	0343      	lsls	r3, r0, #13
 80022fc:	d506      	bpl.n	800230c <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022fe:	4a6d      	ldr	r2, [pc, #436]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002300:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002302:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002308:	430b      	orrs	r3, r1
 800230a:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800230c:	0707      	lsls	r7, r0, #28
 800230e:	d506      	bpl.n	800231e <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002310:	4a68      	ldr	r2, [pc, #416]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002312:	6961      	ldr	r1, [r4, #20]
 8002314:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002316:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800231a:	430b      	orrs	r3, r1
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800231e:	06c6      	lsls	r6, r0, #27
 8002320:	d506      	bpl.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002322:	4a64      	ldr	r2, [pc, #400]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002324:	69a1      	ldr	r1, [r4, #24]
 8002326:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002328:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800232c:	430b      	orrs	r3, r1
 800232e:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002330:	0585      	lsls	r5, r0, #22
 8002332:	d506      	bpl.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002334:	4a5f      	ldr	r2, [pc, #380]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002336:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002338:	6853      	ldr	r3, [r2, #4]
 800233a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800233e:	430b      	orrs	r3, r1
 8002340:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002342:	0601      	lsls	r1, r0, #24
 8002344:	d506      	bpl.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002346:	4a5b      	ldr	r2, [pc, #364]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002348:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800234a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800234c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002350:	430b      	orrs	r3, r1
 8002352:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002354:	05c2      	lsls	r2, r0, #23
 8002356:	d506      	bpl.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002358:	4a56      	ldr	r2, [pc, #344]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800235a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800235c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800235e:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8002362:	430b      	orrs	r3, r1
 8002364:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002366:	04c3      	lsls	r3, r0, #19
 8002368:	d506      	bpl.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800236a:	4a52      	ldr	r2, [pc, #328]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800236c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800236e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002374:	430b      	orrs	r3, r1
 8002376:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002378:	0487      	lsls	r7, r0, #18
 800237a:	d506      	bpl.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800237c:	4a4d      	ldr	r2, [pc, #308]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800237e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002380:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002382:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002386:	430b      	orrs	r3, r1
 8002388:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800238a:	02c6      	lsls	r6, r0, #11
 800238c:	d506      	bpl.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800238e:	4a49      	ldr	r2, [pc, #292]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002390:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002392:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002394:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002398:	430b      	orrs	r3, r1
 800239a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800239c:	0285      	lsls	r5, r0, #10
 800239e:	d506      	bpl.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80023a0:	4a44      	ldr	r2, [pc, #272]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80023a2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80023a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023a6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80023aa:	430b      	orrs	r3, r1
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80023ae:	0241      	lsls	r1, r0, #9
 80023b0:	d506      	bpl.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80023b2:	4a40      	ldr	r2, [pc, #256]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80023b4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80023b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023bc:	430b      	orrs	r3, r1
 80023be:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80023c0:	0202      	lsls	r2, r0, #8
 80023c2:	d506      	bpl.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80023c4:	4a3b      	ldr	r2, [pc, #236]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80023c6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80023c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023ce:	430b      	orrs	r3, r1
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80023d2:	01c3      	lsls	r3, r0, #7
 80023d4:	d506      	bpl.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80023d6:	4a37      	ldr	r2, [pc, #220]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80023d8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80023da:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023e0:	430b      	orrs	r3, r1
 80023e2:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80023e4:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80023e8:	d01c      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80023ea:	4a32      	ldr	r2, [pc, #200]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80023ec:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80023ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80023f4:	430b      	orrs	r3, r1
 80023f6:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80023f8:	2000      	movs	r0, #0
 80023fa:	e013      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 80023fc:	2600      	movs	r6, #0
 80023fe:	e730      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002406:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002408:	f7fe fe0c 	bl	8001024 <HAL_GetTick>
 800240c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	05d9      	lsls	r1, r3, #23
 8002412:	f53f af2b 	bmi.w	800226c <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002416:	f7fe fe05 	bl	8001024 <HAL_GetTick>
 800241a:	eba0 0008 	sub.w	r0, r0, r8
 800241e:	2864      	cmp	r0, #100	; 0x64
 8002420:	d9f5      	bls.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 8002422:	2003      	movs	r0, #3
}
 8002424:	b002      	add	sp, #8
 8002426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800242a:	6862      	ldr	r2, [r4, #4]
 800242c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002430:	4293      	cmp	r3, r2
 8002432:	f43f af20 	beq.w	8002276 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002436:	6a29      	ldr	r1, [r5, #32]
 8002438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800243c:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8002440:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8002444:	f8df e074 	ldr.w	lr, [pc, #116]	; 80024bc <HAL_RCCEx_PeriphCLKConfig+0x284>
 8002448:	fab2 f282 	clz	r2, r2
 800244c:	4472      	add	r2, lr
 800244e:	0092      	lsls	r2, r2, #2
 8002450:	2701      	movs	r7, #1
 8002452:	6017      	str	r7, [r2, #0]
 8002454:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002458:	fab3 f383 	clz	r3, r3
 800245c:	4473      	add	r3, lr
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002464:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8002466:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002468:	f57f af05 	bpl.w	8002276 <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 800246c:	f7fe fdda 	bl	8001024 <HAL_GetTick>
 8002470:	f04f 0802 	mov.w	r8, #2
 8002474:	4682      	mov	sl, r0
 8002476:	46c1      	mov	r9, r8
 8002478:	fa98 f3a8 	rbit	r3, r8
 800247c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002480:	b1a3      	cbz	r3, 80024ac <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002482:	6a2a      	ldr	r2, [r5, #32]
 8002484:	fa99 f3a9 	rbit	r3, r9
 8002488:	fab3 f383 	clz	r3, r3
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	fa07 f303 	lsl.w	r3, r7, r3
 8002494:	4213      	tst	r3, r2
 8002496:	f47f aeee 	bne.w	8002276 <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fdc3 	bl	8001024 <HAL_GetTick>
 800249e:	f241 3388 	movw	r3, #5000	; 0x1388
 80024a2:	eba0 000a 	sub.w	r0, r0, sl
 80024a6:	4298      	cmp	r0, r3
 80024a8:	d9e6      	bls.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80024aa:	e7ba      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80024ac:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80024b2:	e7e7      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40007000 	.word	0x40007000
 80024bc:	10908100 	.word	0x10908100

080024c0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024c0:	6803      	ldr	r3, [r0, #0]
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	f042 0201 	orr.w	r2, r2, #1
 80024c8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024ca:	6899      	ldr	r1, [r3, #8]
 80024cc:	4a06      	ldr	r2, [pc, #24]	; (80024e8 <HAL_TIM_Base_Start_IT+0x28>)
 80024ce:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d0:	2a06      	cmp	r2, #6
 80024d2:	d006      	beq.n	80024e2 <HAL_TIM_Base_Start_IT+0x22>
 80024d4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 80024d8:	bf1e      	ittt	ne
 80024da:	681a      	ldrne	r2, [r3, #0]
 80024dc:	f042 0201 	orrne.w	r2, r2, #1
 80024e0:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80024e2:	2000      	movs	r0, #0
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	00010007 	.word	0x00010007

080024ec <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80024ec:	6803      	ldr	r3, [r0, #0]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	f022 0201 	bic.w	r2, r2, #1
 80024f4:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80024f6:	6a19      	ldr	r1, [r3, #32]
 80024f8:	f241 1211 	movw	r2, #4369	; 0x1111
 80024fc:	4211      	tst	r1, r2
 80024fe:	d108      	bne.n	8002512 <HAL_TIM_Base_Stop_IT+0x26>
 8002500:	6a19      	ldr	r1, [r3, #32]
 8002502:	f240 4244 	movw	r2, #1092	; 0x444
 8002506:	4211      	tst	r1, r2
 8002508:	bf02      	ittt	eq
 800250a:	681a      	ldreq	r2, [r3, #0]
 800250c:	f022 0201 	biceq.w	r2, r2, #1
 8002510:	601a      	streq	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8002512:	2000      	movs	r0, #0
 8002514:	4770      	bx	lr

08002516 <HAL_TIM_OC_DelayElapsedCallback>:
 8002516:	4770      	bx	lr

08002518 <HAL_TIM_IC_CaptureCallback>:
 8002518:	4770      	bx	lr

0800251a <HAL_TIM_PWM_PulseFinishedCallback>:
 800251a:	4770      	bx	lr

0800251c <HAL_TIM_TriggerCallback>:
 800251c:	4770      	bx	lr

0800251e <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800251e:	6803      	ldr	r3, [r0, #0]
 8002520:	691a      	ldr	r2, [r3, #16]
 8002522:	0791      	lsls	r1, r2, #30
{
 8002524:	b510      	push	{r4, lr}
 8002526:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002528:	d50f      	bpl.n	800254a <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	0792      	lsls	r2, r2, #30
 800252e:	d50c      	bpl.n	800254a <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002530:	f06f 0202 	mvn.w	r2, #2
 8002534:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002536:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002538:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800253a:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800253c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800253e:	f000 8085 	beq.w	800264c <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002542:	f7ff ffe9 	bl	8002518 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002546:	2300      	movs	r3, #0
 8002548:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800254a:	6823      	ldr	r3, [r4, #0]
 800254c:	691a      	ldr	r2, [r3, #16]
 800254e:	0752      	lsls	r2, r2, #29
 8002550:	d510      	bpl.n	8002574 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	0750      	lsls	r0, r2, #29
 8002556:	d50d      	bpl.n	8002574 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002558:	f06f 0204 	mvn.w	r2, #4
 800255c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800255e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002560:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002562:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002566:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002568:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800256a:	d075      	beq.n	8002658 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800256c:	f7ff ffd4 	bl	8002518 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002570:	2300      	movs	r3, #0
 8002572:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002574:	6823      	ldr	r3, [r4, #0]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	0711      	lsls	r1, r2, #28
 800257a:	d50f      	bpl.n	800259c <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	0712      	lsls	r2, r2, #28
 8002580:	d50c      	bpl.n	800259c <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002582:	f06f 0208 	mvn.w	r2, #8
 8002586:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002588:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800258a:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800258c:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800258e:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002590:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002592:	d067      	beq.n	8002664 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002594:	f7ff ffc0 	bl	8002518 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002598:	2300      	movs	r3, #0
 800259a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800259c:	6823      	ldr	r3, [r4, #0]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	06d0      	lsls	r0, r2, #27
 80025a2:	d510      	bpl.n	80025c6 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	06d1      	lsls	r1, r2, #27
 80025a8:	d50d      	bpl.n	80025c6 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025aa:	f06f 0210 	mvn.w	r2, #16
 80025ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025b0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025b2:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025b4:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025b8:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ba:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025bc:	d058      	beq.n	8002670 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80025be:	f7ff ffab 	bl	8002518 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c2:	2300      	movs	r3, #0
 80025c4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025c6:	6823      	ldr	r3, [r4, #0]
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	07d2      	lsls	r2, r2, #31
 80025cc:	d508      	bpl.n	80025e0 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	07d0      	lsls	r0, r2, #31
 80025d2:	d505      	bpl.n	80025e0 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025d4:	f06f 0201 	mvn.w	r2, #1
 80025d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025da:	4620      	mov	r0, r4
 80025dc:	f000 ff16 	bl	800340c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025e0:	6823      	ldr	r3, [r4, #0]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	0611      	lsls	r1, r2, #24
 80025e6:	d508      	bpl.n	80025fa <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	0612      	lsls	r2, r2, #24
 80025ec:	d505      	bpl.n	80025fa <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025f4:	4620      	mov	r0, r4
 80025f6:	f000 f914 	bl	8002822 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80025fa:	6823      	ldr	r3, [r4, #0]
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	05d0      	lsls	r0, r2, #23
 8002600:	d508      	bpl.n	8002614 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	0611      	lsls	r1, r2, #24
 8002606:	d505      	bpl.n	8002614 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002608:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800260c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800260e:	4620      	mov	r0, r4
 8002610:	f000 f908 	bl	8002824 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002614:	6823      	ldr	r3, [r4, #0]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	0652      	lsls	r2, r2, #25
 800261a:	d508      	bpl.n	800262e <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	0650      	lsls	r0, r2, #25
 8002620:	d505      	bpl.n	800262e <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002622:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002628:	4620      	mov	r0, r4
 800262a:	f7ff ff77 	bl	800251c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800262e:	6823      	ldr	r3, [r4, #0]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	0691      	lsls	r1, r2, #26
 8002634:	d522      	bpl.n	800267c <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	0692      	lsls	r2, r2, #26
 800263a:	d51f      	bpl.n	800267c <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800263c:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002640:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002642:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002648:	f000 b8ea 	b.w	8002820 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800264c:	f7ff ff63 	bl	8002516 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002650:	4620      	mov	r0, r4
 8002652:	f7ff ff62 	bl	800251a <HAL_TIM_PWM_PulseFinishedCallback>
 8002656:	e776      	b.n	8002546 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002658:	f7ff ff5d 	bl	8002516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800265c:	4620      	mov	r0, r4
 800265e:	f7ff ff5c 	bl	800251a <HAL_TIM_PWM_PulseFinishedCallback>
 8002662:	e785      	b.n	8002570 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002664:	f7ff ff57 	bl	8002516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002668:	4620      	mov	r0, r4
 800266a:	f7ff ff56 	bl	800251a <HAL_TIM_PWM_PulseFinishedCallback>
 800266e:	e793      	b.n	8002598 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002670:	f7ff ff51 	bl	8002516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002674:	4620      	mov	r0, r4
 8002676:	f7ff ff50 	bl	800251a <HAL_TIM_PWM_PulseFinishedCallback>
 800267a:	e7a2      	b.n	80025c2 <HAL_TIM_IRQHandler+0xa4>
 800267c:	bd10      	pop	{r4, pc}
	...

08002680 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002680:	4a32      	ldr	r2, [pc, #200]	; (800274c <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 8002682:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002684:	4290      	cmp	r0, r2
 8002686:	d012      	beq.n	80026ae <TIM_Base_SetConfig+0x2e>
 8002688:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800268c:	d00f      	beq.n	80026ae <TIM_Base_SetConfig+0x2e>
 800268e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002692:	4290      	cmp	r0, r2
 8002694:	d00b      	beq.n	80026ae <TIM_Base_SetConfig+0x2e>
 8002696:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800269a:	4290      	cmp	r0, r2
 800269c:	d007      	beq.n	80026ae <TIM_Base_SetConfig+0x2e>
 800269e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80026a2:	4290      	cmp	r0, r2
 80026a4:	d003      	beq.n	80026ae <TIM_Base_SetConfig+0x2e>
 80026a6:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80026aa:	4290      	cmp	r0, r2
 80026ac:	d115      	bne.n	80026da <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80026ae:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80026b4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026b6:	4a25      	ldr	r2, [pc, #148]	; (800274c <TIM_Base_SetConfig+0xcc>)
 80026b8:	4290      	cmp	r0, r2
 80026ba:	d01d      	beq.n	80026f8 <TIM_Base_SetConfig+0x78>
 80026bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80026c0:	d01a      	beq.n	80026f8 <TIM_Base_SetConfig+0x78>
 80026c2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80026c6:	4290      	cmp	r0, r2
 80026c8:	d016      	beq.n	80026f8 <TIM_Base_SetConfig+0x78>
 80026ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026ce:	4290      	cmp	r0, r2
 80026d0:	d012      	beq.n	80026f8 <TIM_Base_SetConfig+0x78>
 80026d2:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80026d6:	4290      	cmp	r0, r2
 80026d8:	d00e      	beq.n	80026f8 <TIM_Base_SetConfig+0x78>
 80026da:	4a1d      	ldr	r2, [pc, #116]	; (8002750 <TIM_Base_SetConfig+0xd0>)
 80026dc:	4290      	cmp	r0, r2
 80026de:	d00b      	beq.n	80026f8 <TIM_Base_SetConfig+0x78>
 80026e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026e4:	4290      	cmp	r0, r2
 80026e6:	d007      	beq.n	80026f8 <TIM_Base_SetConfig+0x78>
 80026e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026ec:	4290      	cmp	r0, r2
 80026ee:	d003      	beq.n	80026f8 <TIM_Base_SetConfig+0x78>
 80026f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026f4:	4290      	cmp	r0, r2
 80026f6:	d103      	bne.n	8002700 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026f8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80026fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026fe:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002700:	694a      	ldr	r2, [r1, #20]
 8002702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002706:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002708:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800270a:	688b      	ldr	r3, [r1, #8]
 800270c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800270e:	680b      	ldr	r3, [r1, #0]
 8002710:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <TIM_Base_SetConfig+0xcc>)
 8002714:	4298      	cmp	r0, r3
 8002716:	d013      	beq.n	8002740 <TIM_Base_SetConfig+0xc0>
 8002718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800271c:	4298      	cmp	r0, r3
 800271e:	d00f      	beq.n	8002740 <TIM_Base_SetConfig+0xc0>
 8002720:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002724:	4298      	cmp	r0, r3
 8002726:	d00b      	beq.n	8002740 <TIM_Base_SetConfig+0xc0>
 8002728:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800272c:	4298      	cmp	r0, r3
 800272e:	d007      	beq.n	8002740 <TIM_Base_SetConfig+0xc0>
 8002730:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002734:	4298      	cmp	r0, r3
 8002736:	d003      	beq.n	8002740 <TIM_Base_SetConfig+0xc0>
 8002738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800273c:	4298      	cmp	r0, r3
 800273e:	d101      	bne.n	8002744 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002740:	690b      	ldr	r3, [r1, #16]
 8002742:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002744:	2301      	movs	r3, #1
 8002746:	6143      	str	r3, [r0, #20]
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40012c00 	.word	0x40012c00
 8002750:	40014000 	.word	0x40014000

08002754 <HAL_TIM_Base_Init>:
{
 8002754:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002756:	4604      	mov	r4, r0
 8002758:	b1a0      	cbz	r0, 8002784 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800275a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800275e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002762:	b91b      	cbnz	r3, 800276c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002764:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002768:	f001 f892 	bl	8003890 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800276c:	2302      	movs	r3, #2
 800276e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002772:	6820      	ldr	r0, [r4, #0]
 8002774:	1d21      	adds	r1, r4, #4
 8002776:	f7ff ff83 	bl	8002680 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800277a:	2301      	movs	r3, #1
 800277c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002780:	2000      	movs	r0, #0
 8002782:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002784:	2001      	movs	r0, #1
}
 8002786:	bd10      	pop	{r4, pc}

08002788 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002788:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800278c:	2b01      	cmp	r3, #1
{
 800278e:	b530      	push	{r4, r5, lr}
 8002790:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002794:	d040      	beq.n	8002818 <HAL_TIMEx_MasterConfigSynchronization+0x90>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002796:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800279a:	4d20      	ldr	r5, [pc, #128]	; (800281c <HAL_TIMEx_MasterConfigSynchronization+0x94>)
  tmpcr2 = htim->Instance->CR2;
 800279c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 800279e:	2201      	movs	r2, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80027a0:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 80027a2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 = htim->Instance->CR2;
 80027a6:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80027a8:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80027aa:	d007      	beq.n	80027bc <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80027ac:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80027b0:	42ab      	cmp	r3, r5
 80027b2:	d003      	beq.n	80027bc <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80027b4:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80027b8:	42ab      	cmp	r3, r5
 80027ba:	d103      	bne.n	80027c4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80027bc:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80027be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80027c2:	432a      	orrs	r2, r5
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027c4:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80027c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027ca:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ce:	4a13      	ldr	r2, [pc, #76]	; (800281c <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d016      	beq.n	8002802 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d8:	d013      	beq.n	8002802 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027da:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80027de:	4293      	cmp	r3, r2
 80027e0:	d00f      	beq.n	8002802 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00b      	beq.n	8002802 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027ea:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d007      	beq.n	8002802 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027f2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d003      	beq.n	8002802 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027fe:	4293      	cmp	r3, r2
 8002800:	d104      	bne.n	800280c <HAL_TIMEx_MasterConfigSynchronization+0x84>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002802:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002804:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002808:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800280a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800280c:	2301      	movs	r3, #1
 800280e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002812:	2300      	movs	r3, #0
 8002814:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002818:	4618      	mov	r0, r3

  return HAL_OK;
}
 800281a:	bd30      	pop	{r4, r5, pc}
 800281c:	40012c00 	.word	0x40012c00

08002820 <HAL_TIMEx_CommutCallback>:
 8002820:	4770      	bx	lr

08002822 <HAL_TIMEx_BreakCallback>:
 8002822:	4770      	bx	lr

08002824 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002824:	4770      	bx	lr
	...

08002828 <UART_SetConfig>:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002828:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800282a:	6881      	ldr	r1, [r0, #8]
{
 800282c:	b538      	push	{r3, r4, r5, lr}
 800282e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002830:	69c3      	ldr	r3, [r0, #28]
 8002832:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002834:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002836:	4301      	orrs	r1, r0
 8002838:	6960      	ldr	r0, [r4, #20]
 800283a:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800283c:	487a      	ldr	r0, [pc, #488]	; (8002a28 <UART_SetConfig+0x200>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800283e:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002840:	4028      	ands	r0, r5
 8002842:	4301      	orrs	r1, r0
 8002844:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002846:	6851      	ldr	r1, [r2, #4]
 8002848:	68e0      	ldr	r0, [r4, #12]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 800284a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800284c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002850:	4301      	orrs	r1, r0
 8002852:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002854:	6890      	ldr	r0, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002856:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002858:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 800285c:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800285e:	4301      	orrs	r1, r0
 8002860:	6091      	str	r1, [r2, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002862:	4972      	ldr	r1, [pc, #456]	; (8002a2c <UART_SetConfig+0x204>)
 8002864:	428a      	cmp	r2, r1
 8002866:	d111      	bne.n	800288c <UART_SetConfig+0x64>
 8002868:	4a71      	ldr	r2, [pc, #452]	; (8002a30 <UART_SetConfig+0x208>)
 800286a:	4972      	ldr	r1, [pc, #456]	; (8002a34 <UART_SetConfig+0x20c>)
 800286c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800286e:	f002 0203 	and.w	r2, r2, #3

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002876:	5c8a      	ldrb	r2, [r1, r2]
 8002878:	d05a      	beq.n	8002930 <UART_SetConfig+0x108>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 800287a:	2a08      	cmp	r2, #8
 800287c:	d826      	bhi.n	80028cc <UART_SetConfig+0xa4>
 800287e:	e8df f002 	tbb	[pc, r2]
 8002882:	a7a1      	.short	0xa7a1
 8002884:	25bd25aa 	.word	0x25bd25aa
 8002888:	2525      	.short	0x2525
 800288a:	c0          	.byte	0xc0
 800288b:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800288c:	496a      	ldr	r1, [pc, #424]	; (8002a38 <UART_SetConfig+0x210>)
 800288e:	428a      	cmp	r2, r1
 8002890:	d12a      	bne.n	80028e8 <UART_SetConfig+0xc0>
 8002892:	4a67      	ldr	r2, [pc, #412]	; (8002a30 <UART_SetConfig+0x208>)
 8002894:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002896:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800289a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800289e:	f000 80b5 	beq.w	8002a0c <UART_SetConfig+0x1e4>
 80028a2:	d815      	bhi.n	80028d0 <UART_SetConfig+0xa8>
 80028a4:	b9da      	cbnz	r2, 80028de <UART_SetConfig+0xb6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028aa:	f040 808b 	bne.w	80029c4 <UART_SetConfig+0x19c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80028ae:	f7ff fc93 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80028b2:	6862      	ldr	r2, [r4, #4]
 80028b4:	0853      	lsrs	r3, r2, #1
 80028b6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80028ba:	fbb0 f0f2 	udiv	r0, r0, r2
 80028be:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028c0:	f1a0 0210 	sub.w	r2, r0, #16
 80028c4:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d96f      	bls.n	80029ac <UART_SetConfig+0x184>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 80028cc:	2001      	movs	r0, #1
 80028ce:	e075      	b.n	80029bc <UART_SetConfig+0x194>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028d0:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80028d4:	f000 80a0 	beq.w	8002a18 <UART_SetConfig+0x1f0>
 80028d8:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80028dc:	d046      	beq.n	800296c <UART_SetConfig+0x144>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028e2:	d0f3      	beq.n	80028cc <UART_SetConfig+0xa4>
 80028e4:	2210      	movs	r2, #16
 80028e6:	e7c8      	b.n	800287a <UART_SetConfig+0x52>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028e8:	4954      	ldr	r1, [pc, #336]	; (8002a3c <UART_SetConfig+0x214>)
 80028ea:	428a      	cmp	r2, r1
 80028ec:	d10f      	bne.n	800290e <UART_SetConfig+0xe6>
 80028ee:	4a50      	ldr	r2, [pc, #320]	; (8002a30 <UART_SetConfig+0x208>)
 80028f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028f2:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80028f6:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80028fa:	f000 8087 	beq.w	8002a0c <UART_SetConfig+0x1e4>
 80028fe:	d9d1      	bls.n	80028a4 <UART_SetConfig+0x7c>
 8002900:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8002904:	f000 8088 	beq.w	8002a18 <UART_SetConfig+0x1f0>
 8002908:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 800290c:	e7e6      	b.n	80028dc <UART_SetConfig+0xb4>
 800290e:	494c      	ldr	r1, [pc, #304]	; (8002a40 <UART_SetConfig+0x218>)
 8002910:	428a      	cmp	r2, r1
 8002912:	d137      	bne.n	8002984 <UART_SetConfig+0x15c>
 8002914:	4a46      	ldr	r2, [pc, #280]	; (8002a30 <UART_SetConfig+0x208>)
 8002916:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002918:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800291c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002920:	d074      	beq.n	8002a0c <UART_SetConfig+0x1e4>
 8002922:	d81d      	bhi.n	8002960 <UART_SetConfig+0x138>
 8002924:	2a00      	cmp	r2, #0
 8002926:	d0be      	beq.n	80028a6 <UART_SetConfig+0x7e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800292c:	d1ce      	bne.n	80028cc <UART_SetConfig+0xa4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800292e:	2210      	movs	r2, #16
    switch (clocksource)
 8002930:	2a08      	cmp	r2, #8
 8002932:	d8cb      	bhi.n	80028cc <UART_SetConfig+0xa4>
 8002934:	a301      	add	r3, pc, #4	; (adr r3, 800293c <UART_SetConfig+0x114>)
 8002936:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800293a:	bf00      	nop
 800293c:	080028af 	.word	0x080028af
 8002940:	080029a7 	.word	0x080029a7
 8002944:	08002973 	.word	0x08002973
 8002948:	080028cd 	.word	0x080028cd
 800294c:	08002a13 	.word	0x08002a13
 8002950:	080028cd 	.word	0x080028cd
 8002954:	080028cd 	.word	0x080028cd
 8002958:	080028cd 	.word	0x080028cd
 800295c:	08002a1f 	.word	0x08002a1f
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002960:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002964:	d058      	beq.n	8002a18 <UART_SetConfig+0x1f0>
 8002966:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800296a:	d1dd      	bne.n	8002928 <UART_SetConfig+0x100>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800296c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002970:	d131      	bne.n	80029d6 <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002972:	6863      	ldr	r3, [r4, #4]
 8002974:	0858      	lsrs	r0, r3, #1
 8002976:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 800297a:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800297e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002982:	e79c      	b.n	80028be <UART_SetConfig+0x96>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002984:	492f      	ldr	r1, [pc, #188]	; (8002a44 <UART_SetConfig+0x21c>)
 8002986:	428a      	cmp	r2, r1
 8002988:	d1a0      	bne.n	80028cc <UART_SetConfig+0xa4>
 800298a:	4a29      	ldr	r2, [pc, #164]	; (8002a30 <UART_SetConfig+0x208>)
 800298c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800298e:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8002992:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002996:	d039      	beq.n	8002a0c <UART_SetConfig+0x1e4>
 8002998:	d984      	bls.n	80028a4 <UART_SetConfig+0x7c>
 800299a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800299e:	d03b      	beq.n	8002a18 <UART_SetConfig+0x1f0>
 80029a0:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 80029a4:	e79a      	b.n	80028dc <UART_SetConfig+0xb4>
        pclk = HAL_RCC_GetPCLK2Freq();
 80029a6:	f7ff fc2f 	bl	8002208 <HAL_RCC_GetPCLK2Freq>
 80029aa:	e782      	b.n	80028b2 <UART_SetConfig+0x8a>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029ac:	f020 030f 	bic.w	r3, r0, #15
      huart->Instance->BRR = brrtemp;
 80029b0:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029b2:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 80029b6:	4318      	orrs	r0, r3
 80029b8:	60d0      	str	r0, [r2, #12]
 80029ba:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80029c0:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80029c2:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 80029c4:	f7ff fc08 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80029c8:	6863      	ldr	r3, [r4, #4]
 80029ca:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80029ce:	e008      	b.n	80029e2 <UART_SetConfig+0x1ba>
        pclk = HAL_RCC_GetPCLK2Freq();
 80029d0:	f7ff fc1a 	bl	8002208 <HAL_RCC_GetPCLK2Freq>
 80029d4:	e7f8      	b.n	80029c8 <UART_SetConfig+0x1a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80029d6:	6863      	ldr	r3, [r4, #4]
 80029d8:	0858      	lsrs	r0, r3, #1
 80029da:	f500 00f4 	add.w	r0, r0, #7995392	; 0x7a0000
 80029de:	f500 5090 	add.w	r0, r0, #4608	; 0x1200
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80029e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80029e6:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029e8:	f1a0 0210 	sub.w	r2, r0, #16
 80029ec:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80029f0:	429a      	cmp	r2, r3
 80029f2:	f63f af6b 	bhi.w	80028cc <UART_SetConfig+0xa4>
      huart->Instance->BRR = usartdiv;
 80029f6:	6823      	ldr	r3, [r4, #0]
 80029f8:	60d8      	str	r0, [r3, #12]
 80029fa:	e7de      	b.n	80029ba <UART_SetConfig+0x192>
        pclk = HAL_RCC_GetSysClockFreq();
 80029fc:	f7ff fb12 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8002a00:	e7e2      	b.n	80029c8 <UART_SetConfig+0x1a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002a02:	6863      	ldr	r3, [r4, #4]
 8002a04:	0858      	lsrs	r0, r3, #1
 8002a06:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8002a0a:	e7ea      	b.n	80029e2 <UART_SetConfig+0x1ba>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a10:	d1f4      	bne.n	80029fc <UART_SetConfig+0x1d4>
        pclk = HAL_RCC_GetSysClockFreq();
 8002a12:	f7ff fb07 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8002a16:	e74c      	b.n	80028b2 <UART_SetConfig+0x8a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a1c:	d1f1      	bne.n	8002a02 <UART_SetConfig+0x1da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002a1e:	6863      	ldr	r3, [r4, #4]
 8002a20:	0858      	lsrs	r0, r3, #1
 8002a22:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8002a26:	e7aa      	b.n	800297e <UART_SetConfig+0x156>
 8002a28:	efff69f3 	.word	0xefff69f3
 8002a2c:	40013800 	.word	0x40013800
 8002a30:	40021000 	.word	0x40021000
 8002a34:	08006928 	.word	0x08006928
 8002a38:	40004400 	.word	0x40004400
 8002a3c:	40004800 	.word	0x40004800
 8002a40:	40004c00 	.word	0x40004c00
 8002a44:	40005000 	.word	0x40005000

08002a48 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a4a:	07da      	lsls	r2, r3, #31
{
 8002a4c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a4e:	d506      	bpl.n	8002a5e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a50:	6801      	ldr	r1, [r0, #0]
 8002a52:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002a54:	684a      	ldr	r2, [r1, #4]
 8002a56:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002a5a:	4322      	orrs	r2, r4
 8002a5c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a5e:	079c      	lsls	r4, r3, #30
 8002a60:	d506      	bpl.n	8002a70 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a62:	6801      	ldr	r1, [r0, #0]
 8002a64:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002a66:	684a      	ldr	r2, [r1, #4]
 8002a68:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a6c:	4322      	orrs	r2, r4
 8002a6e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a70:	0759      	lsls	r1, r3, #29
 8002a72:	d506      	bpl.n	8002a82 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a74:	6801      	ldr	r1, [r0, #0]
 8002a76:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002a78:	684a      	ldr	r2, [r1, #4]
 8002a7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a7e:	4322      	orrs	r2, r4
 8002a80:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a82:	071a      	lsls	r2, r3, #28
 8002a84:	d506      	bpl.n	8002a94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a86:	6801      	ldr	r1, [r0, #0]
 8002a88:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002a8a:	684a      	ldr	r2, [r1, #4]
 8002a8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a90:	4322      	orrs	r2, r4
 8002a92:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a94:	06dc      	lsls	r4, r3, #27
 8002a96:	d506      	bpl.n	8002aa6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a98:	6801      	ldr	r1, [r0, #0]
 8002a9a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002a9c:	688a      	ldr	r2, [r1, #8]
 8002a9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002aa2:	4322      	orrs	r2, r4
 8002aa4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002aa6:	0699      	lsls	r1, r3, #26
 8002aa8:	d506      	bpl.n	8002ab8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002aaa:	6801      	ldr	r1, [r0, #0]
 8002aac:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002aae:	688a      	ldr	r2, [r1, #8]
 8002ab0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ab4:	4322      	orrs	r2, r4
 8002ab6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ab8:	065a      	lsls	r2, r3, #25
 8002aba:	d50f      	bpl.n	8002adc <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002abc:	6801      	ldr	r1, [r0, #0]
 8002abe:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002ac0:	684a      	ldr	r2, [r1, #4]
 8002ac2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002ac6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ac8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002acc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ace:	d105      	bne.n	8002adc <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ad0:	684a      	ldr	r2, [r1, #4]
 8002ad2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002ad4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002ad8:	4322      	orrs	r2, r4
 8002ada:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002adc:	061b      	lsls	r3, r3, #24
 8002ade:	d506      	bpl.n	8002aee <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ae0:	6802      	ldr	r2, [r0, #0]
 8002ae2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002ae4:	6853      	ldr	r3, [r2, #4]
 8002ae6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002aea:	430b      	orrs	r3, r1
 8002aec:	6053      	str	r3, [r2, #4]
 8002aee:	bd10      	pop	{r4, pc}

08002af0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002af4:	9d06      	ldr	r5, [sp, #24]
 8002af6:	4604      	mov	r4, r0
 8002af8:	460f      	mov	r7, r1
 8002afa:	4616      	mov	r6, r2
 8002afc:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002afe:	6821      	ldr	r1, [r4, #0]
 8002b00:	69ca      	ldr	r2, [r1, #28]
 8002b02:	ea37 0302 	bics.w	r3, r7, r2
 8002b06:	bf0c      	ite	eq
 8002b08:	2201      	moveq	r2, #1
 8002b0a:	2200      	movne	r2, #0
 8002b0c:	42b2      	cmp	r2, r6
 8002b0e:	d002      	beq.n	8002b16 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002b10:	2000      	movs	r0, #0
}
 8002b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002b16:	1c68      	adds	r0, r5, #1
 8002b18:	d0f2      	beq.n	8002b00 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1a:	f7fe fa83 	bl	8001024 <HAL_GetTick>
 8002b1e:	eba0 0008 	sub.w	r0, r0, r8
 8002b22:	4285      	cmp	r5, r0
 8002b24:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b26:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b28:	d300      	bcc.n	8002b2c <UART_WaitOnFlagUntilTimeout+0x3c>
 8002b2a:	b97d      	cbnz	r5, 8002b4c <UART_WaitOnFlagUntilTimeout+0x5c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b30:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b32:	6883      	ldr	r3, [r0, #8]
 8002b34:	f023 0301 	bic.w	r3, r3, #1
 8002b38:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002b3a:	2320      	movs	r3, #32
 8002b3c:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002b3e:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8002b40:	2300      	movs	r3, #0
 8002b42:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 8002b46:	2003      	movs	r0, #3
 8002b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b4c:	075a      	lsls	r2, r3, #29
 8002b4e:	d5d6      	bpl.n	8002afe <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b50:	69c3      	ldr	r3, [r0, #28]
 8002b52:	051b      	lsls	r3, r3, #20
 8002b54:	d5d3      	bpl.n	8002afe <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b5a:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b5c:	6803      	ldr	r3, [r0, #0]
 8002b5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b62:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b64:	6883      	ldr	r3, [r0, #8]
 8002b66:	f023 0301 	bic.w	r3, r3, #1
 8002b6a:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002b6c:	2320      	movs	r3, #32
 8002b6e:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002b70:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b72:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002b74:	e7e4      	b.n	8002b40 <UART_WaitOnFlagUntilTimeout+0x50>

08002b76 <UART_CheckIdleState>:
{
 8002b76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b78:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b7a:	2600      	movs	r6, #0
 8002b7c:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002b7e:	f7fe fa51 	bl	8001024 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b82:	6823      	ldr	r3, [r4, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002b88:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b8a:	d415      	bmi.n	8002bb8 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	075b      	lsls	r3, r3, #29
 8002b92:	d50a      	bpl.n	8002baa <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	462b      	mov	r3, r5
 8002b9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	f7ff ffa4 	bl	8002af0 <UART_WaitOnFlagUntilTimeout>
 8002ba8:	b990      	cbnz	r0, 8002bd0 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8002baa:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002bac:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002bae:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8002bb0:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8002bb4:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8002bb6:	e00c      	b.n	8002bd2 <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	4632      	mov	r2, r6
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	f7ff ff92 	bl	8002af0 <UART_WaitOnFlagUntilTimeout>
 8002bcc:	2800      	cmp	r0, #0
 8002bce:	d0dd      	beq.n	8002b8c <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002bd0:	2003      	movs	r0, #3
}
 8002bd2:	b002      	add	sp, #8
 8002bd4:	bd70      	pop	{r4, r5, r6, pc}

08002bd6 <HAL_UART_Init>:
{
 8002bd6:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002bd8:	4604      	mov	r4, r0
 8002bda:	b340      	cbz	r0, 8002c2e <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002bdc:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002bde:	b91b      	cbnz	r3, 8002be8 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8002be0:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002be4:	f000 feb4 	bl	8003950 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002be8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002bea:	2324      	movs	r3, #36	; 0x24
 8002bec:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002bee:	6813      	ldr	r3, [r2, #0]
 8002bf0:	f023 0301 	bic.w	r3, r3, #1
 8002bf4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	f7ff fe16 	bl	8002828 <UART_SetConfig>
 8002bfc:	2801      	cmp	r0, #1
 8002bfe:	d016      	beq.n	8002c2e <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c02:	b113      	cbz	r3, 8002c0a <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8002c04:	4620      	mov	r0, r4
 8002c06:	f7ff ff1f 	bl	8002a48 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c0a:	6823      	ldr	r3, [r4, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c1a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002c22:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002c24:	601a      	str	r2, [r3, #0]
}
 8002c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002c2a:	f7ff bfa4 	b.w	8002b76 <UART_CheckIdleState>
}
 8002c2e:	2001      	movs	r0, #1
 8002c30:	bd10      	pop	{r4, pc}

08002c32 <LTC2990_ConfigureControlReg>:
#include "adc.h"

/*
 *	Configure control register
 */
HAL_StatusTypeDef LTC2990_ConfigureControlReg(I2C_HandleTypeDef *hi2c) {
 8002c32:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_StatusTypeDef retStatus;

	uint8_t controlBuffer[1];
	controlBuffer[0] = 0x1F; //All modes per measurement, V1-V2 (measures current in and out of battery), V3 measures battery voltage (currently disconnected in schematic), V4 measures battery temperature (currently disconnected in schematic)
 8002c34:	aa06      	add	r2, sp, #24
 8002c36:	231f      	movs	r3, #31
 8002c38:	f802 3d04 	strb.w	r3, [r2, #-4]!

	retStatus = HAL_I2C_Mem_Write(hi2c, 0b10011000, 0x1, I2C_MEMADD_SIZE_8BIT,
 8002c3c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002c40:	9302      	str	r3, [sp, #8]
 8002c42:	2301      	movs	r3, #1
 8002c44:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002c48:	2198      	movs	r1, #152	; 0x98
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f7fe fd8c 	bl	8001768 <HAL_I2C_Mem_Write>
			controlBuffer, I2C_MEMADD_SIZE_8BIT, 500);

	return retStatus;
}
 8002c50:	b007      	add	sp, #28
 8002c52:	f85d fb04 	ldr.w	pc, [sp], #4

08002c56 <LTC2990_Trigger>:

/*
 * Trigger new ADC conversion
 */
HAL_StatusTypeDef LTC2990_Trigger(I2C_HandleTypeDef *hi2c) {
 8002c56:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_StatusTypeDef retStatus;
	uint8_t triggerVal = 0x0;
 8002c58:	aa06      	add	r2, sp, #24
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f802 3d01 	strb.w	r3, [r2, #-1]!

	retStatus = HAL_I2C_Mem_Write(hi2c, 0b10011000, 0x02,
 8002c60:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002c64:	9302      	str	r3, [sp, #8]
 8002c66:	2301      	movs	r3, #1
 8002c68:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002c6c:	2198      	movs	r1, #152	; 0x98
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f7fe fd7a 	bl	8001768 <HAL_I2C_Mem_Write>
			I2C_MEMADD_SIZE_8BIT, &triggerVal, I2C_MEMADD_SIZE_8BIT, 1500);

	return retStatus;
}
 8002c74:	b007      	add	sp, #28
 8002c76:	f85d fb04 	ldr.w	pc, [sp], #4

08002c7a <LTC2990_WaitForConversion>:

/*
 * Wait for new ADC conversion
 */
HAL_StatusTypeDef LTC2990_WaitForConversion(I2C_HandleTypeDef *hi2c,
		uint16_t timeout_ms) {
 8002c7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c7e:	b086      	sub	sp, #24
	HAL_StatusTypeDef retStatus;

	uint8_t statusBuffer = 0;
 8002c80:	ae06      	add	r6, sp, #24
 8002c82:	2400      	movs	r4, #0
 8002c84:	f806 4d01 	strb.w	r4, [r6, #-1]!
		uint16_t timeout_ms) {
 8002c88:	4680      	mov	r8, r0
 8002c8a:	460d      	mov	r5, r1
	uint8_t vccReady = 0;

	while ((timeout_ms != 0) && (vccReady == 0)) {
 8002c8c:	4627      	mov	r7, r4
		retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x00,
 8002c8e:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
 8002c92:	f04f 0a01 	mov.w	sl, #1
	while ((timeout_ms != 0) && (vccReady == 0)) {
 8002c96:	b105      	cbz	r5, 8002c9a <LTC2990_WaitForConversion+0x20>
 8002c98:	b11c      	cbz	r4, 8002ca2 <LTC2990_WaitForConversion+0x28>
		HAL_Delay(10);
		timeout_ms -= 10;
	}

	return retStatus;
}
 8002c9a:	4638      	mov	r0, r7
 8002c9c:	b006      	add	sp, #24
 8002c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x00,
 8002ca2:	4622      	mov	r2, r4
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	2198      	movs	r1, #152	; 0x98
 8002ca8:	f8cd 9008 	str.w	r9, [sp, #8]
 8002cac:	e88d 0440 	stmia.w	sp, {r6, sl}
 8002cb0:	4640      	mov	r0, r8
 8002cb2:	f7fe fe11 	bl	80018d8 <HAL_I2C_Mem_Read>
		vccReady = (statusBuffer & 0b00000100);
 8002cb6:	f89d 4017 	ldrb.w	r4, [sp, #23]
		retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x00,
 8002cba:	4607      	mov	r7, r0
		timeout_ms -= 10;
 8002cbc:	3d0a      	subs	r5, #10
		HAL_Delay(10);
 8002cbe:	200a      	movs	r0, #10
		vccReady = (statusBuffer & 0b00000100);
 8002cc0:	f004 0404 	and.w	r4, r4, #4
		HAL_Delay(10);
 8002cc4:	f7fe f9b4 	bl	8001030 <HAL_Delay>
		timeout_ms -= 10;
 8002cc8:	b2ad      	uxth	r5, r5
 8002cca:	e7e4      	b.n	8002c96 <LTC2990_WaitForConversion+0x1c>
 8002ccc:	0000      	movs	r0, r0
	...

08002cd0 <LTC2990_ReadVcc>:


/*
 * Read Vcc voltage
 */
HAL_StatusTypeDef LTC2990_ReadVcc(I2C_HandleTypeDef *hi2c, float* Vcc_V) {
 8002cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cd4:	b086      	sub	sp, #24
	HAL_StatusTypeDef retStatus;
	uint16_t Vcc_regData;
	uint8_t VccReadBuffer[2];

	//Read MSB of Vcc ()
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x0E, I2C_MEMADD_SIZE_8BIT,
 8002cd6:	2501      	movs	r5, #1
 8002cd8:	ab05      	add	r3, sp, #20
 8002cda:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8002cde:	9300      	str	r3, [sp, #0]
HAL_StatusTypeDef LTC2990_ReadVcc(I2C_HandleTypeDef *hi2c, float* Vcc_V) {
 8002ce0:	460f      	mov	r7, r1
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x0E, I2C_MEMADD_SIZE_8BIT,
 8002ce2:	9602      	str	r6, [sp, #8]
 8002ce4:	9501      	str	r5, [sp, #4]
 8002ce6:	462b      	mov	r3, r5
 8002ce8:	220e      	movs	r2, #14
 8002cea:	2198      	movs	r1, #152	; 0x98
HAL_StatusTypeDef LTC2990_ReadVcc(I2C_HandleTypeDef *hi2c, float* Vcc_V) {
 8002cec:	4680      	mov	r8, r0
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x0E, I2C_MEMADD_SIZE_8BIT,
 8002cee:	f7fe fdf3 	bl	80018d8 <HAL_I2C_Mem_Read>
			&VccReadBuffer[0], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 8002cf2:	4604      	mov	r4, r0
 8002cf4:	bb38      	cbnz	r0, 8002d46 <LTC2990_ReadVcc+0x76>
		return retStatus;
	}

	//Read LSB of Vcc ()
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x0F, I2C_MEMADD_SIZE_8BIT,
 8002cf6:	f10d 0315 	add.w	r3, sp, #21
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	9602      	str	r6, [sp, #8]
 8002cfe:	9501      	str	r5, [sp, #4]
 8002d00:	462b      	mov	r3, r5
 8002d02:	220f      	movs	r2, #15
 8002d04:	2198      	movs	r1, #152	; 0x98
 8002d06:	4640      	mov	r0, r8
 8002d08:	f7fe fde6 	bl	80018d8 <HAL_I2C_Mem_Read>
			&VccReadBuffer[1], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 8002d0c:	4604      	mov	r4, r0
 8002d0e:	b9d0      	cbnz	r0, 8002d46 <LTC2990_ReadVcc+0x76>
		return retStatus;
	}

	//Convert register contents to Vcc
	Vcc_regData = ((VccReadBuffer[0] << 8) | VccReadBuffer[1]) & ~0xC000; //D[13:0]
 8002d10:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8002d14:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8002d18:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	*Vcc_V = 2.5 + ((Vcc_regData * 305.18) / 1000000);
 8002d1c:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8002d20:	f7fd fc08 	bl	8000534 <__aeabi_i2d>
 8002d24:	a30b      	add	r3, pc, #44	; (adr r3, 8002d54 <LTC2990_ReadVcc+0x84>)
 8002d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2a:	f7fd fc69 	bl	8000600 <__aeabi_dmul>
 8002d2e:	a30b      	add	r3, pc, #44	; (adr r3, 8002d5c <LTC2990_ReadVcc+0x8c>)
 8002d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d34:	f7fd fd8e 	bl	8000854 <__aeabi_ddiv>
 8002d38:	2200      	movs	r2, #0
 8002d3a:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <LTC2990_ReadVcc+0x80>)
 8002d3c:	f7fd faae 	bl	800029c <__adddf3>
 8002d40:	f7fd ff56 	bl	8000bf0 <__aeabi_d2f>
 8002d44:	6038      	str	r0, [r7, #0]

	return retStatus;
}
 8002d46:	4620      	mov	r0, r4
 8002d48:	b006      	add	sp, #24
 8002d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d4e:	bf00      	nop
 8002d50:	40040000 	.word	0x40040000
 8002d54:	47ae147b 	.word	0x47ae147b
 8002d58:	407312e1 	.word	0x407312e1
 8002d5c:	00000000 	.word	0x00000000
 8002d60:	412e8480 	.word	0x412e8480
 8002d64:	00000000 	.word	0x00000000

08002d68 <LTC2990_ReadV4>:
}

/*
 * Read V4 voltage
 */
HAL_StatusTypeDef LTC2990_ReadV4(I2C_HandleTypeDef *hi2c, float* V4_V) {
 8002d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d6c:	b086      	sub	sp, #24
	HAL_StatusTypeDef retStatus;
	uint16_t V4_regData;
	uint8_t V4ReadBuffer[2];

	//Read MSB of V4
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x0C, I2C_MEMADD_SIZE_8BIT,
 8002d6e:	2501      	movs	r5, #1
 8002d70:	ab05      	add	r3, sp, #20
 8002d72:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8002d76:	9300      	str	r3, [sp, #0]
HAL_StatusTypeDef LTC2990_ReadV4(I2C_HandleTypeDef *hi2c, float* V4_V) {
 8002d78:	460f      	mov	r7, r1
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x0C, I2C_MEMADD_SIZE_8BIT,
 8002d7a:	9602      	str	r6, [sp, #8]
 8002d7c:	9501      	str	r5, [sp, #4]
 8002d7e:	462b      	mov	r3, r5
 8002d80:	220c      	movs	r2, #12
 8002d82:	2198      	movs	r1, #152	; 0x98
HAL_StatusTypeDef LTC2990_ReadV4(I2C_HandleTypeDef *hi2c, float* V4_V) {
 8002d84:	4680      	mov	r8, r0
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x0C, I2C_MEMADD_SIZE_8BIT,
 8002d86:	f7fe fda7 	bl	80018d8 <HAL_I2C_Mem_Read>
			&V4ReadBuffer[0], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 8002d8a:	4604      	mov	r4, r0
 8002d8c:	bb38      	cbnz	r0, 8002dde <LTC2990_ReadV4+0x76>
		return retStatus;
	}

	//Read LSB of V4
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x0D, I2C_MEMADD_SIZE_8BIT,
 8002d8e:	f10d 0315 	add.w	r3, sp, #21
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	9602      	str	r6, [sp, #8]
 8002d96:	9501      	str	r5, [sp, #4]
 8002d98:	462b      	mov	r3, r5
 8002d9a:	220d      	movs	r2, #13
 8002d9c:	2198      	movs	r1, #152	; 0x98
 8002d9e:	4640      	mov	r0, r8
 8002da0:	f7fe fd9a 	bl	80018d8 <HAL_I2C_Mem_Read>
			&V4ReadBuffer[1], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 8002da4:	4604      	mov	r4, r0
 8002da6:	b9d0      	cbnz	r0, 8002dde <LTC2990_ReadV4+0x76>
		return retStatus;
	}

	//Convert register contents to V4
	V4_regData = ((V4ReadBuffer[0] << 8) | V4ReadBuffer[1]) & ~0xC000; //D[13:0]
 8002da8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8002dac:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8002db0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	*V4_V = ((V4_regData * 305.18) / 1000000) * vdividerFactor ;
 8002db4:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8002db8:	f7fd fbbc 	bl	8000534 <__aeabi_i2d>
 8002dbc:	a30a      	add	r3, pc, #40	; (adr r3, 8002de8 <LTC2990_ReadV4+0x80>)
 8002dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc2:	f7fd fc1d 	bl	8000600 <__aeabi_dmul>
 8002dc6:	a30a      	add	r3, pc, #40	; (adr r3, 8002df0 <LTC2990_ReadV4+0x88>)
 8002dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dcc:	f7fd fd42 	bl	8000854 <__aeabi_ddiv>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	f7fd fa62 	bl	800029c <__adddf3>
 8002dd8:	f7fd ff0a 	bl	8000bf0 <__aeabi_d2f>
 8002ddc:	6038      	str	r0, [r7, #0]

	return retStatus;
}
 8002dde:	4620      	mov	r0, r4
 8002de0:	b006      	add	sp, #24
 8002de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002de6:	bf00      	nop
 8002de8:	47ae147b 	.word	0x47ae147b
 8002dec:	407312e1 	.word	0x407312e1
 8002df0:	00000000 	.word	0x00000000
 8002df4:	412e8480 	.word	0x412e8480

08002df8 <LTC2990_ReadV1>:
}

/*
 * Read V1 voltage
 */
HAL_StatusTypeDef LTC2990_ReadV1(I2C_HandleTypeDef *hi2c, float* V1_V) {
 8002df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dfc:	b086      	sub	sp, #24
	HAL_StatusTypeDef retStatus;
	uint16_t V1_regData;
	uint8_t V1ReadBuffer[2];

	//Read MSB of V1
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x06, I2C_MEMADD_SIZE_8BIT,
 8002dfe:	2501      	movs	r5, #1
 8002e00:	ab05      	add	r3, sp, #20
 8002e02:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8002e06:	9300      	str	r3, [sp, #0]
HAL_StatusTypeDef LTC2990_ReadV1(I2C_HandleTypeDef *hi2c, float* V1_V) {
 8002e08:	460f      	mov	r7, r1
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x06, I2C_MEMADD_SIZE_8BIT,
 8002e0a:	9602      	str	r6, [sp, #8]
 8002e0c:	9501      	str	r5, [sp, #4]
 8002e0e:	462b      	mov	r3, r5
 8002e10:	2206      	movs	r2, #6
 8002e12:	2198      	movs	r1, #152	; 0x98
HAL_StatusTypeDef LTC2990_ReadV1(I2C_HandleTypeDef *hi2c, float* V1_V) {
 8002e14:	4680      	mov	r8, r0
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x06, I2C_MEMADD_SIZE_8BIT,
 8002e16:	f7fe fd5f 	bl	80018d8 <HAL_I2C_Mem_Read>
			&V1ReadBuffer[0], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 8002e1a:	4604      	mov	r4, r0
 8002e1c:	bb38      	cbnz	r0, 8002e6e <LTC2990_ReadV1+0x76>
		return retStatus;
	}

	//Read LSB of V1
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x07, I2C_MEMADD_SIZE_8BIT,
 8002e1e:	f10d 0315 	add.w	r3, sp, #21
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	9602      	str	r6, [sp, #8]
 8002e26:	9501      	str	r5, [sp, #4]
 8002e28:	462b      	mov	r3, r5
 8002e2a:	2207      	movs	r2, #7
 8002e2c:	2198      	movs	r1, #152	; 0x98
 8002e2e:	4640      	mov	r0, r8
 8002e30:	f7fe fd52 	bl	80018d8 <HAL_I2C_Mem_Read>
			&V1ReadBuffer[1], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 8002e34:	4604      	mov	r4, r0
 8002e36:	b9d0      	cbnz	r0, 8002e6e <LTC2990_ReadV1+0x76>
		return retStatus;
	}

	//Convert register contents to V4
	V1_regData = ((V1ReadBuffer[0] << 8) | V1ReadBuffer[1]) & ~0xC000; //D[13:0]
 8002e38:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8002e3c:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8002e40:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	*V1_V = (((V1_regData * 305.18) / 1000000) * vdividerFactor);
 8002e44:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8002e48:	f7fd fb74 	bl	8000534 <__aeabi_i2d>
 8002e4c:	a30a      	add	r3, pc, #40	; (adr r3, 8002e78 <LTC2990_ReadV1+0x80>)
 8002e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e52:	f7fd fbd5 	bl	8000600 <__aeabi_dmul>
 8002e56:	a30a      	add	r3, pc, #40	; (adr r3, 8002e80 <LTC2990_ReadV1+0x88>)
 8002e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5c:	f7fd fcfa 	bl	8000854 <__aeabi_ddiv>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	f7fd fa1a 	bl	800029c <__adddf3>
 8002e68:	f7fd fec2 	bl	8000bf0 <__aeabi_d2f>
 8002e6c:	6038      	str	r0, [r7, #0]

	return retStatus;
}
 8002e6e:	4620      	mov	r0, r4
 8002e70:	b006      	add	sp, #24
 8002e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e76:	bf00      	nop
 8002e78:	47ae147b 	.word	0x47ae147b
 8002e7c:	407312e1 	.word	0x407312e1
 8002e80:	00000000 	.word	0x00000000
 8002e84:	412e8480 	.word	0x412e8480

08002e88 <LTC2990_ReadCurrent>:
 * Charging gives negative current value when V1_V < V4_V
 * Discharging gives positive current value when V1_V > V4_V
 */
HAL_StatusTypeDef LTC2990_ReadCurrent(I2C_HandleTypeDef *hi2c, float V1_V, float V4_V, float* current_value)
{
	*current_value = (V1_V - V4_V)*1000.0/shuntR;
 8002e88:	ee70 7a60 	vsub.f32	s15, s0, s1
{
 8002e8c:	b510      	push	{r4, lr}
	*current_value = (V1_V - V4_V)*1000.0/shuntR;
 8002e8e:	ee17 0a90 	vmov	r0, s15
{
 8002e92:	460c      	mov	r4, r1
	*current_value = (V1_V - V4_V)*1000.0/shuntR;
 8002e94:	f7fd fb60 	bl	8000558 <__aeabi_f2d>
 8002e98:	2200      	movs	r2, #0
 8002e9a:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <LTC2990_ReadCurrent+0x38>)
 8002e9c:	f7fd fbb0 	bl	8000600 <__aeabi_dmul>
 8002ea0:	a305      	add	r3, pc, #20	; (adr r3, 8002eb8 <LTC2990_ReadCurrent+0x30>)
 8002ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea6:	f7fd fcd5 	bl	8000854 <__aeabi_ddiv>
 8002eaa:	f7fd fea1 	bl	8000bf0 <__aeabi_d2f>
 8002eae:	6020      	str	r0, [r4, #0]
}
 8002eb0:	bd10      	pop	{r4, pc}
 8002eb2:	bf00      	nop
 8002eb4:	f3af 8000 	nop.w
 8002eb8:	40000000 	.word	0x40000000
 8002ebc:	3fc3d70a 	.word	0x3fc3d70a
 8002ec0:	408f4000 	.word	0x408f4000

08002ec4 <LTC2990_ReadVoltage>:
 */
HAL_StatusTypeDef LTC2990_ReadVoltage(I2C_HandleTypeDef *hi2c, ADC_CHANNEL ch, float* voltage_value)
{
	HAL_StatusTypeDef retStatus;

	if(ch == VCC)
 8002ec4:	b911      	cbnz	r1, 8002ecc <LTC2990_ReadVoltage+0x8>
	{
		//Vcc
		retStatus = LTC2990_ReadVcc(hi2c, voltage_value);
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	f7ff bf02 	b.w	8002cd0 <LTC2990_ReadVcc>
	}
	else if(ch == BATTV)
 8002ecc:	2901      	cmp	r1, #1
 8002ece:	d102      	bne.n	8002ed6 <LTC2990_ReadVoltage+0x12>
	{
		//Vbatt
		retStatus = LTC2990_ReadV1(hi2c, voltage_value);
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	f7ff bf91 	b.w	8002df8 <LTC2990_ReadV1>
	}
	else if(ch == BATTV_2)
 8002ed6:	2904      	cmp	r1, #4
 8002ed8:	d102      	bne.n	8002ee0 <LTC2990_ReadVoltage+0x1c>
	{
		//Vbatt2
		retStatus = LTC2990_ReadV4(hi2c, voltage_value);
 8002eda:	4611      	mov	r1, r2
 8002edc:	f7ff bf44 	b.w	8002d68 <LTC2990_ReadV4>
	}
	else
	{
		//default case
		*voltage_value = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	6013      	str	r3, [r2, #0]
		retStatus = HAL_OK;
	}
}
 8002ee4:	4770      	bx	lr
	...

08002ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ee8:	b530      	push	{r4, r5, lr}
 8002eea:	b0a7      	sub	sp, #156	; 0x9c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eec:	2228      	movs	r2, #40	; 0x28
 8002eee:	2100      	movs	r1, #0
 8002ef0:	a806      	add	r0, sp, #24
 8002ef2:	f000 fe11 	bl	8003b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ef6:	2214      	movs	r2, #20
 8002ef8:	2100      	movs	r1, #0
 8002efa:	a801      	add	r0, sp, #4
 8002efc:	f000 fe0c 	bl	8003b18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f00:	2258      	movs	r2, #88	; 0x58
 8002f02:	2100      	movs	r1, #0
 8002f04:	a810      	add	r0, sp, #64	; 0x40
 8002f06:	f000 fe07 	bl	8003b18 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f0e:	2310      	movs	r3, #16
 8002f10:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f16:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f18:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f1a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002f1c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002f20:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f22:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f24:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f26:	f7fe fde1 	bl	8001aec <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f2a:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f2c:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f2e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f30:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f36:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f38:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f3a:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f3c:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f3e:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f40:	f7ff f89c 	bl	800207c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <SystemClock_Config+0x74>)
 8002f46:	9310      	str	r3, [sp, #64]	; 0x40
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM17;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f48:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f4a:	9413      	str	r4, [sp, #76]	; 0x4c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002f4c:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8002f4e:	9422      	str	r4, [sp, #136]	; 0x88
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8002f50:	9423      	str	r4, [sp, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f52:	f7ff f971 	bl	8002238 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002f56:	b027      	add	sp, #156	; 0x9c
 8002f58:	bd30      	pop	{r4, r5, pc}
 8002f5a:	bf00      	nop
 8002f5c:	01800022 	.word	0x01800022

08002f60 <main>:
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b094      	sub	sp, #80	; 0x50
  HAL_Init();
 8002f64:	f7fe f840 	bl	8000fe8 <HAL_Init>
  SystemClock_Config();
 8002f68:	f7ff ffbe 	bl	8002ee8 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6c:	2214      	movs	r2, #20
 8002f6e:	2100      	movs	r1, #0
 8002f70:	a80f      	add	r0, sp, #60	; 0x3c
 8002f72:	f000 fdd1 	bl	8003b18 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f76:	4bbd      	ldr	r3, [pc, #756]	; (800326c <main+0x30c>)
  hdac1.Instance = DAC1;
 8002f78:	4dbd      	ldr	r5, [pc, #756]	; (8003270 <main+0x310>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f7a:	695a      	ldr	r2, [r3, #20]
  htim6.Instance = TIM6;
 8002f7c:	4ebd      	ldr	r6, [pc, #756]	; (8003274 <main+0x314>)
  htim7.Instance = TIM7;
 8002f7e:	4fbe      	ldr	r7, [pc, #760]	; (8003278 <main+0x318>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f80:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002f84:	615a      	str	r2, [r3, #20]
 8002f86:	695a      	ldr	r2, [r3, #20]
 8002f88:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8002f8c:	9205      	str	r2, [sp, #20]
 8002f8e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002f96:	615a      	str	r2, [r3, #20]
 8002f98:	695a      	ldr	r2, [r3, #20]
 8002f9a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002f9e:	9206      	str	r2, [sp, #24]
 8002fa0:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa2:	695a      	ldr	r2, [r3, #20]
 8002fa4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002fa8:	615a      	str	r2, [r3, #20]
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002fb0:	9207      	str	r2, [sp, #28]
 8002fb2:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002fba:	615a      	str	r2, [r3, #20]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fc2:	9308      	str	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_USR2_Pin, GPIO_PIN_RESET);
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8002fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fce:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_USR2_Pin, GPIO_PIN_RESET);
 8002fd0:	f7fe fa20 	bl	8001414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CHG_EN_Pin|LED_USR1_Pin, GPIO_PIN_RESET);
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8002fda:	48a8      	ldr	r0, [pc, #672]	; (800327c <main+0x31c>)
 8002fdc:	f7fe fa1a 	bl	8001414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002fe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8002fe6:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002fe8:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fea:	4ba5      	ldr	r3, [pc, #660]	; (8003280 <main+0x320>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002fec:	48a5      	ldr	r0, [pc, #660]	; (8003284 <main+0x324>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fee:	9310      	str	r3, [sp, #64]	; 0x40

  /*Configure GPIO pins : LD2_Pin LED_USR2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_USR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ff0:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff4:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ff6:	f7fe f937 	bl	8001268 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|LED_USR2_Pin;
 8002ffa:	f44f 6384 	mov.w	r3, #1056	; 0x420
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffe:	a90f      	add	r1, sp, #60	; 0x3c
 8003000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LD2_Pin|LED_USR2_Pin;
 8003004:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003006:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300a:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300c:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800300e:	f7fe f92b 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHG_EN_Pin LED_USR1_Pin */
  GPIO_InitStruct.Pin = CHG_EN_Pin|LED_USR1_Pin;
 8003012:	f44f 6381 	mov.w	r3, #1032	; 0x408
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003016:	a90f      	add	r1, sp, #60	; 0x3c
 8003018:	4898      	ldr	r0, [pc, #608]	; (800327c <main+0x31c>)
  GPIO_InitStruct.Pin = CHG_EN_Pin|LED_USR1_Pin;
 800301a:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800301c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003020:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003022:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003024:	f7fe f920 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_INTERRUPT_Pin S1_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = S2_INTERRUPT_Pin|S1_INTERRUPT_Pin;
 8003028:	f44f 7340 	mov.w	r3, #768	; 0x300
 800302c:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302e:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003030:	4b95      	ldr	r3, [pc, #596]	; (8003288 <main+0x328>)
 8003032:	9310      	str	r3, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003038:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800303c:	f7fe f914 	bl	8001268 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003040:	4622      	mov	r2, r4
 8003042:	4621      	mov	r1, r4
 8003044:	2017      	movs	r0, #23
 8003046:	f7fe f819 	bl	800107c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800304a:	2017      	movs	r0, #23
 800304c:	f7fe f84a 	bl	80010e4 <HAL_NVIC_EnableIRQ>
  hdac1.Instance = DAC1;
 8003050:	4b8e      	ldr	r3, [pc, #568]	; (800328c <main+0x32c>)
 8003052:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003054:	4628      	mov	r0, r5
  DAC_ChannelConfTypeDef sConfig = {0};
 8003056:	940f      	str	r4, [sp, #60]	; 0x3c
 8003058:	9410      	str	r4, [sp, #64]	; 0x40
 800305a:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800305c:	f7fe f866 	bl	800112c <HAL_DAC_Init>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003060:	a90f      	add	r1, sp, #60	; 0x3c
 8003062:	4622      	mov	r2, r4
 8003064:	4628      	mov	r0, r5
  hi2c1.Instance = I2C1;
 8003066:	4d8a      	ldr	r5, [pc, #552]	; (8003290 <main+0x330>)
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003068:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800306a:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800306c:	f7fe f8ab 	bl	80011c6 <HAL_DAC_ConfigChannel>
  hi2c1.Init.Timing = 0x2000090E;
 8003070:	4a88      	ldr	r2, [pc, #544]	; (8003294 <main+0x334>)
 8003072:	4b89      	ldr	r3, [pc, #548]	; (8003298 <main+0x338>)
  hi2c1.Init.OwnAddress1 = 0;
 8003074:	60ac      	str	r4, [r5, #8]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003076:	4628      	mov	r0, r5
  hi2c1.Init.Timing = 0x2000090E;
 8003078:	e885 000c 	stmia.w	r5, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800307c:	f8c5 800c 	str.w	r8, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003080:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003082:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003084:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003086:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003088:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800308a:	f7fe fb1c 	bl	80016c6 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800308e:	4621      	mov	r1, r4
 8003090:	4628      	mov	r0, r5
 8003092:	f7fe fcdf 	bl	8001a54 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003096:	4621      	mov	r1, r4
 8003098:	4628      	mov	r0, r5
 800309a:	f7fe fd01 	bl	8001aa0 <HAL_I2CEx_ConfigDigitalFilter>
  htim6.Init.Prescaler = 36000;
 800309e:	4b7f      	ldr	r3, [pc, #508]	; (800329c <main+0x33c>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030a0:	60b4      	str	r4, [r6, #8]
  htim6.Init.Prescaler = 36000;
 80030a2:	f648 49a0 	movw	r9, #36000	; 0x8ca0
  htim6.Init.Period = 2500;
 80030a6:	f640 1ac4 	movw	sl, #2500	; 0x9c4
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80030aa:	4630      	mov	r0, r6
  htim6.Init.Prescaler = 36000;
 80030ac:	e886 0208 	stmia.w	r6, {r3, r9}
  htim6.Init.Period = 2500;
 80030b0:	f8c6 a00c 	str.w	sl, [r6, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030b4:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030b6:	940f      	str	r4, [sp, #60]	; 0x3c
 80030b8:	9410      	str	r4, [sp, #64]	; 0x40
 80030ba:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80030bc:	f7ff fb4a 	bl	8002754 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80030c0:	a90f      	add	r1, sp, #60	; 0x3c
 80030c2:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030c4:	940f      	str	r4, [sp, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030c6:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80030c8:	f7ff fb5e 	bl	8002788 <HAL_TIMEx_MasterConfigSynchronization>
  huart2.Instance = USART2;
 80030cc:	4874      	ldr	r0, [pc, #464]	; (80032a0 <main+0x340>)
  huart2.Init.BaudRate = 38400;
 80030ce:	4975      	ldr	r1, [pc, #468]	; (80032a4 <main+0x344>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030d0:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 38400;
 80030d2:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80030d6:	e880 000a 	stmia.w	r0, {r1, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030da:	230c      	movs	r3, #12
 80030dc:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030de:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030e0:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030e2:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030e4:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030e6:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030e8:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030ea:	f7ff fd74 	bl	8002bd6 <HAL_UART_Init>
  htim7.Instance = TIM7;
 80030ee:	4b6e      	ldr	r3, [pc, #440]	; (80032a8 <main+0x348>)
  htim16.Instance = TIM16;
 80030f0:	4e6e      	ldr	r6, [pc, #440]	; (80032ac <main+0x34c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030f2:	940f      	str	r4, [sp, #60]	; 0x3c
  htim7.Init.Prescaler = 36000;
 80030f4:	e887 0208 	stmia.w	r7, {r3, r9}
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80030f8:	4638      	mov	r0, r7
  htim7.Init.Period = 2000;
 80030fa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80030fe:	60fb      	str	r3, [r7, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003100:	9410      	str	r4, [sp, #64]	; 0x40
 8003102:	9411      	str	r4, [sp, #68]	; 0x44
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003104:	60bc      	str	r4, [r7, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003106:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003108:	f7ff fb24 	bl	8002754 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800310c:	a90f      	add	r1, sp, #60	; 0x3c
 800310e:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003110:	940f      	str	r4, [sp, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003112:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003114:	f7ff fb38 	bl	8002788 <HAL_TIMEx_MasterConfigSynchronization>
  htim16.Instance = TIM16;
 8003118:	4b65      	ldr	r3, [pc, #404]	; (80032b0 <main+0x350>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800311a:	60b4      	str	r4, [r6, #8]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800311c:	4630      	mov	r0, r6
  htim16.Init.Prescaler = 36000;
 800311e:	e886 0208 	stmia.w	r6, {r3, r9}
  htim16.Init.Period = 2500;
 8003122:	f8c6 a00c 	str.w	sl, [r6, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003126:	6134      	str	r4, [r6, #16]
  htim16.Init.RepetitionCounter = 0;
 8003128:	6174      	str	r4, [r6, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800312a:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800312c:	f7ff fb12 	bl	8002754 <HAL_TIM_Base_Init>
  htim17.Instance = TIM17;
 8003130:	4860      	ldr	r0, [pc, #384]	; (80032b4 <main+0x354>)
 8003132:	4b61      	ldr	r3, [pc, #388]	; (80032b8 <main+0x358>)
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003134:	6084      	str	r4, [r0, #8]
  htim17.Init.Prescaler = 36000;
 8003136:	e880 0208 	stmia.w	r0, {r3, r9}
  htim17.Init.Period = 2500;
 800313a:	f8c0 a00c 	str.w	sl, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800313e:	6104      	str	r4, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 8003140:	6144      	str	r4, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003142:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003144:	f7ff fb06 	bl	8002754 <HAL_TIM_Base_Init>
  ssd1306_Init();
 8003148:	f000 fa1e 	bl	8003588 <ssd1306_Init>
  ssd1306_Fill(Black);
 800314c:	4620      	mov	r0, r4
 800314e:	f000 f9e7 	bl	8003520 <ssd1306_Fill>
  ssd1306_WriteString("MakerMax", Font_11x18, White);
 8003152:	4a5a      	ldr	r2, [pc, #360]	; (80032bc <main+0x35c>)
 8003154:	485a      	ldr	r0, [pc, #360]	; (80032c0 <main+0x360>)
 8003156:	4643      	mov	r3, r8
 8003158:	ca06      	ldmia	r2, {r1, r2}
 800315a:	f000 faed 	bl	8003738 <ssd1306_WriteString>
  LTC2990_ConfigureControlReg(&hi2c1);
 800315e:	4628      	mov	r0, r5
 8003160:	f7ff fd67 	bl	8002c32 <LTC2990_ConfigureControlReg>
  HAL_TIM_Base_Start_IT(&htim7);
 8003164:	4638      	mov	r0, r7
 8003166:	f7ff f9ab 	bl	80024c0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 800316a:	4630      	mov	r0, r6
 800316c:	f7ff f9a8 	bl	80024c0 <HAL_TIM_Base_Start_IT>
	  sprintf(voltageADCVccString, "%.3f V",voltageADCVcc);
 8003170:	4e54      	ldr	r6, [pc, #336]	; (80032c4 <main+0x364>)
	  LTC2990_Trigger(&hi2c1);
 8003172:	4628      	mov	r0, r5
 8003174:	f7ff fd6f 	bl	8002c56 <LTC2990_Trigger>
	  LTC2990_WaitForConversion(&hi2c1, 100);
 8003178:	2164      	movs	r1, #100	; 0x64
 800317a:	4628      	mov	r0, r5
 800317c:	f7ff fd7d 	bl	8002c7a <LTC2990_WaitForConversion>
	  float voltageADCVcc = 0;
 8003180:	aa14      	add	r2, sp, #80	; 0x50
 8003182:	2400      	movs	r4, #0
 8003184:	f842 4d4c 	str.w	r4, [r2, #-76]!
	  LTC2990_ReadVoltage(&hi2c1, VCC, &voltageADCVcc);
 8003188:	2100      	movs	r1, #0
 800318a:	4628      	mov	r0, r5
 800318c:	f7ff fe9a 	bl	8002ec4 <LTC2990_ReadVoltage>
	  LTC2990_ReadVoltage(&hi2c1, BATTV, &battV);
 8003190:	aa03      	add	r2, sp, #12
 8003192:	2101      	movs	r1, #1
 8003194:	4628      	mov	r0, r5
	  float current = 0;
 8003196:	9402      	str	r4, [sp, #8]
	  float battV = 0;
 8003198:	9403      	str	r4, [sp, #12]
	  float battV_2 = 0;
 800319a:	9404      	str	r4, [sp, #16]
	  LTC2990_ReadVoltage(&hi2c1, BATTV, &battV);
 800319c:	f7ff fe92 	bl	8002ec4 <LTC2990_ReadVoltage>
	  LTC2990_ReadVoltage(&hi2c1, BATTV_2, &battV_2);
 80031a0:	aa04      	add	r2, sp, #16
 80031a2:	2104      	movs	r1, #4
 80031a4:	4628      	mov	r0, r5
 80031a6:	f7ff fe8d 	bl	8002ec4 <LTC2990_ReadVoltage>
	  LTC2990_ReadCurrent(&hi2c1, battV, battV_2, &current);
 80031aa:	eddd 0a04 	vldr	s1, [sp, #16]
 80031ae:	ed9d 0a03 	vldr	s0, [sp, #12]
	  ssd1306_WriteString("Vcc   ", Font_7x10, White);
 80031b2:	4c45      	ldr	r4, [pc, #276]	; (80032c8 <main+0x368>)
	  LTC2990_ReadCurrent(&hi2c1, battV, battV_2, &current);
 80031b4:	a902      	add	r1, sp, #8
 80031b6:	4628      	mov	r0, r5
 80031b8:	f7ff fe66 	bl	8002e88 <LTC2990_ReadCurrent>
	  sprintf(voltageADCVccString, "%.3f V",voltageADCVcc);
 80031bc:	9801      	ldr	r0, [sp, #4]
 80031be:	f7fd f9cb 	bl	8000558 <__aeabi_f2d>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	a809      	add	r0, sp, #36	; 0x24
 80031c8:	4631      	mov	r1, r6
 80031ca:	f000 fcad 	bl	8003b28 <sprintf>
	  ssd1306_SetCursor(15,25);
 80031ce:	2119      	movs	r1, #25
 80031d0:	200f      	movs	r0, #15
 80031d2:	f000 fac7 	bl	8003764 <ssd1306_SetCursor>
	  ssd1306_WriteString("Vcc   ", Font_7x10, White);
 80031d6:	e894 0006 	ldmia.w	r4, {r1, r2}
 80031da:	2301      	movs	r3, #1
 80031dc:	483b      	ldr	r0, [pc, #236]	; (80032cc <main+0x36c>)
 80031de:	f000 faab 	bl	8003738 <ssd1306_WriteString>
	  ssd1306_SetCursor(52,25);
 80031e2:	2119      	movs	r1, #25
 80031e4:	2034      	movs	r0, #52	; 0x34
 80031e6:	f000 fabd 	bl	8003764 <ssd1306_SetCursor>
	  ssd1306_WriteString(voltageADCVccString, Font_7x10, White);
 80031ea:	e894 0006 	ldmia.w	r4, {r1, r2}
 80031ee:	2301      	movs	r3, #1
 80031f0:	a809      	add	r0, sp, #36	; 0x24
 80031f2:	f000 faa1 	bl	8003738 <ssd1306_WriteString>
	  sprintf(currentString, "%.3f mA",current);
 80031f6:	9802      	ldr	r0, [sp, #8]
 80031f8:	f7fd f9ae 	bl	8000558 <__aeabi_f2d>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	a80c      	add	r0, sp, #48	; 0x30
 8003202:	4933      	ldr	r1, [pc, #204]	; (80032d0 <main+0x370>)
 8003204:	f000 fc90 	bl	8003b28 <sprintf>
	  ssd1306_SetCursor(15,37);
 8003208:	2125      	movs	r1, #37	; 0x25
 800320a:	200f      	movs	r0, #15
 800320c:	f000 faaa 	bl	8003764 <ssd1306_SetCursor>
	  ssd1306_WriteString("Cur  ", Font_7x10, White);
 8003210:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003214:	2301      	movs	r3, #1
 8003216:	482f      	ldr	r0, [pc, #188]	; (80032d4 <main+0x374>)
 8003218:	f000 fa8e 	bl	8003738 <ssd1306_WriteString>
	  ssd1306_SetCursor(52,37);
 800321c:	2125      	movs	r1, #37	; 0x25
 800321e:	2034      	movs	r0, #52	; 0x34
 8003220:	f000 faa0 	bl	8003764 <ssd1306_SetCursor>
	  ssd1306_WriteString(currentString, Font_7x10, White);
 8003224:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003228:	2301      	movs	r3, #1
 800322a:	a80c      	add	r0, sp, #48	; 0x30
 800322c:	f000 fa84 	bl	8003738 <ssd1306_WriteString>
	  sprintf(battVString, "%.3f V",battV);
 8003230:	9803      	ldr	r0, [sp, #12]
 8003232:	f7fd f991 	bl	8000558 <__aeabi_f2d>
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	a80f      	add	r0, sp, #60	; 0x3c
 800323c:	4631      	mov	r1, r6
 800323e:	f000 fc73 	bl	8003b28 <sprintf>
	  ssd1306_SetCursor(15,49);
 8003242:	2131      	movs	r1, #49	; 0x31
 8003244:	200f      	movs	r0, #15
 8003246:	f000 fa8d 	bl	8003764 <ssd1306_SetCursor>
	  ssd1306_WriteString("BattV   ", Font_7x10, White);
 800324a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800324e:	2301      	movs	r3, #1
 8003250:	4821      	ldr	r0, [pc, #132]	; (80032d8 <main+0x378>)
 8003252:	f000 fa71 	bl	8003738 <ssd1306_WriteString>
	  ssd1306_SetCursor(52,49);
 8003256:	2131      	movs	r1, #49	; 0x31
 8003258:	2034      	movs	r0, #52	; 0x34
 800325a:	f000 fa83 	bl	8003764 <ssd1306_SetCursor>
	  ssd1306_WriteString(battVString, Font_7x10, White);
 800325e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003262:	2301      	movs	r3, #1
 8003264:	a80f      	add	r0, sp, #60	; 0x3c
 8003266:	f000 fa67 	bl	8003738 <ssd1306_WriteString>
 800326a:	e037      	b.n	80032dc <main+0x37c>
 800326c:	40021000 	.word	0x40021000
 8003270:	20000af8 	.word	0x20000af8
 8003274:	20000b98 	.word	0x20000b98
 8003278:	20000c98 	.word	0x20000c98
 800327c:	48000400 	.word	0x48000400
 8003280:	10110000 	.word	0x10110000
 8003284:	48000800 	.word	0x48000800
 8003288:	10210000 	.word	0x10210000
 800328c:	40007400 	.word	0x40007400
 8003290:	20000b0c 	.word	0x20000b0c
 8003294:	40005400 	.word	0x40005400
 8003298:	2000090e 	.word	0x2000090e
 800329c:	40001000 	.word	0x40001000
 80032a0:	20000bd8 	.word	0x20000bd8
 80032a4:	40004400 	.word	0x40004400
 80032a8:	40001400 	.word	0x40001400
 80032ac:	20000c58 	.word	0x20000c58
 80032b0:	40014400 	.word	0x40014400
 80032b4:	20000b58 	.word	0x20000b58
 80032b8:	40014800 	.word	0x40014800
 80032bc:	20000008 	.word	0x20000008
 80032c0:	08007df4 	.word	0x08007df4
 80032c4:	08007dfd 	.word	0x08007dfd
 80032c8:	20000010 	.word	0x20000010
 80032cc:	08007e04 	.word	0x08007e04
 80032d0:	08007e0b 	.word	0x08007e0b
 80032d4:	08007e13 	.word	0x08007e13
 80032d8:	08007e19 	.word	0x08007e19
	  lastReadBattV = battV;
 80032dc:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <main+0x390>)
 80032de:	9a03      	ldr	r2, [sp, #12]
 80032e0:	601a      	str	r2, [r3, #0]
	  ssd1306_UpdateScreen();
 80032e2:	f000 f92b 	bl	800353c <ssd1306_UpdateScreen>
	  HAL_Delay(1000); //Update rate to 1s
 80032e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032ea:	f7fd fea1 	bl	8001030 <HAL_Delay>
 80032ee:	e740      	b.n	8003172 <main+0x212>
 80032f0:	200006b0 	.word	0x200006b0

080032f4 <HAL_GPIO_EXTI_Callback>:

}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin == S2_INTERRUPT_Pin || GPIO_Pin == S1_INTERRUPT_Pin)
 80032f4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80032f8:	d002      	beq.n	8003300 <HAL_GPIO_EXTI_Callback+0xc>
 80032fa:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80032fe:	d102      	bne.n	8003306 <HAL_GPIO_EXTI_Callback+0x12>
	{
		//S2 has been pressed, start software debouncing
		HAL_TIM_Base_Start_IT(&htim6);
 8003300:	4801      	ldr	r0, [pc, #4]	; (8003308 <HAL_GPIO_EXTI_Callback+0x14>)
 8003302:	f7ff b8dd 	b.w	80024c0 <HAL_TIM_Base_Start_IT>
 8003306:	4770      	bx	lr
 8003308:	20000b98 	.word	0x20000b98
 800330c:	00000000 	.word	0x00000000

08003310 <Discharging_Set>:
	}
}

//Where pct should be 0 - 100
void Discharging_Set(uint8_t pct)
{
 8003310:	2864      	cmp	r0, #100	; 0x64
 8003312:	b538      	push	{r3, r4, r5, lr}
 8003314:	bf28      	it	cs
 8003316:	2064      	movcs	r0, #100	; 0x64
 8003318:	4605      	mov	r5, r0
	{
		pct = 100;
	}
	//DAC is 12 bit resolution - 0 - 4095 data codes which translates to 0 - 3.3V analog

	uint32_t dacCode = (uint32_t)(( pct / 100.0 ) * 4095.0);
 800331a:	f7fd f90b 	bl	8000534 <__aeabi_i2d>
 800331e:	2200      	movs	r2, #0
 8003320:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <Discharging_Set+0x50>)
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacCode);
 8003322:	4c10      	ldr	r4, [pc, #64]	; (8003364 <Discharging_Set+0x54>)
	uint32_t dacCode = (uint32_t)(( pct / 100.0 ) * 4095.0);
 8003324:	f7fd fa96 	bl	8000854 <__aeabi_ddiv>
 8003328:	a30b      	add	r3, pc, #44	; (adr r3, 8003358 <Discharging_Set+0x48>)
 800332a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332e:	f7fd f967 	bl	8000600 <__aeabi_dmul>
 8003332:	f7fd fc3d 	bl	8000bb0 <__aeabi_d2uiz>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacCode);
 8003336:	2200      	movs	r2, #0
 8003338:	4603      	mov	r3, r0
 800333a:	4611      	mov	r1, r2
 800333c:	4620      	mov	r0, r4
 800333e:	f7fd ff09 	bl	8001154 <HAL_DAC_SetValue>

	currentDchgPct = pct;
 8003342:	4b09      	ldr	r3, [pc, #36]	; (8003368 <Discharging_Set+0x58>)
 8003344:	701d      	strb	r5, [r3, #0]

	//Start DAC
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003346:	4620      	mov	r0, r4
 8003348:	2100      	movs	r1, #0
}
 800334a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800334e:	f7fd bf13 	b.w	8001178 <HAL_DAC_Start>
 8003352:	bf00      	nop
 8003354:	f3af 8000 	nop.w
 8003358:	00000000 	.word	0x00000000
 800335c:	40affe00 	.word	0x40affe00
 8003360:	40590000 	.word	0x40590000
 8003364:	20000af8 	.word	0x20000af8
 8003368:	200006ac 	.word	0x200006ac

0800336c <Change_State.part.1>:
	{
		HAL_GPIO_WritePin(GPIOB, CHG_EN_Pin, GPIO_PIN_RESET);
	}
}

void Change_State(STATE new_state)
 800336c:	b508      	push	{r3, lr}
		HAL_GPIO_WritePin(GPIOB, CHG_EN_Pin, GPIO_PIN_SET);
 800336e:	4805      	ldr	r0, [pc, #20]	; (8003384 <Change_State.part.1+0x18>)
 8003370:	2201      	movs	r2, #1
 8003372:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003376:	f7fe f84d 	bl	8001414 <HAL_GPIO_WritePin>
	}
	//CHARGING
	else if(currentState == CHG)
	{
		Charging_Enable(CHG_ENABLE);
		Discharging_Set(0); //Set discharge current to 0A
 800337a:	2000      	movs	r0, #0
	}
	else
	{
		//HANDLE DEFAULT CASE - MISRA C
	}
}
 800337c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Discharging_Set(0); //Set discharge current to 0A
 8003380:	f7ff bfc6 	b.w	8003310 <Discharging_Set>
 8003384:	48000400 	.word	0x48000400

08003388 <Charging_Enable>:
	if(chg_en == CHG_ENABLE)
 8003388:	2801      	cmp	r0, #1
{
 800338a:	4602      	mov	r2, r0
		HAL_GPIO_WritePin(GPIOB, CHG_EN_Pin, GPIO_PIN_RESET);
 800338c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003390:	bf18      	it	ne
 8003392:	2200      	movne	r2, #0
 8003394:	4801      	ldr	r0, [pc, #4]	; (800339c <Charging_Enable+0x14>)
 8003396:	f7fe b83d 	b.w	8001414 <HAL_GPIO_WritePin>
 800339a:	bf00      	nop
 800339c:	48000400 	.word	0x48000400

080033a0 <Change_State>:
	currentState = new_state;
 80033a0:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <Change_State+0x34>)
{
 80033a2:	b510      	push	{r4, lr}
 80033a4:	4604      	mov	r4, r0
	currentState = new_state;
 80033a6:	7018      	strb	r0, [r3, #0]
	if(currentState == IDLE)
 80033a8:	b930      	cbnz	r0, 80033b8 <Change_State+0x18>
		Charging_Enable(CHG_DISABLE);
 80033aa:	f7ff ffed 	bl	8003388 <Charging_Enable>
		Discharging_Set(0); //Set discharge current to 0A
 80033ae:	4620      	mov	r0, r4
}
 80033b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Discharging_Set(10); //Set discharge current to 10%
 80033b4:	f7ff bfac 	b.w	8003310 <Discharging_Set>
	else if(currentState == CHG)
 80033b8:	2801      	cmp	r0, #1
 80033ba:	d103      	bne.n	80033c4 <Change_State+0x24>
}
 80033bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033c0:	f7ff bfd4 	b.w	800336c <Change_State.part.1>
	else if (currentState == DCHG)
 80033c4:	2802      	cmp	r0, #2
 80033c6:	d104      	bne.n	80033d2 <Change_State+0x32>
		Charging_Enable(CHG_DISABLE);
 80033c8:	2000      	movs	r0, #0
 80033ca:	f7ff ffdd 	bl	8003388 <Charging_Enable>
		Discharging_Set(10); //Set discharge current to 10%
 80033ce:	200a      	movs	r0, #10
 80033d0:	e7ee      	b.n	80033b0 <Change_State+0x10>
 80033d2:	bd10      	pop	{r4, pc}
 80033d4:	200006ad 	.word	0x200006ad

080033d8 <Safety_Loop>:

void Safety_Loop()
{
 80033d8:	b508      	push	{r3, lr}
	//Undervoltage - 2.8V
	if(lastReadBattV < 2.8)
 80033da:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <Safety_Loop+0x30>)
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	f7fd f8bb 	bl	8000558 <__aeabi_f2d>
 80033e2:	a307      	add	r3, pc, #28	; (adr r3, 8003400 <Safety_Loop+0x28>)
 80033e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e8:	f7fd fb7c 	bl	8000ae4 <__aeabi_dcmplt>
 80033ec:	b120      	cbz	r0, 80033f8 <Safety_Loop+0x20>
	{
		//Stop charging, stop discharging
		Change_State(IDLE);
 80033ee:	2000      	movs	r0, #0
	//Overvoltage

	//Overtemperature

	//Overcurrent
}
 80033f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Change_State(IDLE);
 80033f4:	f7ff bfd4 	b.w	80033a0 <Change_State>
 80033f8:	bd08      	pop	{r3, pc}
 80033fa:	bf00      	nop
 80033fc:	f3af 8000 	nop.w
 8003400:	66666666 	.word	0x66666666
 8003404:	40066666 	.word	0x40066666
 8003408:	200006b0 	.word	0x200006b0

0800340c <HAL_TIM_PeriodElapsedCallback>:
	if(htim == &htim6){
 800340c:	4b32      	ldr	r3, [pc, #200]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800340e:	4298      	cmp	r0, r3
{
 8003410:	b510      	push	{r4, lr}
	if(htim == &htim6){
 8003412:	d143      	bne.n	800349c <HAL_TIM_PeriodElapsedCallback+0x90>
		HAL_GPIO_TogglePin(LED_USR1_GPIO_Port, LED_USR1_Pin); //LED1 toggles every 0.5 seconds
 8003414:	2108      	movs	r1, #8
 8003416:	4831      	ldr	r0, [pc, #196]	; (80034dc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003418:	4c31      	ldr	r4, [pc, #196]	; (80034e0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800341a:	f7fe f800 	bl	800141e <HAL_GPIO_TogglePin>
		if(HAL_GPIO_ReadPin(GPIOA, S1_INTERRUPT_Pin) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOA, S2_INTERRUPT_Pin) == GPIO_PIN_RESET)
 800341e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003426:	f7fd ffef 	bl	8001408 <HAL_GPIO_ReadPin>
 800342a:	b9b8      	cbnz	r0, 800345c <HAL_TIM_PeriodElapsedCallback+0x50>
 800342c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003430:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003434:	f7fd ffe8 	bl	8001408 <HAL_GPIO_ReadPin>
 8003438:	b980      	cbnz	r0, 800345c <HAL_TIM_PeriodElapsedCallback+0x50>
			if(currentState == IDLE)
 800343a:	7823      	ldrb	r3, [r4, #0]
 800343c:	b943      	cbnz	r3, 8003450 <HAL_TIM_PeriodElapsedCallback+0x44>
	currentState = new_state;
 800343e:	2301      	movs	r3, #1
 8003440:	7023      	strb	r3, [r4, #0]
 8003442:	f7ff ff93 	bl	800336c <Change_State.part.1>
		HAL_TIM_Base_Stop_IT(&htim6);
 8003446:	4824      	ldr	r0, [pc, #144]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
}
 8003448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_TIM_Base_Stop_IT(&htim6);
 800344c:	f7ff b84e 	b.w	80024ec <HAL_TIM_Base_Stop_IT>
			else if(currentState == CHG)
 8003450:	2b01      	cmp	r3, #1
				Change_State(DCHG);
 8003452:	bf08      	it	eq
 8003454:	2002      	moveq	r0, #2
				Change_State(IDLE);
 8003456:	f7ff ffa3 	bl	80033a0 <Change_State>
 800345a:	e7f4      	b.n	8003446 <HAL_TIM_PeriodElapsedCallback+0x3a>
		else if(currentState == DCHG && HAL_GPIO_ReadPin(GPIOA, S1_INTERRUPT_Pin) == GPIO_PIN_RESET)
 800345c:	7823      	ldrb	r3, [r4, #0]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d10d      	bne.n	800347e <HAL_TIM_PeriodElapsedCallback+0x72>
 8003462:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800346a:	f7fd ffcd 	bl	8001408 <HAL_GPIO_ReadPin>
 800346e:	b930      	cbnz	r0, 800347e <HAL_TIM_PeriodElapsedCallback+0x72>
			uint8_t newDchgPct = currentDchgPct + 10;
 8003470:	4b1c      	ldr	r3, [pc, #112]	; (80034e4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003472:	7818      	ldrb	r0, [r3, #0]
 8003474:	300a      	adds	r0, #10
			Discharging_Set(newDchgPct);
 8003476:	b2c0      	uxtb	r0, r0
 8003478:	f7ff ff4a 	bl	8003310 <Discharging_Set>
 800347c:	e7e3      	b.n	8003446 <HAL_TIM_PeriodElapsedCallback+0x3a>
		else if(currentState == DCHG && HAL_GPIO_ReadPin(GPIOA, S2_INTERRUPT_Pin) == GPIO_PIN_RESET)
 800347e:	7823      	ldrb	r3, [r4, #0]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d1e0      	bne.n	8003446 <HAL_TIM_PeriodElapsedCallback+0x3a>
 8003484:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800348c:	f7fd ffbc 	bl	8001408 <HAL_GPIO_ReadPin>
 8003490:	2800      	cmp	r0, #0
 8003492:	d1d8      	bne.n	8003446 <HAL_TIM_PeriodElapsedCallback+0x3a>
			uint8_t newDchgPct = currentDchgPct - 10;
 8003494:	4b13      	ldr	r3, [pc, #76]	; (80034e4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003496:	7818      	ldrb	r0, [r3, #0]
 8003498:	380a      	subs	r0, #10
 800349a:	e7ec      	b.n	8003476 <HAL_TIM_PeriodElapsedCallback+0x6a>
	else if(htim == &htim7){
 800349c:	4b12      	ldr	r3, [pc, #72]	; (80034e8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800349e:	4298      	cmp	r0, r3
 80034a0:	d103      	bne.n	80034aa <HAL_TIM_PeriodElapsedCallback+0x9e>
}
 80034a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Safety_Loop(); //Safety loop run every 0.5 seconds
 80034a6:	f7ff bf97 	b.w	80033d8 <Safety_Loop>
	else if(htim == &htim16){ //This timer ticks every one second and is used for charge remaning calculation
 80034aa:	4b10      	ldr	r3, [pc, #64]	; (80034ec <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80034ac:	4298      	cmp	r0, r3
 80034ae:	d111      	bne.n	80034d4 <HAL_TIM_PeriodElapsedCallback+0xc8>
		if(currentState == DCHG || currentState == CHG){
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	3b01      	subs	r3, #1
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d80c      	bhi.n	80034d4 <HAL_TIM_PeriodElapsedCallback+0xc8>
			currChargeRemaining += calcdeltaAh(1, lastReadCurr / 1000.0);
 80034ba:	eddf 0a0d 	vldr	s1, [pc, #52]	; 80034f0 <HAL_TIM_PeriodElapsedCallback+0xe4>
 80034be:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80034c2:	f000 f955 	bl	8003770 <calcdeltaAh>
 80034c6:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80034c8:	edd3 7a00 	vldr	s15, [r3]
 80034cc:	ee37 0a80 	vadd.f32	s0, s15, s0
 80034d0:	ed83 0a00 	vstr	s0, [r3]
 80034d4:	bd10      	pop	{r4, pc}
 80034d6:	bf00      	nop
 80034d8:	20000b98 	.word	0x20000b98
 80034dc:	48000400 	.word	0x48000400
 80034e0:	200006ad 	.word	0x200006ad
 80034e4:	200006ac 	.word	0x200006ac
 80034e8:	20000c98 	.word	0x20000c98
 80034ec:	20000c58 	.word	0x20000c58
 80034f0:	00000000 	.word	0x00000000
 80034f4:	200006a8 	.word	0x200006a8

080034f8 <ssd1306_WriteCommand>:


static SSD1306_t SSD1306;

void ssd1306_WriteCommand(uint8_t command)
{
 80034f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80034fa:	aa06      	add	r2, sp, #24
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80034fc:	230a      	movs	r3, #10
{
 80034fe:	f802 0d01 	strb.w	r0, [r2, #-1]!
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8003502:	9302      	str	r3, [sp, #8]
 8003504:	2301      	movs	r3, #1
 8003506:	e88d 000c 	stmia.w	sp, {r2, r3}
 800350a:	2178      	movs	r1, #120	; 0x78
 800350c:	2200      	movs	r2, #0
 800350e:	4803      	ldr	r0, [pc, #12]	; (800351c <ssd1306_WriteCommand+0x24>)
 8003510:	f7fe f92a 	bl	8001768 <HAL_I2C_Mem_Write>
}
 8003514:	b007      	add	sp, #28
 8003516:	f85d fb04 	ldr.w	pc, [sp], #4
 800351a:	bf00      	nop
 800351c:	20000b0c 	.word	0x20000b0c

08003520 <ssd1306_Fill>:
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003520:	4905      	ldr	r1, [pc, #20]	; (8003538 <ssd1306_Fill+0x18>)
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8003522:	2300      	movs	r3, #0
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003524:	1c02      	adds	r2, r0, #0
 8003526:	bf18      	it	ne
 8003528:	2201      	movne	r2, #1
 800352a:	4252      	negs	r2, r2
 800352c:	545a      	strb	r2, [r3, r1]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800352e:	3301      	adds	r3, #1
 8003530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003534:	d1f6      	bne.n	8003524 <ssd1306_Fill+0x4>
	}
}
 8003536:	4770      	bx	lr
 8003538:	200006ba 	.word	0x200006ba

0800353c <ssd1306_UpdateScreen>:

void ssd1306_UpdateScreen(void)
{
 800353c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	for (i = 0; i < 8; i++) {
		ssd1306_WriteCommand(0xB0 + i);
		ssd1306_WriteCommand(0x00);
		ssd1306_WriteCommand(0x10);

		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 800353e:	4e10      	ldr	r6, [pc, #64]	; (8003580 <ssd1306_UpdateScreen+0x44>)
 8003540:	4d10      	ldr	r5, [pc, #64]	; (8003584 <ssd1306_UpdateScreen+0x48>)
{
 8003542:	2400      	movs	r4, #0
		ssd1306_WriteCommand(0xB0 + i);
 8003544:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 8003548:	b2c0      	uxtb	r0, r0
 800354a:	f7ff ffd5 	bl	80034f8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 800354e:	2000      	movs	r0, #0
 8003550:	f7ff ffd2 	bl	80034f8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8003554:	2010      	movs	r0, #16
 8003556:	f7ff ffcf 	bl	80034f8 <ssd1306_WriteCommand>
		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 800355a:	2364      	movs	r3, #100	; 0x64
 800355c:	9302      	str	r3, [sp, #8]
 800355e:	2380      	movs	r3, #128	; 0x80
 8003560:	9301      	str	r3, [sp, #4]
 8003562:	eb06 13c4 	add.w	r3, r6, r4, lsl #7
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	2240      	movs	r2, #64	; 0x40
 800356a:	2301      	movs	r3, #1
 800356c:	2178      	movs	r1, #120	; 0x78
 800356e:	4628      	mov	r0, r5
 8003570:	3401      	adds	r4, #1
 8003572:	f7fe f8f9 	bl	8001768 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8003576:	2c08      	cmp	r4, #8
 8003578:	d1e4      	bne.n	8003544 <ssd1306_UpdateScreen+0x8>
	}
}
 800357a:	b004      	add	sp, #16
 800357c:	bd70      	pop	{r4, r5, r6, pc}
 800357e:	bf00      	nop
 8003580:	200006ba 	.word	0x200006ba
 8003584:	20000b0c 	.word	0x20000b0c

08003588 <ssd1306_Init>:
{
 8003588:	b508      	push	{r3, lr}
	HAL_Delay(100);
 800358a:	2064      	movs	r0, #100	; 0x64
 800358c:	f7fd fd50 	bl	8001030 <HAL_Delay>
	ssd1306_WriteCommand(0xAE); //display off
 8003590:	20ae      	movs	r0, #174	; 0xae
 8003592:	f7ff ffb1 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003596:	2020      	movs	r0, #32
 8003598:	f7ff ffae 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800359c:	2010      	movs	r0, #16
 800359e:	f7ff ffab 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80035a2:	20b0      	movs	r0, #176	; 0xb0
 80035a4:	f7ff ffa8 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80035a8:	20c8      	movs	r0, #200	; 0xc8
 80035aa:	f7ff ffa5 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 80035ae:	2000      	movs	r0, #0
 80035b0:	f7ff ffa2 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 80035b4:	2010      	movs	r0, #16
 80035b6:	f7ff ff9f 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 80035ba:	2040      	movs	r0, #64	; 0x40
 80035bc:	f7ff ff9c 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 80035c0:	2081      	movs	r0, #129	; 0x81
 80035c2:	f7ff ff99 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 80035c6:	20ff      	movs	r0, #255	; 0xff
 80035c8:	f7ff ff96 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80035cc:	20a1      	movs	r0, #161	; 0xa1
 80035ce:	f7ff ff93 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80035d2:	20a6      	movs	r0, #166	; 0xa6
 80035d4:	f7ff ff90 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80035d8:	20a8      	movs	r0, #168	; 0xa8
 80035da:	f7ff ff8d 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 80035de:	203f      	movs	r0, #63	; 0x3f
 80035e0:	f7ff ff8a 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80035e4:	20a4      	movs	r0, #164	; 0xa4
 80035e6:	f7ff ff87 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 80035ea:	20d3      	movs	r0, #211	; 0xd3
 80035ec:	f7ff ff84 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80035f0:	2000      	movs	r0, #0
 80035f2:	f7ff ff81 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80035f6:	20d5      	movs	r0, #213	; 0xd5
 80035f8:	f7ff ff7e 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80035fc:	20f0      	movs	r0, #240	; 0xf0
 80035fe:	f7ff ff7b 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003602:	20d9      	movs	r0, #217	; 0xd9
 8003604:	f7ff ff78 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8003608:	2022      	movs	r0, #34	; 0x22
 800360a:	f7ff ff75 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 800360e:	20da      	movs	r0, #218	; 0xda
 8003610:	f7ff ff72 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8003614:	2012      	movs	r0, #18
 8003616:	f7ff ff6f 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 800361a:	20db      	movs	r0, #219	; 0xdb
 800361c:	f7ff ff6c 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003620:	2020      	movs	r0, #32
 8003622:	f7ff ff69 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003626:	208d      	movs	r0, #141	; 0x8d
 8003628:	f7ff ff66 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 800362c:	2014      	movs	r0, #20
 800362e:	f7ff ff63 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8003632:	20af      	movs	r0, #175	; 0xaf
 8003634:	f7ff ff60 	bl	80034f8 <ssd1306_WriteCommand>
	ssd1306_Fill(Black);
 8003638:	2000      	movs	r0, #0
 800363a:	f7ff ff71 	bl	8003520 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 800363e:	f7ff ff7d 	bl	800353c <ssd1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8003642:	4b03      	ldr	r3, [pc, #12]	; (8003650 <ssd1306_Init+0xc8>)
	SSD1306.Initialized = 1;
 8003644:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 8003646:	2200      	movs	r2, #0
	SSD1306.Initialized = 1;
 8003648:	7158      	strb	r0, [r3, #5]
	SSD1306.CurrentX = 0;
 800364a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800364c:	805a      	strh	r2, [r3, #2]
}
 800364e:	bd08      	pop	{r3, pc}
 8003650:	200006b4 	.word	0x200006b4

08003654 <ssd1306_DrawPixel>:

void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8003654:	0603      	lsls	r3, r0, #24
{
 8003656:	b530      	push	{r4, r5, lr}
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8003658:	d41b      	bmi.n	8003692 <ssd1306_DrawPixel+0x3e>
 800365a:	293f      	cmp	r1, #63	; 0x3f
 800365c:	d819      	bhi.n	8003692 <ssd1306_DrawPixel+0x3e>
	{
		return;
	}

	if (SSD1306.Inverted)
 800365e:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <ssd1306_DrawPixel+0x40>)
 8003660:	791b      	ldrb	r3, [r3, #4]
 8003662:	b113      	cbz	r3, 800366a <ssd1306_DrawPixel+0x16>
	{
		color = (SSD1306_COLOR)!color;
 8003664:	fab2 f282 	clz	r2, r2
 8003668:	0952      	lsrs	r2, r2, #5
 800366a:	08cb      	lsrs	r3, r1, #3
 800366c:	2580      	movs	r5, #128	; 0x80
	}

	if (color == White)
 800366e:	2a01      	cmp	r2, #1
 8003670:	4c09      	ldr	r4, [pc, #36]	; (8003698 <ssd1306_DrawPixel+0x44>)
 8003672:	f001 0107 	and.w	r1, r1, #7
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003676:	fb05 0003 	mla	r0, r5, r3, r0
	if (color == White)
 800367a:	d104      	bne.n	8003686 <ssd1306_DrawPixel+0x32>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800367c:	408a      	lsls	r2, r1
 800367e:	5c21      	ldrb	r1, [r4, r0]
 8003680:	430a      	orrs	r2, r1
 8003682:	5422      	strb	r2, [r4, r0]
 8003684:	bd30      	pop	{r4, r5, pc}
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003686:	2201      	movs	r2, #1
 8003688:	408a      	lsls	r2, r1
 800368a:	5c21      	ldrb	r1, [r4, r0]
 800368c:	ea21 0102 	bic.w	r1, r1, r2
 8003690:	5421      	strb	r1, [r4, r0]
 8003692:	bd30      	pop	{r4, r5, pc}
 8003694:	200006b4 	.word	0x200006b4
 8003698:	200006ba 	.word	0x200006ba

0800369c <ssd1306_WriteChar>:
	}
}

//	color 	=> Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 800369c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a0:	b087      	sub	sp, #28
 80036a2:	4607      	mov	r7, r0
 80036a4:	a806      	add	r0, sp, #24
 80036a6:	e900 0006 	stmdb	r0, {r1, r2}
 80036aa:	469b      	mov	fp, r3
	uint32_t i, b, j;

	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80036ac:	4b21      	ldr	r3, [pc, #132]	; (8003734 <ssd1306_WriteChar+0x98>)
 80036ae:	f89d 9010 	ldrb.w	r9, [sp, #16]
 80036b2:	881c      	ldrh	r4, [r3, #0]
 80036b4:	9301      	str	r3, [sp, #4]
 80036b6:	eb04 0209 	add.w	r2, r4, r9
 80036ba:	2a7f      	cmp	r2, #127	; 0x7f
 80036bc:	dc37      	bgt.n	800372e <ssd1306_WriteChar+0x92>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80036be:	885b      	ldrh	r3, [r3, #2]
 80036c0:	f89d a011 	ldrb.w	sl, [sp, #17]
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	eb03 020a 	add.w	r2, r3, sl
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80036ca:	2a3f      	cmp	r2, #63	; 0x3f
 80036cc:	dc2f      	bgt.n	800372e <ssd1306_WriteChar+0x92>
		return 0;
	}

	for (i = 0; i < Font.FontHeight; i++)
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80036ce:	f1a7 0220 	sub.w	r2, r7, #32
 80036d2:	fb0a f302 	mul.w	r3, sl, r2
 80036d6:	9303      	str	r3, [sp, #12]
 80036d8:	2600      	movs	r6, #0
	for (i = 0; i < Font.FontHeight; i++)
 80036da:	4556      	cmp	r6, sl
 80036dc:	d306      	bcc.n	80036ec <ssd1306_WriteChar+0x50>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
			}
		}
	}

	SSD1306.CurrentX += Font.FontWidth;
 80036de:	9b01      	ldr	r3, [sp, #4]
 80036e0:	444c      	add	r4, r9
 80036e2:	801c      	strh	r4, [r3, #0]


	return ch;
}
 80036e4:	4638      	mov	r0, r7
 80036e6:	b007      	add	sp, #28
 80036e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80036ec:	9b03      	ldr	r3, [sp, #12]
 80036ee:	9905      	ldr	r1, [sp, #20]
 80036f0:	18f2      	adds	r2, r6, r3
		for (j = 0; j < Font.FontWidth; j++)
 80036f2:	2500      	movs	r5, #0
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80036f4:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 80036f8:	9302      	str	r3, [sp, #8]
 80036fa:	9b00      	ldr	r3, [sp, #0]
 80036fc:	eb03 0806 	add.w	r8, r3, r6
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003700:	fa5f f888 	uxtb.w	r8, r8
		for (j = 0; j < Font.FontWidth; j++)
 8003704:	454d      	cmp	r5, r9
 8003706:	d301      	bcc.n	800370c <ssd1306_WriteChar+0x70>
	for (i = 0; i < Font.FontHeight; i++)
 8003708:	3601      	adds	r6, #1
 800370a:	e7e6      	b.n	80036da <ssd1306_WriteChar+0x3e>
			if ((b << j) & 0x8000)
 800370c:	9b02      	ldr	r3, [sp, #8]
 800370e:	fa03 f205 	lsl.w	r2, r3, r5
 8003712:	0413      	lsls	r3, r2, #16
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003714:	eb05 0004 	add.w	r0, r5, r4
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003718:	bf56      	itet	pl
 800371a:	fabb f28b 	clzpl	r2, fp
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800371e:	465a      	movmi	r2, fp
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003720:	0952      	lsrpl	r2, r2, #5
 8003722:	4641      	mov	r1, r8
 8003724:	b2c0      	uxtb	r0, r0
 8003726:	f7ff ff95 	bl	8003654 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 800372a:	3501      	adds	r5, #1
 800372c:	e7ea      	b.n	8003704 <ssd1306_WriteChar+0x68>
		return 0;
 800372e:	2700      	movs	r7, #0
 8003730:	e7d8      	b.n	80036e4 <ssd1306_WriteChar+0x48>
 8003732:	bf00      	nop
 8003734:	200006b4 	.word	0x200006b4

08003738 <ssd1306_WriteString>:

char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8003738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800373a:	e88d 0006 	stmia.w	sp, {r1, r2}
 800373e:	466d      	mov	r5, sp
 8003740:	461f      	mov	r7, r3
 8003742:	1e46      	subs	r6, r0, #1

	while (*str)
 8003744:	7874      	ldrb	r4, [r6, #1]
 8003746:	b14c      	cbz	r4, 800375c <ssd1306_WriteString+0x24>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8003748:	4620      	mov	r0, r4
 800374a:	463b      	mov	r3, r7
 800374c:	e895 0006 	ldmia.w	r5, {r1, r2}
 8003750:	f7ff ffa4 	bl	800369c <ssd1306_WriteChar>
 8003754:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 8003758:	42a0      	cmp	r0, r4
 800375a:	d0f3      	beq.n	8003744 <ssd1306_WriteString+0xc>
		str++;
	}


	return *str;
}
 800375c:	4620      	mov	r0, r4
 800375e:	b003      	add	sp, #12
 8003760:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003764 <ssd1306_SetCursor>:

void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003764:	4b01      	ldr	r3, [pc, #4]	; (800376c <ssd1306_SetCursor+0x8>)
 8003766:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8003768:	8059      	strh	r1, [r3, #2]
 800376a:	4770      	bx	lr
 800376c:	200006b4 	.word	0x200006b4

08003770 <calcdeltaAh>:
 * based on timeInterval in seconds and current in amps
 */
float calcdeltaAh(float timeInterval_s, float current_A){

	//Ah = A * hours
	float deltaAh = (-current_A * timeInterval_s / 3600.0);
 8003770:	ee20 0ac0 	vnmul.f32	s0, s1, s0

	return deltaAh;
}
 8003774:	eddf 7a02 	vldr	s15, [pc, #8]	; 8003780 <calcdeltaAh+0x10>
 8003778:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	45610000 	.word	0x45610000

08003784 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003784:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <HAL_MspInit+0x34>)
{
 8003786:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003788:	699a      	ldr	r2, [r3, #24]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	619a      	str	r2, [r3, #24]
 8003790:	699a      	ldr	r2, [r3, #24]
 8003792:	f002 0201 	and.w	r2, r2, #1
 8003796:	9200      	str	r2, [sp, #0]
 8003798:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800379a:	69da      	ldr	r2, [r3, #28]
 800379c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80037a0:	61da      	str	r2, [r3, #28]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a8:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80037aa:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 80037ac:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80037ae:	f7fd fc53 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037b2:	b003      	add	sp, #12
 80037b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80037b8:	40021000 	.word	0x40021000

080037bc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80037bc:	b510      	push	{r4, lr}
 80037be:	4604      	mov	r4, r0
 80037c0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c2:	2214      	movs	r2, #20
 80037c4:	2100      	movs	r1, #0
 80037c6:	a803      	add	r0, sp, #12
 80037c8:	f000 f9a6 	bl	8003b18 <memset>
  if(hdac->Instance==DAC1)
 80037cc:	6822      	ldr	r2, [r4, #0]
 80037ce:	4b15      	ldr	r3, [pc, #84]	; (8003824 <HAL_DAC_MspInit+0x68>)
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d124      	bne.n	800381e <HAL_DAC_MspInit+0x62>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80037d4:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = DCHG_SET_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(DCHG_SET_GPIO_Port, &GPIO_InitStruct);
 80037d8:	a903      	add	r1, sp, #12
    __HAL_RCC_DAC1_CLK_ENABLE();
 80037da:	69da      	ldr	r2, [r3, #28]
 80037dc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80037e0:	61da      	str	r2, [r3, #28]
 80037e2:	69da      	ldr	r2, [r3, #28]
 80037e4:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80037e8:	9201      	str	r2, [sp, #4]
 80037ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ec:	695a      	ldr	r2, [r3, #20]
 80037ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80037f2:	615a      	str	r2, [r3, #20]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fa:	9302      	str	r3, [sp, #8]
 80037fc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DCHG_SET_Pin;
 80037fe:	2310      	movs	r3, #16
 8003800:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(DCHG_SET_GPIO_Port, &GPIO_InitStruct);
 8003802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003806:	2303      	movs	r3, #3
 8003808:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(DCHG_SET_GPIO_Port, &GPIO_InitStruct);
 800380a:	f7fd fd2d 	bl	8001268 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800380e:	2200      	movs	r2, #0
 8003810:	2036      	movs	r0, #54	; 0x36
 8003812:	4611      	mov	r1, r2
 8003814:	f7fd fc32 	bl	800107c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003818:	2036      	movs	r0, #54	; 0x36
 800381a:	f7fd fc63 	bl	80010e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800381e:	b008      	add	sp, #32
 8003820:	bd10      	pop	{r4, pc}
 8003822:	bf00      	nop
 8003824:	40007400 	.word	0x40007400

08003828 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003828:	b510      	push	{r4, lr}
 800382a:	4604      	mov	r4, r0
 800382c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800382e:	2214      	movs	r2, #20
 8003830:	2100      	movs	r1, #0
 8003832:	a803      	add	r0, sp, #12
 8003834:	f000 f970 	bl	8003b18 <memset>
  if(hi2c->Instance==I2C1)
 8003838:	6822      	ldr	r2, [r4, #0]
 800383a:	4b12      	ldr	r3, [pc, #72]	; (8003884 <HAL_I2C_MspInit+0x5c>)
 800383c:	429a      	cmp	r2, r3
 800383e:	d11f      	bne.n	8003880 <HAL_I2C_MspInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003840:	4c11      	ldr	r4, [pc, #68]	; (8003888 <HAL_I2C_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003842:	4812      	ldr	r0, [pc, #72]	; (800388c <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003844:	6963      	ldr	r3, [r4, #20]
 8003846:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800384a:	6163      	str	r3, [r4, #20]
 800384c:	6963      	ldr	r3, [r4, #20]
 800384e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003856:	f44f 7340 	mov.w	r3, #768	; 0x300
 800385a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800385c:	2312      	movs	r3, #18
 800385e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003860:	2303      	movs	r3, #3
 8003862:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003864:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003866:	2304      	movs	r3, #4
 8003868:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800386a:	f7fd fcfd 	bl	8001268 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800386e:	69e3      	ldr	r3, [r4, #28]
 8003870:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003874:	61e3      	str	r3, [r4, #28]
 8003876:	69e3      	ldr	r3, [r4, #28]
 8003878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800387c:	9302      	str	r3, [sp, #8]
 800387e:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003880:	b008      	add	sp, #32
 8003882:	bd10      	pop	{r4, pc}
 8003884:	40005400 	.word	0x40005400
 8003888:	40021000 	.word	0x40021000
 800388c:	48000400 	.word	0x48000400

08003890 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(htim_base->Instance==TIM6)
 8003892:	6803      	ldr	r3, [r0, #0]
 8003894:	4a29      	ldr	r2, [pc, #164]	; (800393c <HAL_TIM_Base_MspInit+0xac>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d114      	bne.n	80038c4 <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800389a:	4b29      	ldr	r3, [pc, #164]	; (8003940 <HAL_TIM_Base_MspInit+0xb0>)
 800389c:	69da      	ldr	r2, [r3, #28]
 800389e:	f042 0210 	orr.w	r2, r2, #16
 80038a2:	61da      	str	r2, [r3, #28]
 80038a4:	69db      	ldr	r3, [r3, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80038a6:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80038ae:	2036      	movs	r0, #54	; 0x36
 80038b0:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 80038b2:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80038b4:	f7fd fbe2 	bl	800107c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80038b8:	2036      	movs	r0, #54	; 0x36
  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80038ba:	f7fd fc13 	bl	80010e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80038be:	b005      	add	sp, #20
 80038c0:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM7)
 80038c4:	4a1f      	ldr	r2, [pc, #124]	; (8003944 <HAL_TIM_Base_MspInit+0xb4>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d110      	bne.n	80038ec <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80038ca:	4b1d      	ldr	r3, [pc, #116]	; (8003940 <HAL_TIM_Base_MspInit+0xb0>)
 80038cc:	69da      	ldr	r2, [r3, #28]
 80038ce:	f042 0220 	orr.w	r2, r2, #32
 80038d2:	61da      	str	r2, [r3, #28]
 80038d4:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80038d6:	2200      	movs	r2, #0
    __HAL_RCC_TIM7_CLK_ENABLE();
 80038d8:	f003 0320 	and.w	r3, r3, #32
 80038dc:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80038de:	2037      	movs	r0, #55	; 0x37
 80038e0:	4611      	mov	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 80038e2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80038e4:	f7fd fbca 	bl	800107c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80038e8:	2037      	movs	r0, #55	; 0x37
 80038ea:	e7e6      	b.n	80038ba <HAL_TIM_Base_MspInit+0x2a>
  else if(htim_base->Instance==TIM16)
 80038ec:	4a16      	ldr	r2, [pc, #88]	; (8003948 <HAL_TIM_Base_MspInit+0xb8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d110      	bne.n	8003914 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80038f2:	4b13      	ldr	r3, [pc, #76]	; (8003940 <HAL_TIM_Base_MspInit+0xb0>)
 80038f4:	699a      	ldr	r2, [r3, #24]
 80038f6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80038fa:	619a      	str	r2, [r3, #24]
 80038fc:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80038fe:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003904:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003906:	2019      	movs	r0, #25
 8003908:	4611      	mov	r1, r2
    __HAL_RCC_TIM16_CLK_ENABLE();
 800390a:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800390c:	f7fd fbb6 	bl	800107c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003910:	2019      	movs	r0, #25
 8003912:	e7d2      	b.n	80038ba <HAL_TIM_Base_MspInit+0x2a>
  else if(htim_base->Instance==TIM17)
 8003914:	4a0d      	ldr	r2, [pc, #52]	; (800394c <HAL_TIM_Base_MspInit+0xbc>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d1d1      	bne.n	80038be <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800391a:	4b09      	ldr	r3, [pc, #36]	; (8003940 <HAL_TIM_Base_MspInit+0xb0>)
 800391c:	699a      	ldr	r2, [r3, #24]
 800391e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003922:	619a      	str	r2, [r3, #24]
 8003924:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8003926:	2200      	movs	r2, #0
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003928:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800392c:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800392e:	201a      	movs	r0, #26
 8003930:	4611      	mov	r1, r2
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003932:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8003934:	f7fd fba2 	bl	800107c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003938:	201a      	movs	r0, #26
 800393a:	e7be      	b.n	80038ba <HAL_TIM_Base_MspInit+0x2a>
 800393c:	40001000 	.word	0x40001000
 8003940:	40021000 	.word	0x40021000
 8003944:	40001400 	.word	0x40001400
 8003948:	40014400 	.word	0x40014400
 800394c:	40014800 	.word	0x40014800

08003950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003950:	b510      	push	{r4, lr}
 8003952:	4604      	mov	r4, r0
 8003954:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003956:	2214      	movs	r2, #20
 8003958:	2100      	movs	r1, #0
 800395a:	a803      	add	r0, sp, #12
 800395c:	f000 f8dc 	bl	8003b18 <memset>
  if(huart->Instance==USART2)
 8003960:	6822      	ldr	r2, [r4, #0]
 8003962:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <HAL_UART_MspInit+0x60>)
 8003964:	429a      	cmp	r2, r3
 8003966:	d120      	bne.n	80039aa <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003968:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800396c:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 800396e:	69da      	ldr	r2, [r3, #28]
 8003970:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003974:	61da      	str	r2, [r3, #28]
 8003976:	69da      	ldr	r2, [r3, #28]
 8003978:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800397c:	9201      	str	r2, [sp, #4]
 800397e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003980:	695a      	ldr	r2, [r3, #20]
 8003982:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003986:	615a      	str	r2, [r3, #20]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	9302      	str	r3, [sp, #8]
 8003990:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003992:	230c      	movs	r3, #12
 8003994:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003996:	2302      	movs	r3, #2
 8003998:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800399a:	2303      	movs	r3, #3
 800399c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800399e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039a2:	2307      	movs	r3, #7
 80039a4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a6:	f7fd fc5f 	bl	8001268 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80039aa:	b008      	add	sp, #32
 80039ac:	bd10      	pop	{r4, pc}
 80039ae:	bf00      	nop
 80039b0:	40004400 	.word	0x40004400

080039b4 <NMI_Handler>:
 80039b4:	4770      	bx	lr

080039b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039b6:	e7fe      	b.n	80039b6 <HardFault_Handler>

080039b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039b8:	e7fe      	b.n	80039b8 <MemManage_Handler>

080039ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039ba:	e7fe      	b.n	80039ba <BusFault_Handler>

080039bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039bc:	e7fe      	b.n	80039bc <UsageFault_Handler>

080039be <SVC_Handler>:
 80039be:	4770      	bx	lr

080039c0 <DebugMon_Handler>:
 80039c0:	4770      	bx	lr

080039c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039c2:	4770      	bx	lr

080039c4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039c4:	f7fd bb22 	b.w	800100c <HAL_IncTick>

080039c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80039c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80039ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 80039ce:	f7fd fd2d 	bl	800142c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80039d2:	f44f 7000 	mov.w	r0, #512	; 0x200
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80039d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80039da:	f7fd bd27 	b.w	800142c <HAL_GPIO_EXTI_IRQHandler>
	...

080039e0 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80039e0:	4801      	ldr	r0, [pc, #4]	; (80039e8 <TIM1_UP_TIM16_IRQHandler+0x8>)
 80039e2:	f7fe bd9c 	b.w	800251e <HAL_TIM_IRQHandler>
 80039e6:	bf00      	nop
 80039e8:	20000c58 	.word	0x20000c58

080039ec <TIM1_TRG_COM_TIM17_IRQHandler>:
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80039ec:	4801      	ldr	r0, [pc, #4]	; (80039f4 <TIM1_TRG_COM_TIM17_IRQHandler+0x8>)
 80039ee:	f7fe bd96 	b.w	800251e <HAL_TIM_IRQHandler>
 80039f2:	bf00      	nop
 80039f4:	20000b58 	.word	0x20000b58

080039f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80039f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80039fa:	4804      	ldr	r0, [pc, #16]	; (8003a0c <TIM6_DAC_IRQHandler+0x14>)
 80039fc:	f7fe fd8f 	bl	800251e <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8003a00:	4803      	ldr	r0, [pc, #12]	; (8003a10 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003a02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DAC_IRQHandler(&hdac1);
 8003a06:	f7fd bbff 	b.w	8001208 <HAL_DAC_IRQHandler>
 8003a0a:	bf00      	nop
 8003a0c:	20000b98 	.word	0x20000b98
 8003a10:	20000af8 	.word	0x20000af8

08003a14 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003a14:	4801      	ldr	r0, [pc, #4]	; (8003a1c <TIM7_IRQHandler+0x8>)
 8003a16:	f7fe bd82 	b.w	800251e <HAL_TIM_IRQHandler>
 8003a1a:	bf00      	nop
 8003a1c:	20000c98 	.word	0x20000c98

08003a20 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003a20:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003a22:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <_sbrk+0x2c>)
 8003a24:	6819      	ldr	r1, [r3, #0]
{
 8003a26:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003a28:	b909      	cbnz	r1, 8003a2e <_sbrk+0xe>
		heap_end = &end;
 8003a2a:	4909      	ldr	r1, [pc, #36]	; (8003a50 <_sbrk+0x30>)
 8003a2c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8003a2e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003a30:	4669      	mov	r1, sp
 8003a32:	4402      	add	r2, r0
 8003a34:	428a      	cmp	r2, r1
 8003a36:	d906      	bls.n	8003a46 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003a38:	f000 f844 	bl	8003ac4 <__errno>
 8003a3c:	230c      	movs	r3, #12
 8003a3e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a44:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8003a46:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8003a48:	bd08      	pop	{r3, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000abc 	.word	0x20000abc
 8003a50:	20000ce8 	.word	0x20000ce8

08003a54 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a54:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <SystemInit+0x18>)
 8003a56:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a5a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003a5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a66:	609a      	str	r2, [r3, #8]
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	e000ed00 	.word	0xe000ed00

08003a70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003a70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003aa8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003a74:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003a76:	e003      	b.n	8003a80 <LoopCopyDataInit>

08003a78 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003a78:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003a7a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003a7c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003a7e:	3104      	adds	r1, #4

08003a80 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003a80:	480b      	ldr	r0, [pc, #44]	; (8003ab0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003a82:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003a84:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003a86:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003a88:	d3f6      	bcc.n	8003a78 <CopyDataInit>
	ldr	r2, =_sbss
 8003a8a:	4a0b      	ldr	r2, [pc, #44]	; (8003ab8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003a8c:	e002      	b.n	8003a94 <LoopFillZerobss>

08003a8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003a8e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003a90:	f842 3b04 	str.w	r3, [r2], #4

08003a94 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003a94:	4b09      	ldr	r3, [pc, #36]	; (8003abc <LoopForever+0x16>)
	cmp	r2, r3
 8003a96:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003a98:	d3f9      	bcc.n	8003a8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003a9a:	f7ff ffdb 	bl	8003a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a9e:	f000 f817 	bl	8003ad0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003aa2:	f7ff fa5d 	bl	8002f60 <main>

08003aa6 <LoopForever>:

LoopForever:
    b LoopForever
 8003aa6:	e7fe      	b.n	8003aa6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003aa8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003aac:	080080b8 	.word	0x080080b8
	ldr	r0, =_sdata
 8003ab0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003ab4:	2000068c 	.word	0x2000068c
	ldr	r2, =_sbss
 8003ab8:	2000068c 	.word	0x2000068c
	ldr	r3, = _ebss
 8003abc:	20000ce8 	.word	0x20000ce8

08003ac0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ac0:	e7fe      	b.n	8003ac0 <ADC1_2_IRQHandler>
	...

08003ac4 <__errno>:
 8003ac4:	4b01      	ldr	r3, [pc, #4]	; (8003acc <__errno+0x8>)
 8003ac6:	6818      	ldr	r0, [r3, #0]
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	2000001c 	.word	0x2000001c

08003ad0 <__libc_init_array>:
 8003ad0:	b570      	push	{r4, r5, r6, lr}
 8003ad2:	4e0d      	ldr	r6, [pc, #52]	; (8003b08 <__libc_init_array+0x38>)
 8003ad4:	4c0d      	ldr	r4, [pc, #52]	; (8003b0c <__libc_init_array+0x3c>)
 8003ad6:	1ba4      	subs	r4, r4, r6
 8003ad8:	10a4      	asrs	r4, r4, #2
 8003ada:	2500      	movs	r5, #0
 8003adc:	42a5      	cmp	r5, r4
 8003ade:	d109      	bne.n	8003af4 <__libc_init_array+0x24>
 8003ae0:	4e0b      	ldr	r6, [pc, #44]	; (8003b10 <__libc_init_array+0x40>)
 8003ae2:	4c0c      	ldr	r4, [pc, #48]	; (8003b14 <__libc_init_array+0x44>)
 8003ae4:	f002 ff04 	bl	80068f0 <_init>
 8003ae8:	1ba4      	subs	r4, r4, r6
 8003aea:	10a4      	asrs	r4, r4, #2
 8003aec:	2500      	movs	r5, #0
 8003aee:	42a5      	cmp	r5, r4
 8003af0:	d105      	bne.n	8003afe <__libc_init_array+0x2e>
 8003af2:	bd70      	pop	{r4, r5, r6, pc}
 8003af4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003af8:	4798      	blx	r3
 8003afa:	3501      	adds	r5, #1
 8003afc:	e7ee      	b.n	8003adc <__libc_init_array+0xc>
 8003afe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b02:	4798      	blx	r3
 8003b04:	3501      	adds	r5, #1
 8003b06:	e7f2      	b.n	8003aee <__libc_init_array+0x1e>
 8003b08:	080080b0 	.word	0x080080b0
 8003b0c:	080080b0 	.word	0x080080b0
 8003b10:	080080b0 	.word	0x080080b0
 8003b14:	080080b4 	.word	0x080080b4

08003b18 <memset>:
 8003b18:	4402      	add	r2, r0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d100      	bne.n	8003b22 <memset+0xa>
 8003b20:	4770      	bx	lr
 8003b22:	f803 1b01 	strb.w	r1, [r3], #1
 8003b26:	e7f9      	b.n	8003b1c <memset+0x4>

08003b28 <sprintf>:
 8003b28:	b40e      	push	{r1, r2, r3}
 8003b2a:	b500      	push	{lr}
 8003b2c:	b09c      	sub	sp, #112	; 0x70
 8003b2e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003b32:	ab1d      	add	r3, sp, #116	; 0x74
 8003b34:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003b38:	9002      	str	r0, [sp, #8]
 8003b3a:	9006      	str	r0, [sp, #24]
 8003b3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b40:	480a      	ldr	r0, [pc, #40]	; (8003b6c <sprintf+0x44>)
 8003b42:	9104      	str	r1, [sp, #16]
 8003b44:	9107      	str	r1, [sp, #28]
 8003b46:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b4e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003b52:	6800      	ldr	r0, [r0, #0]
 8003b54:	9301      	str	r3, [sp, #4]
 8003b56:	a902      	add	r1, sp, #8
 8003b58:	f000 f80a 	bl	8003b70 <_svfprintf_r>
 8003b5c:	9b02      	ldr	r3, [sp, #8]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	701a      	strb	r2, [r3, #0]
 8003b62:	b01c      	add	sp, #112	; 0x70
 8003b64:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b68:	b003      	add	sp, #12
 8003b6a:	4770      	bx	lr
 8003b6c:	2000001c 	.word	0x2000001c

08003b70 <_svfprintf_r>:
 8003b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b74:	b0bd      	sub	sp, #244	; 0xf4
 8003b76:	468a      	mov	sl, r1
 8003b78:	4615      	mov	r5, r2
 8003b7a:	461f      	mov	r7, r3
 8003b7c:	4683      	mov	fp, r0
 8003b7e:	f001 fe25 	bl	80057cc <_localeconv_r>
 8003b82:	6803      	ldr	r3, [r0, #0]
 8003b84:	930d      	str	r3, [sp, #52]	; 0x34
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fc fb7a 	bl	8000280 <strlen>
 8003b8c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003b90:	9008      	str	r0, [sp, #32]
 8003b92:	061b      	lsls	r3, r3, #24
 8003b94:	d518      	bpl.n	8003bc8 <_svfprintf_r+0x58>
 8003b96:	f8da 3010 	ldr.w	r3, [sl, #16]
 8003b9a:	b9ab      	cbnz	r3, 8003bc8 <_svfprintf_r+0x58>
 8003b9c:	2140      	movs	r1, #64	; 0x40
 8003b9e:	4658      	mov	r0, fp
 8003ba0:	f001 fe2a 	bl	80057f8 <_malloc_r>
 8003ba4:	f8ca 0000 	str.w	r0, [sl]
 8003ba8:	f8ca 0010 	str.w	r0, [sl, #16]
 8003bac:	b948      	cbnz	r0, 8003bc2 <_svfprintf_r+0x52>
 8003bae:	230c      	movs	r3, #12
 8003bb0:	f8cb 3000 	str.w	r3, [fp]
 8003bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8003bba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bbc:	b03d      	add	sp, #244	; 0xf4
 8003bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bc2:	2340      	movs	r3, #64	; 0x40
 8003bc4:	f8ca 3014 	str.w	r3, [sl, #20]
 8003bc8:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8003e30 <_svfprintf_r+0x2c0>
 8003bcc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	ac2c      	add	r4, sp, #176	; 0xb0
 8003bd4:	941f      	str	r4, [sp, #124]	; 0x7c
 8003bd6:	9321      	str	r3, [sp, #132]	; 0x84
 8003bd8:	9320      	str	r3, [sp, #128]	; 0x80
 8003bda:	9505      	str	r5, [sp, #20]
 8003bdc:	9303      	str	r3, [sp, #12]
 8003bde:	9311      	str	r3, [sp, #68]	; 0x44
 8003be0:	9310      	str	r3, [sp, #64]	; 0x40
 8003be2:	9309      	str	r3, [sp, #36]	; 0x24
 8003be4:	9d05      	ldr	r5, [sp, #20]
 8003be6:	462b      	mov	r3, r5
 8003be8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bec:	b112      	cbz	r2, 8003bf4 <_svfprintf_r+0x84>
 8003bee:	2a25      	cmp	r2, #37	; 0x25
 8003bf0:	f040 8083 	bne.w	8003cfa <_svfprintf_r+0x18a>
 8003bf4:	9b05      	ldr	r3, [sp, #20]
 8003bf6:	1aee      	subs	r6, r5, r3
 8003bf8:	d00d      	beq.n	8003c16 <_svfprintf_r+0xa6>
 8003bfa:	e884 0048 	stmia.w	r4, {r3, r6}
 8003bfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003c00:	4433      	add	r3, r6
 8003c02:	9321      	str	r3, [sp, #132]	; 0x84
 8003c04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003c06:	3301      	adds	r3, #1
 8003c08:	2b07      	cmp	r3, #7
 8003c0a:	9320      	str	r3, [sp, #128]	; 0x80
 8003c0c:	dc77      	bgt.n	8003cfe <_svfprintf_r+0x18e>
 8003c0e:	3408      	adds	r4, #8
 8003c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c12:	4433      	add	r3, r6
 8003c14:	9309      	str	r3, [sp, #36]	; 0x24
 8003c16:	782b      	ldrb	r3, [r5, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 8729 	beq.w	8004a70 <_svfprintf_r+0xf00>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	1c69      	adds	r1, r5, #1
 8003c22:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003c26:	461a      	mov	r2, r3
 8003c28:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8003c2c:	930a      	str	r3, [sp, #40]	; 0x28
 8003c2e:	461d      	mov	r5, r3
 8003c30:	200a      	movs	r0, #10
 8003c32:	1c4e      	adds	r6, r1, #1
 8003c34:	7809      	ldrb	r1, [r1, #0]
 8003c36:	9605      	str	r6, [sp, #20]
 8003c38:	9102      	str	r1, [sp, #8]
 8003c3a:	9902      	ldr	r1, [sp, #8]
 8003c3c:	3920      	subs	r1, #32
 8003c3e:	2958      	cmp	r1, #88	; 0x58
 8003c40:	f200 8418 	bhi.w	8004474 <_svfprintf_r+0x904>
 8003c44:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003c48:	041600a6 	.word	0x041600a6
 8003c4c:	00ab0416 	.word	0x00ab0416
 8003c50:	04160416 	.word	0x04160416
 8003c54:	04160416 	.word	0x04160416
 8003c58:	04160416 	.word	0x04160416
 8003c5c:	006500ae 	.word	0x006500ae
 8003c60:	00b70416 	.word	0x00b70416
 8003c64:	041600ba 	.word	0x041600ba
 8003c68:	00da00d7 	.word	0x00da00d7
 8003c6c:	00da00da 	.word	0x00da00da
 8003c70:	00da00da 	.word	0x00da00da
 8003c74:	00da00da 	.word	0x00da00da
 8003c78:	00da00da 	.word	0x00da00da
 8003c7c:	04160416 	.word	0x04160416
 8003c80:	04160416 	.word	0x04160416
 8003c84:	04160416 	.word	0x04160416
 8003c88:	04160416 	.word	0x04160416
 8003c8c:	04160416 	.word	0x04160416
 8003c90:	012b0115 	.word	0x012b0115
 8003c94:	012b0416 	.word	0x012b0416
 8003c98:	04160416 	.word	0x04160416
 8003c9c:	04160416 	.word	0x04160416
 8003ca0:	041600ed 	.word	0x041600ed
 8003ca4:	03400416 	.word	0x03400416
 8003ca8:	04160416 	.word	0x04160416
 8003cac:	04160416 	.word	0x04160416
 8003cb0:	03a80416 	.word	0x03a80416
 8003cb4:	04160416 	.word	0x04160416
 8003cb8:	04160086 	.word	0x04160086
 8003cbc:	04160416 	.word	0x04160416
 8003cc0:	04160416 	.word	0x04160416
 8003cc4:	04160416 	.word	0x04160416
 8003cc8:	04160416 	.word	0x04160416
 8003ccc:	01070416 	.word	0x01070416
 8003cd0:	012b006b 	.word	0x012b006b
 8003cd4:	012b012b 	.word	0x012b012b
 8003cd8:	006b00f0 	.word	0x006b00f0
 8003cdc:	04160416 	.word	0x04160416
 8003ce0:	041600fa 	.word	0x041600fa
 8003ce4:	03420322 	.word	0x03420322
 8003ce8:	01010376 	.word	0x01010376
 8003cec:	03870416 	.word	0x03870416
 8003cf0:	03aa0416 	.word	0x03aa0416
 8003cf4:	04160416 	.word	0x04160416
 8003cf8:	03c2      	.short	0x03c2
 8003cfa:	461d      	mov	r5, r3
 8003cfc:	e773      	b.n	8003be6 <_svfprintf_r+0x76>
 8003cfe:	aa1f      	add	r2, sp, #124	; 0x7c
 8003d00:	4651      	mov	r1, sl
 8003d02:	4658      	mov	r0, fp
 8003d04:	f002 fa7e 	bl	8006204 <__ssprint_r>
 8003d08:	2800      	cmp	r0, #0
 8003d0a:	f040 8692 	bne.w	8004a32 <_svfprintf_r+0xec2>
 8003d0e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003d10:	e77e      	b.n	8003c10 <_svfprintf_r+0xa0>
 8003d12:	2301      	movs	r3, #1
 8003d14:	222b      	movs	r2, #43	; 0x2b
 8003d16:	9905      	ldr	r1, [sp, #20]
 8003d18:	e78b      	b.n	8003c32 <_svfprintf_r+0xc2>
 8003d1a:	460f      	mov	r7, r1
 8003d1c:	e7fb      	b.n	8003d16 <_svfprintf_r+0x1a6>
 8003d1e:	b10b      	cbz	r3, 8003d24 <_svfprintf_r+0x1b4>
 8003d20:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003d24:	06ae      	lsls	r6, r5, #26
 8003d26:	f140 80aa 	bpl.w	8003e7e <_svfprintf_r+0x30e>
 8003d2a:	3707      	adds	r7, #7
 8003d2c:	f027 0707 	bic.w	r7, r7, #7
 8003d30:	f107 0308 	add.w	r3, r7, #8
 8003d34:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003d38:	9304      	str	r3, [sp, #16]
 8003d3a:	2e00      	cmp	r6, #0
 8003d3c:	f177 0300 	sbcs.w	r3, r7, #0
 8003d40:	da06      	bge.n	8003d50 <_svfprintf_r+0x1e0>
 8003d42:	4276      	negs	r6, r6
 8003d44:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8003d48:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8003d4c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003d50:	2301      	movs	r3, #1
 8003d52:	e2ca      	b.n	80042ea <_svfprintf_r+0x77a>
 8003d54:	b10b      	cbz	r3, 8003d5a <_svfprintf_r+0x1ea>
 8003d56:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003d5a:	4b37      	ldr	r3, [pc, #220]	; (8003e38 <_svfprintf_r+0x2c8>)
 8003d5c:	9311      	str	r3, [sp, #68]	; 0x44
 8003d5e:	06ab      	lsls	r3, r5, #26
 8003d60:	f140 8339 	bpl.w	80043d6 <_svfprintf_r+0x866>
 8003d64:	3707      	adds	r7, #7
 8003d66:	f027 0707 	bic.w	r7, r7, #7
 8003d6a:	f107 0308 	add.w	r3, r7, #8
 8003d6e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003d72:	9304      	str	r3, [sp, #16]
 8003d74:	07e8      	lsls	r0, r5, #31
 8003d76:	d50b      	bpl.n	8003d90 <_svfprintf_r+0x220>
 8003d78:	ea56 0307 	orrs.w	r3, r6, r7
 8003d7c:	d008      	beq.n	8003d90 <_svfprintf_r+0x220>
 8003d7e:	2330      	movs	r3, #48	; 0x30
 8003d80:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8003d84:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003d88:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8003d8c:	f045 0502 	orr.w	r5, r5, #2
 8003d90:	2302      	movs	r3, #2
 8003d92:	e2a7      	b.n	80042e4 <_svfprintf_r+0x774>
 8003d94:	2a00      	cmp	r2, #0
 8003d96:	d1be      	bne.n	8003d16 <_svfprintf_r+0x1a6>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	e7bb      	b.n	8003d16 <_svfprintf_r+0x1a6>
 8003d9e:	f045 0501 	orr.w	r5, r5, #1
 8003da2:	e7b8      	b.n	8003d16 <_svfprintf_r+0x1a6>
 8003da4:	683e      	ldr	r6, [r7, #0]
 8003da6:	960a      	str	r6, [sp, #40]	; 0x28
 8003da8:	2e00      	cmp	r6, #0
 8003daa:	f107 0104 	add.w	r1, r7, #4
 8003dae:	dab4      	bge.n	8003d1a <_svfprintf_r+0x1aa>
 8003db0:	4276      	negs	r6, r6
 8003db2:	960a      	str	r6, [sp, #40]	; 0x28
 8003db4:	460f      	mov	r7, r1
 8003db6:	f045 0504 	orr.w	r5, r5, #4
 8003dba:	e7ac      	b.n	8003d16 <_svfprintf_r+0x1a6>
 8003dbc:	9905      	ldr	r1, [sp, #20]
 8003dbe:	1c4e      	adds	r6, r1, #1
 8003dc0:	7809      	ldrb	r1, [r1, #0]
 8003dc2:	9102      	str	r1, [sp, #8]
 8003dc4:	292a      	cmp	r1, #42	; 0x2a
 8003dc6:	d010      	beq.n	8003dea <_svfprintf_r+0x27a>
 8003dc8:	f04f 0900 	mov.w	r9, #0
 8003dcc:	9605      	str	r6, [sp, #20]
 8003dce:	9902      	ldr	r1, [sp, #8]
 8003dd0:	3930      	subs	r1, #48	; 0x30
 8003dd2:	2909      	cmp	r1, #9
 8003dd4:	f63f af31 	bhi.w	8003c3a <_svfprintf_r+0xca>
 8003dd8:	fb00 1909 	mla	r9, r0, r9, r1
 8003ddc:	9905      	ldr	r1, [sp, #20]
 8003dde:	460e      	mov	r6, r1
 8003de0:	f816 1b01 	ldrb.w	r1, [r6], #1
 8003de4:	9102      	str	r1, [sp, #8]
 8003de6:	9605      	str	r6, [sp, #20]
 8003de8:	e7f1      	b.n	8003dce <_svfprintf_r+0x25e>
 8003dea:	6839      	ldr	r1, [r7, #0]
 8003dec:	9605      	str	r6, [sp, #20]
 8003dee:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 8003df2:	3704      	adds	r7, #4
 8003df4:	e78f      	b.n	8003d16 <_svfprintf_r+0x1a6>
 8003df6:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8003dfa:	e78c      	b.n	8003d16 <_svfprintf_r+0x1a6>
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	910a      	str	r1, [sp, #40]	; 0x28
 8003e00:	9902      	ldr	r1, [sp, #8]
 8003e02:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003e04:	3930      	subs	r1, #48	; 0x30
 8003e06:	fb00 1106 	mla	r1, r0, r6, r1
 8003e0a:	910a      	str	r1, [sp, #40]	; 0x28
 8003e0c:	9905      	ldr	r1, [sp, #20]
 8003e0e:	460e      	mov	r6, r1
 8003e10:	f816 1b01 	ldrb.w	r1, [r6], #1
 8003e14:	9102      	str	r1, [sp, #8]
 8003e16:	9902      	ldr	r1, [sp, #8]
 8003e18:	9605      	str	r6, [sp, #20]
 8003e1a:	3930      	subs	r1, #48	; 0x30
 8003e1c:	2909      	cmp	r1, #9
 8003e1e:	d9ef      	bls.n	8003e00 <_svfprintf_r+0x290>
 8003e20:	e70b      	b.n	8003c3a <_svfprintf_r+0xca>
 8003e22:	f045 0508 	orr.w	r5, r5, #8
 8003e26:	e776      	b.n	8003d16 <_svfprintf_r+0x1a6>
 8003e28:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8003e2c:	e773      	b.n	8003d16 <_svfprintf_r+0x1a6>
 8003e2e:	bf00      	nop
	...
 8003e38:	08007e4a 	.word	0x08007e4a
 8003e3c:	9905      	ldr	r1, [sp, #20]
 8003e3e:	7809      	ldrb	r1, [r1, #0]
 8003e40:	296c      	cmp	r1, #108	; 0x6c
 8003e42:	d105      	bne.n	8003e50 <_svfprintf_r+0x2e0>
 8003e44:	9905      	ldr	r1, [sp, #20]
 8003e46:	3101      	adds	r1, #1
 8003e48:	9105      	str	r1, [sp, #20]
 8003e4a:	f045 0520 	orr.w	r5, r5, #32
 8003e4e:	e762      	b.n	8003d16 <_svfprintf_r+0x1a6>
 8003e50:	f045 0510 	orr.w	r5, r5, #16
 8003e54:	e75f      	b.n	8003d16 <_svfprintf_r+0x1a6>
 8003e56:	1d3b      	adds	r3, r7, #4
 8003e58:	9304      	str	r3, [sp, #16]
 8003e5a:	2600      	movs	r6, #0
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8003e62:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003e66:	f04f 0901 	mov.w	r9, #1
 8003e6a:	4637      	mov	r7, r6
 8003e6c:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8003e70:	e11b      	b.n	80040aa <_svfprintf_r+0x53a>
 8003e72:	b10b      	cbz	r3, 8003e78 <_svfprintf_r+0x308>
 8003e74:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003e78:	f045 0510 	orr.w	r5, r5, #16
 8003e7c:	e752      	b.n	8003d24 <_svfprintf_r+0x1b4>
 8003e7e:	f015 0f10 	tst.w	r5, #16
 8003e82:	f107 0304 	add.w	r3, r7, #4
 8003e86:	d003      	beq.n	8003e90 <_svfprintf_r+0x320>
 8003e88:	683e      	ldr	r6, [r7, #0]
 8003e8a:	9304      	str	r3, [sp, #16]
 8003e8c:	17f7      	asrs	r7, r6, #31
 8003e8e:	e754      	b.n	8003d3a <_svfprintf_r+0x1ca>
 8003e90:	683e      	ldr	r6, [r7, #0]
 8003e92:	9304      	str	r3, [sp, #16]
 8003e94:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003e98:	bf18      	it	ne
 8003e9a:	b236      	sxthne	r6, r6
 8003e9c:	e7f6      	b.n	8003e8c <_svfprintf_r+0x31c>
 8003e9e:	b10b      	cbz	r3, 8003ea4 <_svfprintf_r+0x334>
 8003ea0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003ea4:	3707      	adds	r7, #7
 8003ea6:	f027 0707 	bic.w	r7, r7, #7
 8003eaa:	f107 0308 	add.w	r3, r7, #8
 8003eae:	9304      	str	r3, [sp, #16]
 8003eb0:	ed97 7b00 	vldr	d7, [r7]
 8003eb4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003eb8:	9b06      	ldr	r3, [sp, #24]
 8003eba:	9312      	str	r3, [sp, #72]	; 0x48
 8003ebc:	9b07      	ldr	r3, [sp, #28]
 8003ebe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ec2:	9313      	str	r3, [sp, #76]	; 0x4c
 8003ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ec8:	4b4a      	ldr	r3, [pc, #296]	; (8003ff4 <_svfprintf_r+0x484>)
 8003eca:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8003ece:	f7fc fe31 	bl	8000b34 <__aeabi_dcmpun>
 8003ed2:	2800      	cmp	r0, #0
 8003ed4:	f040 85d5 	bne.w	8004a82 <_svfprintf_r+0xf12>
 8003ed8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003edc:	4b45      	ldr	r3, [pc, #276]	; (8003ff4 <_svfprintf_r+0x484>)
 8003ede:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8003ee2:	f7fc fe09 	bl	8000af8 <__aeabi_dcmple>
 8003ee6:	2800      	cmp	r0, #0
 8003ee8:	f040 85cb 	bne.w	8004a82 <_svfprintf_r+0xf12>
 8003eec:	2200      	movs	r2, #0
 8003eee:	2300      	movs	r3, #0
 8003ef0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ef4:	f7fc fdf6 	bl	8000ae4 <__aeabi_dcmplt>
 8003ef8:	b110      	cbz	r0, 8003f00 <_svfprintf_r+0x390>
 8003efa:	232d      	movs	r3, #45	; 0x2d
 8003efc:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003f00:	4b3d      	ldr	r3, [pc, #244]	; (8003ff8 <_svfprintf_r+0x488>)
 8003f02:	4a3e      	ldr	r2, [pc, #248]	; (8003ffc <_svfprintf_r+0x48c>)
 8003f04:	9902      	ldr	r1, [sp, #8]
 8003f06:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8003f0a:	2947      	cmp	r1, #71	; 0x47
 8003f0c:	bfcc      	ite	gt
 8003f0e:	4690      	movgt	r8, r2
 8003f10:	4698      	movle	r8, r3
 8003f12:	f04f 0903 	mov.w	r9, #3
 8003f16:	2600      	movs	r6, #0
 8003f18:	4637      	mov	r7, r6
 8003f1a:	e0c6      	b.n	80040aa <_svfprintf_r+0x53a>
 8003f1c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8003f20:	d022      	beq.n	8003f68 <_svfprintf_r+0x3f8>
 8003f22:	9b02      	ldr	r3, [sp, #8]
 8003f24:	f023 0320 	bic.w	r3, r3, #32
 8003f28:	2b47      	cmp	r3, #71	; 0x47
 8003f2a:	d104      	bne.n	8003f36 <_svfprintf_r+0x3c6>
 8003f2c:	f1b9 0f00 	cmp.w	r9, #0
 8003f30:	bf08      	it	eq
 8003f32:	f04f 0901 	moveq.w	r9, #1
 8003f36:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8003f3a:	930c      	str	r3, [sp, #48]	; 0x30
 8003f3c:	9b07      	ldr	r3, [sp, #28]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	da15      	bge.n	8003f6e <_svfprintf_r+0x3fe>
 8003f42:	9b06      	ldr	r3, [sp, #24]
 8003f44:	930e      	str	r3, [sp, #56]	; 0x38
 8003f46:	9b07      	ldr	r3, [sp, #28]
 8003f48:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003f4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f4e:	232d      	movs	r3, #45	; 0x2d
 8003f50:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f52:	9b02      	ldr	r3, [sp, #8]
 8003f54:	f023 0720 	bic.w	r7, r3, #32
 8003f58:	2f46      	cmp	r7, #70	; 0x46
 8003f5a:	d00e      	beq.n	8003f7a <_svfprintf_r+0x40a>
 8003f5c:	2f45      	cmp	r7, #69	; 0x45
 8003f5e:	d146      	bne.n	8003fee <_svfprintf_r+0x47e>
 8003f60:	f109 0601 	add.w	r6, r9, #1
 8003f64:	2102      	movs	r1, #2
 8003f66:	e00a      	b.n	8003f7e <_svfprintf_r+0x40e>
 8003f68:	f04f 0906 	mov.w	r9, #6
 8003f6c:	e7e3      	b.n	8003f36 <_svfprintf_r+0x3c6>
 8003f6e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8003f72:	2300      	movs	r3, #0
 8003f74:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003f78:	e7ea      	b.n	8003f50 <_svfprintf_r+0x3e0>
 8003f7a:	464e      	mov	r6, r9
 8003f7c:	2103      	movs	r1, #3
 8003f7e:	ab1d      	add	r3, sp, #116	; 0x74
 8003f80:	9301      	str	r3, [sp, #4]
 8003f82:	ab1a      	add	r3, sp, #104	; 0x68
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	4632      	mov	r2, r6
 8003f88:	ab19      	add	r3, sp, #100	; 0x64
 8003f8a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8003f8e:	4658      	mov	r0, fp
 8003f90:	f000 fe4e 	bl	8004c30 <_dtoa_r>
 8003f94:	2f47      	cmp	r7, #71	; 0x47
 8003f96:	4680      	mov	r8, r0
 8003f98:	d102      	bne.n	8003fa0 <_svfprintf_r+0x430>
 8003f9a:	07e8      	lsls	r0, r5, #31
 8003f9c:	f140 857e 	bpl.w	8004a9c <_svfprintf_r+0xf2c>
 8003fa0:	eb08 0306 	add.w	r3, r8, r6
 8003fa4:	2f46      	cmp	r7, #70	; 0x46
 8003fa6:	9303      	str	r3, [sp, #12]
 8003fa8:	d111      	bne.n	8003fce <_svfprintf_r+0x45e>
 8003faa:	f898 3000 	ldrb.w	r3, [r8]
 8003fae:	2b30      	cmp	r3, #48	; 0x30
 8003fb0:	d109      	bne.n	8003fc6 <_svfprintf_r+0x456>
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003fba:	f7fc fd89 	bl	8000ad0 <__aeabi_dcmpeq>
 8003fbe:	b910      	cbnz	r0, 8003fc6 <_svfprintf_r+0x456>
 8003fc0:	f1c6 0601 	rsb	r6, r6, #1
 8003fc4:	9619      	str	r6, [sp, #100]	; 0x64
 8003fc6:	9a03      	ldr	r2, [sp, #12]
 8003fc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003fca:	441a      	add	r2, r3
 8003fcc:	9203      	str	r2, [sp, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003fd6:	f7fc fd7b 	bl	8000ad0 <__aeabi_dcmpeq>
 8003fda:	b988      	cbnz	r0, 8004000 <_svfprintf_r+0x490>
 8003fdc:	2230      	movs	r2, #48	; 0x30
 8003fde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003fe0:	9903      	ldr	r1, [sp, #12]
 8003fe2:	4299      	cmp	r1, r3
 8003fe4:	d90e      	bls.n	8004004 <_svfprintf_r+0x494>
 8003fe6:	1c59      	adds	r1, r3, #1
 8003fe8:	911d      	str	r1, [sp, #116]	; 0x74
 8003fea:	701a      	strb	r2, [r3, #0]
 8003fec:	e7f7      	b.n	8003fde <_svfprintf_r+0x46e>
 8003fee:	464e      	mov	r6, r9
 8003ff0:	e7b8      	b.n	8003f64 <_svfprintf_r+0x3f4>
 8003ff2:	bf00      	nop
 8003ff4:	7fefffff 	.word	0x7fefffff
 8003ff8:	08007e3a 	.word	0x08007e3a
 8003ffc:	08007e3e 	.word	0x08007e3e
 8004000:	9b03      	ldr	r3, [sp, #12]
 8004002:	931d      	str	r3, [sp, #116]	; 0x74
 8004004:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004006:	2f47      	cmp	r7, #71	; 0x47
 8004008:	eba3 0308 	sub.w	r3, r3, r8
 800400c:	9303      	str	r3, [sp, #12]
 800400e:	f040 80fa 	bne.w	8004206 <_svfprintf_r+0x696>
 8004012:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004014:	1cd9      	adds	r1, r3, #3
 8004016:	db02      	blt.n	800401e <_svfprintf_r+0x4ae>
 8004018:	4599      	cmp	r9, r3
 800401a:	f280 8120 	bge.w	800425e <_svfprintf_r+0x6ee>
 800401e:	9b02      	ldr	r3, [sp, #8]
 8004020:	3b02      	subs	r3, #2
 8004022:	9302      	str	r3, [sp, #8]
 8004024:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004026:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800402a:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 800402e:	1e53      	subs	r3, r2, #1
 8004030:	2b00      	cmp	r3, #0
 8004032:	9319      	str	r3, [sp, #100]	; 0x64
 8004034:	bfb6      	itet	lt
 8004036:	f1c2 0301 	rsblt	r3, r2, #1
 800403a:	222b      	movge	r2, #43	; 0x2b
 800403c:	222d      	movlt	r2, #45	; 0x2d
 800403e:	2b09      	cmp	r3, #9
 8004040:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8004044:	f340 80fb 	ble.w	800423e <_svfprintf_r+0x6ce>
 8004048:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800404c:	260a      	movs	r6, #10
 800404e:	fb93 f0f6 	sdiv	r0, r3, r6
 8004052:	fb06 3310 	mls	r3, r6, r0, r3
 8004056:	3330      	adds	r3, #48	; 0x30
 8004058:	2809      	cmp	r0, #9
 800405a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800405e:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 8004062:	4603      	mov	r3, r0
 8004064:	f300 80e4 	bgt.w	8004230 <_svfprintf_r+0x6c0>
 8004068:	3330      	adds	r3, #48	; 0x30
 800406a:	f801 3c01 	strb.w	r3, [r1, #-1]
 800406e:	3a02      	subs	r2, #2
 8004070:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8004074:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8004078:	4282      	cmp	r2, r0
 800407a:	4619      	mov	r1, r3
 800407c:	f0c0 80da 	bcc.w	8004234 <_svfprintf_r+0x6c4>
 8004080:	9a03      	ldr	r2, [sp, #12]
 8004082:	ab1b      	add	r3, sp, #108	; 0x6c
 8004084:	1acb      	subs	r3, r1, r3
 8004086:	2a01      	cmp	r2, #1
 8004088:	9310      	str	r3, [sp, #64]	; 0x40
 800408a:	eb03 0902 	add.w	r9, r3, r2
 800408e:	dc02      	bgt.n	8004096 <_svfprintf_r+0x526>
 8004090:	f015 0701 	ands.w	r7, r5, #1
 8004094:	d002      	beq.n	800409c <_svfprintf_r+0x52c>
 8004096:	9b08      	ldr	r3, [sp, #32]
 8004098:	2700      	movs	r7, #0
 800409a:	4499      	add	r9, r3
 800409c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800409e:	b113      	cbz	r3, 80040a6 <_svfprintf_r+0x536>
 80040a0:	232d      	movs	r3, #45	; 0x2d
 80040a2:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80040a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040a8:	2600      	movs	r6, #0
 80040aa:	454e      	cmp	r6, r9
 80040ac:	4633      	mov	r3, r6
 80040ae:	bfb8      	it	lt
 80040b0:	464b      	movlt	r3, r9
 80040b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80040b4:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80040b8:	b113      	cbz	r3, 80040c0 <_svfprintf_r+0x550>
 80040ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040bc:	3301      	adds	r3, #1
 80040be:	930b      	str	r3, [sp, #44]	; 0x2c
 80040c0:	f015 0302 	ands.w	r3, r5, #2
 80040c4:	9314      	str	r3, [sp, #80]	; 0x50
 80040c6:	bf1e      	ittt	ne
 80040c8:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 80040ca:	3302      	addne	r3, #2
 80040cc:	930b      	strne	r3, [sp, #44]	; 0x2c
 80040ce:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80040d2:	9315      	str	r3, [sp, #84]	; 0x54
 80040d4:	d118      	bne.n	8004108 <_svfprintf_r+0x598>
 80040d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80040da:	1a9b      	subs	r3, r3, r2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	930c      	str	r3, [sp, #48]	; 0x30
 80040e0:	dd12      	ble.n	8004108 <_svfprintf_r+0x598>
 80040e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040e4:	2b10      	cmp	r3, #16
 80040e6:	4ba9      	ldr	r3, [pc, #676]	; (800438c <_svfprintf_r+0x81c>)
 80040e8:	6023      	str	r3, [r4, #0]
 80040ea:	f300 81d5 	bgt.w	8004498 <_svfprintf_r+0x928>
 80040ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040f0:	6063      	str	r3, [r4, #4]
 80040f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80040f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80040f6:	4413      	add	r3, r2
 80040f8:	9321      	str	r3, [sp, #132]	; 0x84
 80040fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80040fc:	3301      	adds	r3, #1
 80040fe:	2b07      	cmp	r3, #7
 8004100:	9320      	str	r3, [sp, #128]	; 0x80
 8004102:	f300 81e2 	bgt.w	80044ca <_svfprintf_r+0x95a>
 8004106:	3408      	adds	r4, #8
 8004108:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800410c:	b173      	cbz	r3, 800412c <_svfprintf_r+0x5bc>
 800410e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8004112:	6023      	str	r3, [r4, #0]
 8004114:	2301      	movs	r3, #1
 8004116:	6063      	str	r3, [r4, #4]
 8004118:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800411a:	3301      	adds	r3, #1
 800411c:	9321      	str	r3, [sp, #132]	; 0x84
 800411e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004120:	3301      	adds	r3, #1
 8004122:	2b07      	cmp	r3, #7
 8004124:	9320      	str	r3, [sp, #128]	; 0x80
 8004126:	f300 81da 	bgt.w	80044de <_svfprintf_r+0x96e>
 800412a:	3408      	adds	r4, #8
 800412c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800412e:	b16b      	cbz	r3, 800414c <_svfprintf_r+0x5dc>
 8004130:	ab18      	add	r3, sp, #96	; 0x60
 8004132:	6023      	str	r3, [r4, #0]
 8004134:	2302      	movs	r3, #2
 8004136:	6063      	str	r3, [r4, #4]
 8004138:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800413a:	3302      	adds	r3, #2
 800413c:	9321      	str	r3, [sp, #132]	; 0x84
 800413e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004140:	3301      	adds	r3, #1
 8004142:	2b07      	cmp	r3, #7
 8004144:	9320      	str	r3, [sp, #128]	; 0x80
 8004146:	f300 81d4 	bgt.w	80044f2 <_svfprintf_r+0x982>
 800414a:	3408      	adds	r4, #8
 800414c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800414e:	2b80      	cmp	r3, #128	; 0x80
 8004150:	d114      	bne.n	800417c <_svfprintf_r+0x60c>
 8004152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004154:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	2b00      	cmp	r3, #0
 800415a:	dd0f      	ble.n	800417c <_svfprintf_r+0x60c>
 800415c:	4a8c      	ldr	r2, [pc, #560]	; (8004390 <_svfprintf_r+0x820>)
 800415e:	6022      	str	r2, [r4, #0]
 8004160:	2b10      	cmp	r3, #16
 8004162:	f300 81d0 	bgt.w	8004506 <_svfprintf_r+0x996>
 8004166:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004168:	6063      	str	r3, [r4, #4]
 800416a:	4413      	add	r3, r2
 800416c:	9321      	str	r3, [sp, #132]	; 0x84
 800416e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004170:	3301      	adds	r3, #1
 8004172:	2b07      	cmp	r3, #7
 8004174:	9320      	str	r3, [sp, #128]	; 0x80
 8004176:	f300 81df 	bgt.w	8004538 <_svfprintf_r+0x9c8>
 800417a:	3408      	adds	r4, #8
 800417c:	eba6 0609 	sub.w	r6, r6, r9
 8004180:	2e00      	cmp	r6, #0
 8004182:	dd0f      	ble.n	80041a4 <_svfprintf_r+0x634>
 8004184:	4b82      	ldr	r3, [pc, #520]	; (8004390 <_svfprintf_r+0x820>)
 8004186:	6023      	str	r3, [r4, #0]
 8004188:	2e10      	cmp	r6, #16
 800418a:	f300 81df 	bgt.w	800454c <_svfprintf_r+0x9dc>
 800418e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004190:	9821      	ldr	r0, [sp, #132]	; 0x84
 8004192:	6066      	str	r6, [r4, #4]
 8004194:	3301      	adds	r3, #1
 8004196:	4406      	add	r6, r0
 8004198:	2b07      	cmp	r3, #7
 800419a:	9621      	str	r6, [sp, #132]	; 0x84
 800419c:	9320      	str	r3, [sp, #128]	; 0x80
 800419e:	f300 81ec 	bgt.w	800457a <_svfprintf_r+0xa0a>
 80041a2:	3408      	adds	r4, #8
 80041a4:	05eb      	lsls	r3, r5, #23
 80041a6:	f100 81f2 	bmi.w	800458e <_svfprintf_r+0xa1e>
 80041aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80041ac:	e884 0300 	stmia.w	r4, {r8, r9}
 80041b0:	444b      	add	r3, r9
 80041b2:	9321      	str	r3, [sp, #132]	; 0x84
 80041b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80041b6:	3301      	adds	r3, #1
 80041b8:	2b07      	cmp	r3, #7
 80041ba:	9320      	str	r3, [sp, #128]	; 0x80
 80041bc:	f340 8419 	ble.w	80049f2 <_svfprintf_r+0xe82>
 80041c0:	aa1f      	add	r2, sp, #124	; 0x7c
 80041c2:	4651      	mov	r1, sl
 80041c4:	4658      	mov	r0, fp
 80041c6:	f002 f81d 	bl	8006204 <__ssprint_r>
 80041ca:	2800      	cmp	r0, #0
 80041cc:	f040 8431 	bne.w	8004a32 <_svfprintf_r+0xec2>
 80041d0:	ac2c      	add	r4, sp, #176	; 0xb0
 80041d2:	076b      	lsls	r3, r5, #29
 80041d4:	f100 8410 	bmi.w	80049f8 <_svfprintf_r+0xe88>
 80041d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80041de:	428a      	cmp	r2, r1
 80041e0:	bfac      	ite	ge
 80041e2:	189b      	addge	r3, r3, r2
 80041e4:	185b      	addlt	r3, r3, r1
 80041e6:	9309      	str	r3, [sp, #36]	; 0x24
 80041e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80041ea:	b13b      	cbz	r3, 80041fc <_svfprintf_r+0x68c>
 80041ec:	aa1f      	add	r2, sp, #124	; 0x7c
 80041ee:	4651      	mov	r1, sl
 80041f0:	4658      	mov	r0, fp
 80041f2:	f002 f807 	bl	8006204 <__ssprint_r>
 80041f6:	2800      	cmp	r0, #0
 80041f8:	f040 841b 	bne.w	8004a32 <_svfprintf_r+0xec2>
 80041fc:	2300      	movs	r3, #0
 80041fe:	9320      	str	r3, [sp, #128]	; 0x80
 8004200:	9f04      	ldr	r7, [sp, #16]
 8004202:	ac2c      	add	r4, sp, #176	; 0xb0
 8004204:	e4ee      	b.n	8003be4 <_svfprintf_r+0x74>
 8004206:	9b02      	ldr	r3, [sp, #8]
 8004208:	2b65      	cmp	r3, #101	; 0x65
 800420a:	f77f af0b 	ble.w	8004024 <_svfprintf_r+0x4b4>
 800420e:	9b02      	ldr	r3, [sp, #8]
 8004210:	2b66      	cmp	r3, #102	; 0x66
 8004212:	d124      	bne.n	800425e <_svfprintf_r+0x6ee>
 8004214:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004216:	2b00      	cmp	r3, #0
 8004218:	dd19      	ble.n	800424e <_svfprintf_r+0x6de>
 800421a:	f1b9 0f00 	cmp.w	r9, #0
 800421e:	d101      	bne.n	8004224 <_svfprintf_r+0x6b4>
 8004220:	07ea      	lsls	r2, r5, #31
 8004222:	d502      	bpl.n	800422a <_svfprintf_r+0x6ba>
 8004224:	9a08      	ldr	r2, [sp, #32]
 8004226:	4413      	add	r3, r2
 8004228:	444b      	add	r3, r9
 800422a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800422c:	4699      	mov	r9, r3
 800422e:	e735      	b.n	800409c <_svfprintf_r+0x52c>
 8004230:	460a      	mov	r2, r1
 8004232:	e70c      	b.n	800404e <_svfprintf_r+0x4de>
 8004234:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004238:	f803 1b01 	strb.w	r1, [r3], #1
 800423c:	e71c      	b.n	8004078 <_svfprintf_r+0x508>
 800423e:	2230      	movs	r2, #48	; 0x30
 8004240:	4413      	add	r3, r2
 8004242:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8004246:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800424a:	a91c      	add	r1, sp, #112	; 0x70
 800424c:	e718      	b.n	8004080 <_svfprintf_r+0x510>
 800424e:	f1b9 0f00 	cmp.w	r9, #0
 8004252:	d101      	bne.n	8004258 <_svfprintf_r+0x6e8>
 8004254:	07eb      	lsls	r3, r5, #31
 8004256:	d515      	bpl.n	8004284 <_svfprintf_r+0x714>
 8004258:	9b08      	ldr	r3, [sp, #32]
 800425a:	3301      	adds	r3, #1
 800425c:	e7e4      	b.n	8004228 <_svfprintf_r+0x6b8>
 800425e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004260:	9b03      	ldr	r3, [sp, #12]
 8004262:	429a      	cmp	r2, r3
 8004264:	db06      	blt.n	8004274 <_svfprintf_r+0x704>
 8004266:	07ef      	lsls	r7, r5, #31
 8004268:	d50e      	bpl.n	8004288 <_svfprintf_r+0x718>
 800426a:	9b08      	ldr	r3, [sp, #32]
 800426c:	4413      	add	r3, r2
 800426e:	2267      	movs	r2, #103	; 0x67
 8004270:	9202      	str	r2, [sp, #8]
 8004272:	e7da      	b.n	800422a <_svfprintf_r+0x6ba>
 8004274:	9b03      	ldr	r3, [sp, #12]
 8004276:	9908      	ldr	r1, [sp, #32]
 8004278:	2a00      	cmp	r2, #0
 800427a:	440b      	add	r3, r1
 800427c:	dcf7      	bgt.n	800426e <_svfprintf_r+0x6fe>
 800427e:	f1c2 0201 	rsb	r2, r2, #1
 8004282:	e7f3      	b.n	800426c <_svfprintf_r+0x6fc>
 8004284:	2301      	movs	r3, #1
 8004286:	e7d0      	b.n	800422a <_svfprintf_r+0x6ba>
 8004288:	4613      	mov	r3, r2
 800428a:	e7f0      	b.n	800426e <_svfprintf_r+0x6fe>
 800428c:	b10b      	cbz	r3, 8004292 <_svfprintf_r+0x722>
 800428e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004292:	f015 0f20 	tst.w	r5, #32
 8004296:	f107 0304 	add.w	r3, r7, #4
 800429a:	d008      	beq.n	80042ae <_svfprintf_r+0x73e>
 800429c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	17ce      	asrs	r6, r1, #31
 80042a2:	4608      	mov	r0, r1
 80042a4:	4631      	mov	r1, r6
 80042a6:	e9c2 0100 	strd	r0, r1, [r2]
 80042aa:	461f      	mov	r7, r3
 80042ac:	e49a      	b.n	8003be4 <_svfprintf_r+0x74>
 80042ae:	06ee      	lsls	r6, r5, #27
 80042b0:	d503      	bpl.n	80042ba <_svfprintf_r+0x74a>
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80042b6:	6011      	str	r1, [r2, #0]
 80042b8:	e7f7      	b.n	80042aa <_svfprintf_r+0x73a>
 80042ba:	0668      	lsls	r0, r5, #25
 80042bc:	d5f9      	bpl.n	80042b2 <_svfprintf_r+0x742>
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80042c4:	8011      	strh	r1, [r2, #0]
 80042c6:	e7f0      	b.n	80042aa <_svfprintf_r+0x73a>
 80042c8:	f045 0510 	orr.w	r5, r5, #16
 80042cc:	f015 0320 	ands.w	r3, r5, #32
 80042d0:	d022      	beq.n	8004318 <_svfprintf_r+0x7a8>
 80042d2:	3707      	adds	r7, #7
 80042d4:	f027 0707 	bic.w	r7, r7, #7
 80042d8:	f107 0308 	add.w	r3, r7, #8
 80042dc:	e9d7 6700 	ldrd	r6, r7, [r7]
 80042e0:	9304      	str	r3, [sp, #16]
 80042e2:	2300      	movs	r3, #0
 80042e4:	2200      	movs	r2, #0
 80042e6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80042ea:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80042ee:	f000 83db 	beq.w	8004aa8 <_svfprintf_r+0xf38>
 80042f2:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 80042f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80042f8:	ea56 0207 	orrs.w	r2, r6, r7
 80042fc:	f040 83d9 	bne.w	8004ab2 <_svfprintf_r+0xf42>
 8004300:	f1b9 0f00 	cmp.w	r9, #0
 8004304:	f000 80aa 	beq.w	800445c <_svfprintf_r+0x8ec>
 8004308:	2b01      	cmp	r3, #1
 800430a:	d076      	beq.n	80043fa <_svfprintf_r+0x88a>
 800430c:	2b02      	cmp	r3, #2
 800430e:	f000 8091 	beq.w	8004434 <_svfprintf_r+0x8c4>
 8004312:	2600      	movs	r6, #0
 8004314:	2700      	movs	r7, #0
 8004316:	e3d2      	b.n	8004abe <_svfprintf_r+0xf4e>
 8004318:	1d3a      	adds	r2, r7, #4
 800431a:	f015 0110 	ands.w	r1, r5, #16
 800431e:	9204      	str	r2, [sp, #16]
 8004320:	d002      	beq.n	8004328 <_svfprintf_r+0x7b8>
 8004322:	683e      	ldr	r6, [r7, #0]
 8004324:	2700      	movs	r7, #0
 8004326:	e7dd      	b.n	80042e4 <_svfprintf_r+0x774>
 8004328:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800432c:	d0f9      	beq.n	8004322 <_svfprintf_r+0x7b2>
 800432e:	883e      	ldrh	r6, [r7, #0]
 8004330:	2700      	movs	r7, #0
 8004332:	e7d6      	b.n	80042e2 <_svfprintf_r+0x772>
 8004334:	1d3b      	adds	r3, r7, #4
 8004336:	9304      	str	r3, [sp, #16]
 8004338:	2330      	movs	r3, #48	; 0x30
 800433a:	2278      	movs	r2, #120	; 0x78
 800433c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8004340:	4b14      	ldr	r3, [pc, #80]	; (8004394 <_svfprintf_r+0x824>)
 8004342:	683e      	ldr	r6, [r7, #0]
 8004344:	9311      	str	r3, [sp, #68]	; 0x44
 8004346:	2700      	movs	r7, #0
 8004348:	f045 0502 	orr.w	r5, r5, #2
 800434c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8004350:	2302      	movs	r3, #2
 8004352:	9202      	str	r2, [sp, #8]
 8004354:	e7c6      	b.n	80042e4 <_svfprintf_r+0x774>
 8004356:	1d3b      	adds	r3, r7, #4
 8004358:	2600      	movs	r6, #0
 800435a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800435e:	9304      	str	r3, [sp, #16]
 8004360:	f8d7 8000 	ldr.w	r8, [r7]
 8004364:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8004368:	d00a      	beq.n	8004380 <_svfprintf_r+0x810>
 800436a:	464a      	mov	r2, r9
 800436c:	4631      	mov	r1, r6
 800436e:	4640      	mov	r0, r8
 8004370:	f7fb ff36 	bl	80001e0 <memchr>
 8004374:	2800      	cmp	r0, #0
 8004376:	f000 808d 	beq.w	8004494 <_svfprintf_r+0x924>
 800437a:	eba0 0908 	sub.w	r9, r0, r8
 800437e:	e5cb      	b.n	8003f18 <_svfprintf_r+0x3a8>
 8004380:	4640      	mov	r0, r8
 8004382:	f7fb ff7d 	bl	8000280 <strlen>
 8004386:	4681      	mov	r9, r0
 8004388:	e5c6      	b.n	8003f18 <_svfprintf_r+0x3a8>
 800438a:	bf00      	nop
 800438c:	08007e6e 	.word	0x08007e6e
 8004390:	08007e7e 	.word	0x08007e7e
 8004394:	08007e5b 	.word	0x08007e5b
 8004398:	f045 0510 	orr.w	r5, r5, #16
 800439c:	06a9      	lsls	r1, r5, #26
 800439e:	d509      	bpl.n	80043b4 <_svfprintf_r+0x844>
 80043a0:	3707      	adds	r7, #7
 80043a2:	f027 0707 	bic.w	r7, r7, #7
 80043a6:	f107 0308 	add.w	r3, r7, #8
 80043aa:	e9d7 6700 	ldrd	r6, r7, [r7]
 80043ae:	9304      	str	r3, [sp, #16]
 80043b0:	2301      	movs	r3, #1
 80043b2:	e797      	b.n	80042e4 <_svfprintf_r+0x774>
 80043b4:	1d3b      	adds	r3, r7, #4
 80043b6:	f015 0f10 	tst.w	r5, #16
 80043ba:	9304      	str	r3, [sp, #16]
 80043bc:	d001      	beq.n	80043c2 <_svfprintf_r+0x852>
 80043be:	683e      	ldr	r6, [r7, #0]
 80043c0:	e002      	b.n	80043c8 <_svfprintf_r+0x858>
 80043c2:	066a      	lsls	r2, r5, #25
 80043c4:	d5fb      	bpl.n	80043be <_svfprintf_r+0x84e>
 80043c6:	883e      	ldrh	r6, [r7, #0]
 80043c8:	2700      	movs	r7, #0
 80043ca:	e7f1      	b.n	80043b0 <_svfprintf_r+0x840>
 80043cc:	b10b      	cbz	r3, 80043d2 <_svfprintf_r+0x862>
 80043ce:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80043d2:	4ba3      	ldr	r3, [pc, #652]	; (8004660 <_svfprintf_r+0xaf0>)
 80043d4:	e4c2      	b.n	8003d5c <_svfprintf_r+0x1ec>
 80043d6:	1d3b      	adds	r3, r7, #4
 80043d8:	f015 0f10 	tst.w	r5, #16
 80043dc:	9304      	str	r3, [sp, #16]
 80043de:	d001      	beq.n	80043e4 <_svfprintf_r+0x874>
 80043e0:	683e      	ldr	r6, [r7, #0]
 80043e2:	e002      	b.n	80043ea <_svfprintf_r+0x87a>
 80043e4:	066e      	lsls	r6, r5, #25
 80043e6:	d5fb      	bpl.n	80043e0 <_svfprintf_r+0x870>
 80043e8:	883e      	ldrh	r6, [r7, #0]
 80043ea:	2700      	movs	r7, #0
 80043ec:	e4c2      	b.n	8003d74 <_svfprintf_r+0x204>
 80043ee:	4643      	mov	r3, r8
 80043f0:	e366      	b.n	8004ac0 <_svfprintf_r+0xf50>
 80043f2:	2f00      	cmp	r7, #0
 80043f4:	bf08      	it	eq
 80043f6:	2e0a      	cmpeq	r6, #10
 80043f8:	d205      	bcs.n	8004406 <_svfprintf_r+0x896>
 80043fa:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80043fe:	3630      	adds	r6, #48	; 0x30
 8004400:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8004404:	e377      	b.n	8004af6 <_svfprintf_r+0xf86>
 8004406:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800440a:	4630      	mov	r0, r6
 800440c:	4639      	mov	r1, r7
 800440e:	220a      	movs	r2, #10
 8004410:	2300      	movs	r3, #0
 8004412:	f7fc fc3d 	bl	8000c90 <__aeabi_uldivmod>
 8004416:	3230      	adds	r2, #48	; 0x30
 8004418:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800441c:	2300      	movs	r3, #0
 800441e:	4630      	mov	r0, r6
 8004420:	4639      	mov	r1, r7
 8004422:	220a      	movs	r2, #10
 8004424:	f7fc fc34 	bl	8000c90 <__aeabi_uldivmod>
 8004428:	4606      	mov	r6, r0
 800442a:	460f      	mov	r7, r1
 800442c:	ea56 0307 	orrs.w	r3, r6, r7
 8004430:	d1eb      	bne.n	800440a <_svfprintf_r+0x89a>
 8004432:	e360      	b.n	8004af6 <_svfprintf_r+0xf86>
 8004434:	2600      	movs	r6, #0
 8004436:	2700      	movs	r7, #0
 8004438:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800443c:	f006 030f 	and.w	r3, r6, #15
 8004440:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004442:	5cd3      	ldrb	r3, [r2, r3]
 8004444:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8004448:	0933      	lsrs	r3, r6, #4
 800444a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800444e:	093a      	lsrs	r2, r7, #4
 8004450:	461e      	mov	r6, r3
 8004452:	4617      	mov	r7, r2
 8004454:	ea56 0307 	orrs.w	r3, r6, r7
 8004458:	d1f0      	bne.n	800443c <_svfprintf_r+0x8cc>
 800445a:	e34c      	b.n	8004af6 <_svfprintf_r+0xf86>
 800445c:	b93b      	cbnz	r3, 800446e <_svfprintf_r+0x8fe>
 800445e:	07ea      	lsls	r2, r5, #31
 8004460:	d505      	bpl.n	800446e <_svfprintf_r+0x8fe>
 8004462:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8004466:	2330      	movs	r3, #48	; 0x30
 8004468:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800446c:	e343      	b.n	8004af6 <_svfprintf_r+0xf86>
 800446e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8004472:	e340      	b.n	8004af6 <_svfprintf_r+0xf86>
 8004474:	b10b      	cbz	r3, 800447a <_svfprintf_r+0x90a>
 8004476:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800447a:	9b02      	ldr	r3, [sp, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 82f7 	beq.w	8004a70 <_svfprintf_r+0xf00>
 8004482:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004486:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800448a:	2600      	movs	r6, #0
 800448c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8004490:	9704      	str	r7, [sp, #16]
 8004492:	e4e8      	b.n	8003e66 <_svfprintf_r+0x2f6>
 8004494:	4606      	mov	r6, r0
 8004496:	e53f      	b.n	8003f18 <_svfprintf_r+0x3a8>
 8004498:	2310      	movs	r3, #16
 800449a:	6063      	str	r3, [r4, #4]
 800449c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800449e:	3310      	adds	r3, #16
 80044a0:	9321      	str	r3, [sp, #132]	; 0x84
 80044a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80044a4:	3301      	adds	r3, #1
 80044a6:	2b07      	cmp	r3, #7
 80044a8:	9320      	str	r3, [sp, #128]	; 0x80
 80044aa:	dc04      	bgt.n	80044b6 <_svfprintf_r+0x946>
 80044ac:	3408      	adds	r4, #8
 80044ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044b0:	3b10      	subs	r3, #16
 80044b2:	930c      	str	r3, [sp, #48]	; 0x30
 80044b4:	e615      	b.n	80040e2 <_svfprintf_r+0x572>
 80044b6:	aa1f      	add	r2, sp, #124	; 0x7c
 80044b8:	4651      	mov	r1, sl
 80044ba:	4658      	mov	r0, fp
 80044bc:	f001 fea2 	bl	8006204 <__ssprint_r>
 80044c0:	2800      	cmp	r0, #0
 80044c2:	f040 82b6 	bne.w	8004a32 <_svfprintf_r+0xec2>
 80044c6:	ac2c      	add	r4, sp, #176	; 0xb0
 80044c8:	e7f1      	b.n	80044ae <_svfprintf_r+0x93e>
 80044ca:	aa1f      	add	r2, sp, #124	; 0x7c
 80044cc:	4651      	mov	r1, sl
 80044ce:	4658      	mov	r0, fp
 80044d0:	f001 fe98 	bl	8006204 <__ssprint_r>
 80044d4:	2800      	cmp	r0, #0
 80044d6:	f040 82ac 	bne.w	8004a32 <_svfprintf_r+0xec2>
 80044da:	ac2c      	add	r4, sp, #176	; 0xb0
 80044dc:	e614      	b.n	8004108 <_svfprintf_r+0x598>
 80044de:	aa1f      	add	r2, sp, #124	; 0x7c
 80044e0:	4651      	mov	r1, sl
 80044e2:	4658      	mov	r0, fp
 80044e4:	f001 fe8e 	bl	8006204 <__ssprint_r>
 80044e8:	2800      	cmp	r0, #0
 80044ea:	f040 82a2 	bne.w	8004a32 <_svfprintf_r+0xec2>
 80044ee:	ac2c      	add	r4, sp, #176	; 0xb0
 80044f0:	e61c      	b.n	800412c <_svfprintf_r+0x5bc>
 80044f2:	aa1f      	add	r2, sp, #124	; 0x7c
 80044f4:	4651      	mov	r1, sl
 80044f6:	4658      	mov	r0, fp
 80044f8:	f001 fe84 	bl	8006204 <__ssprint_r>
 80044fc:	2800      	cmp	r0, #0
 80044fe:	f040 8298 	bne.w	8004a32 <_svfprintf_r+0xec2>
 8004502:	ac2c      	add	r4, sp, #176	; 0xb0
 8004504:	e622      	b.n	800414c <_svfprintf_r+0x5dc>
 8004506:	2210      	movs	r2, #16
 8004508:	6062      	str	r2, [r4, #4]
 800450a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800450c:	3210      	adds	r2, #16
 800450e:	9221      	str	r2, [sp, #132]	; 0x84
 8004510:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004512:	3201      	adds	r2, #1
 8004514:	2a07      	cmp	r2, #7
 8004516:	9220      	str	r2, [sp, #128]	; 0x80
 8004518:	dc02      	bgt.n	8004520 <_svfprintf_r+0x9b0>
 800451a:	3408      	adds	r4, #8
 800451c:	3b10      	subs	r3, #16
 800451e:	e61d      	b.n	800415c <_svfprintf_r+0x5ec>
 8004520:	aa1f      	add	r2, sp, #124	; 0x7c
 8004522:	4651      	mov	r1, sl
 8004524:	4658      	mov	r0, fp
 8004526:	930c      	str	r3, [sp, #48]	; 0x30
 8004528:	f001 fe6c 	bl	8006204 <__ssprint_r>
 800452c:	2800      	cmp	r0, #0
 800452e:	f040 8280 	bne.w	8004a32 <_svfprintf_r+0xec2>
 8004532:	ac2c      	add	r4, sp, #176	; 0xb0
 8004534:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004536:	e7f1      	b.n	800451c <_svfprintf_r+0x9ac>
 8004538:	aa1f      	add	r2, sp, #124	; 0x7c
 800453a:	4651      	mov	r1, sl
 800453c:	4658      	mov	r0, fp
 800453e:	f001 fe61 	bl	8006204 <__ssprint_r>
 8004542:	2800      	cmp	r0, #0
 8004544:	f040 8275 	bne.w	8004a32 <_svfprintf_r+0xec2>
 8004548:	ac2c      	add	r4, sp, #176	; 0xb0
 800454a:	e617      	b.n	800417c <_svfprintf_r+0x60c>
 800454c:	2310      	movs	r3, #16
 800454e:	6063      	str	r3, [r4, #4]
 8004550:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004552:	3310      	adds	r3, #16
 8004554:	9321      	str	r3, [sp, #132]	; 0x84
 8004556:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004558:	3301      	adds	r3, #1
 800455a:	2b07      	cmp	r3, #7
 800455c:	9320      	str	r3, [sp, #128]	; 0x80
 800455e:	dc02      	bgt.n	8004566 <_svfprintf_r+0x9f6>
 8004560:	3408      	adds	r4, #8
 8004562:	3e10      	subs	r6, #16
 8004564:	e60e      	b.n	8004184 <_svfprintf_r+0x614>
 8004566:	aa1f      	add	r2, sp, #124	; 0x7c
 8004568:	4651      	mov	r1, sl
 800456a:	4658      	mov	r0, fp
 800456c:	f001 fe4a 	bl	8006204 <__ssprint_r>
 8004570:	2800      	cmp	r0, #0
 8004572:	f040 825e 	bne.w	8004a32 <_svfprintf_r+0xec2>
 8004576:	ac2c      	add	r4, sp, #176	; 0xb0
 8004578:	e7f3      	b.n	8004562 <_svfprintf_r+0x9f2>
 800457a:	aa1f      	add	r2, sp, #124	; 0x7c
 800457c:	4651      	mov	r1, sl
 800457e:	4658      	mov	r0, fp
 8004580:	f001 fe40 	bl	8006204 <__ssprint_r>
 8004584:	2800      	cmp	r0, #0
 8004586:	f040 8254 	bne.w	8004a32 <_svfprintf_r+0xec2>
 800458a:	ac2c      	add	r4, sp, #176	; 0xb0
 800458c:	e60a      	b.n	80041a4 <_svfprintf_r+0x634>
 800458e:	9b02      	ldr	r3, [sp, #8]
 8004590:	2b65      	cmp	r3, #101	; 0x65
 8004592:	f340 81a9 	ble.w	80048e8 <_svfprintf_r+0xd78>
 8004596:	2200      	movs	r2, #0
 8004598:	2300      	movs	r3, #0
 800459a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800459e:	f7fc fa97 	bl	8000ad0 <__aeabi_dcmpeq>
 80045a2:	2800      	cmp	r0, #0
 80045a4:	d062      	beq.n	800466c <_svfprintf_r+0xafc>
 80045a6:	4b2f      	ldr	r3, [pc, #188]	; (8004664 <_svfprintf_r+0xaf4>)
 80045a8:	6023      	str	r3, [r4, #0]
 80045aa:	2301      	movs	r3, #1
 80045ac:	6063      	str	r3, [r4, #4]
 80045ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045b0:	3301      	adds	r3, #1
 80045b2:	9321      	str	r3, [sp, #132]	; 0x84
 80045b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80045b6:	3301      	adds	r3, #1
 80045b8:	2b07      	cmp	r3, #7
 80045ba:	9320      	str	r3, [sp, #128]	; 0x80
 80045bc:	dc25      	bgt.n	800460a <_svfprintf_r+0xa9a>
 80045be:	3408      	adds	r4, #8
 80045c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80045c2:	9a03      	ldr	r2, [sp, #12]
 80045c4:	4293      	cmp	r3, r2
 80045c6:	db02      	blt.n	80045ce <_svfprintf_r+0xa5e>
 80045c8:	07ee      	lsls	r6, r5, #31
 80045ca:	f57f ae02 	bpl.w	80041d2 <_svfprintf_r+0x662>
 80045ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045d0:	6023      	str	r3, [r4, #0]
 80045d2:	9b08      	ldr	r3, [sp, #32]
 80045d4:	6063      	str	r3, [r4, #4]
 80045d6:	9a08      	ldr	r2, [sp, #32]
 80045d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045da:	4413      	add	r3, r2
 80045dc:	9321      	str	r3, [sp, #132]	; 0x84
 80045de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80045e0:	3301      	adds	r3, #1
 80045e2:	2b07      	cmp	r3, #7
 80045e4:	9320      	str	r3, [sp, #128]	; 0x80
 80045e6:	dc1a      	bgt.n	800461e <_svfprintf_r+0xaae>
 80045e8:	3408      	adds	r4, #8
 80045ea:	9b03      	ldr	r3, [sp, #12]
 80045ec:	1e5e      	subs	r6, r3, #1
 80045ee:	2e00      	cmp	r6, #0
 80045f0:	f77f adef 	ble.w	80041d2 <_svfprintf_r+0x662>
 80045f4:	4f1c      	ldr	r7, [pc, #112]	; (8004668 <_svfprintf_r+0xaf8>)
 80045f6:	f04f 0810 	mov.w	r8, #16
 80045fa:	2e10      	cmp	r6, #16
 80045fc:	6027      	str	r7, [r4, #0]
 80045fe:	dc18      	bgt.n	8004632 <_svfprintf_r+0xac2>
 8004600:	6066      	str	r6, [r4, #4]
 8004602:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004604:	441e      	add	r6, r3
 8004606:	9621      	str	r6, [sp, #132]	; 0x84
 8004608:	e5d4      	b.n	80041b4 <_svfprintf_r+0x644>
 800460a:	aa1f      	add	r2, sp, #124	; 0x7c
 800460c:	4651      	mov	r1, sl
 800460e:	4658      	mov	r0, fp
 8004610:	f001 fdf8 	bl	8006204 <__ssprint_r>
 8004614:	2800      	cmp	r0, #0
 8004616:	f040 820c 	bne.w	8004a32 <_svfprintf_r+0xec2>
 800461a:	ac2c      	add	r4, sp, #176	; 0xb0
 800461c:	e7d0      	b.n	80045c0 <_svfprintf_r+0xa50>
 800461e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004620:	4651      	mov	r1, sl
 8004622:	4658      	mov	r0, fp
 8004624:	f001 fdee 	bl	8006204 <__ssprint_r>
 8004628:	2800      	cmp	r0, #0
 800462a:	f040 8202 	bne.w	8004a32 <_svfprintf_r+0xec2>
 800462e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004630:	e7db      	b.n	80045ea <_svfprintf_r+0xa7a>
 8004632:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004634:	f8c4 8004 	str.w	r8, [r4, #4]
 8004638:	3310      	adds	r3, #16
 800463a:	9321      	str	r3, [sp, #132]	; 0x84
 800463c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800463e:	3301      	adds	r3, #1
 8004640:	2b07      	cmp	r3, #7
 8004642:	9320      	str	r3, [sp, #128]	; 0x80
 8004644:	dc02      	bgt.n	800464c <_svfprintf_r+0xadc>
 8004646:	3408      	adds	r4, #8
 8004648:	3e10      	subs	r6, #16
 800464a:	e7d6      	b.n	80045fa <_svfprintf_r+0xa8a>
 800464c:	aa1f      	add	r2, sp, #124	; 0x7c
 800464e:	4651      	mov	r1, sl
 8004650:	4658      	mov	r0, fp
 8004652:	f001 fdd7 	bl	8006204 <__ssprint_r>
 8004656:	2800      	cmp	r0, #0
 8004658:	f040 81eb 	bne.w	8004a32 <_svfprintf_r+0xec2>
 800465c:	ac2c      	add	r4, sp, #176	; 0xb0
 800465e:	e7f3      	b.n	8004648 <_svfprintf_r+0xad8>
 8004660:	08007e5b 	.word	0x08007e5b
 8004664:	08007e6c 	.word	0x08007e6c
 8004668:	08007e7e 	.word	0x08007e7e
 800466c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800466e:	2b00      	cmp	r3, #0
 8004670:	dc7a      	bgt.n	8004768 <_svfprintf_r+0xbf8>
 8004672:	4b9b      	ldr	r3, [pc, #620]	; (80048e0 <_svfprintf_r+0xd70>)
 8004674:	6023      	str	r3, [r4, #0]
 8004676:	2301      	movs	r3, #1
 8004678:	6063      	str	r3, [r4, #4]
 800467a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800467c:	3301      	adds	r3, #1
 800467e:	9321      	str	r3, [sp, #132]	; 0x84
 8004680:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004682:	3301      	adds	r3, #1
 8004684:	2b07      	cmp	r3, #7
 8004686:	9320      	str	r3, [sp, #128]	; 0x80
 8004688:	dc44      	bgt.n	8004714 <_svfprintf_r+0xba4>
 800468a:	3408      	adds	r4, #8
 800468c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800468e:	b923      	cbnz	r3, 800469a <_svfprintf_r+0xb2a>
 8004690:	9b03      	ldr	r3, [sp, #12]
 8004692:	b913      	cbnz	r3, 800469a <_svfprintf_r+0xb2a>
 8004694:	07e8      	lsls	r0, r5, #31
 8004696:	f57f ad9c 	bpl.w	80041d2 <_svfprintf_r+0x662>
 800469a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800469c:	6023      	str	r3, [r4, #0]
 800469e:	9b08      	ldr	r3, [sp, #32]
 80046a0:	6063      	str	r3, [r4, #4]
 80046a2:	9a08      	ldr	r2, [sp, #32]
 80046a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80046a6:	4413      	add	r3, r2
 80046a8:	9321      	str	r3, [sp, #132]	; 0x84
 80046aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80046ac:	3301      	adds	r3, #1
 80046ae:	2b07      	cmp	r3, #7
 80046b0:	9320      	str	r3, [sp, #128]	; 0x80
 80046b2:	dc39      	bgt.n	8004728 <_svfprintf_r+0xbb8>
 80046b4:	f104 0308 	add.w	r3, r4, #8
 80046b8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80046ba:	2e00      	cmp	r6, #0
 80046bc:	da19      	bge.n	80046f2 <_svfprintf_r+0xb82>
 80046be:	4f89      	ldr	r7, [pc, #548]	; (80048e4 <_svfprintf_r+0xd74>)
 80046c0:	4276      	negs	r6, r6
 80046c2:	2410      	movs	r4, #16
 80046c4:	2e10      	cmp	r6, #16
 80046c6:	601f      	str	r7, [r3, #0]
 80046c8:	dc38      	bgt.n	800473c <_svfprintf_r+0xbcc>
 80046ca:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80046cc:	605e      	str	r6, [r3, #4]
 80046ce:	4416      	add	r6, r2
 80046d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80046d2:	9621      	str	r6, [sp, #132]	; 0x84
 80046d4:	3201      	adds	r2, #1
 80046d6:	2a07      	cmp	r2, #7
 80046d8:	f103 0308 	add.w	r3, r3, #8
 80046dc:	9220      	str	r2, [sp, #128]	; 0x80
 80046de:	dd08      	ble.n	80046f2 <_svfprintf_r+0xb82>
 80046e0:	aa1f      	add	r2, sp, #124	; 0x7c
 80046e2:	4651      	mov	r1, sl
 80046e4:	4658      	mov	r0, fp
 80046e6:	f001 fd8d 	bl	8006204 <__ssprint_r>
 80046ea:	2800      	cmp	r0, #0
 80046ec:	f040 81a1 	bne.w	8004a32 <_svfprintf_r+0xec2>
 80046f0:	ab2c      	add	r3, sp, #176	; 0xb0
 80046f2:	9a03      	ldr	r2, [sp, #12]
 80046f4:	605a      	str	r2, [r3, #4]
 80046f6:	9903      	ldr	r1, [sp, #12]
 80046f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80046fa:	f8c3 8000 	str.w	r8, [r3]
 80046fe:	440a      	add	r2, r1
 8004700:	9221      	str	r2, [sp, #132]	; 0x84
 8004702:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004704:	3201      	adds	r2, #1
 8004706:	2a07      	cmp	r2, #7
 8004708:	9220      	str	r2, [sp, #128]	; 0x80
 800470a:	f73f ad59 	bgt.w	80041c0 <_svfprintf_r+0x650>
 800470e:	f103 0408 	add.w	r4, r3, #8
 8004712:	e55e      	b.n	80041d2 <_svfprintf_r+0x662>
 8004714:	aa1f      	add	r2, sp, #124	; 0x7c
 8004716:	4651      	mov	r1, sl
 8004718:	4658      	mov	r0, fp
 800471a:	f001 fd73 	bl	8006204 <__ssprint_r>
 800471e:	2800      	cmp	r0, #0
 8004720:	f040 8187 	bne.w	8004a32 <_svfprintf_r+0xec2>
 8004724:	ac2c      	add	r4, sp, #176	; 0xb0
 8004726:	e7b1      	b.n	800468c <_svfprintf_r+0xb1c>
 8004728:	aa1f      	add	r2, sp, #124	; 0x7c
 800472a:	4651      	mov	r1, sl
 800472c:	4658      	mov	r0, fp
 800472e:	f001 fd69 	bl	8006204 <__ssprint_r>
 8004732:	2800      	cmp	r0, #0
 8004734:	f040 817d 	bne.w	8004a32 <_svfprintf_r+0xec2>
 8004738:	ab2c      	add	r3, sp, #176	; 0xb0
 800473a:	e7bd      	b.n	80046b8 <_svfprintf_r+0xb48>
 800473c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800473e:	605c      	str	r4, [r3, #4]
 8004740:	3210      	adds	r2, #16
 8004742:	9221      	str	r2, [sp, #132]	; 0x84
 8004744:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004746:	3201      	adds	r2, #1
 8004748:	2a07      	cmp	r2, #7
 800474a:	9220      	str	r2, [sp, #128]	; 0x80
 800474c:	dc02      	bgt.n	8004754 <_svfprintf_r+0xbe4>
 800474e:	3308      	adds	r3, #8
 8004750:	3e10      	subs	r6, #16
 8004752:	e7b7      	b.n	80046c4 <_svfprintf_r+0xb54>
 8004754:	aa1f      	add	r2, sp, #124	; 0x7c
 8004756:	4651      	mov	r1, sl
 8004758:	4658      	mov	r0, fp
 800475a:	f001 fd53 	bl	8006204 <__ssprint_r>
 800475e:	2800      	cmp	r0, #0
 8004760:	f040 8167 	bne.w	8004a32 <_svfprintf_r+0xec2>
 8004764:	ab2c      	add	r3, sp, #176	; 0xb0
 8004766:	e7f3      	b.n	8004750 <_svfprintf_r+0xbe0>
 8004768:	9b03      	ldr	r3, [sp, #12]
 800476a:	42bb      	cmp	r3, r7
 800476c:	bfa8      	it	ge
 800476e:	463b      	movge	r3, r7
 8004770:	2b00      	cmp	r3, #0
 8004772:	461e      	mov	r6, r3
 8004774:	dd0b      	ble.n	800478e <_svfprintf_r+0xc1e>
 8004776:	6063      	str	r3, [r4, #4]
 8004778:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800477a:	f8c4 8000 	str.w	r8, [r4]
 800477e:	4433      	add	r3, r6
 8004780:	9321      	str	r3, [sp, #132]	; 0x84
 8004782:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004784:	3301      	adds	r3, #1
 8004786:	2b07      	cmp	r3, #7
 8004788:	9320      	str	r3, [sp, #128]	; 0x80
 800478a:	dc5f      	bgt.n	800484c <_svfprintf_r+0xcdc>
 800478c:	3408      	adds	r4, #8
 800478e:	2e00      	cmp	r6, #0
 8004790:	bfac      	ite	ge
 8004792:	1bbe      	subge	r6, r7, r6
 8004794:	463e      	movlt	r6, r7
 8004796:	2e00      	cmp	r6, #0
 8004798:	dd0f      	ble.n	80047ba <_svfprintf_r+0xc4a>
 800479a:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80048e4 <_svfprintf_r+0xd74>
 800479e:	f8c4 9000 	str.w	r9, [r4]
 80047a2:	2e10      	cmp	r6, #16
 80047a4:	dc5c      	bgt.n	8004860 <_svfprintf_r+0xcf0>
 80047a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047a8:	6066      	str	r6, [r4, #4]
 80047aa:	441e      	add	r6, r3
 80047ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80047ae:	9621      	str	r6, [sp, #132]	; 0x84
 80047b0:	3301      	adds	r3, #1
 80047b2:	2b07      	cmp	r3, #7
 80047b4:	9320      	str	r3, [sp, #128]	; 0x80
 80047b6:	dc6a      	bgt.n	800488e <_svfprintf_r+0xd1e>
 80047b8:	3408      	adds	r4, #8
 80047ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80047bc:	9a03      	ldr	r2, [sp, #12]
 80047be:	4293      	cmp	r3, r2
 80047c0:	db01      	blt.n	80047c6 <_svfprintf_r+0xc56>
 80047c2:	07e9      	lsls	r1, r5, #31
 80047c4:	d50d      	bpl.n	80047e2 <_svfprintf_r+0xc72>
 80047c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047c8:	6023      	str	r3, [r4, #0]
 80047ca:	9b08      	ldr	r3, [sp, #32]
 80047cc:	6063      	str	r3, [r4, #4]
 80047ce:	9a08      	ldr	r2, [sp, #32]
 80047d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047d2:	4413      	add	r3, r2
 80047d4:	9321      	str	r3, [sp, #132]	; 0x84
 80047d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80047d8:	3301      	adds	r3, #1
 80047da:	2b07      	cmp	r3, #7
 80047dc:	9320      	str	r3, [sp, #128]	; 0x80
 80047de:	dc60      	bgt.n	80048a2 <_svfprintf_r+0xd32>
 80047e0:	3408      	adds	r4, #8
 80047e2:	9b03      	ldr	r3, [sp, #12]
 80047e4:	9a03      	ldr	r2, [sp, #12]
 80047e6:	1bde      	subs	r6, r3, r7
 80047e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	429e      	cmp	r6, r3
 80047ee:	bfa8      	it	ge
 80047f0:	461e      	movge	r6, r3
 80047f2:	2e00      	cmp	r6, #0
 80047f4:	dd0b      	ble.n	800480e <_svfprintf_r+0xc9e>
 80047f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047f8:	6066      	str	r6, [r4, #4]
 80047fa:	4433      	add	r3, r6
 80047fc:	9321      	str	r3, [sp, #132]	; 0x84
 80047fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004800:	3301      	adds	r3, #1
 8004802:	4447      	add	r7, r8
 8004804:	2b07      	cmp	r3, #7
 8004806:	6027      	str	r7, [r4, #0]
 8004808:	9320      	str	r3, [sp, #128]	; 0x80
 800480a:	dc54      	bgt.n	80048b6 <_svfprintf_r+0xd46>
 800480c:	3408      	adds	r4, #8
 800480e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004810:	9a03      	ldr	r2, [sp, #12]
 8004812:	2e00      	cmp	r6, #0
 8004814:	eba2 0303 	sub.w	r3, r2, r3
 8004818:	bfac      	ite	ge
 800481a:	1b9e      	subge	r6, r3, r6
 800481c:	461e      	movlt	r6, r3
 800481e:	2e00      	cmp	r6, #0
 8004820:	f77f acd7 	ble.w	80041d2 <_svfprintf_r+0x662>
 8004824:	4f2f      	ldr	r7, [pc, #188]	; (80048e4 <_svfprintf_r+0xd74>)
 8004826:	f04f 0810 	mov.w	r8, #16
 800482a:	2e10      	cmp	r6, #16
 800482c:	6027      	str	r7, [r4, #0]
 800482e:	f77f aee7 	ble.w	8004600 <_svfprintf_r+0xa90>
 8004832:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004834:	f8c4 8004 	str.w	r8, [r4, #4]
 8004838:	3310      	adds	r3, #16
 800483a:	9321      	str	r3, [sp, #132]	; 0x84
 800483c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800483e:	3301      	adds	r3, #1
 8004840:	2b07      	cmp	r3, #7
 8004842:	9320      	str	r3, [sp, #128]	; 0x80
 8004844:	dc41      	bgt.n	80048ca <_svfprintf_r+0xd5a>
 8004846:	3408      	adds	r4, #8
 8004848:	3e10      	subs	r6, #16
 800484a:	e7ee      	b.n	800482a <_svfprintf_r+0xcba>
 800484c:	aa1f      	add	r2, sp, #124	; 0x7c
 800484e:	4651      	mov	r1, sl
 8004850:	4658      	mov	r0, fp
 8004852:	f001 fcd7 	bl	8006204 <__ssprint_r>
 8004856:	2800      	cmp	r0, #0
 8004858:	f040 80eb 	bne.w	8004a32 <_svfprintf_r+0xec2>
 800485c:	ac2c      	add	r4, sp, #176	; 0xb0
 800485e:	e796      	b.n	800478e <_svfprintf_r+0xc1e>
 8004860:	2310      	movs	r3, #16
 8004862:	6063      	str	r3, [r4, #4]
 8004864:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004866:	3310      	adds	r3, #16
 8004868:	9321      	str	r3, [sp, #132]	; 0x84
 800486a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800486c:	3301      	adds	r3, #1
 800486e:	2b07      	cmp	r3, #7
 8004870:	9320      	str	r3, [sp, #128]	; 0x80
 8004872:	dc02      	bgt.n	800487a <_svfprintf_r+0xd0a>
 8004874:	3408      	adds	r4, #8
 8004876:	3e10      	subs	r6, #16
 8004878:	e791      	b.n	800479e <_svfprintf_r+0xc2e>
 800487a:	aa1f      	add	r2, sp, #124	; 0x7c
 800487c:	4651      	mov	r1, sl
 800487e:	4658      	mov	r0, fp
 8004880:	f001 fcc0 	bl	8006204 <__ssprint_r>
 8004884:	2800      	cmp	r0, #0
 8004886:	f040 80d4 	bne.w	8004a32 <_svfprintf_r+0xec2>
 800488a:	ac2c      	add	r4, sp, #176	; 0xb0
 800488c:	e7f3      	b.n	8004876 <_svfprintf_r+0xd06>
 800488e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004890:	4651      	mov	r1, sl
 8004892:	4658      	mov	r0, fp
 8004894:	f001 fcb6 	bl	8006204 <__ssprint_r>
 8004898:	2800      	cmp	r0, #0
 800489a:	f040 80ca 	bne.w	8004a32 <_svfprintf_r+0xec2>
 800489e:	ac2c      	add	r4, sp, #176	; 0xb0
 80048a0:	e78b      	b.n	80047ba <_svfprintf_r+0xc4a>
 80048a2:	aa1f      	add	r2, sp, #124	; 0x7c
 80048a4:	4651      	mov	r1, sl
 80048a6:	4658      	mov	r0, fp
 80048a8:	f001 fcac 	bl	8006204 <__ssprint_r>
 80048ac:	2800      	cmp	r0, #0
 80048ae:	f040 80c0 	bne.w	8004a32 <_svfprintf_r+0xec2>
 80048b2:	ac2c      	add	r4, sp, #176	; 0xb0
 80048b4:	e795      	b.n	80047e2 <_svfprintf_r+0xc72>
 80048b6:	aa1f      	add	r2, sp, #124	; 0x7c
 80048b8:	4651      	mov	r1, sl
 80048ba:	4658      	mov	r0, fp
 80048bc:	f001 fca2 	bl	8006204 <__ssprint_r>
 80048c0:	2800      	cmp	r0, #0
 80048c2:	f040 80b6 	bne.w	8004a32 <_svfprintf_r+0xec2>
 80048c6:	ac2c      	add	r4, sp, #176	; 0xb0
 80048c8:	e7a1      	b.n	800480e <_svfprintf_r+0xc9e>
 80048ca:	aa1f      	add	r2, sp, #124	; 0x7c
 80048cc:	4651      	mov	r1, sl
 80048ce:	4658      	mov	r0, fp
 80048d0:	f001 fc98 	bl	8006204 <__ssprint_r>
 80048d4:	2800      	cmp	r0, #0
 80048d6:	f040 80ac 	bne.w	8004a32 <_svfprintf_r+0xec2>
 80048da:	ac2c      	add	r4, sp, #176	; 0xb0
 80048dc:	e7b4      	b.n	8004848 <_svfprintf_r+0xcd8>
 80048de:	bf00      	nop
 80048e0:	08007e6c 	.word	0x08007e6c
 80048e4:	08007e7e 	.word	0x08007e7e
 80048e8:	9b03      	ldr	r3, [sp, #12]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	dc01      	bgt.n	80048f2 <_svfprintf_r+0xd82>
 80048ee:	07ea      	lsls	r2, r5, #31
 80048f0:	d576      	bpl.n	80049e0 <_svfprintf_r+0xe70>
 80048f2:	2301      	movs	r3, #1
 80048f4:	6063      	str	r3, [r4, #4]
 80048f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048f8:	f8c4 8000 	str.w	r8, [r4]
 80048fc:	3301      	adds	r3, #1
 80048fe:	9321      	str	r3, [sp, #132]	; 0x84
 8004900:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004902:	3301      	adds	r3, #1
 8004904:	2b07      	cmp	r3, #7
 8004906:	9320      	str	r3, [sp, #128]	; 0x80
 8004908:	dc36      	bgt.n	8004978 <_svfprintf_r+0xe08>
 800490a:	3408      	adds	r4, #8
 800490c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800490e:	6023      	str	r3, [r4, #0]
 8004910:	9b08      	ldr	r3, [sp, #32]
 8004912:	6063      	str	r3, [r4, #4]
 8004914:	9a08      	ldr	r2, [sp, #32]
 8004916:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004918:	4413      	add	r3, r2
 800491a:	9321      	str	r3, [sp, #132]	; 0x84
 800491c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800491e:	3301      	adds	r3, #1
 8004920:	2b07      	cmp	r3, #7
 8004922:	9320      	str	r3, [sp, #128]	; 0x80
 8004924:	dc31      	bgt.n	800498a <_svfprintf_r+0xe1a>
 8004926:	3408      	adds	r4, #8
 8004928:	2300      	movs	r3, #0
 800492a:	2200      	movs	r2, #0
 800492c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004930:	f7fc f8ce 	bl	8000ad0 <__aeabi_dcmpeq>
 8004934:	9b03      	ldr	r3, [sp, #12]
 8004936:	1e5e      	subs	r6, r3, #1
 8004938:	2800      	cmp	r0, #0
 800493a:	d12f      	bne.n	800499c <_svfprintf_r+0xe2c>
 800493c:	f108 0301 	add.w	r3, r8, #1
 8004940:	e884 0048 	stmia.w	r4, {r3, r6}
 8004944:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004946:	9a03      	ldr	r2, [sp, #12]
 8004948:	3b01      	subs	r3, #1
 800494a:	4413      	add	r3, r2
 800494c:	9321      	str	r3, [sp, #132]	; 0x84
 800494e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004950:	3301      	adds	r3, #1
 8004952:	2b07      	cmp	r3, #7
 8004954:	9320      	str	r3, [sp, #128]	; 0x80
 8004956:	dd4a      	ble.n	80049ee <_svfprintf_r+0xe7e>
 8004958:	aa1f      	add	r2, sp, #124	; 0x7c
 800495a:	4651      	mov	r1, sl
 800495c:	4658      	mov	r0, fp
 800495e:	f001 fc51 	bl	8006204 <__ssprint_r>
 8004962:	2800      	cmp	r0, #0
 8004964:	d165      	bne.n	8004a32 <_svfprintf_r+0xec2>
 8004966:	ac2c      	add	r4, sp, #176	; 0xb0
 8004968:	ab1b      	add	r3, sp, #108	; 0x6c
 800496a:	6023      	str	r3, [r4, #0]
 800496c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800496e:	6063      	str	r3, [r4, #4]
 8004970:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004972:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004974:	4413      	add	r3, r2
 8004976:	e41c      	b.n	80041b2 <_svfprintf_r+0x642>
 8004978:	aa1f      	add	r2, sp, #124	; 0x7c
 800497a:	4651      	mov	r1, sl
 800497c:	4658      	mov	r0, fp
 800497e:	f001 fc41 	bl	8006204 <__ssprint_r>
 8004982:	2800      	cmp	r0, #0
 8004984:	d155      	bne.n	8004a32 <_svfprintf_r+0xec2>
 8004986:	ac2c      	add	r4, sp, #176	; 0xb0
 8004988:	e7c0      	b.n	800490c <_svfprintf_r+0xd9c>
 800498a:	aa1f      	add	r2, sp, #124	; 0x7c
 800498c:	4651      	mov	r1, sl
 800498e:	4658      	mov	r0, fp
 8004990:	f001 fc38 	bl	8006204 <__ssprint_r>
 8004994:	2800      	cmp	r0, #0
 8004996:	d14c      	bne.n	8004a32 <_svfprintf_r+0xec2>
 8004998:	ac2c      	add	r4, sp, #176	; 0xb0
 800499a:	e7c5      	b.n	8004928 <_svfprintf_r+0xdb8>
 800499c:	2e00      	cmp	r6, #0
 800499e:	dde3      	ble.n	8004968 <_svfprintf_r+0xdf8>
 80049a0:	4f59      	ldr	r7, [pc, #356]	; (8004b08 <_svfprintf_r+0xf98>)
 80049a2:	f04f 0810 	mov.w	r8, #16
 80049a6:	2e10      	cmp	r6, #16
 80049a8:	6027      	str	r7, [r4, #0]
 80049aa:	dc04      	bgt.n	80049b6 <_svfprintf_r+0xe46>
 80049ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049ae:	6066      	str	r6, [r4, #4]
 80049b0:	441e      	add	r6, r3
 80049b2:	9621      	str	r6, [sp, #132]	; 0x84
 80049b4:	e7cb      	b.n	800494e <_svfprintf_r+0xdde>
 80049b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049b8:	f8c4 8004 	str.w	r8, [r4, #4]
 80049bc:	3310      	adds	r3, #16
 80049be:	9321      	str	r3, [sp, #132]	; 0x84
 80049c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80049c2:	3301      	adds	r3, #1
 80049c4:	2b07      	cmp	r3, #7
 80049c6:	9320      	str	r3, [sp, #128]	; 0x80
 80049c8:	dc02      	bgt.n	80049d0 <_svfprintf_r+0xe60>
 80049ca:	3408      	adds	r4, #8
 80049cc:	3e10      	subs	r6, #16
 80049ce:	e7ea      	b.n	80049a6 <_svfprintf_r+0xe36>
 80049d0:	aa1f      	add	r2, sp, #124	; 0x7c
 80049d2:	4651      	mov	r1, sl
 80049d4:	4658      	mov	r0, fp
 80049d6:	f001 fc15 	bl	8006204 <__ssprint_r>
 80049da:	bb50      	cbnz	r0, 8004a32 <_svfprintf_r+0xec2>
 80049dc:	ac2c      	add	r4, sp, #176	; 0xb0
 80049de:	e7f5      	b.n	80049cc <_svfprintf_r+0xe5c>
 80049e0:	2301      	movs	r3, #1
 80049e2:	6063      	str	r3, [r4, #4]
 80049e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049e6:	f8c4 8000 	str.w	r8, [r4]
 80049ea:	3301      	adds	r3, #1
 80049ec:	e7ae      	b.n	800494c <_svfprintf_r+0xddc>
 80049ee:	3408      	adds	r4, #8
 80049f0:	e7ba      	b.n	8004968 <_svfprintf_r+0xdf8>
 80049f2:	3408      	adds	r4, #8
 80049f4:	f7ff bbed 	b.w	80041d2 <_svfprintf_r+0x662>
 80049f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80049fc:	1a9d      	subs	r5, r3, r2
 80049fe:	2d00      	cmp	r5, #0
 8004a00:	f77f abea 	ble.w	80041d8 <_svfprintf_r+0x668>
 8004a04:	2610      	movs	r6, #16
 8004a06:	4b41      	ldr	r3, [pc, #260]	; (8004b0c <_svfprintf_r+0xf9c>)
 8004a08:	6023      	str	r3, [r4, #0]
 8004a0a:	2d10      	cmp	r5, #16
 8004a0c:	dc1b      	bgt.n	8004a46 <_svfprintf_r+0xed6>
 8004a0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a10:	6065      	str	r5, [r4, #4]
 8004a12:	441d      	add	r5, r3
 8004a14:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004a16:	9521      	str	r5, [sp, #132]	; 0x84
 8004a18:	3301      	adds	r3, #1
 8004a1a:	2b07      	cmp	r3, #7
 8004a1c:	9320      	str	r3, [sp, #128]	; 0x80
 8004a1e:	f77f abdb 	ble.w	80041d8 <_svfprintf_r+0x668>
 8004a22:	aa1f      	add	r2, sp, #124	; 0x7c
 8004a24:	4651      	mov	r1, sl
 8004a26:	4658      	mov	r0, fp
 8004a28:	f001 fbec 	bl	8006204 <__ssprint_r>
 8004a2c:	2800      	cmp	r0, #0
 8004a2e:	f43f abd3 	beq.w	80041d8 <_svfprintf_r+0x668>
 8004a32:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004a36:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a3c:	bf18      	it	ne
 8004a3e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8004a42:	f7ff b8b9 	b.w	8003bb8 <_svfprintf_r+0x48>
 8004a46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a48:	6066      	str	r6, [r4, #4]
 8004a4a:	3310      	adds	r3, #16
 8004a4c:	9321      	str	r3, [sp, #132]	; 0x84
 8004a4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004a50:	3301      	adds	r3, #1
 8004a52:	2b07      	cmp	r3, #7
 8004a54:	9320      	str	r3, [sp, #128]	; 0x80
 8004a56:	dc02      	bgt.n	8004a5e <_svfprintf_r+0xeee>
 8004a58:	3408      	adds	r4, #8
 8004a5a:	3d10      	subs	r5, #16
 8004a5c:	e7d3      	b.n	8004a06 <_svfprintf_r+0xe96>
 8004a5e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004a60:	4651      	mov	r1, sl
 8004a62:	4658      	mov	r0, fp
 8004a64:	f001 fbce 	bl	8006204 <__ssprint_r>
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	d1e2      	bne.n	8004a32 <_svfprintf_r+0xec2>
 8004a6c:	ac2c      	add	r4, sp, #176	; 0xb0
 8004a6e:	e7f4      	b.n	8004a5a <_svfprintf_r+0xeea>
 8004a70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0dd      	beq.n	8004a32 <_svfprintf_r+0xec2>
 8004a76:	aa1f      	add	r2, sp, #124	; 0x7c
 8004a78:	4651      	mov	r1, sl
 8004a7a:	4658      	mov	r0, fp
 8004a7c:	f001 fbc2 	bl	8006204 <__ssprint_r>
 8004a80:	e7d7      	b.n	8004a32 <_svfprintf_r+0xec2>
 8004a82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a86:	4610      	mov	r0, r2
 8004a88:	4619      	mov	r1, r3
 8004a8a:	f7fc f853 	bl	8000b34 <__aeabi_dcmpun>
 8004a8e:	2800      	cmp	r0, #0
 8004a90:	f43f aa44 	beq.w	8003f1c <_svfprintf_r+0x3ac>
 8004a94:	4b1e      	ldr	r3, [pc, #120]	; (8004b10 <_svfprintf_r+0xfa0>)
 8004a96:	4a1f      	ldr	r2, [pc, #124]	; (8004b14 <_svfprintf_r+0xfa4>)
 8004a98:	f7ff ba34 	b.w	8003f04 <_svfprintf_r+0x394>
 8004a9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004a9e:	eba3 0308 	sub.w	r3, r3, r8
 8004aa2:	9303      	str	r3, [sp, #12]
 8004aa4:	f7ff bab5 	b.w	8004012 <_svfprintf_r+0x4a2>
 8004aa8:	ea56 0207 	orrs.w	r2, r6, r7
 8004aac:	950b      	str	r5, [sp, #44]	; 0x2c
 8004aae:	f43f ac2b 	beq.w	8004308 <_svfprintf_r+0x798>
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	f43f ac9d 	beq.w	80043f2 <_svfprintf_r+0x882>
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	f43f acbd 	beq.w	8004438 <_svfprintf_r+0x8c8>
 8004abe:	ab2c      	add	r3, sp, #176	; 0xb0
 8004ac0:	08f1      	lsrs	r1, r6, #3
 8004ac2:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8004ac6:	08f8      	lsrs	r0, r7, #3
 8004ac8:	f006 0207 	and.w	r2, r6, #7
 8004acc:	4607      	mov	r7, r0
 8004ace:	460e      	mov	r6, r1
 8004ad0:	3230      	adds	r2, #48	; 0x30
 8004ad2:	ea56 0107 	orrs.w	r1, r6, r7
 8004ad6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8004ada:	f803 2c01 	strb.w	r2, [r3, #-1]
 8004ade:	f47f ac86 	bne.w	80043ee <_svfprintf_r+0x87e>
 8004ae2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ae4:	07c9      	lsls	r1, r1, #31
 8004ae6:	d506      	bpl.n	8004af6 <_svfprintf_r+0xf86>
 8004ae8:	2a30      	cmp	r2, #48	; 0x30
 8004aea:	d004      	beq.n	8004af6 <_svfprintf_r+0xf86>
 8004aec:	2230      	movs	r2, #48	; 0x30
 8004aee:	f808 2c01 	strb.w	r2, [r8, #-1]
 8004af2:	f1a3 0802 	sub.w	r8, r3, #2
 8004af6:	464e      	mov	r6, r9
 8004af8:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8004afc:	eba9 0908 	sub.w	r9, r9, r8
 8004b00:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004b02:	2700      	movs	r7, #0
 8004b04:	f7ff bad1 	b.w	80040aa <_svfprintf_r+0x53a>
 8004b08:	08007e7e 	.word	0x08007e7e
 8004b0c:	08007e6e 	.word	0x08007e6e
 8004b10:	08007e42 	.word	0x08007e42
 8004b14:	08007e46 	.word	0x08007e46

08004b18 <quorem>:
 8004b18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b1c:	6903      	ldr	r3, [r0, #16]
 8004b1e:	690c      	ldr	r4, [r1, #16]
 8004b20:	429c      	cmp	r4, r3
 8004b22:	4680      	mov	r8, r0
 8004b24:	f300 8082 	bgt.w	8004c2c <quorem+0x114>
 8004b28:	3c01      	subs	r4, #1
 8004b2a:	f101 0714 	add.w	r7, r1, #20
 8004b2e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004b32:	f100 0614 	add.w	r6, r0, #20
 8004b36:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004b3a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004b3e:	eb06 030e 	add.w	r3, r6, lr
 8004b42:	3501      	adds	r5, #1
 8004b44:	eb07 090e 	add.w	r9, r7, lr
 8004b48:	9301      	str	r3, [sp, #4]
 8004b4a:	fbb0 f5f5 	udiv	r5, r0, r5
 8004b4e:	b395      	cbz	r5, 8004bb6 <quorem+0x9e>
 8004b50:	f04f 0a00 	mov.w	sl, #0
 8004b54:	4638      	mov	r0, r7
 8004b56:	46b4      	mov	ip, r6
 8004b58:	46d3      	mov	fp, sl
 8004b5a:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b5e:	b293      	uxth	r3, r2
 8004b60:	fb05 a303 	mla	r3, r5, r3, sl
 8004b64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	ebab 0303 	sub.w	r3, fp, r3
 8004b6e:	0c12      	lsrs	r2, r2, #16
 8004b70:	f8bc b000 	ldrh.w	fp, [ip]
 8004b74:	fb05 a202 	mla	r2, r5, r2, sl
 8004b78:	fa13 f38b 	uxtah	r3, r3, fp
 8004b7c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004b80:	fa1f fb82 	uxth.w	fp, r2
 8004b84:	f8dc 2000 	ldr.w	r2, [ip]
 8004b88:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004b8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b96:	4581      	cmp	r9, r0
 8004b98:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004b9c:	f84c 3b04 	str.w	r3, [ip], #4
 8004ba0:	d2db      	bcs.n	8004b5a <quorem+0x42>
 8004ba2:	f856 300e 	ldr.w	r3, [r6, lr]
 8004ba6:	b933      	cbnz	r3, 8004bb6 <quorem+0x9e>
 8004ba8:	9b01      	ldr	r3, [sp, #4]
 8004baa:	3b04      	subs	r3, #4
 8004bac:	429e      	cmp	r6, r3
 8004bae:	461a      	mov	r2, r3
 8004bb0:	d330      	bcc.n	8004c14 <quorem+0xfc>
 8004bb2:	f8c8 4010 	str.w	r4, [r8, #16]
 8004bb6:	4640      	mov	r0, r8
 8004bb8:	f001 fa4d 	bl	8006056 <__mcmp>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	db25      	blt.n	8004c0c <quorem+0xf4>
 8004bc0:	3501      	adds	r5, #1
 8004bc2:	4630      	mov	r0, r6
 8004bc4:	f04f 0e00 	mov.w	lr, #0
 8004bc8:	f857 2b04 	ldr.w	r2, [r7], #4
 8004bcc:	f8d0 c000 	ldr.w	ip, [r0]
 8004bd0:	b293      	uxth	r3, r2
 8004bd2:	ebae 0303 	sub.w	r3, lr, r3
 8004bd6:	0c12      	lsrs	r2, r2, #16
 8004bd8:	fa13 f38c 	uxtah	r3, r3, ip
 8004bdc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004be0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bea:	45b9      	cmp	r9, r7
 8004bec:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8004bf0:	f840 3b04 	str.w	r3, [r0], #4
 8004bf4:	d2e8      	bcs.n	8004bc8 <quorem+0xb0>
 8004bf6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004bfa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004bfe:	b92a      	cbnz	r2, 8004c0c <quorem+0xf4>
 8004c00:	3b04      	subs	r3, #4
 8004c02:	429e      	cmp	r6, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	d30b      	bcc.n	8004c20 <quorem+0x108>
 8004c08:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	b003      	add	sp, #12
 8004c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c14:	6812      	ldr	r2, [r2, #0]
 8004c16:	3b04      	subs	r3, #4
 8004c18:	2a00      	cmp	r2, #0
 8004c1a:	d1ca      	bne.n	8004bb2 <quorem+0x9a>
 8004c1c:	3c01      	subs	r4, #1
 8004c1e:	e7c5      	b.n	8004bac <quorem+0x94>
 8004c20:	6812      	ldr	r2, [r2, #0]
 8004c22:	3b04      	subs	r3, #4
 8004c24:	2a00      	cmp	r2, #0
 8004c26:	d1ef      	bne.n	8004c08 <quorem+0xf0>
 8004c28:	3c01      	subs	r4, #1
 8004c2a:	e7ea      	b.n	8004c02 <quorem+0xea>
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	e7ee      	b.n	8004c0e <quorem+0xf6>

08004c30 <_dtoa_r>:
 8004c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c34:	ec57 6b10 	vmov	r6, r7, d0
 8004c38:	b097      	sub	sp, #92	; 0x5c
 8004c3a:	e9cd 6700 	strd	r6, r7, [sp]
 8004c3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004c40:	9107      	str	r1, [sp, #28]
 8004c42:	4604      	mov	r4, r0
 8004c44:	920a      	str	r2, [sp, #40]	; 0x28
 8004c46:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c48:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8004c4a:	b93e      	cbnz	r6, 8004c5c <_dtoa_r+0x2c>
 8004c4c:	2010      	movs	r0, #16
 8004c4e:	f000 fdcb 	bl	80057e8 <malloc>
 8004c52:	6260      	str	r0, [r4, #36]	; 0x24
 8004c54:	6046      	str	r6, [r0, #4]
 8004c56:	6086      	str	r6, [r0, #8]
 8004c58:	6006      	str	r6, [r0, #0]
 8004c5a:	60c6      	str	r6, [r0, #12]
 8004c5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c5e:	6819      	ldr	r1, [r3, #0]
 8004c60:	b151      	cbz	r1, 8004c78 <_dtoa_r+0x48>
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	604a      	str	r2, [r1, #4]
 8004c66:	2301      	movs	r3, #1
 8004c68:	4093      	lsls	r3, r2
 8004c6a:	608b      	str	r3, [r1, #8]
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	f001 f81d 	bl	8005cac <_Bfree>
 8004c72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	9b01      	ldr	r3, [sp, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	bfbf      	itttt	lt
 8004c7e:	2301      	movlt	r3, #1
 8004c80:	602b      	strlt	r3, [r5, #0]
 8004c82:	9b01      	ldrlt	r3, [sp, #4]
 8004c84:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004c88:	bfb2      	itee	lt
 8004c8a:	9301      	strlt	r3, [sp, #4]
 8004c8c:	2300      	movge	r3, #0
 8004c8e:	602b      	strge	r3, [r5, #0]
 8004c90:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004c94:	4ba8      	ldr	r3, [pc, #672]	; (8004f38 <_dtoa_r+0x308>)
 8004c96:	ea33 0308 	bics.w	r3, r3, r8
 8004c9a:	d11b      	bne.n	8004cd4 <_dtoa_r+0xa4>
 8004c9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004c9e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ca2:	6013      	str	r3, [r2, #0]
 8004ca4:	9b00      	ldr	r3, [sp, #0]
 8004ca6:	b923      	cbnz	r3, 8004cb2 <_dtoa_r+0x82>
 8004ca8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004cac:	2800      	cmp	r0, #0
 8004cae:	f000 8578 	beq.w	80057a2 <_dtoa_r+0xb72>
 8004cb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cb4:	b953      	cbnz	r3, 8004ccc <_dtoa_r+0x9c>
 8004cb6:	4ba1      	ldr	r3, [pc, #644]	; (8004f3c <_dtoa_r+0x30c>)
 8004cb8:	e021      	b.n	8004cfe <_dtoa_r+0xce>
 8004cba:	4ba1      	ldr	r3, [pc, #644]	; (8004f40 <_dtoa_r+0x310>)
 8004cbc:	9302      	str	r3, [sp, #8]
 8004cbe:	3308      	adds	r3, #8
 8004cc0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004cc2:	6013      	str	r3, [r2, #0]
 8004cc4:	9802      	ldr	r0, [sp, #8]
 8004cc6:	b017      	add	sp, #92	; 0x5c
 8004cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ccc:	4b9b      	ldr	r3, [pc, #620]	; (8004f3c <_dtoa_r+0x30c>)
 8004cce:	9302      	str	r3, [sp, #8]
 8004cd0:	3303      	adds	r3, #3
 8004cd2:	e7f5      	b.n	8004cc0 <_dtoa_r+0x90>
 8004cd4:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	2300      	movs	r3, #0
 8004cdc:	4630      	mov	r0, r6
 8004cde:	4639      	mov	r1, r7
 8004ce0:	f7fb fef6 	bl	8000ad0 <__aeabi_dcmpeq>
 8004ce4:	4681      	mov	r9, r0
 8004ce6:	b160      	cbz	r0, 8004d02 <_dtoa_r+0xd2>
 8004ce8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004cea:	2301      	movs	r3, #1
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 8553 	beq.w	800579c <_dtoa_r+0xb6c>
 8004cf6:	4b93      	ldr	r3, [pc, #588]	; (8004f44 <_dtoa_r+0x314>)
 8004cf8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	9302      	str	r3, [sp, #8]
 8004d00:	e7e0      	b.n	8004cc4 <_dtoa_r+0x94>
 8004d02:	aa14      	add	r2, sp, #80	; 0x50
 8004d04:	a915      	add	r1, sp, #84	; 0x54
 8004d06:	ec47 6b10 	vmov	d0, r6, r7
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	f001 fa1b 	bl	8006146 <__d2b>
 8004d10:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004d14:	4682      	mov	sl, r0
 8004d16:	2d00      	cmp	r5, #0
 8004d18:	d07e      	beq.n	8004e18 <_dtoa_r+0x1e8>
 8004d1a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004d1e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004d22:	4630      	mov	r0, r6
 8004d24:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004d28:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004d2c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8004d30:	2200      	movs	r2, #0
 8004d32:	4b85      	ldr	r3, [pc, #532]	; (8004f48 <_dtoa_r+0x318>)
 8004d34:	f7fb fab0 	bl	8000298 <__aeabi_dsub>
 8004d38:	a379      	add	r3, pc, #484	; (adr r3, 8004f20 <_dtoa_r+0x2f0>)
 8004d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3e:	f7fb fc5f 	bl	8000600 <__aeabi_dmul>
 8004d42:	a379      	add	r3, pc, #484	; (adr r3, 8004f28 <_dtoa_r+0x2f8>)
 8004d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d48:	f7fb faa8 	bl	800029c <__adddf3>
 8004d4c:	4606      	mov	r6, r0
 8004d4e:	4628      	mov	r0, r5
 8004d50:	460f      	mov	r7, r1
 8004d52:	f7fb fbef 	bl	8000534 <__aeabi_i2d>
 8004d56:	a376      	add	r3, pc, #472	; (adr r3, 8004f30 <_dtoa_r+0x300>)
 8004d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5c:	f7fb fc50 	bl	8000600 <__aeabi_dmul>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4630      	mov	r0, r6
 8004d66:	4639      	mov	r1, r7
 8004d68:	f7fb fa98 	bl	800029c <__adddf3>
 8004d6c:	4606      	mov	r6, r0
 8004d6e:	460f      	mov	r7, r1
 8004d70:	f7fb fef6 	bl	8000b60 <__aeabi_d2iz>
 8004d74:	2200      	movs	r2, #0
 8004d76:	4683      	mov	fp, r0
 8004d78:	2300      	movs	r3, #0
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	4639      	mov	r1, r7
 8004d7e:	f7fb feb1 	bl	8000ae4 <__aeabi_dcmplt>
 8004d82:	b158      	cbz	r0, 8004d9c <_dtoa_r+0x16c>
 8004d84:	4658      	mov	r0, fp
 8004d86:	f7fb fbd5 	bl	8000534 <__aeabi_i2d>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	4630      	mov	r0, r6
 8004d90:	4639      	mov	r1, r7
 8004d92:	f7fb fe9d 	bl	8000ad0 <__aeabi_dcmpeq>
 8004d96:	b908      	cbnz	r0, 8004d9c <_dtoa_r+0x16c>
 8004d98:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004d9c:	f1bb 0f16 	cmp.w	fp, #22
 8004da0:	d859      	bhi.n	8004e56 <_dtoa_r+0x226>
 8004da2:	496a      	ldr	r1, [pc, #424]	; (8004f4c <_dtoa_r+0x31c>)
 8004da4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8004da8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004dac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004db0:	f7fb feb6 	bl	8000b20 <__aeabi_dcmpgt>
 8004db4:	2800      	cmp	r0, #0
 8004db6:	d050      	beq.n	8004e5a <_dtoa_r+0x22a>
 8004db8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	930e      	str	r3, [sp, #56]	; 0x38
 8004dc0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004dc2:	1b5d      	subs	r5, r3, r5
 8004dc4:	1e6b      	subs	r3, r5, #1
 8004dc6:	9306      	str	r3, [sp, #24]
 8004dc8:	bf45      	ittet	mi
 8004dca:	f1c5 0301 	rsbmi	r3, r5, #1
 8004dce:	9305      	strmi	r3, [sp, #20]
 8004dd0:	2300      	movpl	r3, #0
 8004dd2:	2300      	movmi	r3, #0
 8004dd4:	bf4c      	ite	mi
 8004dd6:	9306      	strmi	r3, [sp, #24]
 8004dd8:	9305      	strpl	r3, [sp, #20]
 8004dda:	f1bb 0f00 	cmp.w	fp, #0
 8004dde:	db3e      	blt.n	8004e5e <_dtoa_r+0x22e>
 8004de0:	9b06      	ldr	r3, [sp, #24]
 8004de2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004de6:	445b      	add	r3, fp
 8004de8:	9306      	str	r3, [sp, #24]
 8004dea:	2300      	movs	r3, #0
 8004dec:	9308      	str	r3, [sp, #32]
 8004dee:	9b07      	ldr	r3, [sp, #28]
 8004df0:	2b09      	cmp	r3, #9
 8004df2:	f200 80af 	bhi.w	8004f54 <_dtoa_r+0x324>
 8004df6:	2b05      	cmp	r3, #5
 8004df8:	bfc4      	itt	gt
 8004dfa:	3b04      	subgt	r3, #4
 8004dfc:	9307      	strgt	r3, [sp, #28]
 8004dfe:	9b07      	ldr	r3, [sp, #28]
 8004e00:	f1a3 0302 	sub.w	r3, r3, #2
 8004e04:	bfcc      	ite	gt
 8004e06:	2600      	movgt	r6, #0
 8004e08:	2601      	movle	r6, #1
 8004e0a:	2b03      	cmp	r3, #3
 8004e0c:	f200 80ae 	bhi.w	8004f6c <_dtoa_r+0x33c>
 8004e10:	e8df f003 	tbb	[pc, r3]
 8004e14:	772f8482 	.word	0x772f8482
 8004e18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004e1a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8004e1c:	441d      	add	r5, r3
 8004e1e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	dd11      	ble.n	8004e4a <_dtoa_r+0x21a>
 8004e26:	9a00      	ldr	r2, [sp, #0]
 8004e28:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004e2c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004e30:	fa22 f000 	lsr.w	r0, r2, r0
 8004e34:	fa08 f303 	lsl.w	r3, r8, r3
 8004e38:	4318      	orrs	r0, r3
 8004e3a:	f7fb fb6b 	bl	8000514 <__aeabi_ui2d>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004e44:	3d01      	subs	r5, #1
 8004e46:	9312      	str	r3, [sp, #72]	; 0x48
 8004e48:	e772      	b.n	8004d30 <_dtoa_r+0x100>
 8004e4a:	f1c3 0020 	rsb	r0, r3, #32
 8004e4e:	9b00      	ldr	r3, [sp, #0]
 8004e50:	fa03 f000 	lsl.w	r0, r3, r0
 8004e54:	e7f1      	b.n	8004e3a <_dtoa_r+0x20a>
 8004e56:	2301      	movs	r3, #1
 8004e58:	e7b1      	b.n	8004dbe <_dtoa_r+0x18e>
 8004e5a:	900e      	str	r0, [sp, #56]	; 0x38
 8004e5c:	e7b0      	b.n	8004dc0 <_dtoa_r+0x190>
 8004e5e:	9b05      	ldr	r3, [sp, #20]
 8004e60:	eba3 030b 	sub.w	r3, r3, fp
 8004e64:	9305      	str	r3, [sp, #20]
 8004e66:	f1cb 0300 	rsb	r3, fp, #0
 8004e6a:	9308      	str	r3, [sp, #32]
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e70:	e7bd      	b.n	8004dee <_dtoa_r+0x1be>
 8004e72:	2301      	movs	r3, #1
 8004e74:	9309      	str	r3, [sp, #36]	; 0x24
 8004e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	dd7a      	ble.n	8004f72 <_dtoa_r+0x342>
 8004e7c:	9304      	str	r3, [sp, #16]
 8004e7e:	9303      	str	r3, [sp, #12]
 8004e80:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004e82:	2200      	movs	r2, #0
 8004e84:	606a      	str	r2, [r5, #4]
 8004e86:	2104      	movs	r1, #4
 8004e88:	f101 0214 	add.w	r2, r1, #20
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d975      	bls.n	8004f7c <_dtoa_r+0x34c>
 8004e90:	6869      	ldr	r1, [r5, #4]
 8004e92:	4620      	mov	r0, r4
 8004e94:	f000 fed6 	bl	8005c44 <_Balloc>
 8004e98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e9a:	6028      	str	r0, [r5, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	9302      	str	r3, [sp, #8]
 8004ea0:	9b03      	ldr	r3, [sp, #12]
 8004ea2:	2b0e      	cmp	r3, #14
 8004ea4:	f200 80e5 	bhi.w	8005072 <_dtoa_r+0x442>
 8004ea8:	2e00      	cmp	r6, #0
 8004eaa:	f000 80e2 	beq.w	8005072 <_dtoa_r+0x442>
 8004eae:	ed9d 7b00 	vldr	d7, [sp]
 8004eb2:	f1bb 0f00 	cmp.w	fp, #0
 8004eb6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004eba:	dd74      	ble.n	8004fa6 <_dtoa_r+0x376>
 8004ebc:	4a23      	ldr	r2, [pc, #140]	; (8004f4c <_dtoa_r+0x31c>)
 8004ebe:	f00b 030f 	and.w	r3, fp, #15
 8004ec2:	ea4f 162b 	mov.w	r6, fp, asr #4
 8004ec6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004eca:	06f0      	lsls	r0, r6, #27
 8004ecc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004ed0:	d559      	bpl.n	8004f86 <_dtoa_r+0x356>
 8004ed2:	4b1f      	ldr	r3, [pc, #124]	; (8004f50 <_dtoa_r+0x320>)
 8004ed4:	ec51 0b17 	vmov	r0, r1, d7
 8004ed8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004edc:	f7fb fcba 	bl	8000854 <__aeabi_ddiv>
 8004ee0:	e9cd 0100 	strd	r0, r1, [sp]
 8004ee4:	f006 060f 	and.w	r6, r6, #15
 8004ee8:	2503      	movs	r5, #3
 8004eea:	4f19      	ldr	r7, [pc, #100]	; (8004f50 <_dtoa_r+0x320>)
 8004eec:	2e00      	cmp	r6, #0
 8004eee:	d14c      	bne.n	8004f8a <_dtoa_r+0x35a>
 8004ef0:	4642      	mov	r2, r8
 8004ef2:	464b      	mov	r3, r9
 8004ef4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ef8:	f7fb fcac 	bl	8000854 <__aeabi_ddiv>
 8004efc:	e9cd 0100 	strd	r0, r1, [sp]
 8004f00:	e06a      	b.n	8004fd8 <_dtoa_r+0x3a8>
 8004f02:	2301      	movs	r3, #1
 8004f04:	9309      	str	r3, [sp, #36]	; 0x24
 8004f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f08:	445b      	add	r3, fp
 8004f0a:	9304      	str	r3, [sp, #16]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	9303      	str	r3, [sp, #12]
 8004f12:	bfb8      	it	lt
 8004f14:	2301      	movlt	r3, #1
 8004f16:	e7b3      	b.n	8004e80 <_dtoa_r+0x250>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	e7ab      	b.n	8004e74 <_dtoa_r+0x244>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	e7f1      	b.n	8004f04 <_dtoa_r+0x2d4>
 8004f20:	636f4361 	.word	0x636f4361
 8004f24:	3fd287a7 	.word	0x3fd287a7
 8004f28:	8b60c8b3 	.word	0x8b60c8b3
 8004f2c:	3fc68a28 	.word	0x3fc68a28
 8004f30:	509f79fb 	.word	0x509f79fb
 8004f34:	3fd34413 	.word	0x3fd34413
 8004f38:	7ff00000 	.word	0x7ff00000
 8004f3c:	08007e97 	.word	0x08007e97
 8004f40:	08007e8e 	.word	0x08007e8e
 8004f44:	08007e6d 	.word	0x08007e6d
 8004f48:	3ff80000 	.word	0x3ff80000
 8004f4c:	08007ec8 	.word	0x08007ec8
 8004f50:	08007ea0 	.word	0x08007ea0
 8004f54:	2601      	movs	r6, #1
 8004f56:	2300      	movs	r3, #0
 8004f58:	9307      	str	r3, [sp, #28]
 8004f5a:	9609      	str	r6, [sp, #36]	; 0x24
 8004f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f60:	9304      	str	r3, [sp, #16]
 8004f62:	9303      	str	r3, [sp, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	2312      	movs	r3, #18
 8004f68:	920a      	str	r2, [sp, #40]	; 0x28
 8004f6a:	e789      	b.n	8004e80 <_dtoa_r+0x250>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f70:	e7f4      	b.n	8004f5c <_dtoa_r+0x32c>
 8004f72:	2301      	movs	r3, #1
 8004f74:	9304      	str	r3, [sp, #16]
 8004f76:	9303      	str	r3, [sp, #12]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	e7f5      	b.n	8004f68 <_dtoa_r+0x338>
 8004f7c:	686a      	ldr	r2, [r5, #4]
 8004f7e:	3201      	adds	r2, #1
 8004f80:	606a      	str	r2, [r5, #4]
 8004f82:	0049      	lsls	r1, r1, #1
 8004f84:	e780      	b.n	8004e88 <_dtoa_r+0x258>
 8004f86:	2502      	movs	r5, #2
 8004f88:	e7af      	b.n	8004eea <_dtoa_r+0x2ba>
 8004f8a:	07f1      	lsls	r1, r6, #31
 8004f8c:	d508      	bpl.n	8004fa0 <_dtoa_r+0x370>
 8004f8e:	4640      	mov	r0, r8
 8004f90:	4649      	mov	r1, r9
 8004f92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f96:	f7fb fb33 	bl	8000600 <__aeabi_dmul>
 8004f9a:	3501      	adds	r5, #1
 8004f9c:	4680      	mov	r8, r0
 8004f9e:	4689      	mov	r9, r1
 8004fa0:	1076      	asrs	r6, r6, #1
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	e7a2      	b.n	8004eec <_dtoa_r+0x2bc>
 8004fa6:	f000 809d 	beq.w	80050e4 <_dtoa_r+0x4b4>
 8004faa:	f1cb 0600 	rsb	r6, fp, #0
 8004fae:	4b9f      	ldr	r3, [pc, #636]	; (800522c <_dtoa_r+0x5fc>)
 8004fb0:	4f9f      	ldr	r7, [pc, #636]	; (8005230 <_dtoa_r+0x600>)
 8004fb2:	f006 020f 	and.w	r2, r6, #15
 8004fb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fc2:	f7fb fb1d 	bl	8000600 <__aeabi_dmul>
 8004fc6:	e9cd 0100 	strd	r0, r1, [sp]
 8004fca:	1136      	asrs	r6, r6, #4
 8004fcc:	2300      	movs	r3, #0
 8004fce:	2502      	movs	r5, #2
 8004fd0:	2e00      	cmp	r6, #0
 8004fd2:	d17c      	bne.n	80050ce <_dtoa_r+0x49e>
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d191      	bne.n	8004efc <_dtoa_r+0x2cc>
 8004fd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 8084 	beq.w	80050e8 <_dtoa_r+0x4b8>
 8004fe0:	e9dd 8900 	ldrd	r8, r9, [sp]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	4b93      	ldr	r3, [pc, #588]	; (8005234 <_dtoa_r+0x604>)
 8004fe8:	4640      	mov	r0, r8
 8004fea:	4649      	mov	r1, r9
 8004fec:	f7fb fd7a 	bl	8000ae4 <__aeabi_dcmplt>
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	d079      	beq.n	80050e8 <_dtoa_r+0x4b8>
 8004ff4:	9b03      	ldr	r3, [sp, #12]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d076      	beq.n	80050e8 <_dtoa_r+0x4b8>
 8004ffa:	9b04      	ldr	r3, [sp, #16]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	dd34      	ble.n	800506a <_dtoa_r+0x43a>
 8005000:	2200      	movs	r2, #0
 8005002:	4b8d      	ldr	r3, [pc, #564]	; (8005238 <_dtoa_r+0x608>)
 8005004:	4640      	mov	r0, r8
 8005006:	4649      	mov	r1, r9
 8005008:	f7fb fafa 	bl	8000600 <__aeabi_dmul>
 800500c:	e9cd 0100 	strd	r0, r1, [sp]
 8005010:	9e04      	ldr	r6, [sp, #16]
 8005012:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8005016:	3501      	adds	r5, #1
 8005018:	4628      	mov	r0, r5
 800501a:	f7fb fa8b 	bl	8000534 <__aeabi_i2d>
 800501e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005022:	f7fb faed 	bl	8000600 <__aeabi_dmul>
 8005026:	2200      	movs	r2, #0
 8005028:	4b84      	ldr	r3, [pc, #528]	; (800523c <_dtoa_r+0x60c>)
 800502a:	f7fb f937 	bl	800029c <__adddf3>
 800502e:	4680      	mov	r8, r0
 8005030:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8005034:	2e00      	cmp	r6, #0
 8005036:	d15a      	bne.n	80050ee <_dtoa_r+0x4be>
 8005038:	2200      	movs	r2, #0
 800503a:	4b81      	ldr	r3, [pc, #516]	; (8005240 <_dtoa_r+0x610>)
 800503c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005040:	f7fb f92a 	bl	8000298 <__aeabi_dsub>
 8005044:	4642      	mov	r2, r8
 8005046:	464b      	mov	r3, r9
 8005048:	e9cd 0100 	strd	r0, r1, [sp]
 800504c:	f7fb fd68 	bl	8000b20 <__aeabi_dcmpgt>
 8005050:	2800      	cmp	r0, #0
 8005052:	f040 829b 	bne.w	800558c <_dtoa_r+0x95c>
 8005056:	4642      	mov	r2, r8
 8005058:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800505c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005060:	f7fb fd40 	bl	8000ae4 <__aeabi_dcmplt>
 8005064:	2800      	cmp	r0, #0
 8005066:	f040 828f 	bne.w	8005588 <_dtoa_r+0x958>
 800506a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800506e:	e9cd 2300 	strd	r2, r3, [sp]
 8005072:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005074:	2b00      	cmp	r3, #0
 8005076:	f2c0 8150 	blt.w	800531a <_dtoa_r+0x6ea>
 800507a:	f1bb 0f0e 	cmp.w	fp, #14
 800507e:	f300 814c 	bgt.w	800531a <_dtoa_r+0x6ea>
 8005082:	4b6a      	ldr	r3, [pc, #424]	; (800522c <_dtoa_r+0x5fc>)
 8005084:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005088:	e9d3 8900 	ldrd	r8, r9, [r3]
 800508c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800508e:	2b00      	cmp	r3, #0
 8005090:	f280 80da 	bge.w	8005248 <_dtoa_r+0x618>
 8005094:	9b03      	ldr	r3, [sp, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	f300 80d6 	bgt.w	8005248 <_dtoa_r+0x618>
 800509c:	f040 8273 	bne.w	8005586 <_dtoa_r+0x956>
 80050a0:	2200      	movs	r2, #0
 80050a2:	4b67      	ldr	r3, [pc, #412]	; (8005240 <_dtoa_r+0x610>)
 80050a4:	4640      	mov	r0, r8
 80050a6:	4649      	mov	r1, r9
 80050a8:	f7fb faaa 	bl	8000600 <__aeabi_dmul>
 80050ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050b0:	f7fb fd2c 	bl	8000b0c <__aeabi_dcmpge>
 80050b4:	9e03      	ldr	r6, [sp, #12]
 80050b6:	4637      	mov	r7, r6
 80050b8:	2800      	cmp	r0, #0
 80050ba:	f040 824a 	bne.w	8005552 <_dtoa_r+0x922>
 80050be:	9b02      	ldr	r3, [sp, #8]
 80050c0:	9a02      	ldr	r2, [sp, #8]
 80050c2:	1c5d      	adds	r5, r3, #1
 80050c4:	2331      	movs	r3, #49	; 0x31
 80050c6:	7013      	strb	r3, [r2, #0]
 80050c8:	f10b 0b01 	add.w	fp, fp, #1
 80050cc:	e245      	b.n	800555a <_dtoa_r+0x92a>
 80050ce:	07f2      	lsls	r2, r6, #31
 80050d0:	d505      	bpl.n	80050de <_dtoa_r+0x4ae>
 80050d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050d6:	f7fb fa93 	bl	8000600 <__aeabi_dmul>
 80050da:	3501      	adds	r5, #1
 80050dc:	2301      	movs	r3, #1
 80050de:	1076      	asrs	r6, r6, #1
 80050e0:	3708      	adds	r7, #8
 80050e2:	e775      	b.n	8004fd0 <_dtoa_r+0x3a0>
 80050e4:	2502      	movs	r5, #2
 80050e6:	e777      	b.n	8004fd8 <_dtoa_r+0x3a8>
 80050e8:	465f      	mov	r7, fp
 80050ea:	9e03      	ldr	r6, [sp, #12]
 80050ec:	e794      	b.n	8005018 <_dtoa_r+0x3e8>
 80050ee:	9a02      	ldr	r2, [sp, #8]
 80050f0:	4b4e      	ldr	r3, [pc, #312]	; (800522c <_dtoa_r+0x5fc>)
 80050f2:	4432      	add	r2, r6
 80050f4:	9213      	str	r2, [sp, #76]	; 0x4c
 80050f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050f8:	1e71      	subs	r1, r6, #1
 80050fa:	2a00      	cmp	r2, #0
 80050fc:	d048      	beq.n	8005190 <_dtoa_r+0x560>
 80050fe:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005106:	2000      	movs	r0, #0
 8005108:	494e      	ldr	r1, [pc, #312]	; (8005244 <_dtoa_r+0x614>)
 800510a:	f7fb fba3 	bl	8000854 <__aeabi_ddiv>
 800510e:	4642      	mov	r2, r8
 8005110:	464b      	mov	r3, r9
 8005112:	f7fb f8c1 	bl	8000298 <__aeabi_dsub>
 8005116:	9d02      	ldr	r5, [sp, #8]
 8005118:	4680      	mov	r8, r0
 800511a:	4689      	mov	r9, r1
 800511c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005120:	f7fb fd1e 	bl	8000b60 <__aeabi_d2iz>
 8005124:	4606      	mov	r6, r0
 8005126:	f7fb fa05 	bl	8000534 <__aeabi_i2d>
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005132:	f7fb f8b1 	bl	8000298 <__aeabi_dsub>
 8005136:	3630      	adds	r6, #48	; 0x30
 8005138:	f805 6b01 	strb.w	r6, [r5], #1
 800513c:	4642      	mov	r2, r8
 800513e:	464b      	mov	r3, r9
 8005140:	e9cd 0100 	strd	r0, r1, [sp]
 8005144:	f7fb fcce 	bl	8000ae4 <__aeabi_dcmplt>
 8005148:	2800      	cmp	r0, #0
 800514a:	d165      	bne.n	8005218 <_dtoa_r+0x5e8>
 800514c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005150:	2000      	movs	r0, #0
 8005152:	4938      	ldr	r1, [pc, #224]	; (8005234 <_dtoa_r+0x604>)
 8005154:	f7fb f8a0 	bl	8000298 <__aeabi_dsub>
 8005158:	4642      	mov	r2, r8
 800515a:	464b      	mov	r3, r9
 800515c:	f7fb fcc2 	bl	8000ae4 <__aeabi_dcmplt>
 8005160:	2800      	cmp	r0, #0
 8005162:	f040 80ba 	bne.w	80052da <_dtoa_r+0x6aa>
 8005166:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005168:	429d      	cmp	r5, r3
 800516a:	f43f af7e 	beq.w	800506a <_dtoa_r+0x43a>
 800516e:	2200      	movs	r2, #0
 8005170:	4b31      	ldr	r3, [pc, #196]	; (8005238 <_dtoa_r+0x608>)
 8005172:	4640      	mov	r0, r8
 8005174:	4649      	mov	r1, r9
 8005176:	f7fb fa43 	bl	8000600 <__aeabi_dmul>
 800517a:	2200      	movs	r2, #0
 800517c:	4680      	mov	r8, r0
 800517e:	4689      	mov	r9, r1
 8005180:	4b2d      	ldr	r3, [pc, #180]	; (8005238 <_dtoa_r+0x608>)
 8005182:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005186:	f7fb fa3b 	bl	8000600 <__aeabi_dmul>
 800518a:	e9cd 0100 	strd	r0, r1, [sp]
 800518e:	e7c5      	b.n	800511c <_dtoa_r+0x4ec>
 8005190:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8005194:	4642      	mov	r2, r8
 8005196:	464b      	mov	r3, r9
 8005198:	e9d1 0100 	ldrd	r0, r1, [r1]
 800519c:	f7fb fa30 	bl	8000600 <__aeabi_dmul>
 80051a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051a4:	9d02      	ldr	r5, [sp, #8]
 80051a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051aa:	f7fb fcd9 	bl	8000b60 <__aeabi_d2iz>
 80051ae:	4606      	mov	r6, r0
 80051b0:	f7fb f9c0 	bl	8000534 <__aeabi_i2d>
 80051b4:	3630      	adds	r6, #48	; 0x30
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051be:	f7fb f86b 	bl	8000298 <__aeabi_dsub>
 80051c2:	f805 6b01 	strb.w	r6, [r5], #1
 80051c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80051c8:	42ab      	cmp	r3, r5
 80051ca:	4680      	mov	r8, r0
 80051cc:	4689      	mov	r9, r1
 80051ce:	f04f 0200 	mov.w	r2, #0
 80051d2:	d125      	bne.n	8005220 <_dtoa_r+0x5f0>
 80051d4:	4b1b      	ldr	r3, [pc, #108]	; (8005244 <_dtoa_r+0x614>)
 80051d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051da:	f7fb f85f 	bl	800029c <__adddf3>
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	4640      	mov	r0, r8
 80051e4:	4649      	mov	r1, r9
 80051e6:	f7fb fc9b 	bl	8000b20 <__aeabi_dcmpgt>
 80051ea:	2800      	cmp	r0, #0
 80051ec:	d175      	bne.n	80052da <_dtoa_r+0x6aa>
 80051ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051f2:	2000      	movs	r0, #0
 80051f4:	4913      	ldr	r1, [pc, #76]	; (8005244 <_dtoa_r+0x614>)
 80051f6:	f7fb f84f 	bl	8000298 <__aeabi_dsub>
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	4640      	mov	r0, r8
 8005200:	4649      	mov	r1, r9
 8005202:	f7fb fc6f 	bl	8000ae4 <__aeabi_dcmplt>
 8005206:	2800      	cmp	r0, #0
 8005208:	f43f af2f 	beq.w	800506a <_dtoa_r+0x43a>
 800520c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005210:	2b30      	cmp	r3, #48	; 0x30
 8005212:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005216:	d001      	beq.n	800521c <_dtoa_r+0x5ec>
 8005218:	46bb      	mov	fp, r7
 800521a:	e04d      	b.n	80052b8 <_dtoa_r+0x688>
 800521c:	4615      	mov	r5, r2
 800521e:	e7f5      	b.n	800520c <_dtoa_r+0x5dc>
 8005220:	4b05      	ldr	r3, [pc, #20]	; (8005238 <_dtoa_r+0x608>)
 8005222:	f7fb f9ed 	bl	8000600 <__aeabi_dmul>
 8005226:	e9cd 0100 	strd	r0, r1, [sp]
 800522a:	e7bc      	b.n	80051a6 <_dtoa_r+0x576>
 800522c:	08007ec8 	.word	0x08007ec8
 8005230:	08007ea0 	.word	0x08007ea0
 8005234:	3ff00000 	.word	0x3ff00000
 8005238:	40240000 	.word	0x40240000
 800523c:	401c0000 	.word	0x401c0000
 8005240:	40140000 	.word	0x40140000
 8005244:	3fe00000 	.word	0x3fe00000
 8005248:	e9dd 6700 	ldrd	r6, r7, [sp]
 800524c:	9d02      	ldr	r5, [sp, #8]
 800524e:	4642      	mov	r2, r8
 8005250:	464b      	mov	r3, r9
 8005252:	4630      	mov	r0, r6
 8005254:	4639      	mov	r1, r7
 8005256:	f7fb fafd 	bl	8000854 <__aeabi_ddiv>
 800525a:	f7fb fc81 	bl	8000b60 <__aeabi_d2iz>
 800525e:	9000      	str	r0, [sp, #0]
 8005260:	f7fb f968 	bl	8000534 <__aeabi_i2d>
 8005264:	4642      	mov	r2, r8
 8005266:	464b      	mov	r3, r9
 8005268:	f7fb f9ca 	bl	8000600 <__aeabi_dmul>
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	4630      	mov	r0, r6
 8005272:	4639      	mov	r1, r7
 8005274:	f7fb f810 	bl	8000298 <__aeabi_dsub>
 8005278:	9e00      	ldr	r6, [sp, #0]
 800527a:	9f03      	ldr	r7, [sp, #12]
 800527c:	3630      	adds	r6, #48	; 0x30
 800527e:	f805 6b01 	strb.w	r6, [r5], #1
 8005282:	9e02      	ldr	r6, [sp, #8]
 8005284:	1bae      	subs	r6, r5, r6
 8005286:	42b7      	cmp	r7, r6
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	d138      	bne.n	8005300 <_dtoa_r+0x6d0>
 800528e:	f7fb f805 	bl	800029c <__adddf3>
 8005292:	4606      	mov	r6, r0
 8005294:	460f      	mov	r7, r1
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	4640      	mov	r0, r8
 800529c:	4649      	mov	r1, r9
 800529e:	f7fb fc21 	bl	8000ae4 <__aeabi_dcmplt>
 80052a2:	b9c8      	cbnz	r0, 80052d8 <_dtoa_r+0x6a8>
 80052a4:	4632      	mov	r2, r6
 80052a6:	463b      	mov	r3, r7
 80052a8:	4640      	mov	r0, r8
 80052aa:	4649      	mov	r1, r9
 80052ac:	f7fb fc10 	bl	8000ad0 <__aeabi_dcmpeq>
 80052b0:	b110      	cbz	r0, 80052b8 <_dtoa_r+0x688>
 80052b2:	9b00      	ldr	r3, [sp, #0]
 80052b4:	07db      	lsls	r3, r3, #31
 80052b6:	d40f      	bmi.n	80052d8 <_dtoa_r+0x6a8>
 80052b8:	4651      	mov	r1, sl
 80052ba:	4620      	mov	r0, r4
 80052bc:	f000 fcf6 	bl	8005cac <_Bfree>
 80052c0:	2300      	movs	r3, #0
 80052c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80052c4:	702b      	strb	r3, [r5, #0]
 80052c6:	f10b 0301 	add.w	r3, fp, #1
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f43f acf8 	beq.w	8004cc4 <_dtoa_r+0x94>
 80052d4:	601d      	str	r5, [r3, #0]
 80052d6:	e4f5      	b.n	8004cc4 <_dtoa_r+0x94>
 80052d8:	465f      	mov	r7, fp
 80052da:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80052de:	2a39      	cmp	r2, #57	; 0x39
 80052e0:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80052e4:	d106      	bne.n	80052f4 <_dtoa_r+0x6c4>
 80052e6:	9a02      	ldr	r2, [sp, #8]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d107      	bne.n	80052fc <_dtoa_r+0x6cc>
 80052ec:	2330      	movs	r3, #48	; 0x30
 80052ee:	7013      	strb	r3, [r2, #0]
 80052f0:	3701      	adds	r7, #1
 80052f2:	4613      	mov	r3, r2
 80052f4:	781a      	ldrb	r2, [r3, #0]
 80052f6:	3201      	adds	r2, #1
 80052f8:	701a      	strb	r2, [r3, #0]
 80052fa:	e78d      	b.n	8005218 <_dtoa_r+0x5e8>
 80052fc:	461d      	mov	r5, r3
 80052fe:	e7ec      	b.n	80052da <_dtoa_r+0x6aa>
 8005300:	2200      	movs	r2, #0
 8005302:	4ba4      	ldr	r3, [pc, #656]	; (8005594 <_dtoa_r+0x964>)
 8005304:	f7fb f97c 	bl	8000600 <__aeabi_dmul>
 8005308:	2200      	movs	r2, #0
 800530a:	2300      	movs	r3, #0
 800530c:	4606      	mov	r6, r0
 800530e:	460f      	mov	r7, r1
 8005310:	f7fb fbde 	bl	8000ad0 <__aeabi_dcmpeq>
 8005314:	2800      	cmp	r0, #0
 8005316:	d09a      	beq.n	800524e <_dtoa_r+0x61e>
 8005318:	e7ce      	b.n	80052b8 <_dtoa_r+0x688>
 800531a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800531c:	2a00      	cmp	r2, #0
 800531e:	f000 80cd 	beq.w	80054bc <_dtoa_r+0x88c>
 8005322:	9a07      	ldr	r2, [sp, #28]
 8005324:	2a01      	cmp	r2, #1
 8005326:	f300 80af 	bgt.w	8005488 <_dtoa_r+0x858>
 800532a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800532c:	2a00      	cmp	r2, #0
 800532e:	f000 80a7 	beq.w	8005480 <_dtoa_r+0x850>
 8005332:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005336:	9e08      	ldr	r6, [sp, #32]
 8005338:	9d05      	ldr	r5, [sp, #20]
 800533a:	9a05      	ldr	r2, [sp, #20]
 800533c:	441a      	add	r2, r3
 800533e:	9205      	str	r2, [sp, #20]
 8005340:	9a06      	ldr	r2, [sp, #24]
 8005342:	2101      	movs	r1, #1
 8005344:	441a      	add	r2, r3
 8005346:	4620      	mov	r0, r4
 8005348:	9206      	str	r2, [sp, #24]
 800534a:	f000 fd4f 	bl	8005dec <__i2b>
 800534e:	4607      	mov	r7, r0
 8005350:	2d00      	cmp	r5, #0
 8005352:	dd0c      	ble.n	800536e <_dtoa_r+0x73e>
 8005354:	9b06      	ldr	r3, [sp, #24]
 8005356:	2b00      	cmp	r3, #0
 8005358:	dd09      	ble.n	800536e <_dtoa_r+0x73e>
 800535a:	42ab      	cmp	r3, r5
 800535c:	9a05      	ldr	r2, [sp, #20]
 800535e:	bfa8      	it	ge
 8005360:	462b      	movge	r3, r5
 8005362:	1ad2      	subs	r2, r2, r3
 8005364:	9205      	str	r2, [sp, #20]
 8005366:	9a06      	ldr	r2, [sp, #24]
 8005368:	1aed      	subs	r5, r5, r3
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	9306      	str	r3, [sp, #24]
 800536e:	9b08      	ldr	r3, [sp, #32]
 8005370:	b1f3      	cbz	r3, 80053b0 <_dtoa_r+0x780>
 8005372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 80a5 	beq.w	80054c4 <_dtoa_r+0x894>
 800537a:	2e00      	cmp	r6, #0
 800537c:	dd10      	ble.n	80053a0 <_dtoa_r+0x770>
 800537e:	4639      	mov	r1, r7
 8005380:	4632      	mov	r2, r6
 8005382:	4620      	mov	r0, r4
 8005384:	f000 fdc8 	bl	8005f18 <__pow5mult>
 8005388:	4652      	mov	r2, sl
 800538a:	4601      	mov	r1, r0
 800538c:	4607      	mov	r7, r0
 800538e:	4620      	mov	r0, r4
 8005390:	f000 fd35 	bl	8005dfe <__multiply>
 8005394:	4651      	mov	r1, sl
 8005396:	4680      	mov	r8, r0
 8005398:	4620      	mov	r0, r4
 800539a:	f000 fc87 	bl	8005cac <_Bfree>
 800539e:	46c2      	mov	sl, r8
 80053a0:	9b08      	ldr	r3, [sp, #32]
 80053a2:	1b9a      	subs	r2, r3, r6
 80053a4:	d004      	beq.n	80053b0 <_dtoa_r+0x780>
 80053a6:	4651      	mov	r1, sl
 80053a8:	4620      	mov	r0, r4
 80053aa:	f000 fdb5 	bl	8005f18 <__pow5mult>
 80053ae:	4682      	mov	sl, r0
 80053b0:	2101      	movs	r1, #1
 80053b2:	4620      	mov	r0, r4
 80053b4:	f000 fd1a 	bl	8005dec <__i2b>
 80053b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	4606      	mov	r6, r0
 80053be:	f340 8083 	ble.w	80054c8 <_dtoa_r+0x898>
 80053c2:	461a      	mov	r2, r3
 80053c4:	4601      	mov	r1, r0
 80053c6:	4620      	mov	r0, r4
 80053c8:	f000 fda6 	bl	8005f18 <__pow5mult>
 80053cc:	9b07      	ldr	r3, [sp, #28]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	4606      	mov	r6, r0
 80053d2:	dd7c      	ble.n	80054ce <_dtoa_r+0x89e>
 80053d4:	f04f 0800 	mov.w	r8, #0
 80053d8:	6933      	ldr	r3, [r6, #16]
 80053da:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80053de:	6918      	ldr	r0, [r3, #16]
 80053e0:	f000 fcb6 	bl	8005d50 <__hi0bits>
 80053e4:	f1c0 0020 	rsb	r0, r0, #32
 80053e8:	9b06      	ldr	r3, [sp, #24]
 80053ea:	4418      	add	r0, r3
 80053ec:	f010 001f 	ands.w	r0, r0, #31
 80053f0:	f000 8096 	beq.w	8005520 <_dtoa_r+0x8f0>
 80053f4:	f1c0 0320 	rsb	r3, r0, #32
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	f340 8087 	ble.w	800550c <_dtoa_r+0x8dc>
 80053fe:	9b05      	ldr	r3, [sp, #20]
 8005400:	f1c0 001c 	rsb	r0, r0, #28
 8005404:	4403      	add	r3, r0
 8005406:	9305      	str	r3, [sp, #20]
 8005408:	9b06      	ldr	r3, [sp, #24]
 800540a:	4405      	add	r5, r0
 800540c:	4403      	add	r3, r0
 800540e:	9306      	str	r3, [sp, #24]
 8005410:	9b05      	ldr	r3, [sp, #20]
 8005412:	2b00      	cmp	r3, #0
 8005414:	dd05      	ble.n	8005422 <_dtoa_r+0x7f2>
 8005416:	4651      	mov	r1, sl
 8005418:	461a      	mov	r2, r3
 800541a:	4620      	mov	r0, r4
 800541c:	f000 fdca 	bl	8005fb4 <__lshift>
 8005420:	4682      	mov	sl, r0
 8005422:	9b06      	ldr	r3, [sp, #24]
 8005424:	2b00      	cmp	r3, #0
 8005426:	dd05      	ble.n	8005434 <_dtoa_r+0x804>
 8005428:	4631      	mov	r1, r6
 800542a:	461a      	mov	r2, r3
 800542c:	4620      	mov	r0, r4
 800542e:	f000 fdc1 	bl	8005fb4 <__lshift>
 8005432:	4606      	mov	r6, r0
 8005434:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005436:	2b00      	cmp	r3, #0
 8005438:	d074      	beq.n	8005524 <_dtoa_r+0x8f4>
 800543a:	4631      	mov	r1, r6
 800543c:	4650      	mov	r0, sl
 800543e:	f000 fe0a 	bl	8006056 <__mcmp>
 8005442:	2800      	cmp	r0, #0
 8005444:	da6e      	bge.n	8005524 <_dtoa_r+0x8f4>
 8005446:	2300      	movs	r3, #0
 8005448:	4651      	mov	r1, sl
 800544a:	220a      	movs	r2, #10
 800544c:	4620      	mov	r0, r4
 800544e:	f000 fc44 	bl	8005cda <__multadd>
 8005452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005454:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005458:	4682      	mov	sl, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 81a8 	beq.w	80057b0 <_dtoa_r+0xb80>
 8005460:	2300      	movs	r3, #0
 8005462:	4639      	mov	r1, r7
 8005464:	220a      	movs	r2, #10
 8005466:	4620      	mov	r0, r4
 8005468:	f000 fc37 	bl	8005cda <__multadd>
 800546c:	9b04      	ldr	r3, [sp, #16]
 800546e:	2b00      	cmp	r3, #0
 8005470:	4607      	mov	r7, r0
 8005472:	f300 80c8 	bgt.w	8005606 <_dtoa_r+0x9d6>
 8005476:	9b07      	ldr	r3, [sp, #28]
 8005478:	2b02      	cmp	r3, #2
 800547a:	f340 80c4 	ble.w	8005606 <_dtoa_r+0x9d6>
 800547e:	e059      	b.n	8005534 <_dtoa_r+0x904>
 8005480:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005482:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005486:	e756      	b.n	8005336 <_dtoa_r+0x706>
 8005488:	9b03      	ldr	r3, [sp, #12]
 800548a:	1e5e      	subs	r6, r3, #1
 800548c:	9b08      	ldr	r3, [sp, #32]
 800548e:	42b3      	cmp	r3, r6
 8005490:	bfbf      	itttt	lt
 8005492:	9b08      	ldrlt	r3, [sp, #32]
 8005494:	9608      	strlt	r6, [sp, #32]
 8005496:	1af2      	sublt	r2, r6, r3
 8005498:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800549a:	bfb6      	itet	lt
 800549c:	189b      	addlt	r3, r3, r2
 800549e:	1b9e      	subge	r6, r3, r6
 80054a0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80054a2:	9b03      	ldr	r3, [sp, #12]
 80054a4:	bfb8      	it	lt
 80054a6:	2600      	movlt	r6, #0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	bfb9      	ittee	lt
 80054ac:	9b05      	ldrlt	r3, [sp, #20]
 80054ae:	9a03      	ldrlt	r2, [sp, #12]
 80054b0:	9d05      	ldrge	r5, [sp, #20]
 80054b2:	9b03      	ldrge	r3, [sp, #12]
 80054b4:	bfbc      	itt	lt
 80054b6:	1a9d      	sublt	r5, r3, r2
 80054b8:	2300      	movlt	r3, #0
 80054ba:	e73e      	b.n	800533a <_dtoa_r+0x70a>
 80054bc:	9e08      	ldr	r6, [sp, #32]
 80054be:	9d05      	ldr	r5, [sp, #20]
 80054c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80054c2:	e745      	b.n	8005350 <_dtoa_r+0x720>
 80054c4:	9a08      	ldr	r2, [sp, #32]
 80054c6:	e76e      	b.n	80053a6 <_dtoa_r+0x776>
 80054c8:	9b07      	ldr	r3, [sp, #28]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	dc19      	bgt.n	8005502 <_dtoa_r+0x8d2>
 80054ce:	9b00      	ldr	r3, [sp, #0]
 80054d0:	b9bb      	cbnz	r3, 8005502 <_dtoa_r+0x8d2>
 80054d2:	9b01      	ldr	r3, [sp, #4]
 80054d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054d8:	b99b      	cbnz	r3, 8005502 <_dtoa_r+0x8d2>
 80054da:	9b01      	ldr	r3, [sp, #4]
 80054dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054e0:	0d1b      	lsrs	r3, r3, #20
 80054e2:	051b      	lsls	r3, r3, #20
 80054e4:	b183      	cbz	r3, 8005508 <_dtoa_r+0x8d8>
 80054e6:	9b05      	ldr	r3, [sp, #20]
 80054e8:	3301      	adds	r3, #1
 80054ea:	9305      	str	r3, [sp, #20]
 80054ec:	9b06      	ldr	r3, [sp, #24]
 80054ee:	3301      	adds	r3, #1
 80054f0:	9306      	str	r3, [sp, #24]
 80054f2:	f04f 0801 	mov.w	r8, #1
 80054f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f47f af6d 	bne.w	80053d8 <_dtoa_r+0x7a8>
 80054fe:	2001      	movs	r0, #1
 8005500:	e772      	b.n	80053e8 <_dtoa_r+0x7b8>
 8005502:	f04f 0800 	mov.w	r8, #0
 8005506:	e7f6      	b.n	80054f6 <_dtoa_r+0x8c6>
 8005508:	4698      	mov	r8, r3
 800550a:	e7f4      	b.n	80054f6 <_dtoa_r+0x8c6>
 800550c:	d080      	beq.n	8005410 <_dtoa_r+0x7e0>
 800550e:	9a05      	ldr	r2, [sp, #20]
 8005510:	331c      	adds	r3, #28
 8005512:	441a      	add	r2, r3
 8005514:	9205      	str	r2, [sp, #20]
 8005516:	9a06      	ldr	r2, [sp, #24]
 8005518:	441a      	add	r2, r3
 800551a:	441d      	add	r5, r3
 800551c:	4613      	mov	r3, r2
 800551e:	e776      	b.n	800540e <_dtoa_r+0x7de>
 8005520:	4603      	mov	r3, r0
 8005522:	e7f4      	b.n	800550e <_dtoa_r+0x8de>
 8005524:	9b03      	ldr	r3, [sp, #12]
 8005526:	2b00      	cmp	r3, #0
 8005528:	dc36      	bgt.n	8005598 <_dtoa_r+0x968>
 800552a:	9b07      	ldr	r3, [sp, #28]
 800552c:	2b02      	cmp	r3, #2
 800552e:	dd33      	ble.n	8005598 <_dtoa_r+0x968>
 8005530:	9b03      	ldr	r3, [sp, #12]
 8005532:	9304      	str	r3, [sp, #16]
 8005534:	9b04      	ldr	r3, [sp, #16]
 8005536:	b963      	cbnz	r3, 8005552 <_dtoa_r+0x922>
 8005538:	4631      	mov	r1, r6
 800553a:	2205      	movs	r2, #5
 800553c:	4620      	mov	r0, r4
 800553e:	f000 fbcc 	bl	8005cda <__multadd>
 8005542:	4601      	mov	r1, r0
 8005544:	4606      	mov	r6, r0
 8005546:	4650      	mov	r0, sl
 8005548:	f000 fd85 	bl	8006056 <__mcmp>
 800554c:	2800      	cmp	r0, #0
 800554e:	f73f adb6 	bgt.w	80050be <_dtoa_r+0x48e>
 8005552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005554:	9d02      	ldr	r5, [sp, #8]
 8005556:	ea6f 0b03 	mvn.w	fp, r3
 800555a:	2300      	movs	r3, #0
 800555c:	9303      	str	r3, [sp, #12]
 800555e:	4631      	mov	r1, r6
 8005560:	4620      	mov	r0, r4
 8005562:	f000 fba3 	bl	8005cac <_Bfree>
 8005566:	2f00      	cmp	r7, #0
 8005568:	f43f aea6 	beq.w	80052b8 <_dtoa_r+0x688>
 800556c:	9b03      	ldr	r3, [sp, #12]
 800556e:	b12b      	cbz	r3, 800557c <_dtoa_r+0x94c>
 8005570:	42bb      	cmp	r3, r7
 8005572:	d003      	beq.n	800557c <_dtoa_r+0x94c>
 8005574:	4619      	mov	r1, r3
 8005576:	4620      	mov	r0, r4
 8005578:	f000 fb98 	bl	8005cac <_Bfree>
 800557c:	4639      	mov	r1, r7
 800557e:	4620      	mov	r0, r4
 8005580:	f000 fb94 	bl	8005cac <_Bfree>
 8005584:	e698      	b.n	80052b8 <_dtoa_r+0x688>
 8005586:	2600      	movs	r6, #0
 8005588:	4637      	mov	r7, r6
 800558a:	e7e2      	b.n	8005552 <_dtoa_r+0x922>
 800558c:	46bb      	mov	fp, r7
 800558e:	4637      	mov	r7, r6
 8005590:	e595      	b.n	80050be <_dtoa_r+0x48e>
 8005592:	bf00      	nop
 8005594:	40240000 	.word	0x40240000
 8005598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800559a:	bb93      	cbnz	r3, 8005602 <_dtoa_r+0x9d2>
 800559c:	9b03      	ldr	r3, [sp, #12]
 800559e:	9304      	str	r3, [sp, #16]
 80055a0:	9d02      	ldr	r5, [sp, #8]
 80055a2:	4631      	mov	r1, r6
 80055a4:	4650      	mov	r0, sl
 80055a6:	f7ff fab7 	bl	8004b18 <quorem>
 80055aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80055ae:	f805 9b01 	strb.w	r9, [r5], #1
 80055b2:	9b02      	ldr	r3, [sp, #8]
 80055b4:	9a04      	ldr	r2, [sp, #16]
 80055b6:	1aeb      	subs	r3, r5, r3
 80055b8:	429a      	cmp	r2, r3
 80055ba:	f300 80dc 	bgt.w	8005776 <_dtoa_r+0xb46>
 80055be:	9b02      	ldr	r3, [sp, #8]
 80055c0:	2a01      	cmp	r2, #1
 80055c2:	bfac      	ite	ge
 80055c4:	189b      	addge	r3, r3, r2
 80055c6:	3301      	addlt	r3, #1
 80055c8:	4698      	mov	r8, r3
 80055ca:	2300      	movs	r3, #0
 80055cc:	9303      	str	r3, [sp, #12]
 80055ce:	4651      	mov	r1, sl
 80055d0:	2201      	movs	r2, #1
 80055d2:	4620      	mov	r0, r4
 80055d4:	f000 fcee 	bl	8005fb4 <__lshift>
 80055d8:	4631      	mov	r1, r6
 80055da:	4682      	mov	sl, r0
 80055dc:	f000 fd3b 	bl	8006056 <__mcmp>
 80055e0:	2800      	cmp	r0, #0
 80055e2:	f300 808d 	bgt.w	8005700 <_dtoa_r+0xad0>
 80055e6:	d103      	bne.n	80055f0 <_dtoa_r+0x9c0>
 80055e8:	f019 0f01 	tst.w	r9, #1
 80055ec:	f040 8088 	bne.w	8005700 <_dtoa_r+0xad0>
 80055f0:	4645      	mov	r5, r8
 80055f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80055f6:	2b30      	cmp	r3, #48	; 0x30
 80055f8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80055fc:	d1af      	bne.n	800555e <_dtoa_r+0x92e>
 80055fe:	4615      	mov	r5, r2
 8005600:	e7f7      	b.n	80055f2 <_dtoa_r+0x9c2>
 8005602:	9b03      	ldr	r3, [sp, #12]
 8005604:	9304      	str	r3, [sp, #16]
 8005606:	2d00      	cmp	r5, #0
 8005608:	dd05      	ble.n	8005616 <_dtoa_r+0x9e6>
 800560a:	4639      	mov	r1, r7
 800560c:	462a      	mov	r2, r5
 800560e:	4620      	mov	r0, r4
 8005610:	f000 fcd0 	bl	8005fb4 <__lshift>
 8005614:	4607      	mov	r7, r0
 8005616:	f1b8 0f00 	cmp.w	r8, #0
 800561a:	d04c      	beq.n	80056b6 <_dtoa_r+0xa86>
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	4620      	mov	r0, r4
 8005620:	f000 fb10 	bl	8005c44 <_Balloc>
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	3202      	adds	r2, #2
 8005628:	4605      	mov	r5, r0
 800562a:	0092      	lsls	r2, r2, #2
 800562c:	f107 010c 	add.w	r1, r7, #12
 8005630:	300c      	adds	r0, #12
 8005632:	f000 faef 	bl	8005c14 <memcpy>
 8005636:	2201      	movs	r2, #1
 8005638:	4629      	mov	r1, r5
 800563a:	4620      	mov	r0, r4
 800563c:	f000 fcba 	bl	8005fb4 <__lshift>
 8005640:	9b00      	ldr	r3, [sp, #0]
 8005642:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005646:	9703      	str	r7, [sp, #12]
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	4607      	mov	r7, r0
 800564e:	9305      	str	r3, [sp, #20]
 8005650:	4631      	mov	r1, r6
 8005652:	4650      	mov	r0, sl
 8005654:	f7ff fa60 	bl	8004b18 <quorem>
 8005658:	9903      	ldr	r1, [sp, #12]
 800565a:	4605      	mov	r5, r0
 800565c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005660:	4650      	mov	r0, sl
 8005662:	f000 fcf8 	bl	8006056 <__mcmp>
 8005666:	463a      	mov	r2, r7
 8005668:	9000      	str	r0, [sp, #0]
 800566a:	4631      	mov	r1, r6
 800566c:	4620      	mov	r0, r4
 800566e:	f000 fd0c 	bl	800608a <__mdiff>
 8005672:	68c3      	ldr	r3, [r0, #12]
 8005674:	4602      	mov	r2, r0
 8005676:	bb03      	cbnz	r3, 80056ba <_dtoa_r+0xa8a>
 8005678:	4601      	mov	r1, r0
 800567a:	9006      	str	r0, [sp, #24]
 800567c:	4650      	mov	r0, sl
 800567e:	f000 fcea 	bl	8006056 <__mcmp>
 8005682:	9a06      	ldr	r2, [sp, #24]
 8005684:	4603      	mov	r3, r0
 8005686:	4611      	mov	r1, r2
 8005688:	4620      	mov	r0, r4
 800568a:	9306      	str	r3, [sp, #24]
 800568c:	f000 fb0e 	bl	8005cac <_Bfree>
 8005690:	9b06      	ldr	r3, [sp, #24]
 8005692:	b9a3      	cbnz	r3, 80056be <_dtoa_r+0xa8e>
 8005694:	9a07      	ldr	r2, [sp, #28]
 8005696:	b992      	cbnz	r2, 80056be <_dtoa_r+0xa8e>
 8005698:	9a05      	ldr	r2, [sp, #20]
 800569a:	b982      	cbnz	r2, 80056be <_dtoa_r+0xa8e>
 800569c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80056a0:	d029      	beq.n	80056f6 <_dtoa_r+0xac6>
 80056a2:	9b00      	ldr	r3, [sp, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	dd01      	ble.n	80056ac <_dtoa_r+0xa7c>
 80056a8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80056ac:	f108 0501 	add.w	r5, r8, #1
 80056b0:	f888 9000 	strb.w	r9, [r8]
 80056b4:	e753      	b.n	800555e <_dtoa_r+0x92e>
 80056b6:	4638      	mov	r0, r7
 80056b8:	e7c2      	b.n	8005640 <_dtoa_r+0xa10>
 80056ba:	2301      	movs	r3, #1
 80056bc:	e7e3      	b.n	8005686 <_dtoa_r+0xa56>
 80056be:	9a00      	ldr	r2, [sp, #0]
 80056c0:	2a00      	cmp	r2, #0
 80056c2:	db04      	blt.n	80056ce <_dtoa_r+0xa9e>
 80056c4:	d125      	bne.n	8005712 <_dtoa_r+0xae2>
 80056c6:	9a07      	ldr	r2, [sp, #28]
 80056c8:	bb1a      	cbnz	r2, 8005712 <_dtoa_r+0xae2>
 80056ca:	9a05      	ldr	r2, [sp, #20]
 80056cc:	bb0a      	cbnz	r2, 8005712 <_dtoa_r+0xae2>
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	ddec      	ble.n	80056ac <_dtoa_r+0xa7c>
 80056d2:	4651      	mov	r1, sl
 80056d4:	2201      	movs	r2, #1
 80056d6:	4620      	mov	r0, r4
 80056d8:	f000 fc6c 	bl	8005fb4 <__lshift>
 80056dc:	4631      	mov	r1, r6
 80056de:	4682      	mov	sl, r0
 80056e0:	f000 fcb9 	bl	8006056 <__mcmp>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	dc03      	bgt.n	80056f0 <_dtoa_r+0xac0>
 80056e8:	d1e0      	bne.n	80056ac <_dtoa_r+0xa7c>
 80056ea:	f019 0f01 	tst.w	r9, #1
 80056ee:	d0dd      	beq.n	80056ac <_dtoa_r+0xa7c>
 80056f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80056f4:	d1d8      	bne.n	80056a8 <_dtoa_r+0xa78>
 80056f6:	2339      	movs	r3, #57	; 0x39
 80056f8:	f888 3000 	strb.w	r3, [r8]
 80056fc:	f108 0801 	add.w	r8, r8, #1
 8005700:	4645      	mov	r5, r8
 8005702:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005706:	2b39      	cmp	r3, #57	; 0x39
 8005708:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800570c:	d03b      	beq.n	8005786 <_dtoa_r+0xb56>
 800570e:	3301      	adds	r3, #1
 8005710:	e040      	b.n	8005794 <_dtoa_r+0xb64>
 8005712:	2b00      	cmp	r3, #0
 8005714:	f108 0501 	add.w	r5, r8, #1
 8005718:	dd05      	ble.n	8005726 <_dtoa_r+0xaf6>
 800571a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800571e:	d0ea      	beq.n	80056f6 <_dtoa_r+0xac6>
 8005720:	f109 0901 	add.w	r9, r9, #1
 8005724:	e7c4      	b.n	80056b0 <_dtoa_r+0xa80>
 8005726:	9b02      	ldr	r3, [sp, #8]
 8005728:	9a04      	ldr	r2, [sp, #16]
 800572a:	f805 9c01 	strb.w	r9, [r5, #-1]
 800572e:	1aeb      	subs	r3, r5, r3
 8005730:	4293      	cmp	r3, r2
 8005732:	46a8      	mov	r8, r5
 8005734:	f43f af4b 	beq.w	80055ce <_dtoa_r+0x99e>
 8005738:	4651      	mov	r1, sl
 800573a:	2300      	movs	r3, #0
 800573c:	220a      	movs	r2, #10
 800573e:	4620      	mov	r0, r4
 8005740:	f000 facb 	bl	8005cda <__multadd>
 8005744:	9b03      	ldr	r3, [sp, #12]
 8005746:	9903      	ldr	r1, [sp, #12]
 8005748:	42bb      	cmp	r3, r7
 800574a:	4682      	mov	sl, r0
 800574c:	f04f 0300 	mov.w	r3, #0
 8005750:	f04f 020a 	mov.w	r2, #10
 8005754:	4620      	mov	r0, r4
 8005756:	d104      	bne.n	8005762 <_dtoa_r+0xb32>
 8005758:	f000 fabf 	bl	8005cda <__multadd>
 800575c:	9003      	str	r0, [sp, #12]
 800575e:	4607      	mov	r7, r0
 8005760:	e776      	b.n	8005650 <_dtoa_r+0xa20>
 8005762:	f000 faba 	bl	8005cda <__multadd>
 8005766:	2300      	movs	r3, #0
 8005768:	9003      	str	r0, [sp, #12]
 800576a:	220a      	movs	r2, #10
 800576c:	4639      	mov	r1, r7
 800576e:	4620      	mov	r0, r4
 8005770:	f000 fab3 	bl	8005cda <__multadd>
 8005774:	e7f3      	b.n	800575e <_dtoa_r+0xb2e>
 8005776:	4651      	mov	r1, sl
 8005778:	2300      	movs	r3, #0
 800577a:	220a      	movs	r2, #10
 800577c:	4620      	mov	r0, r4
 800577e:	f000 faac 	bl	8005cda <__multadd>
 8005782:	4682      	mov	sl, r0
 8005784:	e70d      	b.n	80055a2 <_dtoa_r+0x972>
 8005786:	9b02      	ldr	r3, [sp, #8]
 8005788:	4293      	cmp	r3, r2
 800578a:	d105      	bne.n	8005798 <_dtoa_r+0xb68>
 800578c:	9a02      	ldr	r2, [sp, #8]
 800578e:	f10b 0b01 	add.w	fp, fp, #1
 8005792:	2331      	movs	r3, #49	; 0x31
 8005794:	7013      	strb	r3, [r2, #0]
 8005796:	e6e2      	b.n	800555e <_dtoa_r+0x92e>
 8005798:	4615      	mov	r5, r2
 800579a:	e7b2      	b.n	8005702 <_dtoa_r+0xad2>
 800579c:	4b09      	ldr	r3, [pc, #36]	; (80057c4 <_dtoa_r+0xb94>)
 800579e:	f7ff baae 	b.w	8004cfe <_dtoa_r+0xce>
 80057a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f47f aa88 	bne.w	8004cba <_dtoa_r+0x8a>
 80057aa:	4b07      	ldr	r3, [pc, #28]	; (80057c8 <_dtoa_r+0xb98>)
 80057ac:	f7ff baa7 	b.w	8004cfe <_dtoa_r+0xce>
 80057b0:	9b04      	ldr	r3, [sp, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f73f aef4 	bgt.w	80055a0 <_dtoa_r+0x970>
 80057b8:	9b07      	ldr	r3, [sp, #28]
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	f77f aef0 	ble.w	80055a0 <_dtoa_r+0x970>
 80057c0:	e6b8      	b.n	8005534 <_dtoa_r+0x904>
 80057c2:	bf00      	nop
 80057c4:	08007e6c 	.word	0x08007e6c
 80057c8:	08007e8e 	.word	0x08007e8e

080057cc <_localeconv_r>:
 80057cc:	4b04      	ldr	r3, [pc, #16]	; (80057e0 <_localeconv_r+0x14>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6a18      	ldr	r0, [r3, #32]
 80057d2:	4b04      	ldr	r3, [pc, #16]	; (80057e4 <_localeconv_r+0x18>)
 80057d4:	2800      	cmp	r0, #0
 80057d6:	bf08      	it	eq
 80057d8:	4618      	moveq	r0, r3
 80057da:	30f0      	adds	r0, #240	; 0xf0
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	2000001c 	.word	0x2000001c
 80057e4:	20000520 	.word	0x20000520

080057e8 <malloc>:
 80057e8:	4b02      	ldr	r3, [pc, #8]	; (80057f4 <malloc+0xc>)
 80057ea:	4601      	mov	r1, r0
 80057ec:	6818      	ldr	r0, [r3, #0]
 80057ee:	f000 b803 	b.w	80057f8 <_malloc_r>
 80057f2:	bf00      	nop
 80057f4:	2000001c 	.word	0x2000001c

080057f8 <_malloc_r>:
 80057f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fc:	f101 040b 	add.w	r4, r1, #11
 8005800:	2c16      	cmp	r4, #22
 8005802:	4681      	mov	r9, r0
 8005804:	d907      	bls.n	8005816 <_malloc_r+0x1e>
 8005806:	f034 0407 	bics.w	r4, r4, #7
 800580a:	d505      	bpl.n	8005818 <_malloc_r+0x20>
 800580c:	230c      	movs	r3, #12
 800580e:	f8c9 3000 	str.w	r3, [r9]
 8005812:	2600      	movs	r6, #0
 8005814:	e131      	b.n	8005a7a <_malloc_r+0x282>
 8005816:	2410      	movs	r4, #16
 8005818:	428c      	cmp	r4, r1
 800581a:	d3f7      	bcc.n	800580c <_malloc_r+0x14>
 800581c:	4648      	mov	r0, r9
 800581e:	f000 fa05 	bl	8005c2c <__malloc_lock>
 8005822:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8005826:	4d9c      	ldr	r5, [pc, #624]	; (8005a98 <_malloc_r+0x2a0>)
 8005828:	d236      	bcs.n	8005898 <_malloc_r+0xa0>
 800582a:	f104 0208 	add.w	r2, r4, #8
 800582e:	442a      	add	r2, r5
 8005830:	f1a2 0108 	sub.w	r1, r2, #8
 8005834:	6856      	ldr	r6, [r2, #4]
 8005836:	428e      	cmp	r6, r1
 8005838:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800583c:	d102      	bne.n	8005844 <_malloc_r+0x4c>
 800583e:	68d6      	ldr	r6, [r2, #12]
 8005840:	42b2      	cmp	r2, r6
 8005842:	d010      	beq.n	8005866 <_malloc_r+0x6e>
 8005844:	6873      	ldr	r3, [r6, #4]
 8005846:	68f2      	ldr	r2, [r6, #12]
 8005848:	68b1      	ldr	r1, [r6, #8]
 800584a:	f023 0303 	bic.w	r3, r3, #3
 800584e:	60ca      	str	r2, [r1, #12]
 8005850:	4433      	add	r3, r6
 8005852:	6091      	str	r1, [r2, #8]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	f042 0201 	orr.w	r2, r2, #1
 800585a:	605a      	str	r2, [r3, #4]
 800585c:	4648      	mov	r0, r9
 800585e:	f000 f9eb 	bl	8005c38 <__malloc_unlock>
 8005862:	3608      	adds	r6, #8
 8005864:	e109      	b.n	8005a7a <_malloc_r+0x282>
 8005866:	3302      	adds	r3, #2
 8005868:	4a8c      	ldr	r2, [pc, #560]	; (8005a9c <_malloc_r+0x2a4>)
 800586a:	692e      	ldr	r6, [r5, #16]
 800586c:	4296      	cmp	r6, r2
 800586e:	4611      	mov	r1, r2
 8005870:	d06d      	beq.n	800594e <_malloc_r+0x156>
 8005872:	6870      	ldr	r0, [r6, #4]
 8005874:	f020 0003 	bic.w	r0, r0, #3
 8005878:	1b07      	subs	r7, r0, r4
 800587a:	2f0f      	cmp	r7, #15
 800587c:	dd47      	ble.n	800590e <_malloc_r+0x116>
 800587e:	1933      	adds	r3, r6, r4
 8005880:	f044 0401 	orr.w	r4, r4, #1
 8005884:	6074      	str	r4, [r6, #4]
 8005886:	616b      	str	r3, [r5, #20]
 8005888:	612b      	str	r3, [r5, #16]
 800588a:	60da      	str	r2, [r3, #12]
 800588c:	609a      	str	r2, [r3, #8]
 800588e:	f047 0201 	orr.w	r2, r7, #1
 8005892:	605a      	str	r2, [r3, #4]
 8005894:	5037      	str	r7, [r6, r0]
 8005896:	e7e1      	b.n	800585c <_malloc_r+0x64>
 8005898:	0a63      	lsrs	r3, r4, #9
 800589a:	d02a      	beq.n	80058f2 <_malloc_r+0xfa>
 800589c:	2b04      	cmp	r3, #4
 800589e:	d812      	bhi.n	80058c6 <_malloc_r+0xce>
 80058a0:	09a3      	lsrs	r3, r4, #6
 80058a2:	3338      	adds	r3, #56	; 0x38
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80058aa:	f1a2 0008 	sub.w	r0, r2, #8
 80058ae:	6856      	ldr	r6, [r2, #4]
 80058b0:	4286      	cmp	r6, r0
 80058b2:	d006      	beq.n	80058c2 <_malloc_r+0xca>
 80058b4:	6872      	ldr	r2, [r6, #4]
 80058b6:	f022 0203 	bic.w	r2, r2, #3
 80058ba:	1b11      	subs	r1, r2, r4
 80058bc:	290f      	cmp	r1, #15
 80058be:	dd1c      	ble.n	80058fa <_malloc_r+0x102>
 80058c0:	3b01      	subs	r3, #1
 80058c2:	3301      	adds	r3, #1
 80058c4:	e7d0      	b.n	8005868 <_malloc_r+0x70>
 80058c6:	2b14      	cmp	r3, #20
 80058c8:	d801      	bhi.n	80058ce <_malloc_r+0xd6>
 80058ca:	335b      	adds	r3, #91	; 0x5b
 80058cc:	e7ea      	b.n	80058a4 <_malloc_r+0xac>
 80058ce:	2b54      	cmp	r3, #84	; 0x54
 80058d0:	d802      	bhi.n	80058d8 <_malloc_r+0xe0>
 80058d2:	0b23      	lsrs	r3, r4, #12
 80058d4:	336e      	adds	r3, #110	; 0x6e
 80058d6:	e7e5      	b.n	80058a4 <_malloc_r+0xac>
 80058d8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80058dc:	d802      	bhi.n	80058e4 <_malloc_r+0xec>
 80058de:	0be3      	lsrs	r3, r4, #15
 80058e0:	3377      	adds	r3, #119	; 0x77
 80058e2:	e7df      	b.n	80058a4 <_malloc_r+0xac>
 80058e4:	f240 5254 	movw	r2, #1364	; 0x554
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d804      	bhi.n	80058f6 <_malloc_r+0xfe>
 80058ec:	0ca3      	lsrs	r3, r4, #18
 80058ee:	337c      	adds	r3, #124	; 0x7c
 80058f0:	e7d8      	b.n	80058a4 <_malloc_r+0xac>
 80058f2:	233f      	movs	r3, #63	; 0x3f
 80058f4:	e7d6      	b.n	80058a4 <_malloc_r+0xac>
 80058f6:	237e      	movs	r3, #126	; 0x7e
 80058f8:	e7d4      	b.n	80058a4 <_malloc_r+0xac>
 80058fa:	2900      	cmp	r1, #0
 80058fc:	68f1      	ldr	r1, [r6, #12]
 80058fe:	db04      	blt.n	800590a <_malloc_r+0x112>
 8005900:	68b3      	ldr	r3, [r6, #8]
 8005902:	60d9      	str	r1, [r3, #12]
 8005904:	608b      	str	r3, [r1, #8]
 8005906:	18b3      	adds	r3, r6, r2
 8005908:	e7a4      	b.n	8005854 <_malloc_r+0x5c>
 800590a:	460e      	mov	r6, r1
 800590c:	e7d0      	b.n	80058b0 <_malloc_r+0xb8>
 800590e:	2f00      	cmp	r7, #0
 8005910:	616a      	str	r2, [r5, #20]
 8005912:	612a      	str	r2, [r5, #16]
 8005914:	db05      	blt.n	8005922 <_malloc_r+0x12a>
 8005916:	4430      	add	r0, r6
 8005918:	6843      	ldr	r3, [r0, #4]
 800591a:	f043 0301 	orr.w	r3, r3, #1
 800591e:	6043      	str	r3, [r0, #4]
 8005920:	e79c      	b.n	800585c <_malloc_r+0x64>
 8005922:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005926:	d244      	bcs.n	80059b2 <_malloc_r+0x1ba>
 8005928:	08c0      	lsrs	r0, r0, #3
 800592a:	1087      	asrs	r7, r0, #2
 800592c:	2201      	movs	r2, #1
 800592e:	fa02 f707 	lsl.w	r7, r2, r7
 8005932:	686a      	ldr	r2, [r5, #4]
 8005934:	3001      	adds	r0, #1
 8005936:	433a      	orrs	r2, r7
 8005938:	606a      	str	r2, [r5, #4]
 800593a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800593e:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8005942:	60b7      	str	r7, [r6, #8]
 8005944:	3a08      	subs	r2, #8
 8005946:	60f2      	str	r2, [r6, #12]
 8005948:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 800594c:	60fe      	str	r6, [r7, #12]
 800594e:	2001      	movs	r0, #1
 8005950:	109a      	asrs	r2, r3, #2
 8005952:	fa00 f202 	lsl.w	r2, r0, r2
 8005956:	6868      	ldr	r0, [r5, #4]
 8005958:	4282      	cmp	r2, r0
 800595a:	f200 80a1 	bhi.w	8005aa0 <_malloc_r+0x2a8>
 800595e:	4202      	tst	r2, r0
 8005960:	d106      	bne.n	8005970 <_malloc_r+0x178>
 8005962:	f023 0303 	bic.w	r3, r3, #3
 8005966:	0052      	lsls	r2, r2, #1
 8005968:	4202      	tst	r2, r0
 800596a:	f103 0304 	add.w	r3, r3, #4
 800596e:	d0fa      	beq.n	8005966 <_malloc_r+0x16e>
 8005970:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8005974:	46e0      	mov	r8, ip
 8005976:	469e      	mov	lr, r3
 8005978:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800597c:	4546      	cmp	r6, r8
 800597e:	d153      	bne.n	8005a28 <_malloc_r+0x230>
 8005980:	f10e 0e01 	add.w	lr, lr, #1
 8005984:	f01e 0f03 	tst.w	lr, #3
 8005988:	f108 0808 	add.w	r8, r8, #8
 800598c:	d1f4      	bne.n	8005978 <_malloc_r+0x180>
 800598e:	0798      	lsls	r0, r3, #30
 8005990:	d179      	bne.n	8005a86 <_malloc_r+0x28e>
 8005992:	686b      	ldr	r3, [r5, #4]
 8005994:	ea23 0302 	bic.w	r3, r3, r2
 8005998:	606b      	str	r3, [r5, #4]
 800599a:	6868      	ldr	r0, [r5, #4]
 800599c:	0052      	lsls	r2, r2, #1
 800599e:	4282      	cmp	r2, r0
 80059a0:	d87e      	bhi.n	8005aa0 <_malloc_r+0x2a8>
 80059a2:	2a00      	cmp	r2, #0
 80059a4:	d07c      	beq.n	8005aa0 <_malloc_r+0x2a8>
 80059a6:	4673      	mov	r3, lr
 80059a8:	4202      	tst	r2, r0
 80059aa:	d1e1      	bne.n	8005970 <_malloc_r+0x178>
 80059ac:	3304      	adds	r3, #4
 80059ae:	0052      	lsls	r2, r2, #1
 80059b0:	e7fa      	b.n	80059a8 <_malloc_r+0x1b0>
 80059b2:	0a42      	lsrs	r2, r0, #9
 80059b4:	2a04      	cmp	r2, #4
 80059b6:	d815      	bhi.n	80059e4 <_malloc_r+0x1ec>
 80059b8:	0982      	lsrs	r2, r0, #6
 80059ba:	3238      	adds	r2, #56	; 0x38
 80059bc:	1c57      	adds	r7, r2, #1
 80059be:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80059c2:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80059c6:	45be      	cmp	lr, r7
 80059c8:	d126      	bne.n	8005a18 <_malloc_r+0x220>
 80059ca:	2001      	movs	r0, #1
 80059cc:	1092      	asrs	r2, r2, #2
 80059ce:	fa00 f202 	lsl.w	r2, r0, r2
 80059d2:	6868      	ldr	r0, [r5, #4]
 80059d4:	4310      	orrs	r0, r2
 80059d6:	6068      	str	r0, [r5, #4]
 80059d8:	f8c6 e00c 	str.w	lr, [r6, #12]
 80059dc:	60b7      	str	r7, [r6, #8]
 80059de:	f8ce 6008 	str.w	r6, [lr, #8]
 80059e2:	e7b3      	b.n	800594c <_malloc_r+0x154>
 80059e4:	2a14      	cmp	r2, #20
 80059e6:	d801      	bhi.n	80059ec <_malloc_r+0x1f4>
 80059e8:	325b      	adds	r2, #91	; 0x5b
 80059ea:	e7e7      	b.n	80059bc <_malloc_r+0x1c4>
 80059ec:	2a54      	cmp	r2, #84	; 0x54
 80059ee:	d802      	bhi.n	80059f6 <_malloc_r+0x1fe>
 80059f0:	0b02      	lsrs	r2, r0, #12
 80059f2:	326e      	adds	r2, #110	; 0x6e
 80059f4:	e7e2      	b.n	80059bc <_malloc_r+0x1c4>
 80059f6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80059fa:	d802      	bhi.n	8005a02 <_malloc_r+0x20a>
 80059fc:	0bc2      	lsrs	r2, r0, #15
 80059fe:	3277      	adds	r2, #119	; 0x77
 8005a00:	e7dc      	b.n	80059bc <_malloc_r+0x1c4>
 8005a02:	f240 5754 	movw	r7, #1364	; 0x554
 8005a06:	42ba      	cmp	r2, r7
 8005a08:	bf9a      	itte	ls
 8005a0a:	0c82      	lsrls	r2, r0, #18
 8005a0c:	327c      	addls	r2, #124	; 0x7c
 8005a0e:	227e      	movhi	r2, #126	; 0x7e
 8005a10:	e7d4      	b.n	80059bc <_malloc_r+0x1c4>
 8005a12:	68bf      	ldr	r7, [r7, #8]
 8005a14:	45be      	cmp	lr, r7
 8005a16:	d004      	beq.n	8005a22 <_malloc_r+0x22a>
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	f022 0203 	bic.w	r2, r2, #3
 8005a1e:	4290      	cmp	r0, r2
 8005a20:	d3f7      	bcc.n	8005a12 <_malloc_r+0x21a>
 8005a22:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8005a26:	e7d7      	b.n	80059d8 <_malloc_r+0x1e0>
 8005a28:	6870      	ldr	r0, [r6, #4]
 8005a2a:	68f7      	ldr	r7, [r6, #12]
 8005a2c:	f020 0003 	bic.w	r0, r0, #3
 8005a30:	eba0 0a04 	sub.w	sl, r0, r4
 8005a34:	f1ba 0f0f 	cmp.w	sl, #15
 8005a38:	dd10      	ble.n	8005a5c <_malloc_r+0x264>
 8005a3a:	68b2      	ldr	r2, [r6, #8]
 8005a3c:	1933      	adds	r3, r6, r4
 8005a3e:	f044 0401 	orr.w	r4, r4, #1
 8005a42:	6074      	str	r4, [r6, #4]
 8005a44:	60d7      	str	r7, [r2, #12]
 8005a46:	60ba      	str	r2, [r7, #8]
 8005a48:	f04a 0201 	orr.w	r2, sl, #1
 8005a4c:	616b      	str	r3, [r5, #20]
 8005a4e:	612b      	str	r3, [r5, #16]
 8005a50:	60d9      	str	r1, [r3, #12]
 8005a52:	6099      	str	r1, [r3, #8]
 8005a54:	605a      	str	r2, [r3, #4]
 8005a56:	f846 a000 	str.w	sl, [r6, r0]
 8005a5a:	e6ff      	b.n	800585c <_malloc_r+0x64>
 8005a5c:	f1ba 0f00 	cmp.w	sl, #0
 8005a60:	db0f      	blt.n	8005a82 <_malloc_r+0x28a>
 8005a62:	4430      	add	r0, r6
 8005a64:	6843      	ldr	r3, [r0, #4]
 8005a66:	f043 0301 	orr.w	r3, r3, #1
 8005a6a:	6043      	str	r3, [r0, #4]
 8005a6c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8005a70:	4648      	mov	r0, r9
 8005a72:	60df      	str	r7, [r3, #12]
 8005a74:	60bb      	str	r3, [r7, #8]
 8005a76:	f000 f8df 	bl	8005c38 <__malloc_unlock>
 8005a7a:	4630      	mov	r0, r6
 8005a7c:	b003      	add	sp, #12
 8005a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a82:	463e      	mov	r6, r7
 8005a84:	e77a      	b.n	800597c <_malloc_r+0x184>
 8005a86:	f85c 0908 	ldr.w	r0, [ip], #-8
 8005a8a:	4584      	cmp	ip, r0
 8005a8c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005a90:	f43f af7d 	beq.w	800598e <_malloc_r+0x196>
 8005a94:	e781      	b.n	800599a <_malloc_r+0x1a2>
 8005a96:	bf00      	nop
 8005a98:	20000110 	.word	0x20000110
 8005a9c:	20000118 	.word	0x20000118
 8005aa0:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8005aa4:	f8db 6004 	ldr.w	r6, [fp, #4]
 8005aa8:	f026 0603 	bic.w	r6, r6, #3
 8005aac:	42b4      	cmp	r4, r6
 8005aae:	d803      	bhi.n	8005ab8 <_malloc_r+0x2c0>
 8005ab0:	1b33      	subs	r3, r6, r4
 8005ab2:	2b0f      	cmp	r3, #15
 8005ab4:	f300 8096 	bgt.w	8005be4 <_malloc_r+0x3ec>
 8005ab8:	4a4f      	ldr	r2, [pc, #316]	; (8005bf8 <_malloc_r+0x400>)
 8005aba:	6817      	ldr	r7, [r2, #0]
 8005abc:	4a4f      	ldr	r2, [pc, #316]	; (8005bfc <_malloc_r+0x404>)
 8005abe:	6811      	ldr	r1, [r2, #0]
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	3101      	adds	r1, #1
 8005ac4:	eb0b 0306 	add.w	r3, fp, r6
 8005ac8:	4427      	add	r7, r4
 8005aca:	d005      	beq.n	8005ad8 <_malloc_r+0x2e0>
 8005acc:	494c      	ldr	r1, [pc, #304]	; (8005c00 <_malloc_r+0x408>)
 8005ace:	3901      	subs	r1, #1
 8005ad0:	440f      	add	r7, r1
 8005ad2:	3101      	adds	r1, #1
 8005ad4:	4249      	negs	r1, r1
 8005ad6:	400f      	ands	r7, r1
 8005ad8:	4639      	mov	r1, r7
 8005ada:	4648      	mov	r0, r9
 8005adc:	9201      	str	r2, [sp, #4]
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	f000 fb80 	bl	80061e4 <_sbrk_r>
 8005ae4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005ae8:	4680      	mov	r8, r0
 8005aea:	d056      	beq.n	8005b9a <_malloc_r+0x3a2>
 8005aec:	9b00      	ldr	r3, [sp, #0]
 8005aee:	9a01      	ldr	r2, [sp, #4]
 8005af0:	4283      	cmp	r3, r0
 8005af2:	d901      	bls.n	8005af8 <_malloc_r+0x300>
 8005af4:	45ab      	cmp	fp, r5
 8005af6:	d150      	bne.n	8005b9a <_malloc_r+0x3a2>
 8005af8:	4842      	ldr	r0, [pc, #264]	; (8005c04 <_malloc_r+0x40c>)
 8005afa:	6801      	ldr	r1, [r0, #0]
 8005afc:	4543      	cmp	r3, r8
 8005afe:	eb07 0e01 	add.w	lr, r7, r1
 8005b02:	f8c0 e000 	str.w	lr, [r0]
 8005b06:	4940      	ldr	r1, [pc, #256]	; (8005c08 <_malloc_r+0x410>)
 8005b08:	4682      	mov	sl, r0
 8005b0a:	d113      	bne.n	8005b34 <_malloc_r+0x33c>
 8005b0c:	420b      	tst	r3, r1
 8005b0e:	d111      	bne.n	8005b34 <_malloc_r+0x33c>
 8005b10:	68ab      	ldr	r3, [r5, #8]
 8005b12:	443e      	add	r6, r7
 8005b14:	f046 0601 	orr.w	r6, r6, #1
 8005b18:	605e      	str	r6, [r3, #4]
 8005b1a:	4a3c      	ldr	r2, [pc, #240]	; (8005c0c <_malloc_r+0x414>)
 8005b1c:	f8da 3000 	ldr.w	r3, [sl]
 8005b20:	6811      	ldr	r1, [r2, #0]
 8005b22:	428b      	cmp	r3, r1
 8005b24:	bf88      	it	hi
 8005b26:	6013      	strhi	r3, [r2, #0]
 8005b28:	4a39      	ldr	r2, [pc, #228]	; (8005c10 <_malloc_r+0x418>)
 8005b2a:	6811      	ldr	r1, [r2, #0]
 8005b2c:	428b      	cmp	r3, r1
 8005b2e:	bf88      	it	hi
 8005b30:	6013      	strhi	r3, [r2, #0]
 8005b32:	e032      	b.n	8005b9a <_malloc_r+0x3a2>
 8005b34:	6810      	ldr	r0, [r2, #0]
 8005b36:	3001      	adds	r0, #1
 8005b38:	bf1b      	ittet	ne
 8005b3a:	eba8 0303 	subne.w	r3, r8, r3
 8005b3e:	4473      	addne	r3, lr
 8005b40:	f8c2 8000 	streq.w	r8, [r2]
 8005b44:	f8ca 3000 	strne.w	r3, [sl]
 8005b48:	f018 0007 	ands.w	r0, r8, #7
 8005b4c:	bf1c      	itt	ne
 8005b4e:	f1c0 0008 	rsbne	r0, r0, #8
 8005b52:	4480      	addne	r8, r0
 8005b54:	4b2a      	ldr	r3, [pc, #168]	; (8005c00 <_malloc_r+0x408>)
 8005b56:	4447      	add	r7, r8
 8005b58:	4418      	add	r0, r3
 8005b5a:	400f      	ands	r7, r1
 8005b5c:	1bc7      	subs	r7, r0, r7
 8005b5e:	4639      	mov	r1, r7
 8005b60:	4648      	mov	r0, r9
 8005b62:	f000 fb3f 	bl	80061e4 <_sbrk_r>
 8005b66:	1c43      	adds	r3, r0, #1
 8005b68:	bf08      	it	eq
 8005b6a:	4640      	moveq	r0, r8
 8005b6c:	f8da 3000 	ldr.w	r3, [sl]
 8005b70:	f8c5 8008 	str.w	r8, [r5, #8]
 8005b74:	bf08      	it	eq
 8005b76:	2700      	moveq	r7, #0
 8005b78:	eba0 0008 	sub.w	r0, r0, r8
 8005b7c:	443b      	add	r3, r7
 8005b7e:	4407      	add	r7, r0
 8005b80:	f047 0701 	orr.w	r7, r7, #1
 8005b84:	45ab      	cmp	fp, r5
 8005b86:	f8ca 3000 	str.w	r3, [sl]
 8005b8a:	f8c8 7004 	str.w	r7, [r8, #4]
 8005b8e:	d0c4      	beq.n	8005b1a <_malloc_r+0x322>
 8005b90:	2e0f      	cmp	r6, #15
 8005b92:	d810      	bhi.n	8005bb6 <_malloc_r+0x3be>
 8005b94:	2301      	movs	r3, #1
 8005b96:	f8c8 3004 	str.w	r3, [r8, #4]
 8005b9a:	68ab      	ldr	r3, [r5, #8]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	f022 0203 	bic.w	r2, r2, #3
 8005ba2:	4294      	cmp	r4, r2
 8005ba4:	eba2 0304 	sub.w	r3, r2, r4
 8005ba8:	d801      	bhi.n	8005bae <_malloc_r+0x3b6>
 8005baa:	2b0f      	cmp	r3, #15
 8005bac:	dc1a      	bgt.n	8005be4 <_malloc_r+0x3ec>
 8005bae:	4648      	mov	r0, r9
 8005bb0:	f000 f842 	bl	8005c38 <__malloc_unlock>
 8005bb4:	e62d      	b.n	8005812 <_malloc_r+0x1a>
 8005bb6:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005bba:	3e0c      	subs	r6, #12
 8005bbc:	f026 0607 	bic.w	r6, r6, #7
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	4333      	orrs	r3, r6
 8005bc6:	f8cb 3004 	str.w	r3, [fp, #4]
 8005bca:	eb0b 0306 	add.w	r3, fp, r6
 8005bce:	2205      	movs	r2, #5
 8005bd0:	2e0f      	cmp	r6, #15
 8005bd2:	605a      	str	r2, [r3, #4]
 8005bd4:	609a      	str	r2, [r3, #8]
 8005bd6:	d9a0      	bls.n	8005b1a <_malloc_r+0x322>
 8005bd8:	f10b 0108 	add.w	r1, fp, #8
 8005bdc:	4648      	mov	r0, r9
 8005bde:	f000 fc0f 	bl	8006400 <_free_r>
 8005be2:	e79a      	b.n	8005b1a <_malloc_r+0x322>
 8005be4:	68ae      	ldr	r6, [r5, #8]
 8005be6:	f044 0201 	orr.w	r2, r4, #1
 8005bea:	4434      	add	r4, r6
 8005bec:	f043 0301 	orr.w	r3, r3, #1
 8005bf0:	6072      	str	r2, [r6, #4]
 8005bf2:	60ac      	str	r4, [r5, #8]
 8005bf4:	6063      	str	r3, [r4, #4]
 8005bf6:	e631      	b.n	800585c <_malloc_r+0x64>
 8005bf8:	20000af0 	.word	0x20000af0
 8005bfc:	20000518 	.word	0x20000518
 8005c00:	00000080 	.word	0x00000080
 8005c04:	20000ac0 	.word	0x20000ac0
 8005c08:	0000007f 	.word	0x0000007f
 8005c0c:	20000ae8 	.word	0x20000ae8
 8005c10:	20000aec 	.word	0x20000aec

08005c14 <memcpy>:
 8005c14:	b510      	push	{r4, lr}
 8005c16:	1e43      	subs	r3, r0, #1
 8005c18:	440a      	add	r2, r1
 8005c1a:	4291      	cmp	r1, r2
 8005c1c:	d100      	bne.n	8005c20 <memcpy+0xc>
 8005c1e:	bd10      	pop	{r4, pc}
 8005c20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c28:	e7f7      	b.n	8005c1a <memcpy+0x6>
	...

08005c2c <__malloc_lock>:
 8005c2c:	4801      	ldr	r0, [pc, #4]	; (8005c34 <__malloc_lock+0x8>)
 8005c2e:	f000 bca3 	b.w	8006578 <__retarget_lock_acquire_recursive>
 8005c32:	bf00      	nop
 8005c34:	20000cdc 	.word	0x20000cdc

08005c38 <__malloc_unlock>:
 8005c38:	4801      	ldr	r0, [pc, #4]	; (8005c40 <__malloc_unlock+0x8>)
 8005c3a:	f000 bc9e 	b.w	800657a <__retarget_lock_release_recursive>
 8005c3e:	bf00      	nop
 8005c40:	20000cdc 	.word	0x20000cdc

08005c44 <_Balloc>:
 8005c44:	b570      	push	{r4, r5, r6, lr}
 8005c46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005c48:	4604      	mov	r4, r0
 8005c4a:	460e      	mov	r6, r1
 8005c4c:	b93d      	cbnz	r5, 8005c5e <_Balloc+0x1a>
 8005c4e:	2010      	movs	r0, #16
 8005c50:	f7ff fdca 	bl	80057e8 <malloc>
 8005c54:	6260      	str	r0, [r4, #36]	; 0x24
 8005c56:	6045      	str	r5, [r0, #4]
 8005c58:	6085      	str	r5, [r0, #8]
 8005c5a:	6005      	str	r5, [r0, #0]
 8005c5c:	60c5      	str	r5, [r0, #12]
 8005c5e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005c60:	68eb      	ldr	r3, [r5, #12]
 8005c62:	b183      	cbz	r3, 8005c86 <_Balloc+0x42>
 8005c64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005c6c:	b9b8      	cbnz	r0, 8005c9e <_Balloc+0x5a>
 8005c6e:	2101      	movs	r1, #1
 8005c70:	fa01 f506 	lsl.w	r5, r1, r6
 8005c74:	1d6a      	adds	r2, r5, #5
 8005c76:	0092      	lsls	r2, r2, #2
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f000 fb3d 	bl	80062f8 <_calloc_r>
 8005c7e:	b160      	cbz	r0, 8005c9a <_Balloc+0x56>
 8005c80:	6046      	str	r6, [r0, #4]
 8005c82:	6085      	str	r5, [r0, #8]
 8005c84:	e00e      	b.n	8005ca4 <_Balloc+0x60>
 8005c86:	2221      	movs	r2, #33	; 0x21
 8005c88:	2104      	movs	r1, #4
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	f000 fb34 	bl	80062f8 <_calloc_r>
 8005c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c92:	60e8      	str	r0, [r5, #12]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1e4      	bne.n	8005c64 <_Balloc+0x20>
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	bd70      	pop	{r4, r5, r6, pc}
 8005c9e:	6802      	ldr	r2, [r0, #0]
 8005ca0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	6103      	str	r3, [r0, #16]
 8005ca8:	60c3      	str	r3, [r0, #12]
 8005caa:	bd70      	pop	{r4, r5, r6, pc}

08005cac <_Bfree>:
 8005cac:	b570      	push	{r4, r5, r6, lr}
 8005cae:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005cb0:	4606      	mov	r6, r0
 8005cb2:	460d      	mov	r5, r1
 8005cb4:	b93c      	cbnz	r4, 8005cc6 <_Bfree+0x1a>
 8005cb6:	2010      	movs	r0, #16
 8005cb8:	f7ff fd96 	bl	80057e8 <malloc>
 8005cbc:	6270      	str	r0, [r6, #36]	; 0x24
 8005cbe:	6044      	str	r4, [r0, #4]
 8005cc0:	6084      	str	r4, [r0, #8]
 8005cc2:	6004      	str	r4, [r0, #0]
 8005cc4:	60c4      	str	r4, [r0, #12]
 8005cc6:	b13d      	cbz	r5, 8005cd8 <_Bfree+0x2c>
 8005cc8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005cca:	686a      	ldr	r2, [r5, #4]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005cd2:	6029      	str	r1, [r5, #0]
 8005cd4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005cd8:	bd70      	pop	{r4, r5, r6, pc}

08005cda <__multadd>:
 8005cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cde:	690d      	ldr	r5, [r1, #16]
 8005ce0:	461f      	mov	r7, r3
 8005ce2:	4606      	mov	r6, r0
 8005ce4:	460c      	mov	r4, r1
 8005ce6:	f101 0e14 	add.w	lr, r1, #20
 8005cea:	2300      	movs	r3, #0
 8005cec:	f8de 0000 	ldr.w	r0, [lr]
 8005cf0:	b281      	uxth	r1, r0
 8005cf2:	fb02 7101 	mla	r1, r2, r1, r7
 8005cf6:	0c0f      	lsrs	r7, r1, #16
 8005cf8:	0c00      	lsrs	r0, r0, #16
 8005cfa:	fb02 7000 	mla	r0, r2, r0, r7
 8005cfe:	b289      	uxth	r1, r1
 8005d00:	3301      	adds	r3, #1
 8005d02:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005d06:	429d      	cmp	r5, r3
 8005d08:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005d0c:	f84e 1b04 	str.w	r1, [lr], #4
 8005d10:	dcec      	bgt.n	8005cec <__multadd+0x12>
 8005d12:	b1d7      	cbz	r7, 8005d4a <__multadd+0x70>
 8005d14:	68a3      	ldr	r3, [r4, #8]
 8005d16:	429d      	cmp	r5, r3
 8005d18:	db12      	blt.n	8005d40 <__multadd+0x66>
 8005d1a:	6861      	ldr	r1, [r4, #4]
 8005d1c:	4630      	mov	r0, r6
 8005d1e:	3101      	adds	r1, #1
 8005d20:	f7ff ff90 	bl	8005c44 <_Balloc>
 8005d24:	6922      	ldr	r2, [r4, #16]
 8005d26:	3202      	adds	r2, #2
 8005d28:	f104 010c 	add.w	r1, r4, #12
 8005d2c:	4680      	mov	r8, r0
 8005d2e:	0092      	lsls	r2, r2, #2
 8005d30:	300c      	adds	r0, #12
 8005d32:	f7ff ff6f 	bl	8005c14 <memcpy>
 8005d36:	4621      	mov	r1, r4
 8005d38:	4630      	mov	r0, r6
 8005d3a:	f7ff ffb7 	bl	8005cac <_Bfree>
 8005d3e:	4644      	mov	r4, r8
 8005d40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d44:	3501      	adds	r5, #1
 8005d46:	615f      	str	r7, [r3, #20]
 8005d48:	6125      	str	r5, [r4, #16]
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005d50 <__hi0bits>:
 8005d50:	0c02      	lsrs	r2, r0, #16
 8005d52:	0412      	lsls	r2, r2, #16
 8005d54:	4603      	mov	r3, r0
 8005d56:	b9b2      	cbnz	r2, 8005d86 <__hi0bits+0x36>
 8005d58:	0403      	lsls	r3, r0, #16
 8005d5a:	2010      	movs	r0, #16
 8005d5c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005d60:	bf04      	itt	eq
 8005d62:	021b      	lsleq	r3, r3, #8
 8005d64:	3008      	addeq	r0, #8
 8005d66:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005d6a:	bf04      	itt	eq
 8005d6c:	011b      	lsleq	r3, r3, #4
 8005d6e:	3004      	addeq	r0, #4
 8005d70:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005d74:	bf04      	itt	eq
 8005d76:	009b      	lsleq	r3, r3, #2
 8005d78:	3002      	addeq	r0, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	db06      	blt.n	8005d8c <__hi0bits+0x3c>
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	d503      	bpl.n	8005d8a <__hi0bits+0x3a>
 8005d82:	3001      	adds	r0, #1
 8005d84:	4770      	bx	lr
 8005d86:	2000      	movs	r0, #0
 8005d88:	e7e8      	b.n	8005d5c <__hi0bits+0xc>
 8005d8a:	2020      	movs	r0, #32
 8005d8c:	4770      	bx	lr

08005d8e <__lo0bits>:
 8005d8e:	6803      	ldr	r3, [r0, #0]
 8005d90:	f013 0207 	ands.w	r2, r3, #7
 8005d94:	4601      	mov	r1, r0
 8005d96:	d00b      	beq.n	8005db0 <__lo0bits+0x22>
 8005d98:	07da      	lsls	r2, r3, #31
 8005d9a:	d423      	bmi.n	8005de4 <__lo0bits+0x56>
 8005d9c:	0798      	lsls	r0, r3, #30
 8005d9e:	bf49      	itett	mi
 8005da0:	085b      	lsrmi	r3, r3, #1
 8005da2:	089b      	lsrpl	r3, r3, #2
 8005da4:	2001      	movmi	r0, #1
 8005da6:	600b      	strmi	r3, [r1, #0]
 8005da8:	bf5c      	itt	pl
 8005daa:	600b      	strpl	r3, [r1, #0]
 8005dac:	2002      	movpl	r0, #2
 8005dae:	4770      	bx	lr
 8005db0:	b298      	uxth	r0, r3
 8005db2:	b9a8      	cbnz	r0, 8005de0 <__lo0bits+0x52>
 8005db4:	0c1b      	lsrs	r3, r3, #16
 8005db6:	2010      	movs	r0, #16
 8005db8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005dbc:	bf04      	itt	eq
 8005dbe:	0a1b      	lsreq	r3, r3, #8
 8005dc0:	3008      	addeq	r0, #8
 8005dc2:	071a      	lsls	r2, r3, #28
 8005dc4:	bf04      	itt	eq
 8005dc6:	091b      	lsreq	r3, r3, #4
 8005dc8:	3004      	addeq	r0, #4
 8005dca:	079a      	lsls	r2, r3, #30
 8005dcc:	bf04      	itt	eq
 8005dce:	089b      	lsreq	r3, r3, #2
 8005dd0:	3002      	addeq	r0, #2
 8005dd2:	07da      	lsls	r2, r3, #31
 8005dd4:	d402      	bmi.n	8005ddc <__lo0bits+0x4e>
 8005dd6:	085b      	lsrs	r3, r3, #1
 8005dd8:	d006      	beq.n	8005de8 <__lo0bits+0x5a>
 8005dda:	3001      	adds	r0, #1
 8005ddc:	600b      	str	r3, [r1, #0]
 8005dde:	4770      	bx	lr
 8005de0:	4610      	mov	r0, r2
 8005de2:	e7e9      	b.n	8005db8 <__lo0bits+0x2a>
 8005de4:	2000      	movs	r0, #0
 8005de6:	4770      	bx	lr
 8005de8:	2020      	movs	r0, #32
 8005dea:	4770      	bx	lr

08005dec <__i2b>:
 8005dec:	b510      	push	{r4, lr}
 8005dee:	460c      	mov	r4, r1
 8005df0:	2101      	movs	r1, #1
 8005df2:	f7ff ff27 	bl	8005c44 <_Balloc>
 8005df6:	2201      	movs	r2, #1
 8005df8:	6144      	str	r4, [r0, #20]
 8005dfa:	6102      	str	r2, [r0, #16]
 8005dfc:	bd10      	pop	{r4, pc}

08005dfe <__multiply>:
 8005dfe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e02:	4614      	mov	r4, r2
 8005e04:	690a      	ldr	r2, [r1, #16]
 8005e06:	6923      	ldr	r3, [r4, #16]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	bfb8      	it	lt
 8005e0c:	460b      	movlt	r3, r1
 8005e0e:	4689      	mov	r9, r1
 8005e10:	bfbc      	itt	lt
 8005e12:	46a1      	movlt	r9, r4
 8005e14:	461c      	movlt	r4, r3
 8005e16:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005e1a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005e1e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005e22:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005e26:	eb07 060a 	add.w	r6, r7, sl
 8005e2a:	429e      	cmp	r6, r3
 8005e2c:	bfc8      	it	gt
 8005e2e:	3101      	addgt	r1, #1
 8005e30:	f7ff ff08 	bl	8005c44 <_Balloc>
 8005e34:	f100 0514 	add.w	r5, r0, #20
 8005e38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005e3c:	462b      	mov	r3, r5
 8005e3e:	2200      	movs	r2, #0
 8005e40:	4543      	cmp	r3, r8
 8005e42:	d316      	bcc.n	8005e72 <__multiply+0x74>
 8005e44:	f104 0214 	add.w	r2, r4, #20
 8005e48:	f109 0114 	add.w	r1, r9, #20
 8005e4c:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8005e50:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005e54:	9301      	str	r3, [sp, #4]
 8005e56:	9c01      	ldr	r4, [sp, #4]
 8005e58:	4294      	cmp	r4, r2
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	d80c      	bhi.n	8005e78 <__multiply+0x7a>
 8005e5e:	2e00      	cmp	r6, #0
 8005e60:	dd03      	ble.n	8005e6a <__multiply+0x6c>
 8005e62:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d054      	beq.n	8005f14 <__multiply+0x116>
 8005e6a:	6106      	str	r6, [r0, #16]
 8005e6c:	b003      	add	sp, #12
 8005e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e72:	f843 2b04 	str.w	r2, [r3], #4
 8005e76:	e7e3      	b.n	8005e40 <__multiply+0x42>
 8005e78:	f8b3 a000 	ldrh.w	sl, [r3]
 8005e7c:	3204      	adds	r2, #4
 8005e7e:	f1ba 0f00 	cmp.w	sl, #0
 8005e82:	d020      	beq.n	8005ec6 <__multiply+0xc8>
 8005e84:	46ae      	mov	lr, r5
 8005e86:	4689      	mov	r9, r1
 8005e88:	f04f 0c00 	mov.w	ip, #0
 8005e8c:	f859 4b04 	ldr.w	r4, [r9], #4
 8005e90:	f8be b000 	ldrh.w	fp, [lr]
 8005e94:	b2a3      	uxth	r3, r4
 8005e96:	fb0a b303 	mla	r3, sl, r3, fp
 8005e9a:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8005e9e:	f8de 4000 	ldr.w	r4, [lr]
 8005ea2:	4463      	add	r3, ip
 8005ea4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005ea8:	fb0a c40b 	mla	r4, sl, fp, ip
 8005eac:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005eb6:	454f      	cmp	r7, r9
 8005eb8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005ebc:	f84e 3b04 	str.w	r3, [lr], #4
 8005ec0:	d8e4      	bhi.n	8005e8c <__multiply+0x8e>
 8005ec2:	f8ce c000 	str.w	ip, [lr]
 8005ec6:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8005eca:	f1b9 0f00 	cmp.w	r9, #0
 8005ece:	d01f      	beq.n	8005f10 <__multiply+0x112>
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	46ae      	mov	lr, r5
 8005ed4:	468c      	mov	ip, r1
 8005ed6:	f04f 0a00 	mov.w	sl, #0
 8005eda:	f8bc 4000 	ldrh.w	r4, [ip]
 8005ede:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005ee2:	fb09 b404 	mla	r4, r9, r4, fp
 8005ee6:	44a2      	add	sl, r4
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8005eee:	f84e 3b04 	str.w	r3, [lr], #4
 8005ef2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005ef6:	f8be 4000 	ldrh.w	r4, [lr]
 8005efa:	0c1b      	lsrs	r3, r3, #16
 8005efc:	fb09 4303 	mla	r3, r9, r3, r4
 8005f00:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8005f04:	4567      	cmp	r7, ip
 8005f06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f0a:	d8e6      	bhi.n	8005eda <__multiply+0xdc>
 8005f0c:	f8ce 3000 	str.w	r3, [lr]
 8005f10:	3504      	adds	r5, #4
 8005f12:	e7a0      	b.n	8005e56 <__multiply+0x58>
 8005f14:	3e01      	subs	r6, #1
 8005f16:	e7a2      	b.n	8005e5e <__multiply+0x60>

08005f18 <__pow5mult>:
 8005f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f1c:	4615      	mov	r5, r2
 8005f1e:	f012 0203 	ands.w	r2, r2, #3
 8005f22:	4606      	mov	r6, r0
 8005f24:	460f      	mov	r7, r1
 8005f26:	d007      	beq.n	8005f38 <__pow5mult+0x20>
 8005f28:	3a01      	subs	r2, #1
 8005f2a:	4c21      	ldr	r4, [pc, #132]	; (8005fb0 <__pow5mult+0x98>)
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f32:	f7ff fed2 	bl	8005cda <__multadd>
 8005f36:	4607      	mov	r7, r0
 8005f38:	10ad      	asrs	r5, r5, #2
 8005f3a:	d035      	beq.n	8005fa8 <__pow5mult+0x90>
 8005f3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005f3e:	b93c      	cbnz	r4, 8005f50 <__pow5mult+0x38>
 8005f40:	2010      	movs	r0, #16
 8005f42:	f7ff fc51 	bl	80057e8 <malloc>
 8005f46:	6270      	str	r0, [r6, #36]	; 0x24
 8005f48:	6044      	str	r4, [r0, #4]
 8005f4a:	6084      	str	r4, [r0, #8]
 8005f4c:	6004      	str	r4, [r0, #0]
 8005f4e:	60c4      	str	r4, [r0, #12]
 8005f50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005f54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005f58:	b94c      	cbnz	r4, 8005f6e <__pow5mult+0x56>
 8005f5a:	f240 2171 	movw	r1, #625	; 0x271
 8005f5e:	4630      	mov	r0, r6
 8005f60:	f7ff ff44 	bl	8005dec <__i2b>
 8005f64:	2300      	movs	r3, #0
 8005f66:	f8c8 0008 	str.w	r0, [r8, #8]
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	6003      	str	r3, [r0, #0]
 8005f6e:	f04f 0800 	mov.w	r8, #0
 8005f72:	07eb      	lsls	r3, r5, #31
 8005f74:	d50a      	bpl.n	8005f8c <__pow5mult+0x74>
 8005f76:	4639      	mov	r1, r7
 8005f78:	4622      	mov	r2, r4
 8005f7a:	4630      	mov	r0, r6
 8005f7c:	f7ff ff3f 	bl	8005dfe <__multiply>
 8005f80:	4639      	mov	r1, r7
 8005f82:	4681      	mov	r9, r0
 8005f84:	4630      	mov	r0, r6
 8005f86:	f7ff fe91 	bl	8005cac <_Bfree>
 8005f8a:	464f      	mov	r7, r9
 8005f8c:	106d      	asrs	r5, r5, #1
 8005f8e:	d00b      	beq.n	8005fa8 <__pow5mult+0x90>
 8005f90:	6820      	ldr	r0, [r4, #0]
 8005f92:	b938      	cbnz	r0, 8005fa4 <__pow5mult+0x8c>
 8005f94:	4622      	mov	r2, r4
 8005f96:	4621      	mov	r1, r4
 8005f98:	4630      	mov	r0, r6
 8005f9a:	f7ff ff30 	bl	8005dfe <__multiply>
 8005f9e:	6020      	str	r0, [r4, #0]
 8005fa0:	f8c0 8000 	str.w	r8, [r0]
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	e7e4      	b.n	8005f72 <__pow5mult+0x5a>
 8005fa8:	4638      	mov	r0, r7
 8005faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fae:	bf00      	nop
 8005fb0:	08007f90 	.word	0x08007f90

08005fb4 <__lshift>:
 8005fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fb8:	460c      	mov	r4, r1
 8005fba:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005fbe:	6923      	ldr	r3, [r4, #16]
 8005fc0:	6849      	ldr	r1, [r1, #4]
 8005fc2:	eb0a 0903 	add.w	r9, sl, r3
 8005fc6:	68a3      	ldr	r3, [r4, #8]
 8005fc8:	4607      	mov	r7, r0
 8005fca:	4616      	mov	r6, r2
 8005fcc:	f109 0501 	add.w	r5, r9, #1
 8005fd0:	42ab      	cmp	r3, r5
 8005fd2:	db31      	blt.n	8006038 <__lshift+0x84>
 8005fd4:	4638      	mov	r0, r7
 8005fd6:	f7ff fe35 	bl	8005c44 <_Balloc>
 8005fda:	2200      	movs	r2, #0
 8005fdc:	4680      	mov	r8, r0
 8005fde:	f100 0314 	add.w	r3, r0, #20
 8005fe2:	4611      	mov	r1, r2
 8005fe4:	4552      	cmp	r2, sl
 8005fe6:	db2a      	blt.n	800603e <__lshift+0x8a>
 8005fe8:	6920      	ldr	r0, [r4, #16]
 8005fea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005fee:	f104 0114 	add.w	r1, r4, #20
 8005ff2:	f016 021f 	ands.w	r2, r6, #31
 8005ff6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8005ffa:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8005ffe:	d022      	beq.n	8006046 <__lshift+0x92>
 8006000:	f1c2 0c20 	rsb	ip, r2, #32
 8006004:	2000      	movs	r0, #0
 8006006:	680e      	ldr	r6, [r1, #0]
 8006008:	4096      	lsls	r6, r2
 800600a:	4330      	orrs	r0, r6
 800600c:	f843 0b04 	str.w	r0, [r3], #4
 8006010:	f851 0b04 	ldr.w	r0, [r1], #4
 8006014:	458e      	cmp	lr, r1
 8006016:	fa20 f00c 	lsr.w	r0, r0, ip
 800601a:	d8f4      	bhi.n	8006006 <__lshift+0x52>
 800601c:	6018      	str	r0, [r3, #0]
 800601e:	b108      	cbz	r0, 8006024 <__lshift+0x70>
 8006020:	f109 0502 	add.w	r5, r9, #2
 8006024:	3d01      	subs	r5, #1
 8006026:	4638      	mov	r0, r7
 8006028:	f8c8 5010 	str.w	r5, [r8, #16]
 800602c:	4621      	mov	r1, r4
 800602e:	f7ff fe3d 	bl	8005cac <_Bfree>
 8006032:	4640      	mov	r0, r8
 8006034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006038:	3101      	adds	r1, #1
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	e7c8      	b.n	8005fd0 <__lshift+0x1c>
 800603e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006042:	3201      	adds	r2, #1
 8006044:	e7ce      	b.n	8005fe4 <__lshift+0x30>
 8006046:	3b04      	subs	r3, #4
 8006048:	f851 2b04 	ldr.w	r2, [r1], #4
 800604c:	f843 2f04 	str.w	r2, [r3, #4]!
 8006050:	458e      	cmp	lr, r1
 8006052:	d8f9      	bhi.n	8006048 <__lshift+0x94>
 8006054:	e7e6      	b.n	8006024 <__lshift+0x70>

08006056 <__mcmp>:
 8006056:	6903      	ldr	r3, [r0, #16]
 8006058:	690a      	ldr	r2, [r1, #16]
 800605a:	1a9b      	subs	r3, r3, r2
 800605c:	b530      	push	{r4, r5, lr}
 800605e:	d10c      	bne.n	800607a <__mcmp+0x24>
 8006060:	0092      	lsls	r2, r2, #2
 8006062:	3014      	adds	r0, #20
 8006064:	3114      	adds	r1, #20
 8006066:	1884      	adds	r4, r0, r2
 8006068:	4411      	add	r1, r2
 800606a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800606e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006072:	4295      	cmp	r5, r2
 8006074:	d003      	beq.n	800607e <__mcmp+0x28>
 8006076:	d305      	bcc.n	8006084 <__mcmp+0x2e>
 8006078:	2301      	movs	r3, #1
 800607a:	4618      	mov	r0, r3
 800607c:	bd30      	pop	{r4, r5, pc}
 800607e:	42a0      	cmp	r0, r4
 8006080:	d3f3      	bcc.n	800606a <__mcmp+0x14>
 8006082:	e7fa      	b.n	800607a <__mcmp+0x24>
 8006084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006088:	e7f7      	b.n	800607a <__mcmp+0x24>

0800608a <__mdiff>:
 800608a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800608e:	460d      	mov	r5, r1
 8006090:	4607      	mov	r7, r0
 8006092:	4611      	mov	r1, r2
 8006094:	4628      	mov	r0, r5
 8006096:	4614      	mov	r4, r2
 8006098:	f7ff ffdd 	bl	8006056 <__mcmp>
 800609c:	1e06      	subs	r6, r0, #0
 800609e:	d108      	bne.n	80060b2 <__mdiff+0x28>
 80060a0:	4631      	mov	r1, r6
 80060a2:	4638      	mov	r0, r7
 80060a4:	f7ff fdce 	bl	8005c44 <_Balloc>
 80060a8:	2301      	movs	r3, #1
 80060aa:	6103      	str	r3, [r0, #16]
 80060ac:	6146      	str	r6, [r0, #20]
 80060ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060b2:	bfa4      	itt	ge
 80060b4:	4623      	movge	r3, r4
 80060b6:	462c      	movge	r4, r5
 80060b8:	4638      	mov	r0, r7
 80060ba:	6861      	ldr	r1, [r4, #4]
 80060bc:	bfa6      	itte	ge
 80060be:	461d      	movge	r5, r3
 80060c0:	2600      	movge	r6, #0
 80060c2:	2601      	movlt	r6, #1
 80060c4:	f7ff fdbe 	bl	8005c44 <_Balloc>
 80060c8:	692b      	ldr	r3, [r5, #16]
 80060ca:	60c6      	str	r6, [r0, #12]
 80060cc:	6926      	ldr	r6, [r4, #16]
 80060ce:	f105 0914 	add.w	r9, r5, #20
 80060d2:	f104 0214 	add.w	r2, r4, #20
 80060d6:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80060da:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80060de:	f100 0514 	add.w	r5, r0, #20
 80060e2:	f04f 0c00 	mov.w	ip, #0
 80060e6:	f852 ab04 	ldr.w	sl, [r2], #4
 80060ea:	f859 4b04 	ldr.w	r4, [r9], #4
 80060ee:	fa1c f18a 	uxtah	r1, ip, sl
 80060f2:	b2a3      	uxth	r3, r4
 80060f4:	1ac9      	subs	r1, r1, r3
 80060f6:	0c23      	lsrs	r3, r4, #16
 80060f8:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80060fc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006100:	b289      	uxth	r1, r1
 8006102:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006106:	45c8      	cmp	r8, r9
 8006108:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800610c:	4696      	mov	lr, r2
 800610e:	f845 3b04 	str.w	r3, [r5], #4
 8006112:	d8e8      	bhi.n	80060e6 <__mdiff+0x5c>
 8006114:	45be      	cmp	lr, r7
 8006116:	d305      	bcc.n	8006124 <__mdiff+0x9a>
 8006118:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800611c:	b18b      	cbz	r3, 8006142 <__mdiff+0xb8>
 800611e:	6106      	str	r6, [r0, #16]
 8006120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006124:	f85e 1b04 	ldr.w	r1, [lr], #4
 8006128:	fa1c f381 	uxtah	r3, ip, r1
 800612c:	141a      	asrs	r2, r3, #16
 800612e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006132:	b29b      	uxth	r3, r3
 8006134:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006138:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800613c:	f845 3b04 	str.w	r3, [r5], #4
 8006140:	e7e8      	b.n	8006114 <__mdiff+0x8a>
 8006142:	3e01      	subs	r6, #1
 8006144:	e7e8      	b.n	8006118 <__mdiff+0x8e>

08006146 <__d2b>:
 8006146:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800614a:	460e      	mov	r6, r1
 800614c:	2101      	movs	r1, #1
 800614e:	ec59 8b10 	vmov	r8, r9, d0
 8006152:	4615      	mov	r5, r2
 8006154:	f7ff fd76 	bl	8005c44 <_Balloc>
 8006158:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800615c:	4607      	mov	r7, r0
 800615e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006162:	bb34      	cbnz	r4, 80061b2 <__d2b+0x6c>
 8006164:	9301      	str	r3, [sp, #4]
 8006166:	f1b8 0f00 	cmp.w	r8, #0
 800616a:	d027      	beq.n	80061bc <__d2b+0x76>
 800616c:	a802      	add	r0, sp, #8
 800616e:	f840 8d08 	str.w	r8, [r0, #-8]!
 8006172:	f7ff fe0c 	bl	8005d8e <__lo0bits>
 8006176:	9900      	ldr	r1, [sp, #0]
 8006178:	b1f0      	cbz	r0, 80061b8 <__d2b+0x72>
 800617a:	9a01      	ldr	r2, [sp, #4]
 800617c:	f1c0 0320 	rsb	r3, r0, #32
 8006180:	fa02 f303 	lsl.w	r3, r2, r3
 8006184:	430b      	orrs	r3, r1
 8006186:	40c2      	lsrs	r2, r0
 8006188:	617b      	str	r3, [r7, #20]
 800618a:	9201      	str	r2, [sp, #4]
 800618c:	9b01      	ldr	r3, [sp, #4]
 800618e:	61bb      	str	r3, [r7, #24]
 8006190:	2b00      	cmp	r3, #0
 8006192:	bf14      	ite	ne
 8006194:	2102      	movne	r1, #2
 8006196:	2101      	moveq	r1, #1
 8006198:	6139      	str	r1, [r7, #16]
 800619a:	b1c4      	cbz	r4, 80061ce <__d2b+0x88>
 800619c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80061a0:	4404      	add	r4, r0
 80061a2:	6034      	str	r4, [r6, #0]
 80061a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80061a8:	6028      	str	r0, [r5, #0]
 80061aa:	4638      	mov	r0, r7
 80061ac:	b003      	add	sp, #12
 80061ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061b6:	e7d5      	b.n	8006164 <__d2b+0x1e>
 80061b8:	6179      	str	r1, [r7, #20]
 80061ba:	e7e7      	b.n	800618c <__d2b+0x46>
 80061bc:	a801      	add	r0, sp, #4
 80061be:	f7ff fde6 	bl	8005d8e <__lo0bits>
 80061c2:	9b01      	ldr	r3, [sp, #4]
 80061c4:	617b      	str	r3, [r7, #20]
 80061c6:	2101      	movs	r1, #1
 80061c8:	6139      	str	r1, [r7, #16]
 80061ca:	3020      	adds	r0, #32
 80061cc:	e7e5      	b.n	800619a <__d2b+0x54>
 80061ce:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80061d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80061d6:	6030      	str	r0, [r6, #0]
 80061d8:	6918      	ldr	r0, [r3, #16]
 80061da:	f7ff fdb9 	bl	8005d50 <__hi0bits>
 80061de:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80061e2:	e7e1      	b.n	80061a8 <__d2b+0x62>

080061e4 <_sbrk_r>:
 80061e4:	b538      	push	{r3, r4, r5, lr}
 80061e6:	4c06      	ldr	r4, [pc, #24]	; (8006200 <_sbrk_r+0x1c>)
 80061e8:	2300      	movs	r3, #0
 80061ea:	4605      	mov	r5, r0
 80061ec:	4608      	mov	r0, r1
 80061ee:	6023      	str	r3, [r4, #0]
 80061f0:	f7fd fc16 	bl	8003a20 <_sbrk>
 80061f4:	1c43      	adds	r3, r0, #1
 80061f6:	d102      	bne.n	80061fe <_sbrk_r+0x1a>
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	b103      	cbz	r3, 80061fe <_sbrk_r+0x1a>
 80061fc:	602b      	str	r3, [r5, #0]
 80061fe:	bd38      	pop	{r3, r4, r5, pc}
 8006200:	20000ce4 	.word	0x20000ce4

08006204 <__ssprint_r>:
 8006204:	6893      	ldr	r3, [r2, #8]
 8006206:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800620a:	4681      	mov	r9, r0
 800620c:	460c      	mov	r4, r1
 800620e:	4617      	mov	r7, r2
 8006210:	2b00      	cmp	r3, #0
 8006212:	d060      	beq.n	80062d6 <__ssprint_r+0xd2>
 8006214:	f04f 0b00 	mov.w	fp, #0
 8006218:	f8d2 a000 	ldr.w	sl, [r2]
 800621c:	465e      	mov	r6, fp
 800621e:	b356      	cbz	r6, 8006276 <__ssprint_r+0x72>
 8006220:	68a3      	ldr	r3, [r4, #8]
 8006222:	429e      	cmp	r6, r3
 8006224:	d344      	bcc.n	80062b0 <__ssprint_r+0xac>
 8006226:	89a2      	ldrh	r2, [r4, #12]
 8006228:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800622c:	d03e      	beq.n	80062ac <__ssprint_r+0xa8>
 800622e:	6825      	ldr	r5, [r4, #0]
 8006230:	6921      	ldr	r1, [r4, #16]
 8006232:	eba5 0801 	sub.w	r8, r5, r1
 8006236:	6965      	ldr	r5, [r4, #20]
 8006238:	2302      	movs	r3, #2
 800623a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800623e:	fb95 f5f3 	sdiv	r5, r5, r3
 8006242:	f108 0301 	add.w	r3, r8, #1
 8006246:	4433      	add	r3, r6
 8006248:	429d      	cmp	r5, r3
 800624a:	bf38      	it	cc
 800624c:	461d      	movcc	r5, r3
 800624e:	0553      	lsls	r3, r2, #21
 8006250:	d546      	bpl.n	80062e0 <__ssprint_r+0xdc>
 8006252:	4629      	mov	r1, r5
 8006254:	4648      	mov	r0, r9
 8006256:	f7ff facf 	bl	80057f8 <_malloc_r>
 800625a:	b998      	cbnz	r0, 8006284 <__ssprint_r+0x80>
 800625c:	230c      	movs	r3, #12
 800625e:	f8c9 3000 	str.w	r3, [r9]
 8006262:	89a3      	ldrh	r3, [r4, #12]
 8006264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006268:	81a3      	strh	r3, [r4, #12]
 800626a:	2300      	movs	r3, #0
 800626c:	60bb      	str	r3, [r7, #8]
 800626e:	607b      	str	r3, [r7, #4]
 8006270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006274:	e031      	b.n	80062da <__ssprint_r+0xd6>
 8006276:	f8da b000 	ldr.w	fp, [sl]
 800627a:	f8da 6004 	ldr.w	r6, [sl, #4]
 800627e:	f10a 0a08 	add.w	sl, sl, #8
 8006282:	e7cc      	b.n	800621e <__ssprint_r+0x1a>
 8006284:	4642      	mov	r2, r8
 8006286:	6921      	ldr	r1, [r4, #16]
 8006288:	9001      	str	r0, [sp, #4]
 800628a:	f7ff fcc3 	bl	8005c14 <memcpy>
 800628e:	89a2      	ldrh	r2, [r4, #12]
 8006290:	9b01      	ldr	r3, [sp, #4]
 8006292:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8006296:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800629a:	81a2      	strh	r2, [r4, #12]
 800629c:	6123      	str	r3, [r4, #16]
 800629e:	6165      	str	r5, [r4, #20]
 80062a0:	4443      	add	r3, r8
 80062a2:	eba5 0508 	sub.w	r5, r5, r8
 80062a6:	6023      	str	r3, [r4, #0]
 80062a8:	60a5      	str	r5, [r4, #8]
 80062aa:	4633      	mov	r3, r6
 80062ac:	429e      	cmp	r6, r3
 80062ae:	d200      	bcs.n	80062b2 <__ssprint_r+0xae>
 80062b0:	4633      	mov	r3, r6
 80062b2:	461a      	mov	r2, r3
 80062b4:	4659      	mov	r1, fp
 80062b6:	6820      	ldr	r0, [r4, #0]
 80062b8:	9301      	str	r3, [sp, #4]
 80062ba:	f000 f971 	bl	80065a0 <memmove>
 80062be:	68a2      	ldr	r2, [r4, #8]
 80062c0:	9b01      	ldr	r3, [sp, #4]
 80062c2:	1ad2      	subs	r2, r2, r3
 80062c4:	60a2      	str	r2, [r4, #8]
 80062c6:	6822      	ldr	r2, [r4, #0]
 80062c8:	4413      	add	r3, r2
 80062ca:	6023      	str	r3, [r4, #0]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	1b9e      	subs	r6, r3, r6
 80062d0:	60be      	str	r6, [r7, #8]
 80062d2:	2e00      	cmp	r6, #0
 80062d4:	d1cf      	bne.n	8006276 <__ssprint_r+0x72>
 80062d6:	2000      	movs	r0, #0
 80062d8:	6078      	str	r0, [r7, #4]
 80062da:	b003      	add	sp, #12
 80062dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062e0:	462a      	mov	r2, r5
 80062e2:	4648      	mov	r0, r9
 80062e4:	f000 f976 	bl	80065d4 <_realloc_r>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d1d6      	bne.n	800629c <__ssprint_r+0x98>
 80062ee:	6921      	ldr	r1, [r4, #16]
 80062f0:	4648      	mov	r0, r9
 80062f2:	f000 f885 	bl	8006400 <_free_r>
 80062f6:	e7b1      	b.n	800625c <__ssprint_r+0x58>

080062f8 <_calloc_r>:
 80062f8:	b510      	push	{r4, lr}
 80062fa:	4351      	muls	r1, r2
 80062fc:	f7ff fa7c 	bl	80057f8 <_malloc_r>
 8006300:	4604      	mov	r4, r0
 8006302:	b198      	cbz	r0, 800632c <_calloc_r+0x34>
 8006304:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006308:	f022 0203 	bic.w	r2, r2, #3
 800630c:	3a04      	subs	r2, #4
 800630e:	2a24      	cmp	r2, #36	; 0x24
 8006310:	d81b      	bhi.n	800634a <_calloc_r+0x52>
 8006312:	2a13      	cmp	r2, #19
 8006314:	d917      	bls.n	8006346 <_calloc_r+0x4e>
 8006316:	2100      	movs	r1, #0
 8006318:	2a1b      	cmp	r2, #27
 800631a:	6001      	str	r1, [r0, #0]
 800631c:	6041      	str	r1, [r0, #4]
 800631e:	d807      	bhi.n	8006330 <_calloc_r+0x38>
 8006320:	f100 0308 	add.w	r3, r0, #8
 8006324:	2200      	movs	r2, #0
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	605a      	str	r2, [r3, #4]
 800632a:	609a      	str	r2, [r3, #8]
 800632c:	4620      	mov	r0, r4
 800632e:	bd10      	pop	{r4, pc}
 8006330:	2a24      	cmp	r2, #36	; 0x24
 8006332:	6081      	str	r1, [r0, #8]
 8006334:	60c1      	str	r1, [r0, #12]
 8006336:	bf11      	iteee	ne
 8006338:	f100 0310 	addne.w	r3, r0, #16
 800633c:	6101      	streq	r1, [r0, #16]
 800633e:	f100 0318 	addeq.w	r3, r0, #24
 8006342:	6141      	streq	r1, [r0, #20]
 8006344:	e7ee      	b.n	8006324 <_calloc_r+0x2c>
 8006346:	4603      	mov	r3, r0
 8006348:	e7ec      	b.n	8006324 <_calloc_r+0x2c>
 800634a:	2100      	movs	r1, #0
 800634c:	f7fd fbe4 	bl	8003b18 <memset>
 8006350:	e7ec      	b.n	800632c <_calloc_r+0x34>
	...

08006354 <_malloc_trim_r>:
 8006354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006358:	4f25      	ldr	r7, [pc, #148]	; (80063f0 <_malloc_trim_r+0x9c>)
 800635a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80063fc <_malloc_trim_r+0xa8>
 800635e:	4689      	mov	r9, r1
 8006360:	4606      	mov	r6, r0
 8006362:	f7ff fc63 	bl	8005c2c <__malloc_lock>
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	685d      	ldr	r5, [r3, #4]
 800636a:	f1a8 0411 	sub.w	r4, r8, #17
 800636e:	f025 0503 	bic.w	r5, r5, #3
 8006372:	eba4 0409 	sub.w	r4, r4, r9
 8006376:	442c      	add	r4, r5
 8006378:	fbb4 f4f8 	udiv	r4, r4, r8
 800637c:	3c01      	subs	r4, #1
 800637e:	fb08 f404 	mul.w	r4, r8, r4
 8006382:	4544      	cmp	r4, r8
 8006384:	da05      	bge.n	8006392 <_malloc_trim_r+0x3e>
 8006386:	4630      	mov	r0, r6
 8006388:	f7ff fc56 	bl	8005c38 <__malloc_unlock>
 800638c:	2000      	movs	r0, #0
 800638e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006392:	2100      	movs	r1, #0
 8006394:	4630      	mov	r0, r6
 8006396:	f7ff ff25 	bl	80061e4 <_sbrk_r>
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	442b      	add	r3, r5
 800639e:	4298      	cmp	r0, r3
 80063a0:	d1f1      	bne.n	8006386 <_malloc_trim_r+0x32>
 80063a2:	4261      	negs	r1, r4
 80063a4:	4630      	mov	r0, r6
 80063a6:	f7ff ff1d 	bl	80061e4 <_sbrk_r>
 80063aa:	3001      	adds	r0, #1
 80063ac:	d110      	bne.n	80063d0 <_malloc_trim_r+0x7c>
 80063ae:	2100      	movs	r1, #0
 80063b0:	4630      	mov	r0, r6
 80063b2:	f7ff ff17 	bl	80061e4 <_sbrk_r>
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	1a83      	subs	r3, r0, r2
 80063ba:	2b0f      	cmp	r3, #15
 80063bc:	dde3      	ble.n	8006386 <_malloc_trim_r+0x32>
 80063be:	490d      	ldr	r1, [pc, #52]	; (80063f4 <_malloc_trim_r+0xa0>)
 80063c0:	6809      	ldr	r1, [r1, #0]
 80063c2:	1a40      	subs	r0, r0, r1
 80063c4:	490c      	ldr	r1, [pc, #48]	; (80063f8 <_malloc_trim_r+0xa4>)
 80063c6:	f043 0301 	orr.w	r3, r3, #1
 80063ca:	6008      	str	r0, [r1, #0]
 80063cc:	6053      	str	r3, [r2, #4]
 80063ce:	e7da      	b.n	8006386 <_malloc_trim_r+0x32>
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	4a09      	ldr	r2, [pc, #36]	; (80063f8 <_malloc_trim_r+0xa4>)
 80063d4:	1b2d      	subs	r5, r5, r4
 80063d6:	f045 0501 	orr.w	r5, r5, #1
 80063da:	605d      	str	r5, [r3, #4]
 80063dc:	6813      	ldr	r3, [r2, #0]
 80063de:	4630      	mov	r0, r6
 80063e0:	1b1c      	subs	r4, r3, r4
 80063e2:	6014      	str	r4, [r2, #0]
 80063e4:	f7ff fc28 	bl	8005c38 <__malloc_unlock>
 80063e8:	2001      	movs	r0, #1
 80063ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ee:	bf00      	nop
 80063f0:	20000110 	.word	0x20000110
 80063f4:	20000518 	.word	0x20000518
 80063f8:	20000ac0 	.word	0x20000ac0
 80063fc:	00000080 	.word	0x00000080

08006400 <_free_r>:
 8006400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006404:	4604      	mov	r4, r0
 8006406:	4688      	mov	r8, r1
 8006408:	2900      	cmp	r1, #0
 800640a:	f000 80ab 	beq.w	8006564 <_free_r+0x164>
 800640e:	f7ff fc0d 	bl	8005c2c <__malloc_lock>
 8006412:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8006416:	4d54      	ldr	r5, [pc, #336]	; (8006568 <_free_r+0x168>)
 8006418:	f022 0001 	bic.w	r0, r2, #1
 800641c:	f1a8 0308 	sub.w	r3, r8, #8
 8006420:	181f      	adds	r7, r3, r0
 8006422:	68a9      	ldr	r1, [r5, #8]
 8006424:	687e      	ldr	r6, [r7, #4]
 8006426:	428f      	cmp	r7, r1
 8006428:	f026 0603 	bic.w	r6, r6, #3
 800642c:	f002 0201 	and.w	r2, r2, #1
 8006430:	d11b      	bne.n	800646a <_free_r+0x6a>
 8006432:	4430      	add	r0, r6
 8006434:	b93a      	cbnz	r2, 8006446 <_free_r+0x46>
 8006436:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800643a:	1a9b      	subs	r3, r3, r2
 800643c:	4410      	add	r0, r2
 800643e:	6899      	ldr	r1, [r3, #8]
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	60ca      	str	r2, [r1, #12]
 8006444:	6091      	str	r1, [r2, #8]
 8006446:	f040 0201 	orr.w	r2, r0, #1
 800644a:	605a      	str	r2, [r3, #4]
 800644c:	60ab      	str	r3, [r5, #8]
 800644e:	4b47      	ldr	r3, [pc, #284]	; (800656c <_free_r+0x16c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4298      	cmp	r0, r3
 8006454:	d304      	bcc.n	8006460 <_free_r+0x60>
 8006456:	4b46      	ldr	r3, [pc, #280]	; (8006570 <_free_r+0x170>)
 8006458:	4620      	mov	r0, r4
 800645a:	6819      	ldr	r1, [r3, #0]
 800645c:	f7ff ff7a 	bl	8006354 <_malloc_trim_r>
 8006460:	4620      	mov	r0, r4
 8006462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006466:	f7ff bbe7 	b.w	8005c38 <__malloc_unlock>
 800646a:	607e      	str	r6, [r7, #4]
 800646c:	2a00      	cmp	r2, #0
 800646e:	d139      	bne.n	80064e4 <_free_r+0xe4>
 8006470:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8006474:	1a5b      	subs	r3, r3, r1
 8006476:	4408      	add	r0, r1
 8006478:	6899      	ldr	r1, [r3, #8]
 800647a:	f105 0e08 	add.w	lr, r5, #8
 800647e:	4571      	cmp	r1, lr
 8006480:	d032      	beq.n	80064e8 <_free_r+0xe8>
 8006482:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8006486:	f8c1 e00c 	str.w	lr, [r1, #12]
 800648a:	f8ce 1008 	str.w	r1, [lr, #8]
 800648e:	19b9      	adds	r1, r7, r6
 8006490:	6849      	ldr	r1, [r1, #4]
 8006492:	07c9      	lsls	r1, r1, #31
 8006494:	d40a      	bmi.n	80064ac <_free_r+0xac>
 8006496:	4430      	add	r0, r6
 8006498:	68b9      	ldr	r1, [r7, #8]
 800649a:	bb3a      	cbnz	r2, 80064ec <_free_r+0xec>
 800649c:	4e35      	ldr	r6, [pc, #212]	; (8006574 <_free_r+0x174>)
 800649e:	42b1      	cmp	r1, r6
 80064a0:	d124      	bne.n	80064ec <_free_r+0xec>
 80064a2:	616b      	str	r3, [r5, #20]
 80064a4:	612b      	str	r3, [r5, #16]
 80064a6:	2201      	movs	r2, #1
 80064a8:	60d9      	str	r1, [r3, #12]
 80064aa:	6099      	str	r1, [r3, #8]
 80064ac:	f040 0101 	orr.w	r1, r0, #1
 80064b0:	6059      	str	r1, [r3, #4]
 80064b2:	5018      	str	r0, [r3, r0]
 80064b4:	2a00      	cmp	r2, #0
 80064b6:	d1d3      	bne.n	8006460 <_free_r+0x60>
 80064b8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80064bc:	d21a      	bcs.n	80064f4 <_free_r+0xf4>
 80064be:	08c0      	lsrs	r0, r0, #3
 80064c0:	1081      	asrs	r1, r0, #2
 80064c2:	2201      	movs	r2, #1
 80064c4:	408a      	lsls	r2, r1
 80064c6:	6869      	ldr	r1, [r5, #4]
 80064c8:	3001      	adds	r0, #1
 80064ca:	430a      	orrs	r2, r1
 80064cc:	606a      	str	r2, [r5, #4]
 80064ce:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80064d2:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80064d6:	6099      	str	r1, [r3, #8]
 80064d8:	3a08      	subs	r2, #8
 80064da:	60da      	str	r2, [r3, #12]
 80064dc:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80064e0:	60cb      	str	r3, [r1, #12]
 80064e2:	e7bd      	b.n	8006460 <_free_r+0x60>
 80064e4:	2200      	movs	r2, #0
 80064e6:	e7d2      	b.n	800648e <_free_r+0x8e>
 80064e8:	2201      	movs	r2, #1
 80064ea:	e7d0      	b.n	800648e <_free_r+0x8e>
 80064ec:	68fe      	ldr	r6, [r7, #12]
 80064ee:	60ce      	str	r6, [r1, #12]
 80064f0:	60b1      	str	r1, [r6, #8]
 80064f2:	e7db      	b.n	80064ac <_free_r+0xac>
 80064f4:	0a42      	lsrs	r2, r0, #9
 80064f6:	2a04      	cmp	r2, #4
 80064f8:	d813      	bhi.n	8006522 <_free_r+0x122>
 80064fa:	0982      	lsrs	r2, r0, #6
 80064fc:	3238      	adds	r2, #56	; 0x38
 80064fe:	1c51      	adds	r1, r2, #1
 8006500:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8006504:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8006508:	428e      	cmp	r6, r1
 800650a:	d124      	bne.n	8006556 <_free_r+0x156>
 800650c:	2001      	movs	r0, #1
 800650e:	1092      	asrs	r2, r2, #2
 8006510:	fa00 f202 	lsl.w	r2, r0, r2
 8006514:	6868      	ldr	r0, [r5, #4]
 8006516:	4302      	orrs	r2, r0
 8006518:	606a      	str	r2, [r5, #4]
 800651a:	60de      	str	r6, [r3, #12]
 800651c:	6099      	str	r1, [r3, #8]
 800651e:	60b3      	str	r3, [r6, #8]
 8006520:	e7de      	b.n	80064e0 <_free_r+0xe0>
 8006522:	2a14      	cmp	r2, #20
 8006524:	d801      	bhi.n	800652a <_free_r+0x12a>
 8006526:	325b      	adds	r2, #91	; 0x5b
 8006528:	e7e9      	b.n	80064fe <_free_r+0xfe>
 800652a:	2a54      	cmp	r2, #84	; 0x54
 800652c:	d802      	bhi.n	8006534 <_free_r+0x134>
 800652e:	0b02      	lsrs	r2, r0, #12
 8006530:	326e      	adds	r2, #110	; 0x6e
 8006532:	e7e4      	b.n	80064fe <_free_r+0xfe>
 8006534:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006538:	d802      	bhi.n	8006540 <_free_r+0x140>
 800653a:	0bc2      	lsrs	r2, r0, #15
 800653c:	3277      	adds	r2, #119	; 0x77
 800653e:	e7de      	b.n	80064fe <_free_r+0xfe>
 8006540:	f240 5154 	movw	r1, #1364	; 0x554
 8006544:	428a      	cmp	r2, r1
 8006546:	bf9a      	itte	ls
 8006548:	0c82      	lsrls	r2, r0, #18
 800654a:	327c      	addls	r2, #124	; 0x7c
 800654c:	227e      	movhi	r2, #126	; 0x7e
 800654e:	e7d6      	b.n	80064fe <_free_r+0xfe>
 8006550:	6889      	ldr	r1, [r1, #8]
 8006552:	428e      	cmp	r6, r1
 8006554:	d004      	beq.n	8006560 <_free_r+0x160>
 8006556:	684a      	ldr	r2, [r1, #4]
 8006558:	f022 0203 	bic.w	r2, r2, #3
 800655c:	4290      	cmp	r0, r2
 800655e:	d3f7      	bcc.n	8006550 <_free_r+0x150>
 8006560:	68ce      	ldr	r6, [r1, #12]
 8006562:	e7da      	b.n	800651a <_free_r+0x11a>
 8006564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006568:	20000110 	.word	0x20000110
 800656c:	2000051c 	.word	0x2000051c
 8006570:	20000af0 	.word	0x20000af0
 8006574:	20000118 	.word	0x20000118

08006578 <__retarget_lock_acquire_recursive>:
 8006578:	4770      	bx	lr

0800657a <__retarget_lock_release_recursive>:
 800657a:	4770      	bx	lr

0800657c <__ascii_mbtowc>:
 800657c:	b082      	sub	sp, #8
 800657e:	b901      	cbnz	r1, 8006582 <__ascii_mbtowc+0x6>
 8006580:	a901      	add	r1, sp, #4
 8006582:	b142      	cbz	r2, 8006596 <__ascii_mbtowc+0x1a>
 8006584:	b14b      	cbz	r3, 800659a <__ascii_mbtowc+0x1e>
 8006586:	7813      	ldrb	r3, [r2, #0]
 8006588:	600b      	str	r3, [r1, #0]
 800658a:	7812      	ldrb	r2, [r2, #0]
 800658c:	1c10      	adds	r0, r2, #0
 800658e:	bf18      	it	ne
 8006590:	2001      	movne	r0, #1
 8006592:	b002      	add	sp, #8
 8006594:	4770      	bx	lr
 8006596:	4610      	mov	r0, r2
 8006598:	e7fb      	b.n	8006592 <__ascii_mbtowc+0x16>
 800659a:	f06f 0001 	mvn.w	r0, #1
 800659e:	e7f8      	b.n	8006592 <__ascii_mbtowc+0x16>

080065a0 <memmove>:
 80065a0:	4288      	cmp	r0, r1
 80065a2:	b510      	push	{r4, lr}
 80065a4:	eb01 0302 	add.w	r3, r1, r2
 80065a8:	d803      	bhi.n	80065b2 <memmove+0x12>
 80065aa:	1e42      	subs	r2, r0, #1
 80065ac:	4299      	cmp	r1, r3
 80065ae:	d10c      	bne.n	80065ca <memmove+0x2a>
 80065b0:	bd10      	pop	{r4, pc}
 80065b2:	4298      	cmp	r0, r3
 80065b4:	d2f9      	bcs.n	80065aa <memmove+0xa>
 80065b6:	1881      	adds	r1, r0, r2
 80065b8:	1ad2      	subs	r2, r2, r3
 80065ba:	42d3      	cmn	r3, r2
 80065bc:	d100      	bne.n	80065c0 <memmove+0x20>
 80065be:	bd10      	pop	{r4, pc}
 80065c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065c4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80065c8:	e7f7      	b.n	80065ba <memmove+0x1a>
 80065ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065ce:	f802 4f01 	strb.w	r4, [r2, #1]!
 80065d2:	e7eb      	b.n	80065ac <memmove+0xc>

080065d4 <_realloc_r>:
 80065d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d8:	4682      	mov	sl, r0
 80065da:	460c      	mov	r4, r1
 80065dc:	b929      	cbnz	r1, 80065ea <_realloc_r+0x16>
 80065de:	4611      	mov	r1, r2
 80065e0:	b003      	add	sp, #12
 80065e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e6:	f7ff b907 	b.w	80057f8 <_malloc_r>
 80065ea:	9201      	str	r2, [sp, #4]
 80065ec:	f7ff fb1e 	bl	8005c2c <__malloc_lock>
 80065f0:	9a01      	ldr	r2, [sp, #4]
 80065f2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80065f6:	f102 080b 	add.w	r8, r2, #11
 80065fa:	f1b8 0f16 	cmp.w	r8, #22
 80065fe:	f1a4 0908 	sub.w	r9, r4, #8
 8006602:	f025 0603 	bic.w	r6, r5, #3
 8006606:	d90a      	bls.n	800661e <_realloc_r+0x4a>
 8006608:	f038 0807 	bics.w	r8, r8, #7
 800660c:	d509      	bpl.n	8006622 <_realloc_r+0x4e>
 800660e:	230c      	movs	r3, #12
 8006610:	f8ca 3000 	str.w	r3, [sl]
 8006614:	2700      	movs	r7, #0
 8006616:	4638      	mov	r0, r7
 8006618:	b003      	add	sp, #12
 800661a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800661e:	f04f 0810 	mov.w	r8, #16
 8006622:	4590      	cmp	r8, r2
 8006624:	d3f3      	bcc.n	800660e <_realloc_r+0x3a>
 8006626:	45b0      	cmp	r8, r6
 8006628:	f340 8145 	ble.w	80068b6 <_realloc_r+0x2e2>
 800662c:	4ba8      	ldr	r3, [pc, #672]	; (80068d0 <_realloc_r+0x2fc>)
 800662e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8006632:	eb09 0106 	add.w	r1, r9, r6
 8006636:	4571      	cmp	r1, lr
 8006638:	469b      	mov	fp, r3
 800663a:	684b      	ldr	r3, [r1, #4]
 800663c:	d005      	beq.n	800664a <_realloc_r+0x76>
 800663e:	f023 0001 	bic.w	r0, r3, #1
 8006642:	4408      	add	r0, r1
 8006644:	6840      	ldr	r0, [r0, #4]
 8006646:	07c7      	lsls	r7, r0, #31
 8006648:	d447      	bmi.n	80066da <_realloc_r+0x106>
 800664a:	f023 0303 	bic.w	r3, r3, #3
 800664e:	4571      	cmp	r1, lr
 8006650:	eb06 0703 	add.w	r7, r6, r3
 8006654:	d119      	bne.n	800668a <_realloc_r+0xb6>
 8006656:	f108 0010 	add.w	r0, r8, #16
 800665a:	4287      	cmp	r7, r0
 800665c:	db3f      	blt.n	80066de <_realloc_r+0x10a>
 800665e:	eb09 0308 	add.w	r3, r9, r8
 8006662:	eba7 0708 	sub.w	r7, r7, r8
 8006666:	f047 0701 	orr.w	r7, r7, #1
 800666a:	f8cb 3008 	str.w	r3, [fp, #8]
 800666e:	605f      	str	r7, [r3, #4]
 8006670:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	ea43 0308 	orr.w	r3, r3, r8
 800667c:	f844 3c04 	str.w	r3, [r4, #-4]
 8006680:	4650      	mov	r0, sl
 8006682:	f7ff fad9 	bl	8005c38 <__malloc_unlock>
 8006686:	4627      	mov	r7, r4
 8006688:	e7c5      	b.n	8006616 <_realloc_r+0x42>
 800668a:	45b8      	cmp	r8, r7
 800668c:	dc27      	bgt.n	80066de <_realloc_r+0x10a>
 800668e:	68cb      	ldr	r3, [r1, #12]
 8006690:	688a      	ldr	r2, [r1, #8]
 8006692:	60d3      	str	r3, [r2, #12]
 8006694:	609a      	str	r2, [r3, #8]
 8006696:	eba7 0008 	sub.w	r0, r7, r8
 800669a:	280f      	cmp	r0, #15
 800669c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80066a0:	eb09 0207 	add.w	r2, r9, r7
 80066a4:	f240 8109 	bls.w	80068ba <_realloc_r+0x2e6>
 80066a8:	eb09 0108 	add.w	r1, r9, r8
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	ea43 0308 	orr.w	r3, r3, r8
 80066b4:	f040 0001 	orr.w	r0, r0, #1
 80066b8:	f8c9 3004 	str.w	r3, [r9, #4]
 80066bc:	6048      	str	r0, [r1, #4]
 80066be:	6853      	ldr	r3, [r2, #4]
 80066c0:	f043 0301 	orr.w	r3, r3, #1
 80066c4:	6053      	str	r3, [r2, #4]
 80066c6:	3108      	adds	r1, #8
 80066c8:	4650      	mov	r0, sl
 80066ca:	f7ff fe99 	bl	8006400 <_free_r>
 80066ce:	4650      	mov	r0, sl
 80066d0:	f7ff fab2 	bl	8005c38 <__malloc_unlock>
 80066d4:	f109 0708 	add.w	r7, r9, #8
 80066d8:	e79d      	b.n	8006616 <_realloc_r+0x42>
 80066da:	2300      	movs	r3, #0
 80066dc:	4619      	mov	r1, r3
 80066de:	07e8      	lsls	r0, r5, #31
 80066e0:	f100 8084 	bmi.w	80067ec <_realloc_r+0x218>
 80066e4:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80066e8:	eba9 0505 	sub.w	r5, r9, r5
 80066ec:	6868      	ldr	r0, [r5, #4]
 80066ee:	f020 0003 	bic.w	r0, r0, #3
 80066f2:	4430      	add	r0, r6
 80066f4:	2900      	cmp	r1, #0
 80066f6:	d076      	beq.n	80067e6 <_realloc_r+0x212>
 80066f8:	4571      	cmp	r1, lr
 80066fa:	d150      	bne.n	800679e <_realloc_r+0x1ca>
 80066fc:	4403      	add	r3, r0
 80066fe:	f108 0110 	add.w	r1, r8, #16
 8006702:	428b      	cmp	r3, r1
 8006704:	db6f      	blt.n	80067e6 <_realloc_r+0x212>
 8006706:	462f      	mov	r7, r5
 8006708:	68ea      	ldr	r2, [r5, #12]
 800670a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800670e:	60ca      	str	r2, [r1, #12]
 8006710:	6091      	str	r1, [r2, #8]
 8006712:	1f32      	subs	r2, r6, #4
 8006714:	2a24      	cmp	r2, #36	; 0x24
 8006716:	d83b      	bhi.n	8006790 <_realloc_r+0x1bc>
 8006718:	2a13      	cmp	r2, #19
 800671a:	d936      	bls.n	800678a <_realloc_r+0x1b6>
 800671c:	6821      	ldr	r1, [r4, #0]
 800671e:	60a9      	str	r1, [r5, #8]
 8006720:	6861      	ldr	r1, [r4, #4]
 8006722:	60e9      	str	r1, [r5, #12]
 8006724:	2a1b      	cmp	r2, #27
 8006726:	d81c      	bhi.n	8006762 <_realloc_r+0x18e>
 8006728:	f105 0210 	add.w	r2, r5, #16
 800672c:	f104 0108 	add.w	r1, r4, #8
 8006730:	6808      	ldr	r0, [r1, #0]
 8006732:	6010      	str	r0, [r2, #0]
 8006734:	6848      	ldr	r0, [r1, #4]
 8006736:	6050      	str	r0, [r2, #4]
 8006738:	6889      	ldr	r1, [r1, #8]
 800673a:	6091      	str	r1, [r2, #8]
 800673c:	eb05 0208 	add.w	r2, r5, r8
 8006740:	eba3 0308 	sub.w	r3, r3, r8
 8006744:	f043 0301 	orr.w	r3, r3, #1
 8006748:	f8cb 2008 	str.w	r2, [fp, #8]
 800674c:	6053      	str	r3, [r2, #4]
 800674e:	686b      	ldr	r3, [r5, #4]
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	ea43 0308 	orr.w	r3, r3, r8
 8006758:	606b      	str	r3, [r5, #4]
 800675a:	4650      	mov	r0, sl
 800675c:	f7ff fa6c 	bl	8005c38 <__malloc_unlock>
 8006760:	e759      	b.n	8006616 <_realloc_r+0x42>
 8006762:	68a1      	ldr	r1, [r4, #8]
 8006764:	6129      	str	r1, [r5, #16]
 8006766:	68e1      	ldr	r1, [r4, #12]
 8006768:	6169      	str	r1, [r5, #20]
 800676a:	2a24      	cmp	r2, #36	; 0x24
 800676c:	bf01      	itttt	eq
 800676e:	6922      	ldreq	r2, [r4, #16]
 8006770:	61aa      	streq	r2, [r5, #24]
 8006772:	6960      	ldreq	r0, [r4, #20]
 8006774:	61e8      	streq	r0, [r5, #28]
 8006776:	bf19      	ittee	ne
 8006778:	f105 0218 	addne.w	r2, r5, #24
 800677c:	f104 0110 	addne.w	r1, r4, #16
 8006780:	f105 0220 	addeq.w	r2, r5, #32
 8006784:	f104 0118 	addeq.w	r1, r4, #24
 8006788:	e7d2      	b.n	8006730 <_realloc_r+0x15c>
 800678a:	463a      	mov	r2, r7
 800678c:	4621      	mov	r1, r4
 800678e:	e7cf      	b.n	8006730 <_realloc_r+0x15c>
 8006790:	4621      	mov	r1, r4
 8006792:	4638      	mov	r0, r7
 8006794:	9301      	str	r3, [sp, #4]
 8006796:	f7ff ff03 	bl	80065a0 <memmove>
 800679a:	9b01      	ldr	r3, [sp, #4]
 800679c:	e7ce      	b.n	800673c <_realloc_r+0x168>
 800679e:	18c7      	adds	r7, r0, r3
 80067a0:	45b8      	cmp	r8, r7
 80067a2:	dc20      	bgt.n	80067e6 <_realloc_r+0x212>
 80067a4:	68cb      	ldr	r3, [r1, #12]
 80067a6:	688a      	ldr	r2, [r1, #8]
 80067a8:	60d3      	str	r3, [r2, #12]
 80067aa:	609a      	str	r2, [r3, #8]
 80067ac:	4628      	mov	r0, r5
 80067ae:	68eb      	ldr	r3, [r5, #12]
 80067b0:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80067b4:	60d3      	str	r3, [r2, #12]
 80067b6:	609a      	str	r2, [r3, #8]
 80067b8:	1f32      	subs	r2, r6, #4
 80067ba:	2a24      	cmp	r2, #36	; 0x24
 80067bc:	d842      	bhi.n	8006844 <_realloc_r+0x270>
 80067be:	2a13      	cmp	r2, #19
 80067c0:	d93e      	bls.n	8006840 <_realloc_r+0x26c>
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	60ab      	str	r3, [r5, #8]
 80067c6:	6863      	ldr	r3, [r4, #4]
 80067c8:	60eb      	str	r3, [r5, #12]
 80067ca:	2a1b      	cmp	r2, #27
 80067cc:	d824      	bhi.n	8006818 <_realloc_r+0x244>
 80067ce:	f105 0010 	add.w	r0, r5, #16
 80067d2:	f104 0308 	add.w	r3, r4, #8
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	6002      	str	r2, [r0, #0]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	6042      	str	r2, [r0, #4]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	6083      	str	r3, [r0, #8]
 80067e2:	46a9      	mov	r9, r5
 80067e4:	e757      	b.n	8006696 <_realloc_r+0xc2>
 80067e6:	4580      	cmp	r8, r0
 80067e8:	4607      	mov	r7, r0
 80067ea:	dddf      	ble.n	80067ac <_realloc_r+0x1d8>
 80067ec:	4611      	mov	r1, r2
 80067ee:	4650      	mov	r0, sl
 80067f0:	f7ff f802 	bl	80057f8 <_malloc_r>
 80067f4:	4607      	mov	r7, r0
 80067f6:	2800      	cmp	r0, #0
 80067f8:	d0af      	beq.n	800675a <_realloc_r+0x186>
 80067fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80067fe:	f023 0301 	bic.w	r3, r3, #1
 8006802:	f1a0 0208 	sub.w	r2, r0, #8
 8006806:	444b      	add	r3, r9
 8006808:	429a      	cmp	r2, r3
 800680a:	d11f      	bne.n	800684c <_realloc_r+0x278>
 800680c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8006810:	f027 0703 	bic.w	r7, r7, #3
 8006814:	4437      	add	r7, r6
 8006816:	e73e      	b.n	8006696 <_realloc_r+0xc2>
 8006818:	68a3      	ldr	r3, [r4, #8]
 800681a:	612b      	str	r3, [r5, #16]
 800681c:	68e3      	ldr	r3, [r4, #12]
 800681e:	616b      	str	r3, [r5, #20]
 8006820:	2a24      	cmp	r2, #36	; 0x24
 8006822:	bf01      	itttt	eq
 8006824:	6923      	ldreq	r3, [r4, #16]
 8006826:	61ab      	streq	r3, [r5, #24]
 8006828:	6962      	ldreq	r2, [r4, #20]
 800682a:	61ea      	streq	r2, [r5, #28]
 800682c:	bf19      	ittee	ne
 800682e:	f105 0018 	addne.w	r0, r5, #24
 8006832:	f104 0310 	addne.w	r3, r4, #16
 8006836:	f105 0020 	addeq.w	r0, r5, #32
 800683a:	f104 0318 	addeq.w	r3, r4, #24
 800683e:	e7ca      	b.n	80067d6 <_realloc_r+0x202>
 8006840:	4623      	mov	r3, r4
 8006842:	e7c8      	b.n	80067d6 <_realloc_r+0x202>
 8006844:	4621      	mov	r1, r4
 8006846:	f7ff feab 	bl	80065a0 <memmove>
 800684a:	e7ca      	b.n	80067e2 <_realloc_r+0x20e>
 800684c:	1f32      	subs	r2, r6, #4
 800684e:	2a24      	cmp	r2, #36	; 0x24
 8006850:	d82d      	bhi.n	80068ae <_realloc_r+0x2da>
 8006852:	2a13      	cmp	r2, #19
 8006854:	d928      	bls.n	80068a8 <_realloc_r+0x2d4>
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	6003      	str	r3, [r0, #0]
 800685a:	6863      	ldr	r3, [r4, #4]
 800685c:	6043      	str	r3, [r0, #4]
 800685e:	2a1b      	cmp	r2, #27
 8006860:	d80e      	bhi.n	8006880 <_realloc_r+0x2ac>
 8006862:	f100 0308 	add.w	r3, r0, #8
 8006866:	f104 0208 	add.w	r2, r4, #8
 800686a:	6811      	ldr	r1, [r2, #0]
 800686c:	6019      	str	r1, [r3, #0]
 800686e:	6851      	ldr	r1, [r2, #4]
 8006870:	6059      	str	r1, [r3, #4]
 8006872:	6892      	ldr	r2, [r2, #8]
 8006874:	609a      	str	r2, [r3, #8]
 8006876:	4621      	mov	r1, r4
 8006878:	4650      	mov	r0, sl
 800687a:	f7ff fdc1 	bl	8006400 <_free_r>
 800687e:	e76c      	b.n	800675a <_realloc_r+0x186>
 8006880:	68a3      	ldr	r3, [r4, #8]
 8006882:	6083      	str	r3, [r0, #8]
 8006884:	68e3      	ldr	r3, [r4, #12]
 8006886:	60c3      	str	r3, [r0, #12]
 8006888:	2a24      	cmp	r2, #36	; 0x24
 800688a:	bf01      	itttt	eq
 800688c:	6923      	ldreq	r3, [r4, #16]
 800688e:	6103      	streq	r3, [r0, #16]
 8006890:	6961      	ldreq	r1, [r4, #20]
 8006892:	6141      	streq	r1, [r0, #20]
 8006894:	bf19      	ittee	ne
 8006896:	f100 0310 	addne.w	r3, r0, #16
 800689a:	f104 0210 	addne.w	r2, r4, #16
 800689e:	f100 0318 	addeq.w	r3, r0, #24
 80068a2:	f104 0218 	addeq.w	r2, r4, #24
 80068a6:	e7e0      	b.n	800686a <_realloc_r+0x296>
 80068a8:	4603      	mov	r3, r0
 80068aa:	4622      	mov	r2, r4
 80068ac:	e7dd      	b.n	800686a <_realloc_r+0x296>
 80068ae:	4621      	mov	r1, r4
 80068b0:	f7ff fe76 	bl	80065a0 <memmove>
 80068b4:	e7df      	b.n	8006876 <_realloc_r+0x2a2>
 80068b6:	4637      	mov	r7, r6
 80068b8:	e6ed      	b.n	8006696 <_realloc_r+0xc2>
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	431f      	orrs	r7, r3
 80068c0:	f8c9 7004 	str.w	r7, [r9, #4]
 80068c4:	6853      	ldr	r3, [r2, #4]
 80068c6:	f043 0301 	orr.w	r3, r3, #1
 80068ca:	6053      	str	r3, [r2, #4]
 80068cc:	e6ff      	b.n	80066ce <_realloc_r+0xfa>
 80068ce:	bf00      	nop
 80068d0:	20000110 	.word	0x20000110

080068d4 <__ascii_wctomb>:
 80068d4:	b149      	cbz	r1, 80068ea <__ascii_wctomb+0x16>
 80068d6:	2aff      	cmp	r2, #255	; 0xff
 80068d8:	bf85      	ittet	hi
 80068da:	238a      	movhi	r3, #138	; 0x8a
 80068dc:	6003      	strhi	r3, [r0, #0]
 80068de:	700a      	strbls	r2, [r1, #0]
 80068e0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80068e4:	bf98      	it	ls
 80068e6:	2001      	movls	r0, #1
 80068e8:	4770      	bx	lr
 80068ea:	4608      	mov	r0, r1
 80068ec:	4770      	bx	lr
	...

080068f0 <_init>:
 80068f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f2:	bf00      	nop
 80068f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068f6:	bc08      	pop	{r3}
 80068f8:	469e      	mov	lr, r3
 80068fa:	4770      	bx	lr

080068fc <_fini>:
 80068fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068fe:	bf00      	nop
 8006900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006902:	bc08      	pop	{r3}
 8006904:	469e      	mov	lr, r3
 8006906:	4770      	bx	lr
