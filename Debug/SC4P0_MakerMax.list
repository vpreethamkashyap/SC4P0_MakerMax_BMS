
SC4P0_MakerMax.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ed4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e58  08009078  08009078  00019078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009ed0  08009ed0  00019ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009ed8  08009ed8  00019ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009edc  08009edc  00019edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000780  20000000  08009ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020780  2**0
                  CONTENTS
  8 .bss          00000870  20000780  20000780  00020780  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000ff0  20000ff0  00020780  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020780  2**0
                  CONTENTS, READONLY
 11 .debug_info   00021752  00000000  00000000  000207b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004f3d  00000000  00000000  00041f02  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000ece4  00000000  00000000  00046e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001270  00000000  00000000  00055b28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001688  00000000  00000000  00056d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000b8ed  00000000  00000000  00058420  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00006827  00000000  00000000  00063d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0006a534  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000484c  00000000  00000000  0006a5b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000780 	.word	0x20000780
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800905c 	.word	0x0800905c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000784 	.word	0x20000784
 80001dc:	0800905c 	.word	0x0800905c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca4:	f000 b97a 	b.w	8000f9c <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f806 	bl	8000cc0 <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__udivmoddi4>:
 8000cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc4:	468c      	mov	ip, r1
 8000cc6:	460d      	mov	r5, r1
 8000cc8:	4604      	mov	r4, r0
 8000cca:	9e08      	ldr	r6, [sp, #32]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d151      	bne.n	8000d74 <__udivmoddi4+0xb4>
 8000cd0:	428a      	cmp	r2, r1
 8000cd2:	4617      	mov	r7, r2
 8000cd4:	d96d      	bls.n	8000db2 <__udivmoddi4+0xf2>
 8000cd6:	fab2 fe82 	clz	lr, r2
 8000cda:	f1be 0f00 	cmp.w	lr, #0
 8000cde:	d00b      	beq.n	8000cf8 <__udivmoddi4+0x38>
 8000ce0:	f1ce 0c20 	rsb	ip, lr, #32
 8000ce4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000ce8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cec:	fa02 f70e 	lsl.w	r7, r2, lr
 8000cf0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000cf4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cf8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cfc:	0c25      	lsrs	r5, r4, #16
 8000cfe:	fbbc f8fa 	udiv	r8, ip, sl
 8000d02:	fa1f f987 	uxth.w	r9, r7
 8000d06:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d0a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d0e:	fb08 f309 	mul.w	r3, r8, r9
 8000d12:	42ab      	cmp	r3, r5
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x6c>
 8000d16:	19ed      	adds	r5, r5, r7
 8000d18:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000d1c:	f080 8123 	bcs.w	8000f66 <__udivmoddi4+0x2a6>
 8000d20:	42ab      	cmp	r3, r5
 8000d22:	f240 8120 	bls.w	8000f66 <__udivmoddi4+0x2a6>
 8000d26:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2a:	443d      	add	r5, r7
 8000d2c:	1aed      	subs	r5, r5, r3
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d34:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d38:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d3c:	fb00 f909 	mul.w	r9, r0, r9
 8000d40:	45a1      	cmp	r9, r4
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x98>
 8000d44:	19e4      	adds	r4, r4, r7
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d4a:	f080 810a 	bcs.w	8000f62 <__udivmoddi4+0x2a2>
 8000d4e:	45a1      	cmp	r9, r4
 8000d50:	f240 8107 	bls.w	8000f62 <__udivmoddi4+0x2a2>
 8000d54:	3802      	subs	r0, #2
 8000d56:	443c      	add	r4, r7
 8000d58:	eba4 0409 	sub.w	r4, r4, r9
 8000d5c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d60:	2100      	movs	r1, #0
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d061      	beq.n	8000e2a <__udivmoddi4+0x16a>
 8000d66:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	6034      	str	r4, [r6, #0]
 8000d6e:	6073      	str	r3, [r6, #4]
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0xc8>
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d054      	beq.n	8000e26 <__udivmoddi4+0x166>
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d82:	4608      	mov	r0, r1
 8000d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d88:	fab3 f183 	clz	r1, r3
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	f040 808e 	bne.w	8000eae <__udivmoddi4+0x1ee>
 8000d92:	42ab      	cmp	r3, r5
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xdc>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80fa 	bhi.w	8000f90 <__udivmoddi4+0x2d0>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb65 0503 	sbc.w	r5, r5, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	46ac      	mov	ip, r5
 8000da6:	2e00      	cmp	r6, #0
 8000da8:	d03f      	beq.n	8000e2a <__udivmoddi4+0x16a>
 8000daa:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	b912      	cbnz	r2, 8000dba <__udivmoddi4+0xfa>
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000dba:	fab7 fe87 	clz	lr, r7
 8000dbe:	f1be 0f00 	cmp.w	lr, #0
 8000dc2:	d134      	bne.n	8000e2e <__udivmoddi4+0x16e>
 8000dc4:	1beb      	subs	r3, r5, r7
 8000dc6:	0c3a      	lsrs	r2, r7, #16
 8000dc8:	fa1f fc87 	uxth.w	ip, r7
 8000dcc:	2101      	movs	r1, #1
 8000dce:	fbb3 f8f2 	udiv	r8, r3, r2
 8000dd2:	0c25      	lsrs	r5, r4, #16
 8000dd4:	fb02 3318 	mls	r3, r2, r8, r3
 8000dd8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ddc:	fb0c f308 	mul.w	r3, ip, r8
 8000de0:	42ab      	cmp	r3, r5
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x134>
 8000de4:	19ed      	adds	r5, r5, r7
 8000de6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x132>
 8000dec:	42ab      	cmp	r3, r5
 8000dee:	f200 80d1 	bhi.w	8000f94 <__udivmoddi4+0x2d4>
 8000df2:	4680      	mov	r8, r0
 8000df4:	1aed      	subs	r5, r5, r3
 8000df6:	b2a3      	uxth	r3, r4
 8000df8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dfc:	fb02 5510 	mls	r5, r2, r0, r5
 8000e00:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e04:	fb0c fc00 	mul.w	ip, ip, r0
 8000e08:	45a4      	cmp	ip, r4
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x15c>
 8000e0c:	19e4      	adds	r4, r4, r7
 8000e0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x15a>
 8000e14:	45a4      	cmp	ip, r4
 8000e16:	f200 80b8 	bhi.w	8000f8a <__udivmoddi4+0x2ca>
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	eba4 040c 	sub.w	r4, r4, ip
 8000e20:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e24:	e79d      	b.n	8000d62 <__udivmoddi4+0xa2>
 8000e26:	4631      	mov	r1, r6
 8000e28:	4630      	mov	r0, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	f1ce 0420 	rsb	r4, lr, #32
 8000e32:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e36:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e3a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e3e:	0c3a      	lsrs	r2, r7, #16
 8000e40:	fa25 f404 	lsr.w	r4, r5, r4
 8000e44:	ea48 0803 	orr.w	r8, r8, r3
 8000e48:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e4c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e50:	fb02 4411 	mls	r4, r2, r1, r4
 8000e54:	fa1f fc87 	uxth.w	ip, r7
 8000e58:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e5c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e60:	42ab      	cmp	r3, r5
 8000e62:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e66:	d909      	bls.n	8000e7c <__udivmoddi4+0x1bc>
 8000e68:	19ed      	adds	r5, r5, r7
 8000e6a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000e6e:	f080 808a 	bcs.w	8000f86 <__udivmoddi4+0x2c6>
 8000e72:	42ab      	cmp	r3, r5
 8000e74:	f240 8087 	bls.w	8000f86 <__udivmoddi4+0x2c6>
 8000e78:	3902      	subs	r1, #2
 8000e7a:	443d      	add	r5, r7
 8000e7c:	1aeb      	subs	r3, r5, r3
 8000e7e:	fa1f f588 	uxth.w	r5, r8
 8000e82:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e86:	fb02 3310 	mls	r3, r2, r0, r3
 8000e8a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e8e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e92:	42ab      	cmp	r3, r5
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1e6>
 8000e96:	19ed      	adds	r5, r5, r7
 8000e98:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e9c:	d26f      	bcs.n	8000f7e <__udivmoddi4+0x2be>
 8000e9e:	42ab      	cmp	r3, r5
 8000ea0:	d96d      	bls.n	8000f7e <__udivmoddi4+0x2be>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	443d      	add	r5, r7
 8000ea6:	1aeb      	subs	r3, r5, r3
 8000ea8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eac:	e78f      	b.n	8000dce <__udivmoddi4+0x10e>
 8000eae:	f1c1 0720 	rsb	r7, r1, #32
 8000eb2:	fa22 f807 	lsr.w	r8, r2, r7
 8000eb6:	408b      	lsls	r3, r1
 8000eb8:	fa05 f401 	lsl.w	r4, r5, r1
 8000ebc:	ea48 0303 	orr.w	r3, r8, r3
 8000ec0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ec4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ece:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ed2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ed6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eda:	fa1f f883 	uxth.w	r8, r3
 8000ede:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ee2:	fb09 f408 	mul.w	r4, r9, r8
 8000ee6:	42ac      	cmp	r4, r5
 8000ee8:	fa02 f201 	lsl.w	r2, r2, r1
 8000eec:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x244>
 8000ef2:	18ed      	adds	r5, r5, r3
 8000ef4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ef8:	d243      	bcs.n	8000f82 <__udivmoddi4+0x2c2>
 8000efa:	42ac      	cmp	r4, r5
 8000efc:	d941      	bls.n	8000f82 <__udivmoddi4+0x2c2>
 8000efe:	f1a9 0902 	sub.w	r9, r9, #2
 8000f02:	441d      	add	r5, r3
 8000f04:	1b2d      	subs	r5, r5, r4
 8000f06:	fa1f fe8e 	uxth.w	lr, lr
 8000f0a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f0e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f12:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f16:	fb00 f808 	mul.w	r8, r0, r8
 8000f1a:	45a0      	cmp	r8, r4
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x26e>
 8000f1e:	18e4      	adds	r4, r4, r3
 8000f20:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000f24:	d229      	bcs.n	8000f7a <__udivmoddi4+0x2ba>
 8000f26:	45a0      	cmp	r8, r4
 8000f28:	d927      	bls.n	8000f7a <__udivmoddi4+0x2ba>
 8000f2a:	3802      	subs	r0, #2
 8000f2c:	441c      	add	r4, r3
 8000f2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f32:	eba4 0408 	sub.w	r4, r4, r8
 8000f36:	fba0 8902 	umull	r8, r9, r0, r2
 8000f3a:	454c      	cmp	r4, r9
 8000f3c:	46c6      	mov	lr, r8
 8000f3e:	464d      	mov	r5, r9
 8000f40:	d315      	bcc.n	8000f6e <__udivmoddi4+0x2ae>
 8000f42:	d012      	beq.n	8000f6a <__udivmoddi4+0x2aa>
 8000f44:	b156      	cbz	r6, 8000f5c <__udivmoddi4+0x29c>
 8000f46:	ebba 030e 	subs.w	r3, sl, lr
 8000f4a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f52:	40cb      	lsrs	r3, r1
 8000f54:	431f      	orrs	r7, r3
 8000f56:	40cc      	lsrs	r4, r1
 8000f58:	6037      	str	r7, [r6, #0]
 8000f5a:	6074      	str	r4, [r6, #4]
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f62:	4618      	mov	r0, r3
 8000f64:	e6f8      	b.n	8000d58 <__udivmoddi4+0x98>
 8000f66:	4690      	mov	r8, r2
 8000f68:	e6e0      	b.n	8000d2c <__udivmoddi4+0x6c>
 8000f6a:	45c2      	cmp	sl, r8
 8000f6c:	d2ea      	bcs.n	8000f44 <__udivmoddi4+0x284>
 8000f6e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f72:	eb69 0503 	sbc.w	r5, r9, r3
 8000f76:	3801      	subs	r0, #1
 8000f78:	e7e4      	b.n	8000f44 <__udivmoddi4+0x284>
 8000f7a:	4628      	mov	r0, r5
 8000f7c:	e7d7      	b.n	8000f2e <__udivmoddi4+0x26e>
 8000f7e:	4640      	mov	r0, r8
 8000f80:	e791      	b.n	8000ea6 <__udivmoddi4+0x1e6>
 8000f82:	4681      	mov	r9, r0
 8000f84:	e7be      	b.n	8000f04 <__udivmoddi4+0x244>
 8000f86:	4601      	mov	r1, r0
 8000f88:	e778      	b.n	8000e7c <__udivmoddi4+0x1bc>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	443c      	add	r4, r7
 8000f8e:	e745      	b.n	8000e1c <__udivmoddi4+0x15c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e708      	b.n	8000da6 <__udivmoddi4+0xe6>
 8000f94:	f1a8 0802 	sub.w	r8, r8, #2
 8000f98:	443d      	add	r5, r7
 8000f9a:	e72b      	b.n	8000df4 <__udivmoddi4+0x134>

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <HAL_InitTick+0x3c>)
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_InitTick+0x40>)
{
 8000fa6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa8:	7818      	ldrb	r0, [r3, #0]
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fb2:	6810      	ldr	r0, [r2, #0]
 8000fb4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fb8:	f000 f8a2 	bl	8001100 <HAL_SYSTICK_Config>
 8000fbc:	4604      	mov	r4, r0
 8000fbe:	b958      	cbnz	r0, 8000fd8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc0:	2d0f      	cmp	r5, #15
 8000fc2:	d809      	bhi.n	8000fd8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fcc:	f000 f856 	bl	800107c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <HAL_InitTick+0x44>)
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	601d      	str	r5, [r3, #0]
 8000fd6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000fd8:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000fda:	bd38      	pop	{r3, r4, r5, pc}
 8000fdc:	2000010c 	.word	0x2000010c
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	20000004 	.word	0x20000004

08000fe8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe8:	4a07      	ldr	r2, [pc, #28]	; (8001008 <HAL_Init+0x20>)
{
 8000fea:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fec:	6813      	ldr	r3, [r2, #0]
 8000fee:	f043 0310 	orr.w	r3, r3, #16
 8000ff2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	f000 f82f 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f7ff ffd0 	bl	8000fa0 <HAL_InitTick>
  HAL_MspInit();
 8001000:	f003 fb80 	bl	8004704 <HAL_MspInit>
}
 8001004:	2000      	movs	r0, #0
 8001006:	bd08      	pop	{r3, pc}
 8001008:	40022000 	.word	0x40022000

0800100c <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800100c:	4a03      	ldr	r2, [pc, #12]	; (800101c <HAL_IncTick+0x10>)
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <HAL_IncTick+0x14>)
 8001010:	6811      	ldr	r1, [r2, #0]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	440b      	add	r3, r1
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000c68 	.word	0x20000c68
 8001020:	20000000 	.word	0x20000000

08001024 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001024:	4b01      	ldr	r3, [pc, #4]	; (800102c <HAL_GetTick+0x8>)
 8001026:	6818      	ldr	r0, [r3, #0]
}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000c68 	.word	0x20000c68

08001030 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001030:	b538      	push	{r3, r4, r5, lr}
 8001032:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff fff6 	bl	8001024 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001038:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800103a:	bf1c      	itt	ne
 800103c:	4b05      	ldrne	r3, [pc, #20]	; (8001054 <HAL_Delay+0x24>)
 800103e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001040:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001042:	bf18      	it	ne
 8001044:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001046:	f7ff ffed 	bl	8001024 <HAL_GetTick>
 800104a:	1b40      	subs	r0, r0, r5
 800104c:	4284      	cmp	r4, r0
 800104e:	d8fa      	bhi.n	8001046 <HAL_Delay+0x16>
  {
  }
}
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop
 8001054:	20000000 	.word	0x20000000

08001058 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4a07      	ldr	r2, [pc, #28]	; (8001078 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800105a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001060:	041b      	lsls	r3, r3, #16
 8001062:	0c1b      	lsrs	r3, r3, #16
 8001064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001068:	0200      	lsls	r0, r0, #8
 800106a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800106e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001072:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001074:	60d3      	str	r3, [r2, #12]
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107e:	b530      	push	{r4, r5, lr}
 8001080:	68dc      	ldr	r4, [r3, #12]
 8001082:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001086:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800108c:	2b04      	cmp	r3, #4
 800108e:	bf28      	it	cs
 8001090:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	f04f 0501 	mov.w	r5, #1
 8001098:	fa05 f303 	lsl.w	r3, r5, r3
 800109c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a0:	bf8c      	ite	hi
 80010a2:	3c03      	subhi	r4, #3
 80010a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a6:	4019      	ands	r1, r3
 80010a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010aa:	fa05 f404 	lsl.w	r4, r5, r4
 80010ae:	3c01      	subs	r4, #1
 80010b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80010b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	ea42 0201 	orr.w	r2, r2, r1
 80010b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	bfad      	iteet	ge
 80010be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	f000 000f 	andlt.w	r0, r0, #15
 80010c6:	4b06      	ldrlt	r3, [pc, #24]	; (80010e0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010cc:	bfb5      	itete	lt
 80010ce:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80010d8:	bd30      	pop	{r4, r5, pc}
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00
 80010e0:	e000ed14 	.word	0xe000ed14

080010e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80010e4:	2800      	cmp	r0, #0
 80010e6:	db08      	blt.n	80010fa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e8:	0942      	lsrs	r2, r0, #5
 80010ea:	2301      	movs	r3, #1
 80010ec:	f000 001f 	and.w	r0, r0, #31
 80010f0:	fa03 f000 	lsl.w	r0, r3, r0
 80010f4:	4b01      	ldr	r3, [pc, #4]	; (80010fc <HAL_NVIC_EnableIRQ+0x18>)
 80010f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80010fa:	4770      	bx	lr
 80010fc:	e000e100 	.word	0xe000e100

08001100 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001100:	3801      	subs	r0, #1
 8001102:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001106:	d20a      	bcs.n	800111e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110e:	21f0      	movs	r1, #240	; 0xf0
 8001110:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001114:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001116:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001118:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800111e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000e010 	.word	0xe000e010
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800112c:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 800112e:	4604      	mov	r4, r0
 8001130:	b168      	cbz	r0, 800114e <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001132:	7903      	ldrb	r3, [r0, #4]
 8001134:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001138:	b913      	cbnz	r3, 8001140 <HAL_DAC_Init+0x14>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800113a:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800113c:	f003 fafe 	bl	800473c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001140:	2302      	movs	r3, #2
 8001142:	7123      	strb	r3, [r4, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001144:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001146:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001148:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800114a:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 800114c:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 800114e:	2001      	movs	r0, #1
}
 8001150:	bd10      	pop	{r4, pc}

08001152 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001152:	4770      	bx	lr

08001154 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8001154:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmp = 0U;
 8001156:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8001158:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0U;
 800115a:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t) (hdac->Instance);
 800115c:	9001      	str	r0, [sp, #4]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 800115e:	b941      	cbnz	r1, 8001172 <HAL_DAC_SetValue+0x1e>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001160:	9901      	ldr	r1, [sp, #4]
 8001162:	3108      	adds	r1, #8
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001164:	440a      	add	r2, r1
 8001166:	9201      	str	r2, [sp, #4]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001168:	9a01      	ldr	r2, [sp, #4]
  
  /* Return function status */
  return HAL_OK;
}
 800116a:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 800116c:	6013      	str	r3, [r2, #0]
}
 800116e:	b002      	add	sp, #8
 8001170:	bd10      	pop	{r4, pc}
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001172:	9901      	ldr	r1, [sp, #4]
 8001174:	3114      	adds	r1, #20
 8001176:	e7f5      	b.n	8001164 <HAL_DAC_SetValue+0x10>

08001178 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001178:	7943      	ldrb	r3, [r0, #5]
 800117a:	2b01      	cmp	r3, #1
{
 800117c:	b510      	push	{r4, lr}
 800117e:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 8001182:	d015      	beq.n	80011b0 <HAL_DAC_Start+0x38>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001184:	7103      	strb	r3, [r0, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001186:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdac);
 8001188:	2201      	movs	r2, #1
  __HAL_DAC_ENABLE(hdac, Channel);
 800118a:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hdac);
 800118c:	7142      	strb	r2, [r0, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 800118e:	408a      	lsls	r2, r1
 8001190:	4322      	orrs	r2, r4
 8001192:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001194:	681a      	ldr	r2, [r3, #0]
  if(Channel == DAC_CHANNEL_1)
 8001196:	b969      	cbnz	r1, 80011b4 <HAL_DAC_Start+0x3c>
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001198:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 800119c:	2a3c      	cmp	r2, #60	; 0x3c
 800119e:	d103      	bne.n	80011a8 <HAL_DAC_Start+0x30>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	f042 0201 	orr.w	r2, r2, #1
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80011a6:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80011a8:	2301      	movs	r3, #1
 80011aa:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80011ac:	2300      	movs	r3, #0
 80011ae:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 80011b0:	4618      	mov	r0, r3
    
  /* Return function status */
  return HAL_OK;
}
 80011b2:	bd10      	pop	{r4, pc}
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 80011b4:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 80011b8:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 80011bc:	d1f4      	bne.n	80011a8 <HAL_DAC_Start+0x30>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	f042 0202 	orr.w	r2, r2, #2
 80011c4:	e7ef      	b.n	80011a6 <HAL_DAC_Start+0x2e>

080011c6 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80011c6:	7943      	ldrb	r3, [r0, #5]
 80011c8:	2b01      	cmp	r3, #1
{
 80011ca:	b530      	push	{r4, r5, lr}
 80011cc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 80011d0:	d017      	beq.n	8001202 <HAL_DAC_ConfigChannel+0x3c>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80011d2:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 80011d4:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 80011d6:	6823      	ldr	r3, [r4, #0]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80011d8:	f640 75fe 	movw	r5, #4094	; 0xffe
 80011dc:	4095      	lsls	r5, r2
 80011de:	ea23 0505 	bic.w	r5, r3, r5
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80011e2:	c90a      	ldmia	r1, {r1, r3}
 80011e4:	430b      	orrs	r3, r1
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80011e6:	4093      	lsls	r3, r2
 80011e8:	432b      	orrs	r3, r5
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80011ea:	6023      	str	r3, [r4, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	21c0      	movs	r1, #192	; 0xc0
 80011f0:	fa01 f202 	lsl.w	r2, r1, r2
 80011f4:	ea23 0202 	bic.w	r2, r3, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80011f8:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80011fa:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80011fc:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80011fe:	2300      	movs	r3, #0
 8001200:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8001202:	4618      	mov	r0, r3
  
  /* Return function status */
  return HAL_OK;
}
 8001204:	bd30      	pop	{r4, r5, pc}

08001206 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001206:	4770      	bx	lr

08001208 <HAL_DAC_IRQHandler>:
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001208:	6803      	ldr	r3, [r0, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	0491      	lsls	r1, r2, #18
{
 800120e:	b510      	push	{r4, lr}
 8001210:	4604      	mov	r4, r0
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001212:	d511      	bpl.n	8001238 <HAL_DAC_IRQHandler+0x30>
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001216:	0492      	lsls	r2, r2, #18
 8001218:	d50e      	bpl.n	8001238 <HAL_DAC_IRQHandler+0x30>
      hdac->State = HAL_DAC_STATE_ERROR;
 800121a:	2204      	movs	r2, #4
 800121c:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800121e:	6902      	ldr	r2, [r0, #16]
 8001220:	f042 0201 	orr.w	r2, r2, #1
 8001224:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8001226:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800122a:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001232:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001234:	f7ff ff8d 	bl	8001152 <HAL_DAC_DMAUnderrunCallbackCh1>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001238:	6823      	ldr	r3, [r4, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	0091      	lsls	r1, r2, #2
 800123e:	d512      	bpl.n	8001266 <HAL_DAC_IRQHandler+0x5e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	d50f      	bpl.n	8001266 <HAL_DAC_IRQHandler+0x5e>
      hdac->State = HAL_DAC_STATE_ERROR;
 8001246:	2204      	movs	r2, #4
 8001248:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800124a:	6922      	ldr	r2, [r4, #16]
 800124c:	f042 0202 	orr.w	r2, r2, #2
 8001250:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8001252:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001256:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800125e:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001260:	4620      	mov	r0, r4
 8001262:	f7ff ffd0 	bl	8001206 <HAL_DACEx_DMAUnderrunCallbackCh2>
 8001266:	bd10      	pop	{r4, pc}

08001268 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001268:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 800126c:	2a02      	cmp	r2, #2
{  
 800126e:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001270:	d003      	beq.n	800127a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001272:	2204      	movs	r2, #4
 8001274:	6382      	str	r2, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001276:	2001      	movs	r0, #1
 8001278:	bd10      	pop	{r4, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800127a:	6802      	ldr	r2, [r0, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800127c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800127e:	6811      	ldr	r1, [r2, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001280:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001282:	f021 010e 	bic.w	r1, r1, #14
 8001286:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001288:	6811      	ldr	r1, [r2, #0]
 800128a:	f021 0101 	bic.w	r1, r1, #1
 800128e:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001290:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001292:	2101      	movs	r1, #1
 8001294:	fa01 f202 	lsl.w	r2, r1, r2
 8001298:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800129a:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800129c:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80012a0:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80012a4:	b113      	cbz	r3, 80012ac <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 80012a6:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80012a8:	4620      	mov	r0, r4
 80012aa:	bd10      	pop	{r4, pc}
 80012ac:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 80012ae:	bd10      	pop	{r4, pc}

080012b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b4:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b8:	f8df 9190 	ldr.w	r9, [pc, #400]	; 800144c <HAL_GPIO_Init+0x19c>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012bc:	4a61      	ldr	r2, [pc, #388]	; (8001444 <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00u;
 80012be:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c0:	fa38 f403 	lsrs.w	r4, r8, r3
 80012c4:	d102      	bne.n	80012cc <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 80012c6:	b003      	add	sp, #12
 80012c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012cc:	f04f 0e01 	mov.w	lr, #1
 80012d0:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 80012d4:	ea18 060e 	ands.w	r6, r8, lr
 80012d8:	f000 80a6 	beq.w	8001428 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012dc:	684c      	ldr	r4, [r1, #4]
 80012de:	f024 0710 	bic.w	r7, r4, #16
 80012e2:	2f02      	cmp	r7, #2
 80012e4:	d116      	bne.n	8001314 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 80012e6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80012ea:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012ee:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80012f2:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012f6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80012fa:	f04f 0c0f 	mov.w	ip, #15
 80012fe:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001302:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001306:	690d      	ldr	r5, [r1, #16]
 8001308:	fa05 f50b 	lsl.w	r5, r5, fp
 800130c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001310:	f8ca 5020 	str.w	r5, [sl, #32]
 8001314:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001318:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800131a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800131e:	fa05 f50a 	lsl.w	r5, r5, sl
 8001322:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001324:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001328:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800132c:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001330:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001332:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001336:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001338:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800133c:	d811      	bhi.n	8001362 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800133e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001340:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001344:	68cf      	ldr	r7, [r1, #12]
 8001346:	fa07 fc0a 	lsl.w	ip, r7, sl
 800134a:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800134e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001350:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001352:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001356:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800135a:	409f      	lsls	r7, r3
 800135c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001360:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001362:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001364:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001366:	688f      	ldr	r7, [r1, #8]
 8001368:	fa07 f70a 	lsl.w	r7, r7, sl
 800136c:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800136e:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001370:	00e5      	lsls	r5, r4, #3
 8001372:	d559      	bpl.n	8001428 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001374:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8001378:	f045 0501 	orr.w	r5, r5, #1
 800137c:	f8c9 5018 	str.w	r5, [r9, #24]
 8001380:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8001384:	f023 0703 	bic.w	r7, r3, #3
 8001388:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800138c:	f005 0501 	and.w	r5, r5, #1
 8001390:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001394:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001396:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800139c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800139e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80013a2:	f04f 0e0f 	mov.w	lr, #15
 80013a6:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013aa:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ae:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013b2:	d03b      	beq.n	800142c <HAL_GPIO_Init+0x17c>
 80013b4:	4d24      	ldr	r5, [pc, #144]	; (8001448 <HAL_GPIO_Init+0x198>)
 80013b6:	42a8      	cmp	r0, r5
 80013b8:	d03a      	beq.n	8001430 <HAL_GPIO_Init+0x180>
 80013ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013be:	42a8      	cmp	r0, r5
 80013c0:	d038      	beq.n	8001434 <HAL_GPIO_Init+0x184>
 80013c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013c6:	42a8      	cmp	r0, r5
 80013c8:	d036      	beq.n	8001438 <HAL_GPIO_Init+0x188>
 80013ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013ce:	42a8      	cmp	r0, r5
 80013d0:	d034      	beq.n	800143c <HAL_GPIO_Init+0x18c>
 80013d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013d6:	42a8      	cmp	r0, r5
 80013d8:	d032      	beq.n	8001440 <HAL_GPIO_Init+0x190>
 80013da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013de:	42a8      	cmp	r0, r5
 80013e0:	bf14      	ite	ne
 80013e2:	2507      	movne	r5, #7
 80013e4:	2506      	moveq	r5, #6
 80013e6:	fa05 f50c 	lsl.w	r5, r5, ip
 80013ea:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013ee:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80013f0:	6815      	ldr	r5, [r2, #0]
        temp &= ~(iocurrent);
 80013f2:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013f4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 80013f8:	bf0c      	ite	eq
 80013fa:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80013fc:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 80013fe:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001400:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001402:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001406:	bf0c      	ite	eq
 8001408:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800140a:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 800140c:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800140e:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001410:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001414:	bf0c      	ite	eq
 8001416:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001418:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 800141a:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800141c:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800141e:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8001420:	bf54      	ite	pl
 8001422:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8001424:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8001426:	60d5      	str	r5, [r2, #12]
    position++;
 8001428:	3301      	adds	r3, #1
 800142a:	e749      	b.n	80012c0 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800142c:	2500      	movs	r5, #0
 800142e:	e7da      	b.n	80013e6 <HAL_GPIO_Init+0x136>
 8001430:	2501      	movs	r5, #1
 8001432:	e7d8      	b.n	80013e6 <HAL_GPIO_Init+0x136>
 8001434:	2502      	movs	r5, #2
 8001436:	e7d6      	b.n	80013e6 <HAL_GPIO_Init+0x136>
 8001438:	2503      	movs	r5, #3
 800143a:	e7d4      	b.n	80013e6 <HAL_GPIO_Init+0x136>
 800143c:	2504      	movs	r5, #4
 800143e:	e7d2      	b.n	80013e6 <HAL_GPIO_Init+0x136>
 8001440:	2505      	movs	r5, #5
 8001442:	e7d0      	b.n	80013e6 <HAL_GPIO_Init+0x136>
 8001444:	40010400 	.word	0x40010400
 8001448:	48000400 	.word	0x48000400
 800144c:	40021000 	.word	0x40021000

08001450 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001450:	6903      	ldr	r3, [r0, #16]
 8001452:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001454:	bf14      	ite	ne
 8001456:	2001      	movne	r0, #1
 8001458:	2000      	moveq	r0, #0
 800145a:	4770      	bx	lr

0800145c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800145c:	b10a      	cbz	r2, 8001462 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800145e:	6181      	str	r1, [r0, #24]
 8001460:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001462:	6281      	str	r1, [r0, #40]	; 0x28
 8001464:	4770      	bx	lr

08001466 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001466:	6943      	ldr	r3, [r0, #20]
 8001468:	420b      	tst	r3, r1
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800146a:	bf18      	it	ne
 800146c:	0409      	lslne	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800146e:	6181      	str	r1, [r0, #24]
 8001470:	4770      	bx	lr
	...

08001474 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001474:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001478:	6959      	ldr	r1, [r3, #20]
 800147a:	4201      	tst	r1, r0
 800147c:	d002      	beq.n	8001484 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800147e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001480:	f002 fe36 	bl	80040f0 <HAL_GPIO_EXTI_Callback>
 8001484:	bd08      	pop	{r3, pc}
 8001486:	bf00      	nop
 8001488:	40010400 	.word	0x40010400

0800148c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800148c:	6803      	ldr	r3, [r0, #0]
 800148e:	699a      	ldr	r2, [r3, #24]
 8001490:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8001492:	bf44      	itt	mi
 8001494:	2200      	movmi	r2, #0
 8001496:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001498:	699a      	ldr	r2, [r3, #24]
 800149a:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800149c:	bf5e      	ittt	pl
 800149e:	699a      	ldrpl	r2, [r3, #24]
 80014a0:	f042 0201 	orrpl.w	r2, r2, #1
 80014a4:	619a      	strpl	r2, [r3, #24]
 80014a6:	4770      	bx	lr

080014a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80014a8:	b530      	push	{r4, r5, lr}
 80014aa:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80014ac:	6805      	ldr	r5, [r0, #0]
 80014ae:	4323      	orrs	r3, r4
 80014b0:	0d64      	lsrs	r4, r4, #21
 80014b2:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80014b6:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80014ba:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80014be:	6868      	ldr	r0, [r5, #4]
 80014c0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80014c4:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80014c8:	4319      	orrs	r1, r3
 80014ca:	f044 0403 	orr.w	r4, r4, #3
 80014ce:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80014d2:	ea20 0404 	bic.w	r4, r0, r4
 80014d6:	4321      	orrs	r1, r4
 80014d8:	6069      	str	r1, [r5, #4]
 80014da:	bd30      	pop	{r4, r5, pc}

080014dc <I2C_WaitOnFlagUntilTimeout>:
{
 80014dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014e0:	9f06      	ldr	r7, [sp, #24]
 80014e2:	4604      	mov	r4, r0
 80014e4:	4688      	mov	r8, r1
 80014e6:	4616      	mov	r6, r2
 80014e8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014ea:	6822      	ldr	r2, [r4, #0]
 80014ec:	6993      	ldr	r3, [r2, #24]
 80014ee:	ea38 0303 	bics.w	r3, r8, r3
 80014f2:	bf0c      	ite	eq
 80014f4:	2301      	moveq	r3, #1
 80014f6:	2300      	movne	r3, #0
 80014f8:	42b3      	cmp	r3, r6
 80014fa:	d002      	beq.n	8001502 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80014fc:	2000      	movs	r0, #0
}
 80014fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001502:	1c6b      	adds	r3, r5, #1
 8001504:	d0f2      	beq.n	80014ec <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001506:	f7ff fd8d 	bl	8001024 <HAL_GetTick>
 800150a:	1bc0      	subs	r0, r0, r7
 800150c:	4285      	cmp	r5, r0
 800150e:	d301      	bcc.n	8001514 <I2C_WaitOnFlagUntilTimeout+0x38>
 8001510:	2d00      	cmp	r5, #0
 8001512:	d1ea      	bne.n	80014ea <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001514:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001516:	f043 0320 	orr.w	r3, r3, #32
 800151a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800151c:	2320      	movs	r3, #32
 800151e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001522:	2300      	movs	r3, #0
 8001524:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001528:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800152c:	2001      	movs	r0, #1
 800152e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001532 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001532:	6803      	ldr	r3, [r0, #0]
{
 8001534:	b570      	push	{r4, r5, r6, lr}
 8001536:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001538:	6998      	ldr	r0, [r3, #24]
 800153a:	f010 0010 	ands.w	r0, r0, #16
{
 800153e:	460d      	mov	r5, r1
 8001540:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001542:	d116      	bne.n	8001572 <I2C_IsAcknowledgeFailed+0x40>
 8001544:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8001546:	1c69      	adds	r1, r5, #1
 8001548:	d014      	beq.n	8001574 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800154a:	f7ff fd6b 	bl	8001024 <HAL_GetTick>
 800154e:	1b80      	subs	r0, r0, r6
 8001550:	4285      	cmp	r5, r0
 8001552:	d300      	bcc.n	8001556 <I2C_IsAcknowledgeFailed+0x24>
 8001554:	b96d      	cbnz	r5, 8001572 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001556:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001558:	f043 0320 	orr.w	r3, r3, #32
 800155c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800155e:	2320      	movs	r3, #32
 8001560:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001564:	2300      	movs	r3, #0
 8001566:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800156a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 800156e:	2001      	movs	r0, #1
}
 8001570:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001572:	6823      	ldr	r3, [r4, #0]
 8001574:	6999      	ldr	r1, [r3, #24]
 8001576:	068a      	lsls	r2, r1, #26
 8001578:	d5e5      	bpl.n	8001546 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800157a:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800157c:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800157e:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001580:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001582:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001584:	f7ff ff82 	bl	800148c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001588:	6822      	ldr	r2, [r4, #0]
 800158a:	6853      	ldr	r3, [r2, #4]
 800158c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001590:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001594:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001598:	f023 0301 	bic.w	r3, r3, #1
 800159c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800159e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80015a6:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 80015aa:	e7db      	b.n	8001564 <I2C_IsAcknowledgeFailed+0x32>

080015ac <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80015ac:	b570      	push	{r4, r5, r6, lr}
 80015ae:	4604      	mov	r4, r0
 80015b0:	460d      	mov	r5, r1
 80015b2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015b4:	6823      	ldr	r3, [r4, #0]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	079b      	lsls	r3, r3, #30
 80015ba:	d501      	bpl.n	80015c0 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80015bc:	2000      	movs	r0, #0
 80015be:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80015c0:	4632      	mov	r2, r6
 80015c2:	4629      	mov	r1, r5
 80015c4:	4620      	mov	r0, r4
 80015c6:	f7ff ffb4 	bl	8001532 <I2C_IsAcknowledgeFailed>
 80015ca:	b9a0      	cbnz	r0, 80015f6 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80015cc:	1c6a      	adds	r2, r5, #1
 80015ce:	d0f1      	beq.n	80015b4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015d0:	f7ff fd28 	bl	8001024 <HAL_GetTick>
 80015d4:	1b80      	subs	r0, r0, r6
 80015d6:	4285      	cmp	r5, r0
 80015d8:	d301      	bcc.n	80015de <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80015da:	2d00      	cmp	r5, #0
 80015dc:	d1ea      	bne.n	80015b4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015e0:	f043 0320 	orr.w	r3, r3, #32
 80015e4:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80015e6:	2320      	movs	r3, #32
 80015e8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80015f2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80015f6:	2001      	movs	r0, #1
}
 80015f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080015fc <I2C_RequestMemoryWrite>:
{
 80015fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80015fe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001600:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001602:	4b16      	ldr	r3, [pc, #88]	; (800165c <I2C_RequestMemoryWrite+0x60>)
 8001604:	9300      	str	r3, [sp, #0]
{
 8001606:	4605      	mov	r5, r0
 8001608:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800160a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800160e:	b2fa      	uxtb	r2, r7
 8001610:	f7ff ff4a 	bl	80014a8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001614:	4632      	mov	r2, r6
 8001616:	9908      	ldr	r1, [sp, #32]
 8001618:	4628      	mov	r0, r5
 800161a:	f7ff ffc7 	bl	80015ac <I2C_WaitOnTXISFlagUntilTimeout>
 800161e:	b110      	cbz	r0, 8001626 <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 8001620:	2001      	movs	r0, #1
}
 8001622:	b003      	add	sp, #12
 8001624:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001626:	2f01      	cmp	r7, #1
 8001628:	682b      	ldr	r3, [r5, #0]
 800162a:	d10c      	bne.n	8001646 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800162c:	b2e4      	uxtb	r4, r4
 800162e:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001630:	9b08      	ldr	r3, [sp, #32]
 8001632:	9600      	str	r6, [sp, #0]
 8001634:	2200      	movs	r2, #0
 8001636:	2180      	movs	r1, #128	; 0x80
 8001638:	4628      	mov	r0, r5
 800163a:	f7ff ff4f 	bl	80014dc <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 800163e:	3000      	adds	r0, #0
 8001640:	bf18      	it	ne
 8001642:	2001      	movne	r0, #1
 8001644:	e7ed      	b.n	8001622 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001646:	0a22      	lsrs	r2, r4, #8
 8001648:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800164a:	9908      	ldr	r1, [sp, #32]
 800164c:	4632      	mov	r2, r6
 800164e:	4628      	mov	r0, r5
 8001650:	f7ff ffac 	bl	80015ac <I2C_WaitOnTXISFlagUntilTimeout>
 8001654:	2800      	cmp	r0, #0
 8001656:	d1e3      	bne.n	8001620 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001658:	682b      	ldr	r3, [r5, #0]
 800165a:	e7e7      	b.n	800162c <I2C_RequestMemoryWrite+0x30>
 800165c:	80002000 	.word	0x80002000

08001660 <I2C_RequestMemoryRead>:
{
 8001660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001662:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001664:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001666:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <I2C_RequestMemoryRead+0x60>)
 8001668:	9300      	str	r3, [sp, #0]
{
 800166a:	4605      	mov	r5, r0
 800166c:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800166e:	2300      	movs	r3, #0
 8001670:	b2fa      	uxtb	r2, r7
 8001672:	f7ff ff19 	bl	80014a8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001676:	4632      	mov	r2, r6
 8001678:	9908      	ldr	r1, [sp, #32]
 800167a:	4628      	mov	r0, r5
 800167c:	f7ff ff96 	bl	80015ac <I2C_WaitOnTXISFlagUntilTimeout>
 8001680:	b110      	cbz	r0, 8001688 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8001682:	2001      	movs	r0, #1
}
 8001684:	b003      	add	sp, #12
 8001686:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001688:	2f01      	cmp	r7, #1
 800168a:	682b      	ldr	r3, [r5, #0]
 800168c:	d10c      	bne.n	80016a8 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800168e:	b2e4      	uxtb	r4, r4
 8001690:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001692:	9b08      	ldr	r3, [sp, #32]
 8001694:	9600      	str	r6, [sp, #0]
 8001696:	2200      	movs	r2, #0
 8001698:	2140      	movs	r1, #64	; 0x40
 800169a:	4628      	mov	r0, r5
 800169c:	f7ff ff1e 	bl	80014dc <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80016a0:	3000      	adds	r0, #0
 80016a2:	bf18      	it	ne
 80016a4:	2001      	movne	r0, #1
 80016a6:	e7ed      	b.n	8001684 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80016a8:	0a22      	lsrs	r2, r4, #8
 80016aa:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016ac:	9908      	ldr	r1, [sp, #32]
 80016ae:	4632      	mov	r2, r6
 80016b0:	4628      	mov	r0, r5
 80016b2:	f7ff ff7b 	bl	80015ac <I2C_WaitOnTXISFlagUntilTimeout>
 80016b6:	2800      	cmp	r0, #0
 80016b8:	d1e3      	bne.n	8001682 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016ba:	682b      	ldr	r3, [r5, #0]
 80016bc:	e7e7      	b.n	800168e <I2C_RequestMemoryRead+0x2e>
 80016be:	bf00      	nop
 80016c0:	80002000 	.word	0x80002000

080016c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80016c4:	b570      	push	{r4, r5, r6, lr}
 80016c6:	4604      	mov	r4, r0
 80016c8:	460d      	mov	r5, r1
 80016ca:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	069b      	lsls	r3, r3, #26
 80016d2:	d501      	bpl.n	80016d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80016d4:	2000      	movs	r0, #0
 80016d6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80016d8:	4632      	mov	r2, r6
 80016da:	4629      	mov	r1, r5
 80016dc:	4620      	mov	r0, r4
 80016de:	f7ff ff28 	bl	8001532 <I2C_IsAcknowledgeFailed>
 80016e2:	b990      	cbnz	r0, 800170a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016e4:	f7ff fc9e 	bl	8001024 <HAL_GetTick>
 80016e8:	1b80      	subs	r0, r0, r6
 80016ea:	4285      	cmp	r5, r0
 80016ec:	d301      	bcc.n	80016f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80016ee:	2d00      	cmp	r5, #0
 80016f0:	d1ec      	bne.n	80016cc <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016f4:	f043 0320 	orr.w	r3, r3, #32
 80016f8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80016fa:	2320      	movs	r3, #32
 80016fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001700:	2300      	movs	r3, #0
 8001702:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001706:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800170a:	2001      	movs	r0, #1
}
 800170c:	bd70      	pop	{r4, r5, r6, pc}

0800170e <HAL_I2C_Init>:
{
 800170e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001710:	4604      	mov	r4, r0
 8001712:	2800      	cmp	r0, #0
 8001714:	d04a      	beq.n	80017ac <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001716:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800171a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800171e:	b91b      	cbnz	r3, 8001728 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001720:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001724:	f003 f840 	bl	80047a8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001728:	2324      	movs	r3, #36	; 0x24
 800172a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800172e:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001730:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	f022 0201 	bic.w	r2, r2, #1
 8001738:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800173a:	6862      	ldr	r2, [r4, #4]
 800173c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001740:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001742:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001744:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001746:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800174e:	d124      	bne.n	800179a <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001750:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001754:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001756:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001758:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800175a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800175e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001762:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001764:	68da      	ldr	r2, [r3, #12]
 8001766:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800176a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800176c:	6922      	ldr	r2, [r4, #16]
 800176e:	430a      	orrs	r2, r1
 8001770:	69a1      	ldr	r1, [r4, #24]
 8001772:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001776:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001778:	6a21      	ldr	r1, [r4, #32]
 800177a:	69e2      	ldr	r2, [r4, #28]
 800177c:	430a      	orrs	r2, r1
 800177e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	f042 0201 	orr.w	r2, r2, #1
 8001786:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001788:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800178a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800178c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800178e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001792:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001794:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8001798:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800179a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800179e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017a0:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017a2:	bf04      	itt	eq
 80017a4:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80017a8:	605a      	streq	r2, [r3, #4]
 80017aa:	e7d4      	b.n	8001756 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80017ac:	2001      	movs	r0, #1
}
 80017ae:	bd10      	pop	{r4, pc}

080017b0 <HAL_I2C_Mem_Write>:
{
 80017b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017b4:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80017b6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80017ba:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 80017bc:	2b20      	cmp	r3, #32
{
 80017be:	4604      	mov	r4, r0
 80017c0:	460f      	mov	r7, r1
 80017c2:	9203      	str	r2, [sp, #12]
 80017c4:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80017c8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80017cc:	f040 80a5 	bne.w	800191a <HAL_I2C_Mem_Write+0x16a>
    if ((pData == NULL) || (Size == 0U))
 80017d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80017d2:	b113      	cbz	r3, 80017da <HAL_I2C_Mem_Write+0x2a>
 80017d4:	f1ba 0f00 	cmp.w	sl, #0
 80017d8:	d106      	bne.n	80017e8 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80017da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017de:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80017e0:	2001      	movs	r0, #1
}
 80017e2:	b005      	add	sp, #20
 80017e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80017e8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	f000 8094 	beq.w	800191a <HAL_I2C_Mem_Write+0x16a>
 80017f2:	2501      	movs	r5, #1
 80017f4:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80017f8:	f7ff fc14 	bl	8001024 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017fc:	2319      	movs	r3, #25
 80017fe:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001800:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001802:	462a      	mov	r2, r5
 8001804:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001808:	4620      	mov	r0, r4
 800180a:	f7ff fe67 	bl	80014dc <I2C_WaitOnFlagUntilTimeout>
 800180e:	4681      	mov	r9, r0
 8001810:	2800      	cmp	r0, #0
 8001812:	d1e5      	bne.n	80017e0 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001814:	2321      	movs	r3, #33	; 0x21
 8001816:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800181a:	2340      	movs	r3, #64	; 0x40
 800181c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001822:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001824:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8001826:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001828:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800182c:	9601      	str	r6, [sp, #4]
 800182e:	f8cd 8000 	str.w	r8, [sp]
 8001832:	465b      	mov	r3, fp
 8001834:	9a03      	ldr	r2, [sp, #12]
 8001836:	4639      	mov	r1, r7
 8001838:	4620      	mov	r0, r4
 800183a:	f7ff fedf 	bl	80015fc <I2C_RequestMemoryWrite>
 800183e:	b110      	cbz	r0, 8001846 <HAL_I2C_Mem_Write+0x96>
      __HAL_UNLOCK(hi2c);
 8001840:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8001844:	e7cc      	b.n	80017e0 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001846:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001848:	b29b      	uxth	r3, r3
 800184a:	2bff      	cmp	r3, #255	; 0xff
 800184c:	d955      	bls.n	80018fa <HAL_I2C_Mem_Write+0x14a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800184e:	22ff      	movs	r2, #255	; 0xff
 8001850:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001852:	9000      	str	r0, [sp, #0]
 8001854:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001858:	4639      	mov	r1, r7
 800185a:	4620      	mov	r0, r4
 800185c:	f7ff fe24 	bl	80014a8 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001860:	4632      	mov	r2, r6
 8001862:	4641      	mov	r1, r8
 8001864:	4620      	mov	r0, r4
 8001866:	f7ff fea1 	bl	80015ac <I2C_WaitOnTXISFlagUntilTimeout>
 800186a:	2800      	cmp	r0, #0
 800186c:	d1b8      	bne.n	80017e0 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800186e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001870:	6822      	ldr	r2, [r4, #0]
 8001872:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001876:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001878:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800187a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800187c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800187e:	3b01      	subs	r3, #1
 8001880:	b29b      	uxth	r3, r3
 8001882:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001884:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001886:	3a01      	subs	r2, #1
 8001888:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800188a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800188c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800188e:	b1ab      	cbz	r3, 80018bc <HAL_I2C_Mem_Write+0x10c>
 8001890:	b9a2      	cbnz	r2, 80018bc <HAL_I2C_Mem_Write+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001892:	9600      	str	r6, [sp, #0]
 8001894:	4643      	mov	r3, r8
 8001896:	2180      	movs	r1, #128	; 0x80
 8001898:	4620      	mov	r0, r4
 800189a:	f7ff fe1f 	bl	80014dc <I2C_WaitOnFlagUntilTimeout>
 800189e:	2800      	cmp	r0, #0
 80018a0:	d19e      	bne.n	80017e0 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	2bff      	cmp	r3, #255	; 0xff
 80018a8:	d92f      	bls.n	800190a <HAL_I2C_Mem_Write+0x15a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018aa:	22ff      	movs	r2, #255	; 0xff
 80018ac:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80018ae:	9000      	str	r0, [sp, #0]
 80018b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018b4:	4639      	mov	r1, r7
 80018b6:	4620      	mov	r0, r4
 80018b8:	f7ff fdf6 	bl	80014a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80018bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018be:	b29b      	uxth	r3, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1cd      	bne.n	8001860 <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018c4:	4632      	mov	r2, r6
 80018c6:	4641      	mov	r1, r8
 80018c8:	4620      	mov	r0, r4
 80018ca:	f7ff fefb 	bl	80016c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018ce:	2800      	cmp	r0, #0
 80018d0:	d186      	bne.n	80017e0 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	2120      	movs	r1, #32
 80018d6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80018de:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80018e2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80018e6:	f022 0201 	bic.w	r2, r2, #1
 80018ea:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80018ec:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80018f0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018f4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80018f8:	e773      	b.n	80017e2 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80018fa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018fc:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80018fe:	b292      	uxth	r2, r2
 8001900:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001902:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	e7a6      	b.n	8001858 <HAL_I2C_Mem_Write+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 800190a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800190c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800190e:	b292      	uxth	r2, r2
 8001910:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001912:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	e7cc      	b.n	80018b4 <HAL_I2C_Mem_Write+0x104>
    return HAL_BUSY;
 800191a:	2002      	movs	r0, #2
 800191c:	e761      	b.n	80017e2 <HAL_I2C_Mem_Write+0x32>
	...

08001920 <HAL_I2C_Mem_Read>:
{
 8001920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001924:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001926:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800192a:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 800192c:	2b20      	cmp	r3, #32
{
 800192e:	4604      	mov	r4, r0
 8001930:	460f      	mov	r7, r1
 8001932:	9203      	str	r2, [sp, #12]
 8001934:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8001938:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 800193c:	f040 80a9 	bne.w	8001a92 <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8001940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001942:	b113      	cbz	r3, 800194a <HAL_I2C_Mem_Read+0x2a>
 8001944:	f1ba 0f00 	cmp.w	sl, #0
 8001948:	d106      	bne.n	8001958 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800194a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800194e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001950:	2001      	movs	r0, #1
}
 8001952:	b005      	add	sp, #20
 8001954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001958:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800195c:	2b01      	cmp	r3, #1
 800195e:	f000 8098 	beq.w	8001a92 <HAL_I2C_Mem_Read+0x172>
 8001962:	2501      	movs	r5, #1
 8001964:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001968:	f7ff fb5c 	bl	8001024 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800196c:	2319      	movs	r3, #25
 800196e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001970:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001972:	462a      	mov	r2, r5
 8001974:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001978:	4620      	mov	r0, r4
 800197a:	f7ff fdaf 	bl	80014dc <I2C_WaitOnFlagUntilTimeout>
 800197e:	4681      	mov	r9, r0
 8001980:	2800      	cmp	r0, #0
 8001982:	d1e5      	bne.n	8001950 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001984:	2322      	movs	r3, #34	; 0x22
 8001986:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800198a:	2340      	movs	r3, #64	; 0x40
 800198c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001992:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001994:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8001996:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001998:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800199c:	9601      	str	r6, [sp, #4]
 800199e:	f8cd 8000 	str.w	r8, [sp]
 80019a2:	465b      	mov	r3, fp
 80019a4:	9a03      	ldr	r2, [sp, #12]
 80019a6:	4639      	mov	r1, r7
 80019a8:	4620      	mov	r0, r4
 80019aa:	f7ff fe59 	bl	8001660 <I2C_RequestMemoryRead>
 80019ae:	b110      	cbz	r0, 80019b6 <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 80019b0:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 80019b4:	e7cc      	b.n	8001950 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	2bff      	cmp	r3, #255	; 0xff
 80019bc:	4b36      	ldr	r3, [pc, #216]	; (8001a98 <HAL_I2C_Mem_Read+0x178>)
 80019be:	d958      	bls.n	8001a72 <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019c0:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80019c2:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019c4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80019c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80019ca:	4639      	mov	r1, r7
 80019cc:	4620      	mov	r0, r4
 80019ce:	f7ff fd6b 	bl	80014a8 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80019d2:	9600      	str	r6, [sp, #0]
 80019d4:	4643      	mov	r3, r8
 80019d6:	2200      	movs	r2, #0
 80019d8:	2104      	movs	r1, #4
 80019da:	4620      	mov	r0, r4
 80019dc:	f7ff fd7e 	bl	80014dc <I2C_WaitOnFlagUntilTimeout>
 80019e0:	2800      	cmp	r0, #0
 80019e2:	d1b5      	bne.n	8001950 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019e4:	6822      	ldr	r2, [r4, #0]
 80019e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019ea:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80019ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80019ee:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80019f0:	3301      	adds	r3, #1
 80019f2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80019f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019f6:	3b01      	subs	r3, #1
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80019fe:	3a01      	subs	r2, #1
 8001a00:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a02:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001a04:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a06:	b1ab      	cbz	r3, 8001a34 <HAL_I2C_Mem_Read+0x114>
 8001a08:	b9a2      	cbnz	r2, 8001a34 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a0a:	9600      	str	r6, [sp, #0]
 8001a0c:	4643      	mov	r3, r8
 8001a0e:	2180      	movs	r1, #128	; 0x80
 8001a10:	4620      	mov	r0, r4
 8001a12:	f7ff fd63 	bl	80014dc <I2C_WaitOnFlagUntilTimeout>
 8001a16:	2800      	cmp	r0, #0
 8001a18:	d19a      	bne.n	8001950 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	2bff      	cmp	r3, #255	; 0xff
 8001a20:	d92f      	bls.n	8001a82 <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a22:	22ff      	movs	r2, #255	; 0xff
 8001a24:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a26:	9000      	str	r0, [sp, #0]
 8001a28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a2c:	4639      	mov	r1, r7
 8001a2e:	4620      	mov	r0, r4
 8001a30:	f7ff fd3a 	bl	80014a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8001a34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1ca      	bne.n	80019d2 <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a3c:	4632      	mov	r2, r6
 8001a3e:	4641      	mov	r1, r8
 8001a40:	4620      	mov	r0, r4
 8001a42:	f7ff fe3f 	bl	80016c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a46:	2800      	cmp	r0, #0
 8001a48:	d182      	bne.n	8001950 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	2120      	movs	r1, #32
 8001a4e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001a56:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001a5a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001a5e:	f022 0201 	bic.w	r2, r2, #1
 8001a62:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001a64:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001a68:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a6c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001a70:	e76f      	b.n	8001952 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8001a72:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001a74:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001a76:	b292      	uxth	r2, r2
 8001a78:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001a7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	e7a3      	b.n	80019ca <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8001a82:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a84:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001a86:	b292      	uxth	r2, r2
 8001a88:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	e7cc      	b.n	8001a2c <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 8001a92:	2002      	movs	r0, #2
 8001a94:	e75d      	b.n	8001952 <HAL_I2C_Mem_Read+0x32>
 8001a96:	bf00      	nop
 8001a98:	80002400 	.word	0x80002400

08001a9c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a9c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	2a20      	cmp	r2, #32
{
 8001aa4:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa6:	d11d      	bne.n	8001ae4 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aa8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d019      	beq.n	8001ae4 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab0:	2324      	movs	r3, #36	; 0x24
 8001ab2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ab6:	6803      	ldr	r3, [r0, #0]
 8001ab8:	681c      	ldr	r4, [r3, #0]
 8001aba:	f024 0401 	bic.w	r4, r4, #1
 8001abe:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ac0:	681c      	ldr	r4, [r3, #0]
 8001ac2:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001ac6:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ac8:	681c      	ldr	r4, [r3, #0]
 8001aca:	4321      	orrs	r1, r4
 8001acc:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ace:	6819      	ldr	r1, [r3, #0]
 8001ad0:	f041 0101 	orr.w	r1, r1, #1
 8001ad4:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ad6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001ad8:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001adc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001ae4:	2002      	movs	r0, #2
  }
}
 8001ae6:	bd10      	pop	{r4, pc}

08001ae8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ae8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aea:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8001aee:	b2e4      	uxtb	r4, r4
 8001af0:	2c20      	cmp	r4, #32
 8001af2:	d11c      	bne.n	8001b2e <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001af4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d018      	beq.n	8001b2e <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001afc:	2324      	movs	r3, #36	; 0x24
 8001afe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b02:	6803      	ldr	r3, [r0, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	f022 0201 	bic.w	r2, r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b0c:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b0e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b12:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b16:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	f042 0201 	orr.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b20:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001b22:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001b26:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001b2e:	2002      	movs	r0, #2
  }
}
 8001b30:	bd10      	pop	{r4, pc}
	...

08001b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b34:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b38:	4605      	mov	r5, r0
 8001b3a:	b908      	cbnz	r0, 8001b40 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	e05b      	b.n	8001bf8 <HAL_RCC_OscConfig+0xc4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b40:	6803      	ldr	r3, [r0, #0]
 8001b42:	07df      	lsls	r7, r3, #31
 8001b44:	d411      	bmi.n	8001b6a <HAL_RCC_OscConfig+0x36>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b46:	682b      	ldr	r3, [r5, #0]
 8001b48:	079e      	lsls	r6, r3, #30
 8001b4a:	f100 808a 	bmi.w	8001c62 <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	682b      	ldr	r3, [r5, #0]
 8001b50:	071c      	lsls	r4, r3, #28
 8001b52:	f100 80fe 	bmi.w	8001d52 <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b56:	682b      	ldr	r3, [r5, #0]
 8001b58:	0758      	lsls	r0, r3, #29
 8001b5a:	f100 8147 	bmi.w	8001dec <HAL_RCC_OscConfig+0x2b8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b5e:	69a8      	ldr	r0, [r5, #24]
 8001b60:	2800      	cmp	r0, #0
 8001b62:	f040 81de 	bne.w	8001f22 <HAL_RCC_OscConfig+0x3ee>
        }
      }
    }
  }

  return HAL_OK;
 8001b66:	2000      	movs	r0, #0
 8001b68:	e046      	b.n	8001bf8 <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b6a:	4cbe      	ldr	r4, [pc, #760]	; (8001e64 <HAL_RCC_OscConfig+0x330>)
 8001b6c:	6863      	ldr	r3, [r4, #4]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d00a      	beq.n	8001b8c <HAL_RCC_OscConfig+0x58>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b76:	6863      	ldr	r3, [r4, #4]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d119      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x80>
 8001b80:	6863      	ldr	r3, [r4, #4]
 8001b82:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b8a:	d113      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x80>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b90:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b94:	6821      	ldr	r1, [r4, #0]
 8001b96:	fa93 f3a3 	rbit	r3, r3
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	420b      	tst	r3, r1
 8001baa:	d0cc      	beq.n	8001b46 <HAL_RCC_OscConfig+0x12>
 8001bac:	686b      	ldr	r3, [r5, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1c9      	bne.n	8001b46 <HAL_RCC_OscConfig+0x12>
 8001bb2:	e7c3      	b.n	8001b3c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb4:	686b      	ldr	r3, [r5, #4]
 8001bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bba:	d120      	bne.n	8001bfe <HAL_RCC_OscConfig+0xca>
 8001bbc:	6823      	ldr	r3, [r4, #0]
 8001bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fa2e 	bl	8001024 <HAL_GetTick>
 8001bc8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001bcc:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	2701      	movs	r7, #1
 8001bd0:	fa96 f3a6 	rbit	r3, r6
 8001bd4:	6822      	ldr	r2, [r4, #0]
 8001bd6:	fa96 f3a6 	rbit	r3, r6
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	f003 031f 	and.w	r3, r3, #31
 8001be2:	fa07 f303 	lsl.w	r3, r7, r3
 8001be6:	4213      	tst	r3, r2
 8001be8:	d1ad      	bne.n	8001b46 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bea:	f7ff fa1b 	bl	8001024 <HAL_GetTick>
 8001bee:	eba0 0008 	sub.w	r0, r0, r8
 8001bf2:	2864      	cmp	r0, #100	; 0x64
 8001bf4:	d9ec      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x9c>
            return HAL_TIMEOUT;
 8001bf6:	2003      	movs	r0, #3
}
 8001bf8:	b002      	add	sp, #8
 8001bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfe:	bb0b      	cbnz	r3, 8001c44 <HAL_RCC_OscConfig+0x110>
 8001c00:	6823      	ldr	r3, [r4, #0]
 8001c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c06:	6023      	str	r3, [r4, #0]
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c0e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c10:	f7ff fa08 	bl	8001024 <HAL_GetTick>
 8001c14:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001c18:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1a:	2701      	movs	r7, #1
 8001c1c:	fa96 f3a6 	rbit	r3, r6
 8001c20:	6822      	ldr	r2, [r4, #0]
 8001c22:	fa96 f3a6 	rbit	r3, r6
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	f003 031f 	and.w	r3, r3, #31
 8001c2e:	fa07 f303 	lsl.w	r3, r7, r3
 8001c32:	4213      	tst	r3, r2
 8001c34:	d087      	beq.n	8001b46 <HAL_RCC_OscConfig+0x12>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c36:	f7ff f9f5 	bl	8001024 <HAL_GetTick>
 8001c3a:	eba0 0008 	sub.w	r0, r0, r8
 8001c3e:	2864      	cmp	r0, #100	; 0x64
 8001c40:	d9ec      	bls.n	8001c1c <HAL_RCC_OscConfig+0xe8>
 8001c42:	e7d8      	b.n	8001bf6 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c48:	6823      	ldr	r3, [r4, #0]
 8001c4a:	d103      	bne.n	8001c54 <HAL_RCC_OscConfig+0x120>
 8001c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c50:	6023      	str	r3, [r4, #0]
 8001c52:	e7b3      	b.n	8001bbc <HAL_RCC_OscConfig+0x88>
 8001c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c58:	6023      	str	r3, [r4, #0]
 8001c5a:	6823      	ldr	r3, [r4, #0]
 8001c5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c60:	e7af      	b.n	8001bc2 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c62:	4c80      	ldr	r4, [pc, #512]	; (8001e64 <HAL_RCC_OscConfig+0x330>)
 8001c64:	6863      	ldr	r3, [r4, #4]
 8001c66:	f013 0f0c 	tst.w	r3, #12
 8001c6a:	d00a      	beq.n	8001c82 <HAL_RCC_OscConfig+0x14e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c6c:	6863      	ldr	r3, [r4, #4]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d125      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x18e>
 8001c76:	6863      	ldr	r3, [r4, #4]
 8001c78:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c80:	d11f      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x18e>
 8001c82:	2302      	movs	r3, #2
 8001c84:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c88:	6821      	ldr	r1, [r4, #0]
 8001c8a:	fa93 f3a3 	rbit	r3, r3
 8001c8e:	fab3 f383 	clz	r3, r3
 8001c92:	f003 031f 	and.w	r3, r3, #31
 8001c96:	2201      	movs	r2, #1
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	420b      	tst	r3, r1
 8001c9e:	d003      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x174>
 8001ca0:	68eb      	ldr	r3, [r5, #12]
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	f47f af4a 	bne.w	8001b3c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca8:	6821      	ldr	r1, [r4, #0]
 8001caa:	23f8      	movs	r3, #248	; 0xf8
 8001cac:	fa93 f3a3 	rbit	r3, r3
 8001cb0:	fab3 f283 	clz	r2, r3
 8001cb4:	692b      	ldr	r3, [r5, #16]
 8001cb6:	4093      	lsls	r3, r2
 8001cb8:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	6023      	str	r3, [r4, #0]
 8001cc0:	e745      	b.n	8001b4e <HAL_RCC_OscConfig+0x1a>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc2:	68ea      	ldr	r2, [r5, #12]
 8001cc4:	2601      	movs	r6, #1
 8001cc6:	b30a      	cbz	r2, 8001d0c <HAL_RCC_OscConfig+0x1d8>
 8001cc8:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8001ccc:	fab3 f383 	clz	r3, r3
 8001cd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	2702      	movs	r7, #2
 8001cdc:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001cde:	f7ff f9a1 	bl	8001024 <HAL_GetTick>
 8001ce2:	4680      	mov	r8, r0
 8001ce4:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce8:	6822      	ldr	r2, [r4, #0]
 8001cea:	fa97 f3a7 	rbit	r3, r7
 8001cee:	fab3 f383 	clz	r3, r3
 8001cf2:	f003 031f 	and.w	r3, r3, #31
 8001cf6:	fa06 f303 	lsl.w	r3, r6, r3
 8001cfa:	4213      	tst	r3, r2
 8001cfc:	d1d4      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x174>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cfe:	f7ff f991 	bl	8001024 <HAL_GetTick>
 8001d02:	eba0 0008 	sub.w	r0, r0, r8
 8001d06:	2802      	cmp	r0, #2
 8001d08:	d9ec      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x1b0>
 8001d0a:	e774      	b.n	8001bf6 <HAL_RCC_OscConfig+0xc2>
 8001d0c:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8001d10:	fab3 f383 	clz	r3, r3
 8001d14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	2702      	movs	r7, #2
 8001d20:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d22:	f7ff f97f 	bl	8001024 <HAL_GetTick>
 8001d26:	4680      	mov	r8, r0
 8001d28:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2c:	6822      	ldr	r2, [r4, #0]
 8001d2e:	fa97 f3a7 	rbit	r3, r7
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	f003 031f 	and.w	r3, r3, #31
 8001d3a:	fa06 f303 	lsl.w	r3, r6, r3
 8001d3e:	4213      	tst	r3, r2
 8001d40:	f43f af05 	beq.w	8001b4e <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d44:	f7ff f96e 	bl	8001024 <HAL_GetTick>
 8001d48:	eba0 0008 	sub.w	r0, r0, r8
 8001d4c:	2802      	cmp	r0, #2
 8001d4e:	d9eb      	bls.n	8001d28 <HAL_RCC_OscConfig+0x1f4>
 8001d50:	e751      	b.n	8001bf6 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d52:	696a      	ldr	r2, [r5, #20]
 8001d54:	4e43      	ldr	r6, [pc, #268]	; (8001e64 <HAL_RCC_OscConfig+0x330>)
 8001d56:	4944      	ldr	r1, [pc, #272]	; (8001e68 <HAL_RCC_OscConfig+0x334>)
 8001d58:	2401      	movs	r4, #1
 8001d5a:	b31a      	cbz	r2, 8001da4 <HAL_RCC_OscConfig+0x270>
 8001d5c:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8001d60:	fab3 f383 	clz	r3, r3
 8001d64:	440b      	add	r3, r1
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	2702      	movs	r7, #2
 8001d6a:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8001d6c:	f7ff f95a 	bl	8001024 <HAL_GetTick>
 8001d70:	4680      	mov	r8, r0
 8001d72:	fa97 f3a7 	rbit	r3, r7
 8001d76:	fa97 f3a7 	rbit	r3, r7
 8001d7a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001d80:	fa97 f3a7 	rbit	r3, r7
 8001d84:	fab3 f383 	clz	r3, r3
 8001d88:	f003 031f 	and.w	r3, r3, #31
 8001d8c:	fa04 f303 	lsl.w	r3, r4, r3
 8001d90:	4213      	tst	r3, r2
 8001d92:	f47f aee0 	bne.w	8001b56 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d96:	f7ff f945 	bl	8001024 <HAL_GetTick>
 8001d9a:	eba0 0008 	sub.w	r0, r0, r8
 8001d9e:	2802      	cmp	r0, #2
 8001da0:	d9e7      	bls.n	8001d72 <HAL_RCC_OscConfig+0x23e>
 8001da2:	e728      	b.n	8001bf6 <HAL_RCC_OscConfig+0xc2>
 8001da4:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001da8:	fab3 f383 	clz	r3, r3
 8001dac:	440b      	add	r3, r1
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	2702      	movs	r7, #2
 8001db2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001db4:	f7ff f936 	bl	8001024 <HAL_GetTick>
 8001db8:	4680      	mov	r8, r0
 8001dba:	fa97 f3a7 	rbit	r3, r7
 8001dbe:	fa97 f3a7 	rbit	r3, r7
 8001dc2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc6:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001dc8:	fa97 f3a7 	rbit	r3, r7
 8001dcc:	fab3 f383 	clz	r3, r3
 8001dd0:	f003 031f 	and.w	r3, r3, #31
 8001dd4:	fa04 f303 	lsl.w	r3, r4, r3
 8001dd8:	4213      	tst	r3, r2
 8001dda:	f43f aebc 	beq.w	8001b56 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dde:	f7ff f921 	bl	8001024 <HAL_GetTick>
 8001de2:	eba0 0008 	sub.w	r0, r0, r8
 8001de6:	2802      	cmp	r0, #2
 8001de8:	d9e7      	bls.n	8001dba <HAL_RCC_OscConfig+0x286>
 8001dea:	e704      	b.n	8001bf6 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dec:	4c1d      	ldr	r4, [pc, #116]	; (8001e64 <HAL_RCC_OscConfig+0x330>)
 8001dee:	69e3      	ldr	r3, [r4, #28]
 8001df0:	00d9      	lsls	r1, r3, #3
 8001df2:	d434      	bmi.n	8001e5e <HAL_RCC_OscConfig+0x32a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df4:	69e3      	ldr	r3, [r4, #28]
 8001df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	61e3      	str	r3, [r4, #28]
 8001dfc:	69e3      	ldr	r3, [r4, #28]
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	9301      	str	r3, [sp, #4]
 8001e04:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001e06:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e08:	4f18      	ldr	r7, [pc, #96]	; (8001e6c <HAL_RCC_OscConfig+0x338>)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	05da      	lsls	r2, r3, #23
 8001e0e:	d52f      	bpl.n	8001e70 <HAL_RCC_OscConfig+0x33c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e10:	68ab      	ldr	r3, [r5, #8]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d13d      	bne.n	8001e92 <HAL_RCC_OscConfig+0x35e>
 8001e16:	6a23      	ldr	r3, [r4, #32]
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001e1e:	f7ff f901 	bl	8001024 <HAL_GetTick>
 8001e22:	2702      	movs	r7, #2
 8001e24:	4682      	mov	sl, r0
 8001e26:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e28:	f04f 0801 	mov.w	r8, #1
 8001e2c:	fa97 f3a7 	rbit	r3, r7
 8001e30:	fa97 f3a7 	rbit	r3, r7
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d06c      	beq.n	8001f12 <HAL_RCC_OscConfig+0x3de>
 8001e38:	6a22      	ldr	r2, [r4, #32]
 8001e3a:	fa99 f3a9 	rbit	r3, r9
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	fa08 f303 	lsl.w	r3, r8, r3
 8001e4a:	4213      	tst	r3, r2
 8001e4c:	d058      	beq.n	8001f00 <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 8001e4e:	2e00      	cmp	r6, #0
 8001e50:	f43f ae85 	beq.w	8001b5e <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e54:	69e3      	ldr	r3, [r4, #28]
 8001e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	61e3      	str	r3, [r4, #28]
 8001e5c:	e67f      	b.n	8001b5e <HAL_RCC_OscConfig+0x2a>
    FlagStatus       pwrclkchanged = RESET;
 8001e5e:	2600      	movs	r6, #0
 8001e60:	e7d2      	b.n	8001e08 <HAL_RCC_OscConfig+0x2d4>
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000
 8001e68:	10908120 	.word	0x10908120
 8001e6c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e76:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001e78:	f7ff f8d4 	bl	8001024 <HAL_GetTick>
 8001e7c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	05db      	lsls	r3, r3, #23
 8001e82:	d4c5      	bmi.n	8001e10 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e84:	f7ff f8ce 	bl	8001024 <HAL_GetTick>
 8001e88:	eba0 0008 	sub.w	r0, r0, r8
 8001e8c:	2864      	cmp	r0, #100	; 0x64
 8001e8e:	d9f6      	bls.n	8001e7e <HAL_RCC_OscConfig+0x34a>
 8001e90:	e6b1      	b.n	8001bf6 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e92:	bb3b      	cbnz	r3, 8001ee4 <HAL_RCC_OscConfig+0x3b0>
 8001e94:	6a23      	ldr	r3, [r4, #32]
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	6223      	str	r3, [r4, #32]
 8001e9c:	6a23      	ldr	r3, [r4, #32]
 8001e9e:	f023 0304 	bic.w	r3, r3, #4
 8001ea2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001ea4:	f7ff f8be 	bl	8001024 <HAL_GetTick>
 8001ea8:	2702      	movs	r7, #2
 8001eaa:	4682      	mov	sl, r0
 8001eac:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eae:	f04f 0801 	mov.w	r8, #1
 8001eb2:	fa97 f3a7 	rbit	r3, r7
 8001eb6:	fa97 f3a7 	rbit	r3, r7
 8001eba:	b373      	cbz	r3, 8001f1a <HAL_RCC_OscConfig+0x3e6>
 8001ebc:	6a22      	ldr	r2, [r4, #32]
 8001ebe:	fa99 f3a9 	rbit	r3, r9
 8001ec2:	fab3 f383 	clz	r3, r3
 8001ec6:	f003 031f 	and.w	r3, r3, #31
 8001eca:	fa08 f303 	lsl.w	r3, r8, r3
 8001ece:	4213      	tst	r3, r2
 8001ed0:	d0bd      	beq.n	8001e4e <HAL_RCC_OscConfig+0x31a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed2:	f7ff f8a7 	bl	8001024 <HAL_GetTick>
 8001ed6:	f241 3388 	movw	r3, #5000	; 0x1388
 8001eda:	eba0 000a 	sub.w	r0, r0, sl
 8001ede:	4298      	cmp	r0, r3
 8001ee0:	d9e7      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x37e>
 8001ee2:	e688      	b.n	8001bf6 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee4:	2b05      	cmp	r3, #5
 8001ee6:	6a23      	ldr	r3, [r4, #32]
 8001ee8:	d103      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x3be>
 8001eea:	f043 0304 	orr.w	r3, r3, #4
 8001eee:	6223      	str	r3, [r4, #32]
 8001ef0:	e791      	b.n	8001e16 <HAL_RCC_OscConfig+0x2e2>
 8001ef2:	f023 0301 	bic.w	r3, r3, #1
 8001ef6:	6223      	str	r3, [r4, #32]
 8001ef8:	6a23      	ldr	r3, [r4, #32]
 8001efa:	f023 0304 	bic.w	r3, r3, #4
 8001efe:	e78d      	b.n	8001e1c <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f00:	f7ff f890 	bl	8001024 <HAL_GetTick>
 8001f04:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f08:	eba0 000a 	sub.w	r0, r0, sl
 8001f0c:	4298      	cmp	r0, r3
 8001f0e:	d98d      	bls.n	8001e2c <HAL_RCC_OscConfig+0x2f8>
 8001f10:	e671      	b.n	8001bf6 <HAL_RCC_OscConfig+0xc2>
 8001f12:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f18:	e78f      	b.n	8001e3a <HAL_RCC_OscConfig+0x306>
 8001f1a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f20:	e7cd      	b.n	8001ebe <HAL_RCC_OscConfig+0x38a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f22:	4a51      	ldr	r2, [pc, #324]	; (8002068 <HAL_RCC_OscConfig+0x534>)
 8001f24:	6853      	ldr	r3, [r2, #4]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	4614      	mov	r4, r2
 8001f2e:	f000 8082 	beq.w	8002036 <HAL_RCC_OscConfig+0x502>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f32:	2802      	cmp	r0, #2
 8001f34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f38:	d158      	bne.n	8001fec <HAL_RCC_OscConfig+0x4b8>
 8001f3a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001f3e:	fab3 f383 	clz	r3, r3
 8001f42:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f46:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f50:	f7ff f868 	bl	8001024 <HAL_GetTick>
 8001f54:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8001f58:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5a:	2601      	movs	r6, #1
 8001f5c:	fa97 f3a7 	rbit	r3, r7
 8001f60:	6822      	ldr	r2, [r4, #0]
 8001f62:	fa97 f3a7 	rbit	r3, r7
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	fa06 f303 	lsl.w	r3, r6, r3
 8001f72:	4213      	tst	r3, r2
 8001f74:	d133      	bne.n	8001fde <HAL_RCC_OscConfig+0x4aa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f78:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001f7a:	f023 030f 	bic.w	r3, r3, #15
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f82:	6862      	ldr	r2, [r4, #4]
 8001f84:	6a2b      	ldr	r3, [r5, #32]
 8001f86:	69e9      	ldr	r1, [r5, #28]
 8001f88:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	6063      	str	r3, [r4, #4]
 8001f92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f96:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fa2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001fac:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001fae:	f7ff f839 	bl	8001024 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fb2:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8001fb4:	4607      	mov	r7, r0
 8001fb6:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fba:	6822      	ldr	r2, [r4, #0]
 8001fbc:	fa95 f3a5 	rbit	r3, r5
 8001fc0:	fab3 f383 	clz	r3, r3
 8001fc4:	f003 031f 	and.w	r3, r3, #31
 8001fc8:	fa06 f303 	lsl.w	r3, r6, r3
 8001fcc:	4213      	tst	r3, r2
 8001fce:	f47f adca 	bne.w	8001b66 <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd2:	f7ff f827 	bl	8001024 <HAL_GetTick>
 8001fd6:	1bc0      	subs	r0, r0, r7
 8001fd8:	2802      	cmp	r0, #2
 8001fda:	d9ec      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x482>
 8001fdc:	e60b      	b.n	8001bf6 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fde:	f7ff f821 	bl	8001024 <HAL_GetTick>
 8001fe2:	eba0 0008 	sub.w	r0, r0, r8
 8001fe6:	2802      	cmp	r0, #2
 8001fe8:	d9b8      	bls.n	8001f5c <HAL_RCC_OscConfig+0x428>
 8001fea:	e604      	b.n	8001bf6 <HAL_RCC_OscConfig+0xc2>
 8001fec:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001ff0:	fab3 f383 	clz	r3, r3
 8001ff4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ff8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002002:	f7ff f80f 	bl	8001024 <HAL_GetTick>
 8002006:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800200a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200c:	2601      	movs	r6, #1
 800200e:	fa95 f3a5 	rbit	r3, r5
 8002012:	6822      	ldr	r2, [r4, #0]
 8002014:	fa95 f3a5 	rbit	r3, r5
 8002018:	fab3 f383 	clz	r3, r3
 800201c:	f003 031f 	and.w	r3, r3, #31
 8002020:	fa06 f303 	lsl.w	r3, r6, r3
 8002024:	4213      	tst	r3, r2
 8002026:	f43f ad9e 	beq.w	8001b66 <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800202a:	f7fe fffb 	bl	8001024 <HAL_GetTick>
 800202e:	1bc0      	subs	r0, r0, r7
 8002030:	2802      	cmp	r0, #2
 8002032:	d9ec      	bls.n	800200e <HAL_RCC_OscConfig+0x4da>
 8002034:	e5df      	b.n	8001bf6 <HAL_RCC_OscConfig+0xc2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002036:	2801      	cmp	r0, #1
 8002038:	f43f adde 	beq.w	8001bf8 <HAL_RCC_OscConfig+0xc4>
        pll_config = RCC->CFGR;
 800203c:	6853      	ldr	r3, [r2, #4]
        pll_config2 = RCC->CFGR2;
 800203e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002040:	69ea      	ldr	r2, [r5, #28]
 8002042:	f403 31c0 	and.w	r1, r3, #98304	; 0x18000
 8002046:	4291      	cmp	r1, r2
 8002048:	f47f ad78 	bne.w	8001b3c <HAL_RCC_OscConfig+0x8>
 800204c:	6a2a      	ldr	r2, [r5, #32]
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800204e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002052:	4293      	cmp	r3, r2
 8002054:	f47f ad72 	bne.w	8001b3c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002058:	6a6b      	ldr	r3, [r5, #36]	; 0x24
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800205a:	f000 000f 	and.w	r0, r0, #15
    return HAL_ERROR;
 800205e:	1ac0      	subs	r0, r0, r3
 8002060:	bf18      	it	ne
 8002062:	2001      	movne	r0, #1
 8002064:	e5c8      	b.n	8001bf8 <HAL_RCC_OscConfig+0xc4>
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000

0800206c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800206c:	4911      	ldr	r1, [pc, #68]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x48>)
 800206e:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002070:	f003 020c 	and.w	r2, r3, #12
 8002074:	2a08      	cmp	r2, #8
 8002076:	d11a      	bne.n	80020ae <HAL_RCC_GetSysClockFreq+0x42>
 8002078:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800207c:	fa92 f2a2 	rbit	r2, r2
 8002080:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002082:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002086:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002088:	fa90 f0a0 	rbit	r0, r0
 800208c:	fab0 f080 	clz	r0, r0
 8002090:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002094:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002098:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800209a:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800209c:	4a06      	ldr	r2, [pc, #24]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800209e:	4807      	ldr	r0, [pc, #28]	; (80020bc <HAL_RCC_GetSysClockFreq+0x50>)
 80020a0:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020a2:	4807      	ldr	r0, [pc, #28]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x54>)
 80020a4:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020a8:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020aa:	4348      	muls	r0, r1
 80020ac:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80020ae:	4804      	ldr	r0, [pc, #16]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000
 80020b8:	08009078 	.word	0x08009078
 80020bc:	08009088 	.word	0x08009088
 80020c0:	007a1200 	.word	0x007a1200

080020c4 <HAL_RCC_ClockConfig>:
{
 80020c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020c8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80020ca:	4604      	mov	r4, r0
 80020cc:	b910      	cbnz	r0, 80020d4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80020ce:	2001      	movs	r0, #1
 80020d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020d4:	4a4d      	ldr	r2, [pc, #308]	; (800220c <HAL_RCC_ClockConfig+0x148>)
 80020d6:	6813      	ldr	r3, [r2, #0]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	428b      	cmp	r3, r1
 80020de:	d32f      	bcc.n	8002140 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e0:	6822      	ldr	r2, [r4, #0]
 80020e2:	0791      	lsls	r1, r2, #30
 80020e4:	d437      	bmi.n	8002156 <HAL_RCC_ClockConfig+0x92>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e6:	07d2      	lsls	r2, r2, #31
 80020e8:	d43d      	bmi.n	8002166 <HAL_RCC_ClockConfig+0xa2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020ea:	4a48      	ldr	r2, [pc, #288]	; (800220c <HAL_RCC_ClockConfig+0x148>)
 80020ec:	6813      	ldr	r3, [r2, #0]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	429d      	cmp	r5, r3
 80020f4:	d376      	bcc.n	80021e4 <HAL_RCC_ClockConfig+0x120>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f6:	6822      	ldr	r2, [r4, #0]
 80020f8:	4d45      	ldr	r5, [pc, #276]	; (8002210 <HAL_RCC_ClockConfig+0x14c>)
 80020fa:	f012 0f04 	tst.w	r2, #4
 80020fe:	d17d      	bne.n	80021fc <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002100:	0713      	lsls	r3, r2, #28
 8002102:	d506      	bpl.n	8002112 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002104:	686b      	ldr	r3, [r5, #4]
 8002106:	6922      	ldr	r2, [r4, #16]
 8002108:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800210c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002110:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002112:	f7ff ffab 	bl	800206c <HAL_RCC_GetSysClockFreq>
 8002116:	686b      	ldr	r3, [r5, #4]
 8002118:	22f0      	movs	r2, #240	; 0xf0
 800211a:	fa92 f2a2 	rbit	r2, r2
 800211e:	fab2 f282 	clz	r2, r2
 8002122:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002126:	40d3      	lsrs	r3, r2
 8002128:	4a3a      	ldr	r2, [pc, #232]	; (8002214 <HAL_RCC_ClockConfig+0x150>)
 800212a:	5cd3      	ldrb	r3, [r2, r3]
 800212c:	40d8      	lsrs	r0, r3
 800212e:	4b3a      	ldr	r3, [pc, #232]	; (8002218 <HAL_RCC_ClockConfig+0x154>)
 8002130:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002132:	4b3a      	ldr	r3, [pc, #232]	; (800221c <HAL_RCC_ClockConfig+0x158>)
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	f7fe ff33 	bl	8000fa0 <HAL_InitTick>
  return HAL_OK;
 800213a:	2000      	movs	r0, #0
 800213c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002140:	6813      	ldr	r3, [r2, #0]
 8002142:	f023 0307 	bic.w	r3, r3, #7
 8002146:	430b      	orrs	r3, r1
 8002148:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800214a:	6813      	ldr	r3, [r2, #0]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	4299      	cmp	r1, r3
 8002152:	d1bc      	bne.n	80020ce <HAL_RCC_ClockConfig+0xa>
 8002154:	e7c4      	b.n	80020e0 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002156:	492e      	ldr	r1, [pc, #184]	; (8002210 <HAL_RCC_ClockConfig+0x14c>)
 8002158:	68a0      	ldr	r0, [r4, #8]
 800215a:	684b      	ldr	r3, [r1, #4]
 800215c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002160:	4303      	orrs	r3, r0
 8002162:	604b      	str	r3, [r1, #4]
 8002164:	e7bf      	b.n	80020e6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002166:	6862      	ldr	r2, [r4, #4]
 8002168:	4e29      	ldr	r6, [pc, #164]	; (8002210 <HAL_RCC_ClockConfig+0x14c>)
 800216a:	2a01      	cmp	r2, #1
 800216c:	d127      	bne.n	80021be <HAL_RCC_ClockConfig+0xfa>
 800216e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002172:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	6831      	ldr	r1, [r6, #0]
 8002178:	fa93 f3a3 	rbit	r3, r3
 800217c:	fab3 f383 	clz	r3, r3
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218a:	d0a0      	beq.n	80020ce <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800218c:	6873      	ldr	r3, [r6, #4]
 800218e:	f023 0303 	bic.w	r3, r3, #3
 8002192:	431a      	orrs	r2, r3
 8002194:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8002196:	f7fe ff45 	bl	8001024 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800219a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800219e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a0:	6873      	ldr	r3, [r6, #4]
 80021a2:	6862      	ldr	r2, [r4, #4]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80021ac:	d09d      	beq.n	80020ea <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ae:	f7fe ff39 	bl	8001024 <HAL_GetTick>
 80021b2:	1bc0      	subs	r0, r0, r7
 80021b4:	4540      	cmp	r0, r8
 80021b6:	d9f3      	bls.n	80021a0 <HAL_RCC_ClockConfig+0xdc>
        return HAL_TIMEOUT;
 80021b8:	2003      	movs	r0, #3
}
 80021ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021be:	2a02      	cmp	r2, #2
 80021c0:	bf0c      	ite	eq
 80021c2:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80021c6:	2302      	movne	r3, #2
 80021c8:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021cc:	6830      	ldr	r0, [r6, #0]
 80021ce:	fa93 f3a3 	rbit	r3, r3
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	f003 031f 	and.w	r3, r3, #31
 80021da:	2101      	movs	r1, #1
 80021dc:	fa01 f303 	lsl.w	r3, r1, r3
 80021e0:	4203      	tst	r3, r0
 80021e2:	e7d2      	b.n	800218a <HAL_RCC_ClockConfig+0xc6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e4:	6813      	ldr	r3, [r2, #0]
 80021e6:	f023 0307 	bic.w	r3, r3, #7
 80021ea:	432b      	orrs	r3, r5
 80021ec:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ee:	6813      	ldr	r3, [r2, #0]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	429d      	cmp	r5, r3
 80021f6:	f47f af6a 	bne.w	80020ce <HAL_RCC_ClockConfig+0xa>
 80021fa:	e77c      	b.n	80020f6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021fc:	686b      	ldr	r3, [r5, #4]
 80021fe:	68e1      	ldr	r1, [r4, #12]
 8002200:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002204:	430b      	orrs	r3, r1
 8002206:	606b      	str	r3, [r5, #4]
 8002208:	e77a      	b.n	8002100 <HAL_RCC_ClockConfig+0x3c>
 800220a:	bf00      	nop
 800220c:	40022000 	.word	0x40022000
 8002210:	40021000 	.word	0x40021000
 8002214:	08009b84 	.word	0x08009b84
 8002218:	2000010c 	.word	0x2000010c
 800221c:	20000004 	.word	0x20000004

08002220 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002220:	4b08      	ldr	r3, [pc, #32]	; (8002244 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002222:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	fa92 f2a2 	rbit	r2, r2
 800222c:	fab2 f282 	clz	r2, r2
 8002230:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002234:	40d3      	lsrs	r3, r2
 8002236:	4a04      	ldr	r2, [pc, #16]	; (8002248 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002238:	5cd3      	ldrb	r3, [r2, r3]
 800223a:	4a04      	ldr	r2, [pc, #16]	; (800224c <HAL_RCC_GetPCLK1Freq+0x2c>)
 800223c:	6810      	ldr	r0, [r2, #0]
}    
 800223e:	40d8      	lsrs	r0, r3
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000
 8002248:	08009b94 	.word	0x08009b94
 800224c:	2000010c 	.word	0x2000010c

08002250 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002252:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	fa92 f2a2 	rbit	r2, r2
 800225c:	fab2 f282 	clz	r2, r2
 8002260:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002264:	40d3      	lsrs	r3, r2
 8002266:	4a04      	ldr	r2, [pc, #16]	; (8002278 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002268:	5cd3      	ldrb	r3, [r2, r3]
 800226a:	4a04      	ldr	r2, [pc, #16]	; (800227c <HAL_RCC_GetPCLK2Freq+0x2c>)
 800226c:	6810      	ldr	r0, [r2, #0]
} 
 800226e:	40d8      	lsrs	r0, r3
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000
 8002278:	08009b94 	.word	0x08009b94
 800227c:	2000010c 	.word	0x2000010c

08002280 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002280:	6803      	ldr	r3, [r0, #0]
{
 8002282:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002286:	03df      	lsls	r7, r3, #15
{
 8002288:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800228a:	d523      	bpl.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228c:	4d9b      	ldr	r5, [pc, #620]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800228e:	69eb      	ldr	r3, [r5, #28]
 8002290:	00de      	lsls	r6, r3, #3
 8002292:	f100 80d7 	bmi.w	8002444 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002296:	69eb      	ldr	r3, [r5, #28]
 8002298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229c:	61eb      	str	r3, [r5, #28]
 800229e:	69eb      	ldr	r3, [r5, #28]
 80022a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a4:	9301      	str	r3, [sp, #4]
 80022a6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80022a8:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022aa:	4f95      	ldr	r7, [pc, #596]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	05d8      	lsls	r0, r3, #23
 80022b0:	f140 80ca 	bpl.w	8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022b4:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022b6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80022ba:	f040 80da 	bne.w	8002472 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80022be:	6a2b      	ldr	r3, [r5, #32]
 80022c0:	6862      	ldr	r2, [r4, #4]
 80022c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c6:	4313      	orrs	r3, r2
 80022c8:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022ca:	b11e      	cbz	r6, 80022d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022cc:	69eb      	ldr	r3, [r5, #28]
 80022ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d2:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022d4:	6820      	ldr	r0, [r4, #0]
 80022d6:	07c3      	lsls	r3, r0, #31
 80022d8:	d506      	bpl.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022da:	4a88      	ldr	r2, [pc, #544]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80022dc:	68a1      	ldr	r1, [r4, #8]
 80022de:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022e0:	f023 0303 	bic.w	r3, r3, #3
 80022e4:	430b      	orrs	r3, r1
 80022e6:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022e8:	0787      	lsls	r7, r0, #30
 80022ea:	d506      	bpl.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022ec:	4a83      	ldr	r2, [pc, #524]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80022ee:	68e1      	ldr	r1, [r4, #12]
 80022f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022f2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80022f6:	430b      	orrs	r3, r1
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022fa:	0746      	lsls	r6, r0, #29
 80022fc:	d506      	bpl.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022fe:	4a7f      	ldr	r2, [pc, #508]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002300:	6921      	ldr	r1, [r4, #16]
 8002302:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002304:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002308:	430b      	orrs	r3, r1
 800230a:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800230c:	0685      	lsls	r5, r0, #26
 800230e:	d506      	bpl.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002310:	4a7a      	ldr	r2, [pc, #488]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002312:	69e1      	ldr	r1, [r4, #28]
 8002314:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002316:	f023 0310 	bic.w	r3, r3, #16
 800231a:	430b      	orrs	r3, r1
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800231e:	0381      	lsls	r1, r0, #14
 8002320:	d506      	bpl.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002322:	4a76      	ldr	r2, [pc, #472]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002324:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002326:	6853      	ldr	r3, [r2, #4]
 8002328:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800232c:	430b      	orrs	r3, r1
 800232e:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002330:	0642      	lsls	r2, r0, #25
 8002332:	d506      	bpl.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002334:	4a71      	ldr	r2, [pc, #452]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002336:	6a21      	ldr	r1, [r4, #32]
 8002338:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800233a:	f023 0320 	bic.w	r3, r3, #32
 800233e:	430b      	orrs	r3, r1
 8002340:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002342:	0343      	lsls	r3, r0, #13
 8002344:	d506      	bpl.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002346:	4a6d      	ldr	r2, [pc, #436]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002348:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800234a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800234c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002350:	430b      	orrs	r3, r1
 8002352:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002354:	0707      	lsls	r7, r0, #28
 8002356:	d506      	bpl.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002358:	4a68      	ldr	r2, [pc, #416]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800235a:	6961      	ldr	r1, [r4, #20]
 800235c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800235e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002362:	430b      	orrs	r3, r1
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002366:	06c6      	lsls	r6, r0, #27
 8002368:	d506      	bpl.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800236a:	4a64      	ldr	r2, [pc, #400]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800236c:	69a1      	ldr	r1, [r4, #24]
 800236e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002370:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002374:	430b      	orrs	r3, r1
 8002376:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002378:	0585      	lsls	r5, r0, #22
 800237a:	d506      	bpl.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800237c:	4a5f      	ldr	r2, [pc, #380]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800237e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002380:	6853      	ldr	r3, [r2, #4]
 8002382:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002386:	430b      	orrs	r3, r1
 8002388:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800238a:	0601      	lsls	r1, r0, #24
 800238c:	d506      	bpl.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800238e:	4a5b      	ldr	r2, [pc, #364]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002390:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002392:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002394:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002398:	430b      	orrs	r3, r1
 800239a:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800239c:	05c2      	lsls	r2, r0, #23
 800239e:	d506      	bpl.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80023a0:	4a56      	ldr	r2, [pc, #344]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80023a2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80023a4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80023a6:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 80023aa:	430b      	orrs	r3, r1
 80023ac:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80023ae:	04c3      	lsls	r3, r0, #19
 80023b0:	d506      	bpl.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80023b2:	4a52      	ldr	r2, [pc, #328]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80023b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80023b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023bc:	430b      	orrs	r3, r1
 80023be:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80023c0:	0487      	lsls	r7, r0, #18
 80023c2:	d506      	bpl.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80023c4:	4a4d      	ldr	r2, [pc, #308]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80023c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80023c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023ce:	430b      	orrs	r3, r1
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80023d2:	02c6      	lsls	r6, r0, #11
 80023d4:	d506      	bpl.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80023d6:	4a49      	ldr	r2, [pc, #292]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80023d8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80023da:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023e0:	430b      	orrs	r3, r1
 80023e2:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80023e4:	0285      	lsls	r5, r0, #10
 80023e6:	d506      	bpl.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80023e8:	4a44      	ldr	r2, [pc, #272]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80023ea:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80023ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023ee:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80023f2:	430b      	orrs	r3, r1
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80023f6:	0241      	lsls	r1, r0, #9
 80023f8:	d506      	bpl.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80023fa:	4a40      	ldr	r2, [pc, #256]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80023fc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80023fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002400:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002404:	430b      	orrs	r3, r1
 8002406:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002408:	0202      	lsls	r2, r0, #8
 800240a:	d506      	bpl.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800240c:	4a3b      	ldr	r2, [pc, #236]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800240e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002410:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002412:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002416:	430b      	orrs	r3, r1
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800241a:	01c3      	lsls	r3, r0, #7
 800241c:	d506      	bpl.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800241e:	4a37      	ldr	r2, [pc, #220]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002420:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002422:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002424:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002428:	430b      	orrs	r3, r1
 800242a:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800242c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8002430:	d01c      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002432:	4a32      	ldr	r2, [pc, #200]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002434:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002436:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002438:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800243c:	430b      	orrs	r3, r1
 800243e:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002440:	2000      	movs	r0, #0
 8002442:	e013      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 8002444:	2600      	movs	r6, #0
 8002446:	e730      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002450:	f7fe fde8 	bl	8001024 <HAL_GetTick>
 8002454:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	05d9      	lsls	r1, r3, #23
 800245a:	f53f af2b 	bmi.w	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245e:	f7fe fde1 	bl	8001024 <HAL_GetTick>
 8002462:	eba0 0008 	sub.w	r0, r0, r8
 8002466:	2864      	cmp	r0, #100	; 0x64
 8002468:	d9f5      	bls.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 800246a:	2003      	movs	r0, #3
}
 800246c:	b002      	add	sp, #8
 800246e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002472:	6862      	ldr	r2, [r4, #4]
 8002474:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002478:	4293      	cmp	r3, r2
 800247a:	f43f af20 	beq.w	80022be <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800247e:	6a29      	ldr	r1, [r5, #32]
 8002480:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002484:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8002488:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 800248c:	f8df e074 	ldr.w	lr, [pc, #116]	; 8002504 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8002490:	fab2 f282 	clz	r2, r2
 8002494:	4472      	add	r2, lr
 8002496:	0092      	lsls	r2, r2, #2
 8002498:	2701      	movs	r7, #1
 800249a:	6017      	str	r7, [r2, #0]
 800249c:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024a0:	fab3 f383 	clz	r3, r3
 80024a4:	4473      	add	r3, lr
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024ac:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 80024ae:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024b0:	f57f af05 	bpl.w	80022be <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 80024b4:	f7fe fdb6 	bl	8001024 <HAL_GetTick>
 80024b8:	f04f 0802 	mov.w	r8, #2
 80024bc:	4682      	mov	sl, r0
 80024be:	46c1      	mov	r9, r8
 80024c0:	fa98 f3a8 	rbit	r3, r8
 80024c4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c8:	b1a3      	cbz	r3, 80024f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80024ca:	6a2a      	ldr	r2, [r5, #32]
 80024cc:	fa99 f3a9 	rbit	r3, r9
 80024d0:	fab3 f383 	clz	r3, r3
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	fa07 f303 	lsl.w	r3, r7, r3
 80024dc:	4213      	tst	r3, r2
 80024de:	f47f aeee 	bne.w	80022be <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e2:	f7fe fd9f 	bl	8001024 <HAL_GetTick>
 80024e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80024ea:	eba0 000a 	sub.w	r0, r0, sl
 80024ee:	4298      	cmp	r0, r3
 80024f0:	d9e6      	bls.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80024f2:	e7ba      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80024f4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80024fa:	e7e7      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x24c>
 80024fc:	40021000 	.word	0x40021000
 8002500:	40007000 	.word	0x40007000
 8002504:	10908100 	.word	0x10908100

08002508 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002508:	6803      	ldr	r3, [r0, #0]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	f042 0201 	orr.w	r2, r2, #1
 8002510:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002512:	6899      	ldr	r1, [r3, #8]
 8002514:	4a06      	ldr	r2, [pc, #24]	; (8002530 <HAL_TIM_Base_Start_IT+0x28>)
 8002516:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002518:	2a06      	cmp	r2, #6
 800251a:	d006      	beq.n	800252a <HAL_TIM_Base_Start_IT+0x22>
 800251c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 8002520:	bf1e      	ittt	ne
 8002522:	681a      	ldrne	r2, [r3, #0]
 8002524:	f042 0201 	orrne.w	r2, r2, #1
 8002528:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800252a:	2000      	movs	r0, #0
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	00010007 	.word	0x00010007

08002534 <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002534:	6803      	ldr	r3, [r0, #0]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	f022 0201 	bic.w	r2, r2, #1
 800253c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800253e:	6a19      	ldr	r1, [r3, #32]
 8002540:	f241 1211 	movw	r2, #4369	; 0x1111
 8002544:	4211      	tst	r1, r2
 8002546:	d108      	bne.n	800255a <HAL_TIM_Base_Stop_IT+0x26>
 8002548:	6a19      	ldr	r1, [r3, #32]
 800254a:	f240 4244 	movw	r2, #1092	; 0x444
 800254e:	4211      	tst	r1, r2
 8002550:	bf02      	ittt	eq
 8002552:	681a      	ldreq	r2, [r3, #0]
 8002554:	f022 0201 	biceq.w	r2, r2, #1
 8002558:	601a      	streq	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 800255a:	2000      	movs	r0, #0
 800255c:	4770      	bx	lr

0800255e <HAL_TIM_OC_DelayElapsedCallback>:
 800255e:	4770      	bx	lr

08002560 <HAL_TIM_IC_CaptureCallback>:
 8002560:	4770      	bx	lr

08002562 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002562:	4770      	bx	lr

08002564 <HAL_TIM_TriggerCallback>:
 8002564:	4770      	bx	lr

08002566 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002566:	6803      	ldr	r3, [r0, #0]
 8002568:	691a      	ldr	r2, [r3, #16]
 800256a:	0791      	lsls	r1, r2, #30
{
 800256c:	b510      	push	{r4, lr}
 800256e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002570:	d50f      	bpl.n	8002592 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	0792      	lsls	r2, r2, #30
 8002576:	d50c      	bpl.n	8002592 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002578:	f06f 0202 	mvn.w	r2, #2
 800257c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800257e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002580:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002582:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002584:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002586:	f000 8085 	beq.w	8002694 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800258a:	f7ff ffe9 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258e:	2300      	movs	r3, #0
 8002590:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	691a      	ldr	r2, [r3, #16]
 8002596:	0752      	lsls	r2, r2, #29
 8002598:	d510      	bpl.n	80025bc <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	0750      	lsls	r0, r2, #29
 800259e:	d50d      	bpl.n	80025bc <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025a0:	f06f 0204 	mvn.w	r2, #4
 80025a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025a6:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025a8:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025aa:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ae:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025b0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025b2:	d075      	beq.n	80026a0 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80025b4:	f7ff ffd4 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b8:	2300      	movs	r3, #0
 80025ba:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	0711      	lsls	r1, r2, #28
 80025c2:	d50f      	bpl.n	80025e4 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	0712      	lsls	r2, r2, #28
 80025c8:	d50c      	bpl.n	80025e4 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025ca:	f06f 0208 	mvn.w	r2, #8
 80025ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025d0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025d2:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025d4:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025d6:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025d8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025da:	d067      	beq.n	80026ac <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80025dc:	f7ff ffc0 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e0:	2300      	movs	r3, #0
 80025e2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025e4:	6823      	ldr	r3, [r4, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	06d0      	lsls	r0, r2, #27
 80025ea:	d510      	bpl.n	800260e <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	06d1      	lsls	r1, r2, #27
 80025f0:	d50d      	bpl.n	800260e <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025f2:	f06f 0210 	mvn.w	r2, #16
 80025f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025f8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025fa:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025fc:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002600:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002602:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002604:	d058      	beq.n	80026b8 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8002606:	f7ff ffab 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260a:	2300      	movs	r3, #0
 800260c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	691a      	ldr	r2, [r3, #16]
 8002612:	07d2      	lsls	r2, r2, #31
 8002614:	d508      	bpl.n	8002628 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	07d0      	lsls	r0, r2, #31
 800261a:	d505      	bpl.n	8002628 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800261c:	f06f 0201 	mvn.w	r2, #1
 8002620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002622:	4620      	mov	r0, r4
 8002624:	f001 fdd4 	bl	80041d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002628:	6823      	ldr	r3, [r4, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	0611      	lsls	r1, r2, #24
 800262e:	d508      	bpl.n	8002642 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	0612      	lsls	r2, r2, #24
 8002634:	d505      	bpl.n	8002642 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002636:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800263a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800263c:	4620      	mov	r0, r4
 800263e:	f000 f914 	bl	800286a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002642:	6823      	ldr	r3, [r4, #0]
 8002644:	691a      	ldr	r2, [r3, #16]
 8002646:	05d0      	lsls	r0, r2, #23
 8002648:	d508      	bpl.n	800265c <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	0611      	lsls	r1, r2, #24
 800264e:	d505      	bpl.n	800265c <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002650:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002656:	4620      	mov	r0, r4
 8002658:	f000 f908 	bl	800286c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800265c:	6823      	ldr	r3, [r4, #0]
 800265e:	691a      	ldr	r2, [r3, #16]
 8002660:	0652      	lsls	r2, r2, #25
 8002662:	d508      	bpl.n	8002676 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	0650      	lsls	r0, r2, #25
 8002668:	d505      	bpl.n	8002676 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800266a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800266e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002670:	4620      	mov	r0, r4
 8002672:	f7ff ff77 	bl	8002564 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	0691      	lsls	r1, r2, #26
 800267c:	d522      	bpl.n	80026c4 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	0692      	lsls	r2, r2, #26
 8002682:	d51f      	bpl.n	80026c4 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002684:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002688:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800268a:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800268c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002690:	f000 b8ea 	b.w	8002868 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002694:	f7ff ff63 	bl	800255e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002698:	4620      	mov	r0, r4
 800269a:	f7ff ff62 	bl	8002562 <HAL_TIM_PWM_PulseFinishedCallback>
 800269e:	e776      	b.n	800258e <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a0:	f7ff ff5d 	bl	800255e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a4:	4620      	mov	r0, r4
 80026a6:	f7ff ff5c 	bl	8002562 <HAL_TIM_PWM_PulseFinishedCallback>
 80026aa:	e785      	b.n	80025b8 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ac:	f7ff ff57 	bl	800255e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b0:	4620      	mov	r0, r4
 80026b2:	f7ff ff56 	bl	8002562 <HAL_TIM_PWM_PulseFinishedCallback>
 80026b6:	e793      	b.n	80025e0 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b8:	f7ff ff51 	bl	800255e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026bc:	4620      	mov	r0, r4
 80026be:	f7ff ff50 	bl	8002562 <HAL_TIM_PWM_PulseFinishedCallback>
 80026c2:	e7a2      	b.n	800260a <HAL_TIM_IRQHandler+0xa4>
 80026c4:	bd10      	pop	{r4, pc}
	...

080026c8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026c8:	4a32      	ldr	r2, [pc, #200]	; (8002794 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 80026ca:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026cc:	4290      	cmp	r0, r2
 80026ce:	d012      	beq.n	80026f6 <TIM_Base_SetConfig+0x2e>
 80026d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80026d4:	d00f      	beq.n	80026f6 <TIM_Base_SetConfig+0x2e>
 80026d6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80026da:	4290      	cmp	r0, r2
 80026dc:	d00b      	beq.n	80026f6 <TIM_Base_SetConfig+0x2e>
 80026de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026e2:	4290      	cmp	r0, r2
 80026e4:	d007      	beq.n	80026f6 <TIM_Base_SetConfig+0x2e>
 80026e6:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80026ea:	4290      	cmp	r0, r2
 80026ec:	d003      	beq.n	80026f6 <TIM_Base_SetConfig+0x2e>
 80026ee:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80026f2:	4290      	cmp	r0, r2
 80026f4:	d115      	bne.n	8002722 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80026f6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80026fc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026fe:	4a25      	ldr	r2, [pc, #148]	; (8002794 <TIM_Base_SetConfig+0xcc>)
 8002700:	4290      	cmp	r0, r2
 8002702:	d01d      	beq.n	8002740 <TIM_Base_SetConfig+0x78>
 8002704:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002708:	d01a      	beq.n	8002740 <TIM_Base_SetConfig+0x78>
 800270a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800270e:	4290      	cmp	r0, r2
 8002710:	d016      	beq.n	8002740 <TIM_Base_SetConfig+0x78>
 8002712:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002716:	4290      	cmp	r0, r2
 8002718:	d012      	beq.n	8002740 <TIM_Base_SetConfig+0x78>
 800271a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800271e:	4290      	cmp	r0, r2
 8002720:	d00e      	beq.n	8002740 <TIM_Base_SetConfig+0x78>
 8002722:	4a1d      	ldr	r2, [pc, #116]	; (8002798 <TIM_Base_SetConfig+0xd0>)
 8002724:	4290      	cmp	r0, r2
 8002726:	d00b      	beq.n	8002740 <TIM_Base_SetConfig+0x78>
 8002728:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800272c:	4290      	cmp	r0, r2
 800272e:	d007      	beq.n	8002740 <TIM_Base_SetConfig+0x78>
 8002730:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002734:	4290      	cmp	r0, r2
 8002736:	d003      	beq.n	8002740 <TIM_Base_SetConfig+0x78>
 8002738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800273c:	4290      	cmp	r0, r2
 800273e:	d103      	bne.n	8002748 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002740:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002746:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002748:	694a      	ldr	r2, [r1, #20]
 800274a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800274e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002750:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002752:	688b      	ldr	r3, [r1, #8]
 8002754:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002756:	680b      	ldr	r3, [r1, #0]
 8002758:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800275a:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <TIM_Base_SetConfig+0xcc>)
 800275c:	4298      	cmp	r0, r3
 800275e:	d013      	beq.n	8002788 <TIM_Base_SetConfig+0xc0>
 8002760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002764:	4298      	cmp	r0, r3
 8002766:	d00f      	beq.n	8002788 <TIM_Base_SetConfig+0xc0>
 8002768:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800276c:	4298      	cmp	r0, r3
 800276e:	d00b      	beq.n	8002788 <TIM_Base_SetConfig+0xc0>
 8002770:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002774:	4298      	cmp	r0, r3
 8002776:	d007      	beq.n	8002788 <TIM_Base_SetConfig+0xc0>
 8002778:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800277c:	4298      	cmp	r0, r3
 800277e:	d003      	beq.n	8002788 <TIM_Base_SetConfig+0xc0>
 8002780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002784:	4298      	cmp	r0, r3
 8002786:	d101      	bne.n	800278c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002788:	690b      	ldr	r3, [r1, #16]
 800278a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800278c:	2301      	movs	r3, #1
 800278e:	6143      	str	r3, [r0, #20]
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40012c00 	.word	0x40012c00
 8002798:	40014000 	.word	0x40014000

0800279c <HAL_TIM_Base_Init>:
{
 800279c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800279e:	4604      	mov	r4, r0
 80027a0:	b1a0      	cbz	r0, 80027cc <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80027a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80027a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027aa:	b91b      	cbnz	r3, 80027b4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80027ac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80027b0:	f002 f82e 	bl	8004810 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80027b4:	2302      	movs	r3, #2
 80027b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ba:	6820      	ldr	r0, [r4, #0]
 80027bc:	1d21      	adds	r1, r4, #4
 80027be:	f7ff ff83 	bl	80026c8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80027c2:	2301      	movs	r3, #1
 80027c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80027c8:	2000      	movs	r0, #0
 80027ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80027cc:	2001      	movs	r0, #1
}
 80027ce:	bd10      	pop	{r4, pc}

080027d0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80027d4:	2b01      	cmp	r3, #1
{
 80027d6:	b530      	push	{r4, r5, lr}
 80027d8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80027dc:	d040      	beq.n	8002860 <HAL_TIMEx_MasterConfigSynchronization+0x90>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027de:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80027e2:	4d20      	ldr	r5, [pc, #128]	; (8002864 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
  tmpcr2 = htim->Instance->CR2;
 80027e4:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80027e6:	2201      	movs	r2, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80027e8:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 80027ea:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 = htim->Instance->CR2;
 80027ee:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80027f0:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80027f2:	d007      	beq.n	8002804 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80027f4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80027f8:	42ab      	cmp	r3, r5
 80027fa:	d003      	beq.n	8002804 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80027fc:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8002800:	42ab      	cmp	r3, r5
 8002802:	d103      	bne.n	800280c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002804:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002806:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800280a:	432a      	orrs	r2, r5
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800280c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800280e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002812:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002814:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002816:	4a13      	ldr	r2, [pc, #76]	; (8002864 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d016      	beq.n	800284a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800281c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002820:	d013      	beq.n	800284a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002822:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002826:	4293      	cmp	r3, r2
 8002828:	d00f      	beq.n	800284a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800282a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800282e:	4293      	cmp	r3, r2
 8002830:	d00b      	beq.n	800284a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002832:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8002836:	4293      	cmp	r3, r2
 8002838:	d007      	beq.n	800284a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800283a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800283e:	4293      	cmp	r3, r2
 8002840:	d003      	beq.n	800284a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002842:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002846:	4293      	cmp	r3, r2
 8002848:	d104      	bne.n	8002854 <HAL_TIMEx_MasterConfigSynchronization+0x84>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800284a:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800284c:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002850:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002852:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002854:	2301      	movs	r3, #1
 8002856:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800285a:	2300      	movs	r3, #0
 800285c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002860:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002862:	bd30      	pop	{r4, r5, pc}
 8002864:	40012c00 	.word	0x40012c00

08002868 <HAL_TIMEx_CommutCallback>:
 8002868:	4770      	bx	lr

0800286a <HAL_TIMEx_BreakCallback>:
 800286a:	4770      	bx	lr

0800286c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800286c:	4770      	bx	lr

0800286e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800286e:	6803      	ldr	r3, [r0, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002876:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	f022 0201 	bic.w	r2, r2, #1
 800287e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002880:	2320      	movs	r3, #32
 8002882:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002884:	2300      	movs	r3, #0
 8002886:	6603      	str	r3, [r0, #96]	; 0x60
 8002888:	4770      	bx	lr

0800288a <HAL_UART_TxCpltCallback>:
 800288a:	4770      	bx	lr

0800288c <HAL_UART_ErrorCallback>:
 800288c:	4770      	bx	lr
	...

08002890 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002890:	6803      	ldr	r3, [r0, #0]
 8002892:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002894:	6819      	ldr	r1, [r3, #0]
{
 8002896:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 8002898:	f640 060f 	movw	r6, #2063	; 0x80f
 800289c:	4232      	tst	r2, r6
{
 800289e:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028a0:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 80028a2:	d10a      	bne.n	80028ba <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80028a4:	0696      	lsls	r6, r2, #26
 80028a6:	d570      	bpl.n	800298a <HAL_UART_IRQHandler+0xfa>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80028a8:	068e      	lsls	r6, r1, #26
 80028aa:	d56e      	bpl.n	800298a <HAL_UART_IRQHandler+0xfa>
      if (huart->RxISR != NULL)
 80028ac:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 808e 	beq.w	80029d0 <HAL_UART_IRQHandler+0x140>
}
 80028b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 80028b8:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != 0U)
 80028ba:	f015 0001 	ands.w	r0, r5, #1
 80028be:	d102      	bne.n	80028c6 <HAL_UART_IRQHandler+0x36>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80028c0:	f411 7f90 	tst.w	r1, #288	; 0x120
 80028c4:	d061      	beq.n	800298a <HAL_UART_IRQHandler+0xfa>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80028c6:	07d6      	lsls	r6, r2, #31
 80028c8:	d507      	bpl.n	80028da <HAL_UART_IRQHandler+0x4a>
 80028ca:	05cd      	lsls	r5, r1, #23
 80028cc:	d505      	bpl.n	80028da <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80028ce:	2501      	movs	r5, #1
 80028d0:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028d2:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 80028d4:	f045 0501 	orr.w	r5, r5, #1
 80028d8:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028da:	0796      	lsls	r6, r2, #30
 80028dc:	d506      	bpl.n	80028ec <HAL_UART_IRQHandler+0x5c>
 80028de:	b128      	cbz	r0, 80028ec <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80028e0:	2502      	movs	r5, #2
 80028e2:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028e4:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 80028e6:	f045 0504 	orr.w	r5, r5, #4
 80028ea:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028ec:	0755      	lsls	r5, r2, #29
 80028ee:	d506      	bpl.n	80028fe <HAL_UART_IRQHandler+0x6e>
 80028f0:	b128      	cbz	r0, 80028fe <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80028f2:	2504      	movs	r5, #4
 80028f4:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028f6:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 80028f8:	f045 0502 	orr.w	r5, r5, #2
 80028fc:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80028fe:	0716      	lsls	r6, r2, #28
 8002900:	d508      	bpl.n	8002914 <HAL_UART_IRQHandler+0x84>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002902:	068d      	lsls	r5, r1, #26
 8002904:	d400      	bmi.n	8002908 <HAL_UART_IRQHandler+0x78>
 8002906:	b128      	cbz	r0, 8002914 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002908:	2008      	movs	r0, #8
 800290a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800290c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800290e:	f040 0008 	orr.w	r0, r0, #8
 8002912:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002914:	0510      	lsls	r0, r2, #20
 8002916:	d508      	bpl.n	800292a <HAL_UART_IRQHandler+0x9a>
 8002918:	014e      	lsls	r6, r1, #5
 800291a:	d506      	bpl.n	800292a <HAL_UART_IRQHandler+0x9a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800291c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002920:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002922:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002924:	f043 0320 	orr.w	r3, r3, #32
 8002928:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800292a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800292c:	2b00      	cmp	r3, #0
 800292e:	d04f      	beq.n	80029d0 <HAL_UART_IRQHandler+0x140>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002930:	0695      	lsls	r5, r2, #26
 8002932:	d505      	bpl.n	8002940 <HAL_UART_IRQHandler+0xb0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002934:	0688      	lsls	r0, r1, #26
 8002936:	d503      	bpl.n	8002940 <HAL_UART_IRQHandler+0xb0>
        if (huart->RxISR != NULL)
 8002938:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800293a:	b10b      	cbz	r3, 8002940 <HAL_UART_IRQHandler+0xb0>
          huart->RxISR(huart);
 800293c:	4620      	mov	r0, r4
 800293e:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002940:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8002942:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002944:	6892      	ldr	r2, [r2, #8]
 8002946:	0651      	lsls	r1, r2, #25
        UART_EndRxTransfer(huart);
 8002948:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800294a:	d402      	bmi.n	8002952 <HAL_UART_IRQHandler+0xc2>
 800294c:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 8002950:	d017      	beq.n	8002982 <HAL_UART_IRQHandler+0xf2>
        UART_EndRxTransfer(huart);
 8002952:	f7ff ff8c 	bl	800286e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002956:	6823      	ldr	r3, [r4, #0]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	0652      	lsls	r2, r2, #25
 800295c:	d50d      	bpl.n	800297a <HAL_UART_IRQHandler+0xea>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800295e:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002960:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002966:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002968:	b138      	cbz	r0, 800297a <HAL_UART_IRQHandler+0xea>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800296a:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <HAL_UART_IRQHandler+0x144>)
 800296c:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800296e:	f7fe fc7b 	bl	8001268 <HAL_DMA_Abort_IT>
 8002972:	b368      	cbz	r0, 80029d0 <HAL_UART_IRQHandler+0x140>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002974:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002976:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002978:	e79c      	b.n	80028b4 <HAL_UART_IRQHandler+0x24>
            HAL_UART_ErrorCallback(huart);
 800297a:	4620      	mov	r0, r4
 800297c:	f7ff ff86 	bl	800288c <HAL_UART_ErrorCallback>
 8002980:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002982:	f7ff ff83 	bl	800288c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002986:	67e5      	str	r5, [r4, #124]	; 0x7c
 8002988:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800298a:	02d6      	lsls	r6, r2, #11
 800298c:	d509      	bpl.n	80029a2 <HAL_UART_IRQHandler+0x112>
 800298e:	0268      	lsls	r0, r5, #9
 8002990:	d507      	bpl.n	80029a2 <HAL_UART_IRQHandler+0x112>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002992:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8002996:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002998:	621a      	str	r2, [r3, #32]
}
 800299a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800299e:	f000 ba81 	b.w	8002ea4 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80029a2:	0616      	lsls	r6, r2, #24
 80029a4:	d505      	bpl.n	80029b2 <HAL_UART_IRQHandler+0x122>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80029a6:	060d      	lsls	r5, r1, #24
 80029a8:	d503      	bpl.n	80029b2 <HAL_UART_IRQHandler+0x122>
    if (huart->TxISR != NULL)
 80029aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029ac:	b183      	cbz	r3, 80029d0 <HAL_UART_IRQHandler+0x140>
      huart->TxISR(huart);
 80029ae:	4620      	mov	r0, r4
 80029b0:	e780      	b.n	80028b4 <HAL_UART_IRQHandler+0x24>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80029b2:	0650      	lsls	r0, r2, #25
 80029b4:	d50c      	bpl.n	80029d0 <HAL_UART_IRQHandler+0x140>
 80029b6:	064a      	lsls	r2, r1, #25
 80029b8:	d50a      	bpl.n	80029d0 <HAL_UART_IRQHandler+0x140>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029c2:	2320      	movs	r3, #32
 80029c4:	6763      	str	r3, [r4, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	6663      	str	r3, [r4, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029ca:	4620      	mov	r0, r4
 80029cc:	f7ff ff5d 	bl	800288a <HAL_UART_TxCpltCallback>
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	bf00      	nop
 80029d4:	080029d9 	.word	0x080029d9

080029d8 <UART_DMAAbortOnError>:
{
 80029d8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80029da:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80029e2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 80029e6:	f7ff ff51 	bl	800288c <HAL_UART_ErrorCallback>
 80029ea:	bd08      	pop	{r3, pc}

080029ec <UART_SetConfig>:
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029ec:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029ee:	6881      	ldr	r1, [r0, #8]
{
 80029f0:	b538      	push	{r3, r4, r5, lr}
 80029f2:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029f4:	69c3      	ldr	r3, [r0, #28]
 80029f6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029f8:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029fa:	4301      	orrs	r1, r0
 80029fc:	6960      	ldr	r0, [r4, #20]
 80029fe:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a00:	487a      	ldr	r0, [pc, #488]	; (8002bec <UART_SetConfig+0x200>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a02:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a04:	4028      	ands	r0, r5
 8002a06:	4301      	orrs	r1, r0
 8002a08:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a0a:	6851      	ldr	r1, [r2, #4]
 8002a0c:	68e0      	ldr	r0, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8002a0e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a10:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002a14:	4301      	orrs	r1, r0
 8002a16:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a18:	6890      	ldr	r0, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a1a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a1c:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8002a20:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a22:	4301      	orrs	r1, r0
 8002a24:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a26:	4972      	ldr	r1, [pc, #456]	; (8002bf0 <UART_SetConfig+0x204>)
 8002a28:	428a      	cmp	r2, r1
 8002a2a:	d111      	bne.n	8002a50 <UART_SetConfig+0x64>
 8002a2c:	4a71      	ldr	r2, [pc, #452]	; (8002bf4 <UART_SetConfig+0x208>)
 8002a2e:	4972      	ldr	r1, [pc, #456]	; (8002bf8 <UART_SetConfig+0x20c>)
 8002a30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a32:	f002 0203 	and.w	r2, r2, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a3a:	5c8a      	ldrb	r2, [r1, r2]
 8002a3c:	d05a      	beq.n	8002af4 <UART_SetConfig+0x108>
    switch (clocksource)
 8002a3e:	2a08      	cmp	r2, #8
 8002a40:	d826      	bhi.n	8002a90 <UART_SetConfig+0xa4>
 8002a42:	e8df f002 	tbb	[pc, r2]
 8002a46:	a7a1      	.short	0xa7a1
 8002a48:	25bd25aa 	.word	0x25bd25aa
 8002a4c:	2525      	.short	0x2525
 8002a4e:	c0          	.byte	0xc0
 8002a4f:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a50:	496a      	ldr	r1, [pc, #424]	; (8002bfc <UART_SetConfig+0x210>)
 8002a52:	428a      	cmp	r2, r1
 8002a54:	d12a      	bne.n	8002aac <UART_SetConfig+0xc0>
 8002a56:	4a67      	ldr	r2, [pc, #412]	; (8002bf4 <UART_SetConfig+0x208>)
 8002a58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a5a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002a5e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002a62:	f000 80b5 	beq.w	8002bd0 <UART_SetConfig+0x1e4>
 8002a66:	d815      	bhi.n	8002a94 <UART_SetConfig+0xa8>
 8002a68:	b9da      	cbnz	r2, 8002aa2 <UART_SetConfig+0xb6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a6e:	f040 808b 	bne.w	8002b88 <UART_SetConfig+0x19c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a72:	f7ff fbd5 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a76:	6862      	ldr	r2, [r4, #4]
 8002a78:	0853      	lsrs	r3, r2, #1
 8002a7a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002a7e:	fbb0 f0f2 	udiv	r0, r0, r2
 8002a82:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a84:	f1a0 0210 	sub.w	r2, r0, #16
 8002a88:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d96f      	bls.n	8002b70 <UART_SetConfig+0x184>
      ret = HAL_ERROR;
 8002a90:	2001      	movs	r0, #1
 8002a92:	e075      	b.n	8002b80 <UART_SetConfig+0x194>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a94:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8002a98:	f000 80a0 	beq.w	8002bdc <UART_SetConfig+0x1f0>
 8002a9c:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8002aa0:	d046      	beq.n	8002b30 <UART_SetConfig+0x144>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa6:	d0f3      	beq.n	8002a90 <UART_SetConfig+0xa4>
 8002aa8:	2210      	movs	r2, #16
 8002aaa:	e7c8      	b.n	8002a3e <UART_SetConfig+0x52>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002aac:	4954      	ldr	r1, [pc, #336]	; (8002c00 <UART_SetConfig+0x214>)
 8002aae:	428a      	cmp	r2, r1
 8002ab0:	d10f      	bne.n	8002ad2 <UART_SetConfig+0xe6>
 8002ab2:	4a50      	ldr	r2, [pc, #320]	; (8002bf4 <UART_SetConfig+0x208>)
 8002ab4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ab6:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8002aba:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8002abe:	f000 8087 	beq.w	8002bd0 <UART_SetConfig+0x1e4>
 8002ac2:	d9d1      	bls.n	8002a68 <UART_SetConfig+0x7c>
 8002ac4:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8002ac8:	f000 8088 	beq.w	8002bdc <UART_SetConfig+0x1f0>
 8002acc:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8002ad0:	e7e6      	b.n	8002aa0 <UART_SetConfig+0xb4>
 8002ad2:	494c      	ldr	r1, [pc, #304]	; (8002c04 <UART_SetConfig+0x218>)
 8002ad4:	428a      	cmp	r2, r1
 8002ad6:	d137      	bne.n	8002b48 <UART_SetConfig+0x15c>
 8002ad8:	4a46      	ldr	r2, [pc, #280]	; (8002bf4 <UART_SetConfig+0x208>)
 8002ada:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002adc:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8002ae0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002ae4:	d074      	beq.n	8002bd0 <UART_SetConfig+0x1e4>
 8002ae6:	d81d      	bhi.n	8002b24 <UART_SetConfig+0x138>
 8002ae8:	2a00      	cmp	r2, #0
 8002aea:	d0be      	beq.n	8002a6a <UART_SetConfig+0x7e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002af0:	d1ce      	bne.n	8002a90 <UART_SetConfig+0xa4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002af2:	2210      	movs	r2, #16
    switch (clocksource)
 8002af4:	2a08      	cmp	r2, #8
 8002af6:	d8cb      	bhi.n	8002a90 <UART_SetConfig+0xa4>
 8002af8:	a301      	add	r3, pc, #4	; (adr r3, 8002b00 <UART_SetConfig+0x114>)
 8002afa:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8002afe:	bf00      	nop
 8002b00:	08002a73 	.word	0x08002a73
 8002b04:	08002b6b 	.word	0x08002b6b
 8002b08:	08002b37 	.word	0x08002b37
 8002b0c:	08002a91 	.word	0x08002a91
 8002b10:	08002bd7 	.word	0x08002bd7
 8002b14:	08002a91 	.word	0x08002a91
 8002b18:	08002a91 	.word	0x08002a91
 8002b1c:	08002a91 	.word	0x08002a91
 8002b20:	08002be3 	.word	0x08002be3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b24:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002b28:	d058      	beq.n	8002bdc <UART_SetConfig+0x1f0>
 8002b2a:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8002b2e:	d1dd      	bne.n	8002aec <UART_SetConfig+0x100>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b34:	d131      	bne.n	8002b9a <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002b36:	6863      	ldr	r3, [r4, #4]
 8002b38:	0858      	lsrs	r0, r3, #1
 8002b3a:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 8002b3e:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002b42:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b46:	e79c      	b.n	8002a82 <UART_SetConfig+0x96>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b48:	492f      	ldr	r1, [pc, #188]	; (8002c08 <UART_SetConfig+0x21c>)
 8002b4a:	428a      	cmp	r2, r1
 8002b4c:	d1a0      	bne.n	8002a90 <UART_SetConfig+0xa4>
 8002b4e:	4a29      	ldr	r2, [pc, #164]	; (8002bf4 <UART_SetConfig+0x208>)
 8002b50:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b52:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8002b56:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002b5a:	d039      	beq.n	8002bd0 <UART_SetConfig+0x1e4>
 8002b5c:	d984      	bls.n	8002a68 <UART_SetConfig+0x7c>
 8002b5e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8002b62:	d03b      	beq.n	8002bdc <UART_SetConfig+0x1f0>
 8002b64:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8002b68:	e79a      	b.n	8002aa0 <UART_SetConfig+0xb4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b6a:	f7ff fb71 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 8002b6e:	e782      	b.n	8002a76 <UART_SetConfig+0x8a>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b70:	f020 030f 	bic.w	r3, r0, #15
      huart->Instance->BRR = brrtemp;
 8002b74:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b76:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 8002b7a:	4318      	orrs	r0, r3
 8002b7c:	60d0      	str	r0, [r2, #12]
 8002b7e:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002b84:	6663      	str	r3, [r4, #100]	; 0x64
}
 8002b86:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b88:	f7ff fb4a 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b8c:	6863      	ldr	r3, [r4, #4]
 8002b8e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002b92:	e008      	b.n	8002ba6 <UART_SetConfig+0x1ba>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b94:	f7ff fb5c 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 8002b98:	e7f8      	b.n	8002b8c <UART_SetConfig+0x1a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002b9a:	6863      	ldr	r3, [r4, #4]
 8002b9c:	0858      	lsrs	r0, r3, #1
 8002b9e:	f500 00f4 	add.w	r0, r0, #7995392	; 0x7a0000
 8002ba2:	f500 5090 	add.w	r0, r0, #4608	; 0x1200
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002ba6:	fbb0 f0f3 	udiv	r0, r0, r3
 8002baa:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bac:	f1a0 0210 	sub.w	r2, r0, #16
 8002bb0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	f63f af6b 	bhi.w	8002a90 <UART_SetConfig+0xa4>
      huart->Instance->BRR = usartdiv;
 8002bba:	6823      	ldr	r3, [r4, #0]
 8002bbc:	60d8      	str	r0, [r3, #12]
 8002bbe:	e7de      	b.n	8002b7e <UART_SetConfig+0x192>
        pclk = HAL_RCC_GetSysClockFreq();
 8002bc0:	f7ff fa54 	bl	800206c <HAL_RCC_GetSysClockFreq>
 8002bc4:	e7e2      	b.n	8002b8c <UART_SetConfig+0x1a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002bc6:	6863      	ldr	r3, [r4, #4]
 8002bc8:	0858      	lsrs	r0, r3, #1
 8002bca:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8002bce:	e7ea      	b.n	8002ba6 <UART_SetConfig+0x1ba>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bd4:	d1f4      	bne.n	8002bc0 <UART_SetConfig+0x1d4>
        pclk = HAL_RCC_GetSysClockFreq();
 8002bd6:	f7ff fa49 	bl	800206c <HAL_RCC_GetSysClockFreq>
 8002bda:	e74c      	b.n	8002a76 <UART_SetConfig+0x8a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002be0:	d1f1      	bne.n	8002bc6 <UART_SetConfig+0x1da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002be2:	6863      	ldr	r3, [r4, #4]
 8002be4:	0858      	lsrs	r0, r3, #1
 8002be6:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8002bea:	e7aa      	b.n	8002b42 <UART_SetConfig+0x156>
 8002bec:	efff69f3 	.word	0xefff69f3
 8002bf0:	40013800 	.word	0x40013800
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	08009098 	.word	0x08009098
 8002bfc:	40004400 	.word	0x40004400
 8002c00:	40004800 	.word	0x40004800
 8002c04:	40004c00 	.word	0x40004c00
 8002c08:	40005000 	.word	0x40005000

08002c0c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c0e:	07da      	lsls	r2, r3, #31
{
 8002c10:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c12:	d506      	bpl.n	8002c22 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c14:	6801      	ldr	r1, [r0, #0]
 8002c16:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002c18:	684a      	ldr	r2, [r1, #4]
 8002c1a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002c1e:	4322      	orrs	r2, r4
 8002c20:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c22:	079c      	lsls	r4, r3, #30
 8002c24:	d506      	bpl.n	8002c34 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c26:	6801      	ldr	r1, [r0, #0]
 8002c28:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002c2a:	684a      	ldr	r2, [r1, #4]
 8002c2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c30:	4322      	orrs	r2, r4
 8002c32:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c34:	0759      	lsls	r1, r3, #29
 8002c36:	d506      	bpl.n	8002c46 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c38:	6801      	ldr	r1, [r0, #0]
 8002c3a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002c3c:	684a      	ldr	r2, [r1, #4]
 8002c3e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c42:	4322      	orrs	r2, r4
 8002c44:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c46:	071a      	lsls	r2, r3, #28
 8002c48:	d506      	bpl.n	8002c58 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c4a:	6801      	ldr	r1, [r0, #0]
 8002c4c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002c4e:	684a      	ldr	r2, [r1, #4]
 8002c50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c54:	4322      	orrs	r2, r4
 8002c56:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c58:	06dc      	lsls	r4, r3, #27
 8002c5a:	d506      	bpl.n	8002c6a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c5c:	6801      	ldr	r1, [r0, #0]
 8002c5e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002c60:	688a      	ldr	r2, [r1, #8]
 8002c62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c66:	4322      	orrs	r2, r4
 8002c68:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c6a:	0699      	lsls	r1, r3, #26
 8002c6c:	d506      	bpl.n	8002c7c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c6e:	6801      	ldr	r1, [r0, #0]
 8002c70:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002c72:	688a      	ldr	r2, [r1, #8]
 8002c74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c78:	4322      	orrs	r2, r4
 8002c7a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c7c:	065a      	lsls	r2, r3, #25
 8002c7e:	d50f      	bpl.n	8002ca0 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c80:	6801      	ldr	r1, [r0, #0]
 8002c82:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002c84:	684a      	ldr	r2, [r1, #4]
 8002c86:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002c8a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c8c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c90:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c92:	d105      	bne.n	8002ca0 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c94:	684a      	ldr	r2, [r1, #4]
 8002c96:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002c98:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002c9c:	4322      	orrs	r2, r4
 8002c9e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ca0:	061b      	lsls	r3, r3, #24
 8002ca2:	d506      	bpl.n	8002cb2 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ca4:	6802      	ldr	r2, [r0, #0]
 8002ca6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002ca8:	6853      	ldr	r3, [r2, #4]
 8002caa:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002cae:	430b      	orrs	r3, r1
 8002cb0:	6053      	str	r3, [r2, #4]
 8002cb2:	bd10      	pop	{r4, pc}

08002cb4 <UART_WaitOnFlagUntilTimeout>:
{
 8002cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cb8:	9d06      	ldr	r5, [sp, #24]
 8002cba:	4604      	mov	r4, r0
 8002cbc:	460f      	mov	r7, r1
 8002cbe:	4616      	mov	r6, r2
 8002cc0:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cc2:	6821      	ldr	r1, [r4, #0]
 8002cc4:	69ca      	ldr	r2, [r1, #28]
 8002cc6:	ea37 0302 	bics.w	r3, r7, r2
 8002cca:	bf0c      	ite	eq
 8002ccc:	2201      	moveq	r2, #1
 8002cce:	2200      	movne	r2, #0
 8002cd0:	42b2      	cmp	r2, r6
 8002cd2:	d002      	beq.n	8002cda <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002cd4:	2000      	movs	r0, #0
}
 8002cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002cda:	1c68      	adds	r0, r5, #1
 8002cdc:	d0f2      	beq.n	8002cc4 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cde:	f7fe f9a1 	bl	8001024 <HAL_GetTick>
 8002ce2:	eba0 0008 	sub.w	r0, r0, r8
 8002ce6:	4285      	cmp	r5, r0
 8002ce8:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cea:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cec:	d300      	bcc.n	8002cf0 <UART_WaitOnFlagUntilTimeout+0x3c>
 8002cee:	b97d      	cbnz	r5, 8002d10 <UART_WaitOnFlagUntilTimeout+0x5c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cf0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002cf4:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cf6:	6883      	ldr	r3, [r0, #8]
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002cfe:	2320      	movs	r3, #32
 8002d00:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002d02:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8002d04:	2300      	movs	r3, #0
 8002d06:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 8002d0a:	2003      	movs	r0, #3
 8002d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d10:	075a      	lsls	r2, r3, #29
 8002d12:	d5d6      	bpl.n	8002cc2 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d14:	69c3      	ldr	r3, [r0, #28]
 8002d16:	051b      	lsls	r3, r3, #20
 8002d18:	d5d3      	bpl.n	8002cc2 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d1e:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d20:	6803      	ldr	r3, [r0, #0]
 8002d22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d26:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d28:	6883      	ldr	r3, [r0, #8]
 8002d2a:	f023 0301 	bic.w	r3, r3, #1
 8002d2e:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002d30:	2320      	movs	r3, #32
 8002d32:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002d34:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d36:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002d38:	e7e4      	b.n	8002d04 <UART_WaitOnFlagUntilTimeout+0x50>

08002d3a <HAL_UART_Transmit>:
{
 8002d3a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002d3e:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002d40:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002d42:	2b20      	cmp	r3, #32
{
 8002d44:	4604      	mov	r4, r0
 8002d46:	460e      	mov	r6, r1
 8002d48:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002d4a:	d14b      	bne.n	8002de4 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8002d4c:	2900      	cmp	r1, #0
 8002d4e:	d047      	beq.n	8002de0 <HAL_UART_Transmit+0xa6>
 8002d50:	2a00      	cmp	r2, #0
 8002d52:	d045      	beq.n	8002de0 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8002d54:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d043      	beq.n	8002de4 <HAL_UART_Transmit+0xaa>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d62:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d64:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d66:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d68:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8002d6a:	f7fe f95b 	bl	8001024 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d6e:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8002d70:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002d78:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 8002d7a:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d7e:	d103      	bne.n	8002d88 <HAL_UART_Transmit+0x4e>
 8002d80:	6923      	ldr	r3, [r4, #16]
 8002d82:	b90b      	cbnz	r3, 8002d88 <HAL_UART_Transmit+0x4e>
 8002d84:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002d86:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8002d88:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d8c:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8002d90:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d92:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 8002d94:	b94a      	cbnz	r2, 8002daa <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d96:	2140      	movs	r1, #64	; 0x40
 8002d98:	4620      	mov	r0, r4
 8002d9a:	f7ff ff8b 	bl	8002cb4 <UART_WaitOnFlagUntilTimeout>
 8002d9e:	b950      	cbnz	r0, 8002db6 <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 8002da0:	2320      	movs	r3, #32
 8002da2:	6763      	str	r3, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 8002da4:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8002da8:	e006      	b.n	8002db8 <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002daa:	2200      	movs	r2, #0
 8002dac:	2180      	movs	r1, #128	; 0x80
 8002dae:	4620      	mov	r0, r4
 8002db0:	f7ff ff80 	bl	8002cb4 <UART_WaitOnFlagUntilTimeout>
 8002db4:	b118      	cbz	r0, 8002dbe <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8002db6:	2003      	movs	r0, #3
}
 8002db8:	b003      	add	sp, #12
 8002dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002dbe:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002dc0:	b95e      	cbnz	r6, 8002dda <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dc2:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dca:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002dcc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8002dd8:	e7d6      	b.n	8002d88 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dda:	f816 3b01 	ldrb.w	r3, [r6], #1
 8002dde:	e7f4      	b.n	8002dca <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8002de0:	2001      	movs	r0, #1
 8002de2:	e7e9      	b.n	8002db8 <HAL_UART_Transmit+0x7e>
    return HAL_BUSY;
 8002de4:	2002      	movs	r0, #2
 8002de6:	e7e7      	b.n	8002db8 <HAL_UART_Transmit+0x7e>

08002de8 <UART_CheckIdleState>:
{
 8002de8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002dea:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dec:	2600      	movs	r6, #0
 8002dee:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002df0:	f7fe f918 	bl	8001024 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002df4:	6823      	ldr	r3, [r4, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002dfa:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dfc:	d415      	bmi.n	8002e2a <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002dfe:	6823      	ldr	r3, [r4, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	075b      	lsls	r3, r3, #29
 8002e04:	d50a      	bpl.n	8002e1c <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	462b      	mov	r3, r5
 8002e10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e14:	4620      	mov	r0, r4
 8002e16:	f7ff ff4d 	bl	8002cb4 <UART_WaitOnFlagUntilTimeout>
 8002e1a:	b990      	cbnz	r0, 8002e42 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8002e1c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002e1e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002e20:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8002e22:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8002e26:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8002e28:	e00c      	b.n	8002e44 <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	4632      	mov	r2, r6
 8002e32:	4603      	mov	r3, r0
 8002e34:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e38:	4620      	mov	r0, r4
 8002e3a:	f7ff ff3b 	bl	8002cb4 <UART_WaitOnFlagUntilTimeout>
 8002e3e:	2800      	cmp	r0, #0
 8002e40:	d0dd      	beq.n	8002dfe <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002e42:	2003      	movs	r0, #3
}
 8002e44:	b002      	add	sp, #8
 8002e46:	bd70      	pop	{r4, r5, r6, pc}

08002e48 <HAL_UART_Init>:
{
 8002e48:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002e4a:	4604      	mov	r4, r0
 8002e4c:	b340      	cbz	r0, 8002ea0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002e4e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002e50:	b91b      	cbnz	r3, 8002e5a <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8002e52:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002e56:	f001 fd3b 	bl	80048d0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002e5a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002e5c:	2324      	movs	r3, #36	; 0x24
 8002e5e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002e60:	6813      	ldr	r3, [r2, #0]
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e68:	4620      	mov	r0, r4
 8002e6a:	f7ff fdbf 	bl	80029ec <UART_SetConfig>
 8002e6e:	2801      	cmp	r0, #1
 8002e70:	d016      	beq.n	8002ea0 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e74:	b113      	cbz	r3, 8002e7c <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8002e76:	4620      	mov	r0, r4
 8002e78:	f7ff fec8 	bl	8002c0c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e84:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e8c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002e94:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002e96:	601a      	str	r2, [r3, #0]
}
 8002e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002e9c:	f7ff bfa4 	b.w	8002de8 <UART_CheckIdleState>
}
 8002ea0:	2001      	movs	r0, #1
 8002ea2:	bd10      	pop	{r4, pc}

08002ea4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002ea4:	4770      	bx	lr

08002ea6 <eMBFuncReadCoils>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002ea6:	880b      	ldrh	r3, [r1, #0]
 8002ea8:	2b05      	cmp	r3, #5
{
 8002eaa:	b570      	push	{r4, r5, r6, lr}
 8002eac:	460d      	mov	r5, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002eae:	d12e      	bne.n	8002f0e <eMBFuncReadCoils+0x68>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8002eb0:	78c3      	ldrb	r3, [r0, #3]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8002eb2:	7902      	ldrb	r2, [r0, #4]
 8002eb4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8002eb8:	1e53      	subs	r3, r2, #1
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8002ec0:	428b      	cmp	r3, r1
 8002ec2:	d824      	bhi.n	8002f0e <eMBFuncReadCoils+0x68>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
 8002ec4:	2300      	movs	r3, #0
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002ec6:	7846      	ldrb	r6, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002ec8:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8002eca:	802b      	strh	r3, [r5, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8002ed0:	882b      	ldrh	r3, [r5, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 8002ed2:	f012 0f07 	tst.w	r2, #7
 8002ed6:	ea4f 04d2 	mov.w	r4, r2, lsr #3
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8002eda:	bf18      	it	ne
 8002edc:	3401      	addne	r4, #1
            *usLen += 1;
 8002ede:	3301      	adds	r3, #1
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8002ee0:	b2e4      	uxtb	r4, r4
            *usLen += 1;
 8002ee2:	802b      	strh	r3, [r5, #0]
            }
            *pucFrameCur++ = ucNBytes;
 8002ee4:	7044      	strb	r4, [r0, #1]
            *usLen += 1;
 8002ee6:	882b      	ldrh	r3, [r5, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002ee8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
            *usLen += 1;
 8002eec:	3301      	adds	r3, #1
        usRegAddress++;
 8002eee:	3101      	adds	r1, #1
            *usLen += 1;
 8002ef0:	802b      	strh	r3, [r5, #0]

            eRegStatus =
 8002ef2:	b289      	uxth	r1, r1
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	3002      	adds	r0, #2
 8002ef8:	f001 fa4a 	bl	8004390 <eMBRegCoilsCB>
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002efc:	b118      	cbz	r0, 8002f06 <eMBFuncReadCoils+0x60>
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002f02:	f000 b981 	b.w	8003208 <prveMBError2Exception>
                *usLen += ucNBytes;;
 8002f06:	882a      	ldrh	r2, [r5, #0]
 8002f08:	4414      	add	r4, r2
 8002f0a:	802c      	strh	r4, [r5, #0]
 8002f0c:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002f0e:	2003      	movs	r0, #3
}
 8002f10:	bd70      	pop	{r4, r5, r6, pc}

08002f12 <eMBFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002f12:	880b      	ldrh	r3, [r1, #0]
 8002f14:	2b05      	cmp	r3, #5
{
 8002f16:	b513      	push	{r0, r1, r4, lr}
    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002f18:	d11d      	bne.n	8002f56 <eMBFuncWriteCoil+0x44>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8002f1a:	7903      	ldrb	r3, [r0, #4]
 8002f1c:	b9db      	cbnz	r3, 8002f56 <eMBFuncWriteCoil+0x44>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8002f1e:	78c4      	ldrb	r4, [r0, #3]
 8002f20:	1e62      	subs	r2, r4, #1
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	2afd      	cmp	r2, #253	; 0xfd
 8002f26:	d916      	bls.n	8002f56 <eMBFuncWriteCoil+0x44>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8002f28:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002f2a:	7881      	ldrb	r1, [r0, #2]
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
 8002f2c:	f88d 3005 	strb.w	r3, [sp, #5]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8002f30:	2cff      	cmp	r4, #255	; 0xff
            {
                ucBuf[0] = 1;
 8002f32:	bf08      	it	eq
 8002f34:	2301      	moveq	r3, #1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002f36:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
            }
            else
            {
                ucBuf[0] = 0;
 8002f3a:	f88d 3004 	strb.w	r3, [sp, #4]
        usRegAddress++;
 8002f3e:	3101      	adds	r1, #1
            }
            eRegStatus =
 8002f40:	2301      	movs	r3, #1
 8002f42:	461a      	mov	r2, r3
 8002f44:	b289      	uxth	r1, r1
 8002f46:	a801      	add	r0, sp, #4
 8002f48:	f001 fa22 	bl	8004390 <eMBRegCoilsCB>
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002f4c:	b128      	cbz	r0, 8002f5a <eMBFuncWriteCoil+0x48>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002f4e:	f000 f95b 	bl	8003208 <prveMBError2Exception>
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002f52:	b002      	add	sp, #8
 8002f54:	bd10      	pop	{r4, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002f56:	2003      	movs	r0, #3
 8002f58:	e7fb      	b.n	8002f52 <eMBFuncWriteCoil+0x40>
 8002f5a:	e7fa      	b.n	8002f52 <eMBFuncWriteCoil+0x40>

08002f5c <eMBFuncWriteMultipleCoils>:
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002f5c:	880b      	ldrh	r3, [r1, #0]
 8002f5e:	2b05      	cmp	r3, #5
{
 8002f60:	b510      	push	{r4, lr}
 8002f62:	460c      	mov	r4, r1
    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002f64:	d924      	bls.n	8002fb0 <eMBFuncWriteMultipleCoils+0x54>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8002f66:	78c3      	ldrb	r3, [r0, #3]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8002f68:	7902      	ldrb	r2, [r0, #4]
 8002f6a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8002f6e:	f012 0f07 	tst.w	r2, #7
 8002f72:	ea4f 03d2 	mov.w	r3, r2, lsr #3
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) &&
 8002f76:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8002f7a:	bf18      	it	ne
 8002f7c:	3301      	addne	r3, #1
        if( ( usCoilCnt >= 1 ) &&
 8002f7e:	f5b1 6ff6 	cmp.w	r1, #1968	; 0x7b0
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8002f82:	b2db      	uxtb	r3, r3
        if( ( usCoilCnt >= 1 ) &&
 8002f84:	d214      	bcs.n	8002fb0 <eMBFuncWriteMultipleCoils+0x54>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8002f86:	7941      	ldrb	r1, [r0, #5]
 8002f88:	4299      	cmp	r1, r3
 8002f8a:	d111      	bne.n	8002fb0 <eMBFuncWriteMultipleCoils+0x54>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8002f8c:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8002f8e:	7881      	ldrb	r1, [r0, #2]
 8002f90:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8002f94:	3101      	adds	r1, #1
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
 8002f96:	2301      	movs	r3, #1
 8002f98:	b289      	uxth	r1, r1
 8002f9a:	3006      	adds	r0, #6
 8002f9c:	f001 f9f8 	bl	8004390 <eMBRegCoilsCB>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002fa0:	b118      	cbz	r0, 8002faa <eMBFuncWriteMultipleCoils+0x4e>
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002fa6:	f000 b92f 	b.w	8003208 <prveMBError2Exception>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8002faa:	2205      	movs	r2, #5
 8002fac:	8022      	strh	r2, [r4, #0]
 8002fae:	bd10      	pop	{r4, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002fb0:	2003      	movs	r0, #3
}
 8002fb2:	bd10      	pop	{r4, pc}

08002fb4 <eMBFuncReadDiscreteInputs>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002fb4:	880b      	ldrh	r3, [r1, #0]
 8002fb6:	2b05      	cmp	r3, #5
{
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	460d      	mov	r5, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002fbc:	d12d      	bne.n	800301a <eMBFuncReadDiscreteInputs+0x66>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8002fbe:	78c3      	ldrb	r3, [r0, #3]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8002fc0:	7902      	ldrb	r2, [r0, #4]
 8002fc2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8002fc6:	1e53      	subs	r3, r2, #1
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8002fce:	428b      	cmp	r3, r1
 8002fd0:	d823      	bhi.n	800301a <eMBFuncReadDiscreteInputs+0x66>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
 8002fd2:	2300      	movs	r3, #0
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002fd4:	7846      	ldrb	r6, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002fd6:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8002fd8:	802b      	strh	r3, [r5, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8002fde:	882b      	ldrh	r3, [r5, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8002fe0:	f012 0f07 	tst.w	r2, #7
 8002fe4:	ea4f 04d2 	mov.w	r4, r2, lsr #3
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8002fe8:	bf18      	it	ne
 8002fea:	3401      	addne	r4, #1
            *usLen += 1;
 8002fec:	3301      	adds	r3, #1
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8002fee:	b2e4      	uxtb	r4, r4
            *usLen += 1;
 8002ff0:	802b      	strh	r3, [r5, #0]
            }
            *pucFrameCur++ = ucNBytes;
 8002ff2:	7044      	strb	r4, [r0, #1]
            *usLen += 1;
 8002ff4:	882b      	ldrh	r3, [r5, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002ff6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
            *usLen += 1;
 8002ffa:	3301      	adds	r3, #1
        usRegAddress++;
 8002ffc:	3101      	adds	r1, #1
            *usLen += 1;
 8002ffe:	802b      	strh	r3, [r5, #0]

            eRegStatus =
 8003000:	b289      	uxth	r1, r1
 8003002:	3002      	adds	r0, #2
 8003004:	f001 f9c6 	bl	8004394 <eMBRegDiscreteCB>
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003008:	b118      	cbz	r0, 8003012 <eMBFuncReadDiscreteInputs+0x5e>
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 800300a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 800300e:	f000 b8fb 	b.w	8003208 <prveMBError2Exception>
                *usLen += ucNBytes;;
 8003012:	882a      	ldrh	r2, [r5, #0]
 8003014:	4414      	add	r4, r2
 8003016:	802c      	strh	r4, [r5, #0]
 8003018:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800301a:	2003      	movs	r0, #3
}
 800301c:	bd70      	pop	{r4, r5, r6, pc}

0800301e <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800301e:	b508      	push	{r3, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8003020:	880b      	ldrh	r3, [r1, #0]
 8003022:	2b05      	cmp	r3, #5
 8003024:	d10f      	bne.n	8003046 <eMBFuncWriteHoldingRegister+0x28>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8003026:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8003028:	7881      	ldrb	r1, [r0, #2]
 800302a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 800302e:	3101      	adds	r1, #1

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8003030:	2301      	movs	r3, #1
 8003032:	461a      	mov	r2, r3
 8003034:	b289      	uxth	r1, r1
 8003036:	3003      	adds	r0, #3
 8003038:	f001 f976 	bl	8004328 <eMBRegHoldingCB>
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 800303c:	b128      	cbz	r0, 800304a <eMBFuncWriteHoldingRegister+0x2c>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 800303e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            eStatus = prveMBError2Exception( eRegStatus );
 8003042:	f000 b8e1 	b.w	8003208 <prveMBError2Exception>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003046:	2003      	movs	r0, #3
 8003048:	bd08      	pop	{r3, pc}
}
 800304a:	bd08      	pop	{r3, pc}

0800304c <eMBFuncWriteMultipleHoldingRegister>:
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 800304c:	880b      	ldrh	r3, [r1, #0]
 800304e:	2b05      	cmp	r3, #5
{
 8003050:	b510      	push	{r4, lr}
 8003052:	460c      	mov	r4, r1
    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8003054:	d91d      	bls.n	8003092 <eMBFuncWriteMultipleHoldingRegister+0x46>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8003056:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8003058:	7902      	ldrb	r2, [r0, #4]
 800305a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        if( ( usRegCount >= 1 ) &&
 800305e:	1e53      	subs	r3, r2, #1
 8003060:	2b77      	cmp	r3, #119	; 0x77
 8003062:	d816      	bhi.n	8003092 <eMBFuncWriteMultipleHoldingRegister+0x46>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8003064:	0053      	lsls	r3, r2, #1
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8003066:	7941      	ldrb	r1, [r0, #5]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	4299      	cmp	r1, r3
 800306c:	d111      	bne.n	8003092 <eMBFuncWriteMultipleHoldingRegister+0x46>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 800306e:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8003070:	7881      	ldrb	r1, [r0, #2]
 8003072:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8003076:	3101      	adds	r1, #1
        {
            /* Make callback to update the register values. */
            eRegStatus =
 8003078:	2301      	movs	r3, #1
 800307a:	b289      	uxth	r1, r1
 800307c:	3006      	adds	r0, #6
 800307e:	f001 f953 	bl	8004328 <eMBRegHoldingCB>
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003082:	b118      	cbz	r0, 800308c <eMBFuncWriteMultipleHoldingRegister+0x40>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8003084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8003088:	f000 b8be 	b.w	8003208 <prveMBError2Exception>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 800308c:	2205      	movs	r2, #5
 800308e:	8022      	strh	r2, [r4, #0]
 8003090:	bd10      	pop	{r4, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003092:	2003      	movs	r0, #3
}
 8003094:	bd10      	pop	{r4, pc}

08003096 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003098:	880b      	ldrh	r3, [r1, #0]
 800309a:	2b05      	cmp	r3, #5
{
 800309c:	460c      	mov	r4, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800309e:	d124      	bne.n	80030ea <eMBFuncReadHoldingRegister+0x54>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80030a0:	7902      	ldrb	r2, [r0, #4]
 80030a2:	b295      	uxth	r5, r2

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80030a4:	1e6b      	subs	r3, r5, #1
 80030a6:	2b7c      	cmp	r3, #124	; 0x7c
 80030a8:	d81f      	bhi.n	80030ea <eMBFuncReadHoldingRegister+0x54>
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 80030aa:	2603      	movs	r6, #3
            *usLen = MB_PDU_FUNC_OFF;
 80030ac:	2300      	movs	r3, #0
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80030ae:	7847      	ldrb	r7, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80030b0:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 80030b2:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 80030b4:	7006      	strb	r6, [r0, #0]
            *usLen += 1;
 80030b6:	8826      	ldrh	r6, [r4, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 80030b8:	0052      	lsls	r2, r2, #1
            *usLen += 1;
 80030ba:	3601      	adds	r6, #1
 80030bc:	8026      	strh	r6, [r4, #0]
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 80030be:	7042      	strb	r2, [r0, #1]
            *usLen += 1;
 80030c0:	8822      	ldrh	r2, [r4, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80030c2:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
            *usLen += 1;
 80030c6:	3201      	adds	r2, #1
        usRegAddress++;
 80030c8:	3101      	adds	r1, #1
            *usLen += 1;
 80030ca:	8022      	strh	r2, [r4, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 80030cc:	b289      	uxth	r1, r1
 80030ce:	462a      	mov	r2, r5
 80030d0:	3002      	adds	r0, #2
 80030d2:	f001 f929 	bl	8004328 <eMBRegHoldingCB>
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80030d6:	b118      	cbz	r0, 80030e0 <eMBFuncReadHoldingRegister+0x4a>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80030d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 80030dc:	f000 b894 	b.w	8003208 <prveMBError2Exception>
                *usLen += usRegCount * 2;
 80030e0:	8822      	ldrh	r2, [r4, #0]
 80030e2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 80030e6:	8025      	strh	r5, [r4, #0]
 80030e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80030ea:	2003      	movs	r0, #3
}
 80030ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080030ee <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80030ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80030f2:	880b      	ldrh	r3, [r1, #0]
 80030f4:	2b09      	cmp	r3, #9
{
 80030f6:	4604      	mov	r4, r0
 80030f8:	460d      	mov	r5, r1
    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80030fa:	d93c      	bls.n	8003176 <eMBFuncReadWriteMultipleHoldingRegister+0x88>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 80030fc:	78c3      	ldrb	r3, [r0, #3]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 80030fe:	7907      	ldrb	r7, [r0, #4]
 8003100:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8003104:	1e7b      	subs	r3, r7, #1
 8003106:	2b7c      	cmp	r3, #124	; 0x7c
 8003108:	d838      	bhi.n	800317c <eMBFuncReadWriteMultipleHoldingRegister+0x8e>
        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 800310a:	79c3      	ldrb	r3, [r0, #7]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 800310c:	7a02      	ldrb	r2, [r0, #8]
 800310e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8003112:	1e53      	subs	r3, r2, #1
 8003114:	2b78      	cmp	r3, #120	; 0x78
 8003116:	d831      	bhi.n	800317c <eMBFuncReadWriteMultipleHoldingRegister+0x8e>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8003118:	7a43      	ldrb	r3, [r0, #9]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800311a:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800311e:	d12d      	bne.n	800317c <eMBFuncReadWriteMultipleHoldingRegister+0x8e>
        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8003120:	7943      	ldrb	r3, [r0, #5]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8003122:	7981      	ldrb	r1, [r0, #6]
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8003124:	f890 9001 	ldrb.w	r9, [r0, #1]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8003128:	7886      	ldrb	r6, [r0, #2]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 800312a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegWriteAddress++;
 800312e:	3101      	adds	r1, #1
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8003130:	2301      	movs	r3, #1
 8003132:	b289      	uxth	r1, r1
 8003134:	300a      	adds	r0, #10
 8003136:	f001 f8f7 	bl	8004328 <eMBRegHoldingCB>
 800313a:	4603      	mov	r3, r0
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 800313c:	bb08      	cbnz	r0, 8003182 <eMBFuncReadWriteMultipleHoldingRegister+0x94>
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
                *usLen = MB_PDU_FUNC_OFF;

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 800313e:	2217      	movs	r2, #23
                *usLen = MB_PDU_FUNC_OFF;
 8003140:	8028      	strh	r0, [r5, #0]
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8003142:	7022      	strb	r2, [r4, #0]
                *usLen += 1;
 8003144:	882a      	ldrh	r2, [r5, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8003146:	ea4f 0847 	mov.w	r8, r7, lsl #1
                *usLen += 1;
 800314a:	3201      	adds	r2, #1
 800314c:	802a      	strh	r2, [r5, #0]
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 800314e:	f884 8001 	strb.w	r8, [r4, #1]
                *usLen += 1;
 8003152:	882a      	ldrh	r2, [r5, #0]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8003154:	ea46 2109 	orr.w	r1, r6, r9, lsl #8
                *usLen += 1;
 8003158:	3201      	adds	r2, #1
        usRegReadAddress++;
 800315a:	3101      	adds	r1, #1
                *usLen += 1;
 800315c:	802a      	strh	r2, [r5, #0]

                /* Make the read callback. */
                eRegStatus =
 800315e:	b289      	uxth	r1, r1
 8003160:	463a      	mov	r2, r7
 8003162:	1ca0      	adds	r0, r4, #2
 8003164:	f001 f8e0 	bl	8004328 <eMBRegHoldingCB>
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
                if( eRegStatus == MB_ENOERR )
 8003168:	b958      	cbnz	r0, 8003182 <eMBFuncReadWriteMultipleHoldingRegister+0x94>
                {
                    *usLen += 2 * usRegReadCount;
 800316a:	882b      	ldrh	r3, [r5, #0]
 800316c:	4498      	add	r8, r3
 800316e:	f8a5 8000 	strh.w	r8, [r5]
 8003172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    eMBException    eStatus = MB_EX_NONE;
 8003176:	2000      	movs	r0, #0
 8003178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800317c:	2003      	movs	r0, #3
        }
    }
    return eStatus;
 800317e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}
 8003182:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8003186:	f000 b83f 	b.w	8003208 <prveMBError2Exception>

0800318a <eMBFuncReadInputRegister>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800318a:	880b      	ldrh	r3, [r1, #0]
 800318c:	2b05      	cmp	r3, #5
{
 800318e:	b570      	push	{r4, r5, r6, lr}
 8003190:	460c      	mov	r4, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003192:	d124      	bne.n	80031de <eMBFuncReadInputRegister+0x54>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8003194:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8003196:	7902      	ldrb	r2, [r0, #4]
 8003198:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 800319c:	1e53      	subs	r3, r2, #1
 800319e:	2b7b      	cmp	r3, #123	; 0x7b
 80031a0:	d81d      	bhi.n	80031de <eMBFuncReadInputRegister+0x54>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
 80031a2:	2300      	movs	r3, #0
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80031a4:	7846      	ldrb	r6, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80031a6:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 80031a8:	8023      	strh	r3, [r4, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 80031aa:	2304      	movs	r3, #4
 80031ac:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 80031ae:	8823      	ldrh	r3, [r4, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 80031b0:	0055      	lsls	r5, r2, #1
            *usLen += 1;
 80031b2:	3301      	adds	r3, #1
 80031b4:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 80031b6:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 80031b8:	8823      	ldrh	r3, [r4, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80031ba:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
            *usLen += 1;
 80031be:	3301      	adds	r3, #1
        usRegAddress++;
 80031c0:	3101      	adds	r1, #1
            *usLen += 1;
 80031c2:	8023      	strh	r3, [r4, #0]

            eRegStatus =
 80031c4:	b289      	uxth	r1, r1
 80031c6:	3002      	adds	r0, #2
 80031c8:	f001 f88e 	bl	80042e8 <eMBRegInputCB>
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80031cc:	b118      	cbz	r0, 80031d6 <eMBFuncReadInputRegister+0x4c>
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80031ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 80031d2:	f000 b819 	b.w	8003208 <prveMBError2Exception>
                *usLen += usRegCount * 2;
 80031d6:	8822      	ldrh	r2, [r4, #0]
 80031d8:	4415      	add	r5, r2
 80031da:	8025      	strh	r5, [r4, #0]
 80031dc:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80031de:	2003      	movs	r0, #3
}
 80031e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080031e4 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 80031e4:	b538      	push	{r3, r4, r5, lr}
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 80031e6:	4b06      	ldr	r3, [pc, #24]	; (8003200 <eMBFuncReportSlaveID+0x1c>)
 80031e8:	881c      	ldrh	r4, [r3, #0]
{
 80031ea:	460d      	mov	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 80031ec:	4622      	mov	r2, r4
 80031ee:	4905      	ldr	r1, [pc, #20]	; (8003204 <eMBFuncReportSlaveID+0x20>)
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 80031f0:	3401      	adds	r4, #1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 80031f2:	3001      	adds	r0, #1
 80031f4:	f001 fd28 	bl	8004c48 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 80031f8:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 80031fa:	2000      	movs	r0, #0
 80031fc:	bd38      	pop	{r3, r4, r5, pc}
 80031fe:	bf00      	nop
 8003200:	200007bc 	.word	0x200007bc
 8003204:	2000079c 	.word	0x2000079c

08003208 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8003208:	2807      	cmp	r0, #7
 800320a:	bf9a      	itte	ls
 800320c:	4b01      	ldrls	r3, [pc, #4]	; (8003214 <prveMBError2Exception+0xc>)
 800320e:	5c18      	ldrbls	r0, [r3, r0]
 8003210:	2004      	movhi	r0, #4
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
 8003212:	4770      	bx	lr
 8003214:	0800909c 	.word	0x0800909c

08003218 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8003218:	b538      	push	{r3, r4, r5, lr}
 800321a:	4604      	mov	r4, r0
 800321c:	4608      	mov	r0, r1
 800321e:	4611      	mov	r1, r2
 8003220:	461a      	mov	r2, r3
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 8003222:	1e43      	subs	r3, r0, #1
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2bf6      	cmp	r3, #246	; 0xf6
 8003228:	d827      	bhi.n	800327a <eMBInit+0x62>
    {
        eStatus = MB_EINVAL;
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 800322a:	4b16      	ldr	r3, [pc, #88]	; (8003284 <eMBInit+0x6c>)
 800322c:	7018      	strb	r0, [r3, #0]

        switch ( eMode )
 800322e:	bb24      	cbnz	r4, 800327a <eMBInit+0x62>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 8003230:	4b15      	ldr	r3, [pc, #84]	; (8003288 <eMBInit+0x70>)
 8003232:	4d16      	ldr	r5, [pc, #88]	; (800328c <eMBInit+0x74>)
 8003234:	601d      	str	r5, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 8003236:	4b16      	ldr	r3, [pc, #88]	; (8003290 <eMBInit+0x78>)
 8003238:	4d16      	ldr	r5, [pc, #88]	; (8003294 <eMBInit+0x7c>)
 800323a:	601d      	str	r5, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 800323c:	4b16      	ldr	r3, [pc, #88]	; (8003298 <eMBInit+0x80>)
 800323e:	4d17      	ldr	r5, [pc, #92]	; (800329c <eMBInit+0x84>)
 8003240:	601d      	str	r5, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 8003242:	4b17      	ldr	r3, [pc, #92]	; (80032a0 <eMBInit+0x88>)
 8003244:	4d17      	ldr	r5, [pc, #92]	; (80032a4 <eMBInit+0x8c>)
 8003246:	601d      	str	r5, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8003248:	4b17      	ldr	r3, [pc, #92]	; (80032a8 <eMBInit+0x90>)
 800324a:	601c      	str	r4, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 800324c:	4b17      	ldr	r3, [pc, #92]	; (80032ac <eMBInit+0x94>)
 800324e:	4c18      	ldr	r4, [pc, #96]	; (80032b0 <eMBInit+0x98>)
 8003250:	601c      	str	r4, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 8003252:	4b18      	ldr	r3, [pc, #96]	; (80032b4 <eMBInit+0x9c>)
 8003254:	4c18      	ldr	r4, [pc, #96]	; (80032b8 <eMBInit+0xa0>)
 8003256:	601c      	str	r4, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 8003258:	4b18      	ldr	r3, [pc, #96]	; (80032bc <eMBInit+0xa4>)
 800325a:	4c19      	ldr	r4, [pc, #100]	; (80032c0 <eMBInit+0xa8>)
 800325c:	601c      	str	r4, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 800325e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003262:	f000 f967 	bl	8003534 <eMBRTUInit>
#endif
        default:
            eStatus = MB_EINVAL;
        }

        if( eStatus == MB_ENOERR )
 8003266:	4604      	mov	r4, r0
 8003268:	b928      	cbnz	r0, 8003276 <eMBInit+0x5e>
        {
            if( !xMBPortEventInit(  ) )
 800326a:	f000 f8b5 	bl	80033d8 <xMBPortEventInit>
 800326e:	b130      	cbz	r0, 800327e <eMBInit+0x66>
                eStatus = MB_EPORTERR;
            }
            else
            {
                eMBCurrentMode = eMode;
                eMBState = STATE_DISABLED;
 8003270:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <eMBInit+0xac>)
 8003272:	2201      	movs	r2, #1
 8003274:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
}
 8003276:	4620      	mov	r0, r4
 8003278:	bd38      	pop	{r3, r4, r5, pc}
            eStatus = MB_EINVAL;
 800327a:	2402      	movs	r4, #2
 800327c:	e7fb      	b.n	8003276 <eMBInit+0x5e>
                eStatus = MB_EPORTERR;
 800327e:	2403      	movs	r4, #3
 8003280:	e7f9      	b.n	8003276 <eMBInit+0x5e>
 8003282:	bf00      	nop
 8003284:	200007d5 	.word	0x200007d5
 8003288:	200007cc 	.word	0x200007cc
 800328c:	0800356d 	.word	0x0800356d
 8003290:	200007d0 	.word	0x200007d0
 8003294:	08003589 	.word	0x08003589
 8003298:	200007c4 	.word	0x200007c4
 800329c:	08003605 	.word	0x08003605
 80032a0:	200007c0 	.word	0x200007c0
 80032a4:	0800359d 	.word	0x0800359d
 80032a8:	200007c8 	.word	0x200007c8
 80032ac:	20000c74 	.word	0x20000c74
 80032b0:	0800367d 	.word	0x0800367d
 80032b4:	20000c6c 	.word	0x20000c6c
 80032b8:	08003711 	.word	0x08003711
 80032bc:	20000c70 	.word	0x20000c70
 80032c0:	08003799 	.word	0x08003799
 80032c4:	20000008 	.word	0x20000008

080032c8 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 80032c8:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 80032ca:	4c06      	ldr	r4, [pc, #24]	; (80032e4 <eMBEnable+0x1c>)
 80032cc:	7823      	ldrb	r3, [r4, #0]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d105      	bne.n	80032de <eMBEnable+0x16>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 80032d2:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <eMBEnable+0x20>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 80032d8:	2000      	movs	r0, #0
 80032da:	7020      	strb	r0, [r4, #0]
 80032dc:	bd10      	pop	{r4, pc}
    }
    else
    {
        eStatus = MB_EILLSTATE;
 80032de:	2006      	movs	r0, #6
    }
    return eStatus;
}
 80032e0:	bd10      	pop	{r4, pc}
 80032e2:	bf00      	nop
 80032e4:	20000008 	.word	0x20000008
 80032e8:	200007cc 	.word	0x200007cc

080032ec <eMBPoll>:
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 80032ec:	4b30      	ldr	r3, [pc, #192]	; (80033b0 <eMBPoll+0xc4>)
{
 80032ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( eMBState != STATE_ENABLED )
 80032f0:	781c      	ldrb	r4, [r3, #0]
 80032f2:	2c00      	cmp	r4, #0
 80032f4:	d159      	bne.n	80033aa <eMBPoll+0xbe>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 80032f6:	f10d 0007 	add.w	r0, sp, #7
 80032fa:	f000 f881 	bl	8003400 <xMBPortEventGet>
 80032fe:	2801      	cmp	r0, #1
 8003300:	4603      	mov	r3, r0
 8003302:	d001      	beq.n	8003308 <eMBPoll+0x1c>

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
 8003304:	2400      	movs	r4, #0
 8003306:	e005      	b.n	8003314 <eMBPoll+0x28>
        switch ( eEvent )
 8003308:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800330c:	2a01      	cmp	r2, #1
 800330e:	d004      	beq.n	800331a <eMBPoll+0x2e>
 8003310:	2a02      	cmp	r2, #2
 8003312:	d017      	beq.n	8003344 <eMBPoll+0x58>
}
 8003314:	4620      	mov	r0, r4
 8003316:	b003      	add	sp, #12
 8003318:	bdf0      	pop	{r4, r5, r6, r7, pc}
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 800331a:	4d26      	ldr	r5, [pc, #152]	; (80033b4 <eMBPoll+0xc8>)
 800331c:	4b26      	ldr	r3, [pc, #152]	; (80033b8 <eMBPoll+0xcc>)
 800331e:	4a27      	ldr	r2, [pc, #156]	; (80033bc <eMBPoll+0xd0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4927      	ldr	r1, [pc, #156]	; (80033c0 <eMBPoll+0xd4>)
 8003324:	4628      	mov	r0, r5
 8003326:	4798      	blx	r3
            if( eStatus == MB_ENOERR )
 8003328:	4604      	mov	r4, r0
 800332a:	2800      	cmp	r0, #0
 800332c:	d1ea      	bne.n	8003304 <eMBPoll+0x18>
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 800332e:	4a25      	ldr	r2, [pc, #148]	; (80033c4 <eMBPoll+0xd8>)
 8003330:	782b      	ldrb	r3, [r5, #0]
 8003332:	7812      	ldrb	r2, [r2, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d001      	beq.n	800333c <eMBPoll+0x50>
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1e3      	bne.n	8003304 <eMBPoll+0x18>
                    ( void )xMBPortEventPost( EV_EXECUTE );
 800333c:	2002      	movs	r0, #2
 800333e:	f000 f853 	bl	80033e8 <xMBPortEventPost>
 8003342:	e7e7      	b.n	8003314 <eMBPoll+0x28>
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8003344:	4d1e      	ldr	r5, [pc, #120]	; (80033c0 <eMBPoll+0xd4>)
            eException = MB_EX_ILLEGAL_FUNCTION;
 8003346:	4e20      	ldr	r6, [pc, #128]	; (80033c8 <eMBPoll+0xdc>)
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8003348:	6828      	ldr	r0, [r5, #0]
 800334a:	4f20      	ldr	r7, [pc, #128]	; (80033cc <eMBPoll+0xe0>)
 800334c:	7802      	ldrb	r2, [r0, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 800334e:	7033      	strb	r3, [r6, #0]
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8003350:	4b1f      	ldr	r3, [pc, #124]	; (80033d0 <eMBPoll+0xe4>)
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8003352:	703a      	strb	r2, [r7, #0]
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8003354:	f813 1034 	ldrb.w	r1, [r3, r4, lsl #3]
 8003358:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
 800335c:	b131      	cbz	r1, 800336c <eMBPoll+0x80>
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 800335e:	428a      	cmp	r2, r1
 8003360:	d11f      	bne.n	80033a2 <eMBPoll+0xb6>
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8003362:	4473      	add	r3, lr
 8003364:	4915      	ldr	r1, [pc, #84]	; (80033bc <eMBPoll+0xd0>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4798      	blx	r3
 800336a:	7030      	strb	r0, [r6, #0]
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 800336c:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <eMBPoll+0xc8>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0c7      	beq.n	8003304 <eMBPoll+0x18>
                if( eException != MB_EX_NONE )
 8003374:	7831      	ldrb	r1, [r6, #0]
 8003376:	4b11      	ldr	r3, [pc, #68]	; (80033bc <eMBPoll+0xd0>)
 8003378:	b159      	cbz	r1, 8003392 <eMBPoll+0xa6>
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 800337a:	2201      	movs	r2, #1
 800337c:	801a      	strh	r2, [r3, #0]
 800337e:	783a      	ldrb	r2, [r7, #0]
 8003380:	6828      	ldr	r0, [r5, #0]
 8003382:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003386:	7002      	strb	r2, [r0, #0]
                    ucMBFrame[usLength++] = eException;
 8003388:	881a      	ldrh	r2, [r3, #0]
 800338a:	6828      	ldr	r0, [r5, #0]
 800338c:	1c54      	adds	r4, r2, #1
 800338e:	801c      	strh	r4, [r3, #0]
 8003390:	5481      	strb	r1, [r0, r2]
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8003392:	4a10      	ldr	r2, [pc, #64]	; (80033d4 <eMBPoll+0xe8>)
 8003394:	6829      	ldr	r1, [r5, #0]
 8003396:	6814      	ldr	r4, [r2, #0]
 8003398:	881a      	ldrh	r2, [r3, #0]
 800339a:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <eMBPoll+0xd8>)
 800339c:	7818      	ldrb	r0, [r3, #0]
 800339e:	47a0      	blx	r4
 80033a0:	e7b0      	b.n	8003304 <eMBPoll+0x18>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80033a2:	3401      	adds	r4, #1
 80033a4:	2c10      	cmp	r4, #16
 80033a6:	d1d5      	bne.n	8003354 <eMBPoll+0x68>
 80033a8:	e7e0      	b.n	800336c <eMBPoll+0x80>
        return MB_EILLSTATE;
 80033aa:	2406      	movs	r4, #6
 80033ac:	e7b2      	b.n	8003314 <eMBPoll+0x28>
 80033ae:	bf00      	nop
 80033b0:	20000008 	.word	0x20000008
 80033b4:	200007dc 	.word	0x200007dc
 80033b8:	200007c0 	.word	0x200007c0
 80033bc:	200007de 	.word	0x200007de
 80033c0:	200007d8 	.word	0x200007d8
 80033c4:	200007d5 	.word	0x200007d5
 80033c8:	200007be 	.word	0x200007be
 80033cc:	200007d4 	.word	0x200007d4
 80033d0:	2000000c 	.word	0x2000000c
 80033d4:	200007c4 	.word	0x200007c4

080033d8 <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
 80033d8:	4b02      	ldr	r3, [pc, #8]	; (80033e4 <xMBPortEventInit+0xc>)
 80033da:	2200      	movs	r2, #0
 80033dc:	701a      	strb	r2, [r3, #0]
    return TRUE;
}
 80033de:	2001      	movs	r0, #1
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	200007e1 	.word	0x200007e1

080033e8 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
 80033e8:	4a03      	ldr	r2, [pc, #12]	; (80033f8 <xMBPortEventPost+0x10>)
 80033ea:	2301      	movs	r3, #1
 80033ec:	7013      	strb	r3, [r2, #0]
    eQueuedEvent = eEvent;
 80033ee:	4a03      	ldr	r2, [pc, #12]	; (80033fc <xMBPortEventPost+0x14>)
 80033f0:	7010      	strb	r0, [r2, #0]
    return TRUE;
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	200007e1 	.word	0x200007e1
 80033fc:	200007e0 	.word	0x200007e0

08003400 <xMBPortEventGet>:
BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
 8003400:	4a05      	ldr	r2, [pc, #20]	; (8003418 <xMBPortEventGet+0x18>)
 8003402:	7813      	ldrb	r3, [r2, #0]
 8003404:	b12b      	cbz	r3, 8003412 <xMBPortEventGet+0x12>
    {
        *eEvent = eQueuedEvent;
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <xMBPortEventGet+0x1c>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	7003      	strb	r3, [r0, #0]
        xEventInQueue = FALSE;
 800340c:	2300      	movs	r3, #0
 800340e:	7013      	strb	r3, [r2, #0]
        xEventHappened = TRUE;
 8003410:	2301      	movs	r3, #1
    }
    return xEventHappened;
}
 8003412:	4618      	mov	r0, r3
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	200007e1 	.word	0x200007e1
 800341c:	200007e0 	.word	0x200007e0

08003420 <vMBPortSerialEnable>:
extern UART_HandleTypeDef huart1;

/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8003420:	4b0a      	ldr	r3, [pc, #40]	; (800344c <vMBPortSerialEnable+0x2c>)
    /* If xRXEnable enable serial receive interrupts. If xTxENable enable
     * transmitter empty interrupts.
     */
	if (xRxEnable) {
 8003422:	b158      	cbz	r0, 800343c <vMBPortSerialEnable+0x1c>
	  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	6802      	ldr	r2, [r0, #0]
 8003428:	f042 0220 	orr.w	r2, r2, #32
	} else {
	  __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 800342c:	6002      	str	r2, [r0, #0]
	}

	if (xTxEnable) {
	  __HAL_UART_ENABLE_IT(&huart1, UART_IT_TXE);
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	6813      	ldr	r3, [r2, #0]
	if (xTxEnable) {
 8003432:	b141      	cbz	r1, 8003446 <vMBPortSerialEnable+0x26>
	  __HAL_UART_ENABLE_IT(&huart1, UART_IT_TXE);
 8003434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	} else {
	  __HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE);
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	4770      	bx	lr
	  __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 800343c:	6818      	ldr	r0, [r3, #0]
 800343e:	6802      	ldr	r2, [r0, #0]
 8003440:	f022 0220 	bic.w	r2, r2, #32
 8003444:	e7f2      	b.n	800342c <vMBPortSerialEnable+0xc>
	  __HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE);
 8003446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800344a:	e7f5      	b.n	8003438 <vMBPortSerialEnable+0x18>
 800344c:	20000e20 	.word	0x20000e20

08003450 <xMBPortSerialInit>:
	/*
	  Do nothing, Initialization is handled by MX_USART1_UART_Init()
	  Fixed port, baudrate, databit and parity
	  */
	return TRUE;
}
 8003450:	2001      	movs	r0, #1
 8003452:	4770      	bx	lr

08003454 <xMBPortSerialPutByte>:

BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 8003454:	b507      	push	{r0, r1, r2, lr}
 8003456:	a902      	add	r1, sp, #8
    /* Put a byte in the UARTs transmit buffer. This function is called
     * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
     * called. */
	return (HAL_OK == HAL_UART_Transmit(&huart1, (uint8_t*)&ucByte, 1, 10));
 8003458:	230a      	movs	r3, #10
{
 800345a:	f801 0d01 	strb.w	r0, [r1, #-1]!
	return (HAL_OK == HAL_UART_Transmit(&huart1, (uint8_t*)&ucByte, 1, 10));
 800345e:	2201      	movs	r2, #1
 8003460:	4804      	ldr	r0, [pc, #16]	; (8003474 <xMBPortSerialPutByte+0x20>)
 8003462:	f7ff fc6a 	bl	8002d3a <HAL_UART_Transmit>
}
 8003466:	fab0 f080 	clz	r0, r0
 800346a:	0940      	lsrs	r0, r0, #5
 800346c:	b003      	add	sp, #12
 800346e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003472:	bf00      	nop
 8003474:	20000e20 	.word	0x20000e20

08003478 <xMBPortSerialGetByte>:
xMBPortSerialGetByte( CHAR * pucByte )
{
    /* Return the byte in the UARTs receive buffer. This function is called
     * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
     */
	*pucByte = (uint8_t)(huart1.Instance->RDR & (uint8_t)0x00FF);
 8003478:	4b02      	ldr	r3, [pc, #8]	; (8003484 <xMBPortSerialGetByte+0xc>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800347e:	7003      	strb	r3, [r0, #0]
    return TRUE;
}
 8003480:	2001      	movs	r0, #1
 8003482:	4770      	bx	lr
 8003484:	20000e20 	.word	0x20000e20

08003488 <xMBPortTimersInit>:
uint16_t downcounter = 0;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 8003488:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	TIM_MasterConfigTypeDef sMasterConfig;

	htim7.Instance = TIM7;
 800348a:	4d11      	ldr	r5, [pc, #68]	; (80034d0 <xMBPortTimersInit+0x48>)
 800348c:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <xMBPortTimersInit+0x4c>)
 800348e:	602b      	str	r3, [r5, #0]
{
 8003490:	4606      	mov	r6, r0
	htim7.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / 1000000) - 1;
 8003492:	f7fe fec5 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
 8003496:	4b10      	ldr	r3, [pc, #64]	; (80034d8 <xMBPortTimersInit+0x50>)
 8003498:	fbb0 f0f3 	udiv	r0, r0, r3
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim7.Init.Period = 50 - 1;
 800349c:	2331      	movs	r3, #49	; 0x31
	htim7.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / 1000000) - 1;
 800349e:	3801      	subs	r0, #1
	htim7.Init.Period = 50 - 1;
 80034a0:	60eb      	str	r3, [r5, #12]

	timeout = usTim1Timerout50us;
 80034a2:	4b0e      	ldr	r3, [pc, #56]	; (80034dc <xMBPortTimersInit+0x54>)
	htim7.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / 1000000) - 1;
 80034a4:	6068      	str	r0, [r5, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034a6:	2400      	movs	r4, #0

	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80034a8:	4628      	mov	r0, r5
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034aa:	60ac      	str	r4, [r5, #8]
	timeout = usTim1Timerout50us;
 80034ac:	801e      	strh	r6, [r3, #0]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80034ae:	f7ff f975 	bl	800279c <HAL_TIM_Base_Init>
 80034b2:	b958      	cbnz	r0, 80034cc <xMBPortTimersInit+0x44>
	{
	  return FALSE;
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80034b4:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034b6:	9003      	str	r0, [sp, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80034b8:	a901      	add	r1, sp, #4
 80034ba:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80034bc:	9301      	str	r3, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80034be:	f7ff f987 	bl	80027d0 <HAL_TIMEx_MasterConfigSynchronization>
	  return FALSE;
 80034c2:	fab0 f080 	clz	r0, r0
 80034c6:	0940      	lsrs	r0, r0, #5
	{
	  return FALSE;
	}

	return TRUE;
}
 80034c8:	b004      	add	sp, #16
 80034ca:	bd70      	pop	{r4, r5, r6, pc}
	  return FALSE;
 80034cc:	4620      	mov	r0, r4
 80034ce:	e7fb      	b.n	80034c8 <xMBPortTimersInit+0x40>
 80034d0:	20000fa0 	.word	0x20000fa0
 80034d4:	40001400 	.word	0x40001400
 80034d8:	000f4240 	.word	0x000f4240
 80034dc:	200007e4 	.word	0x200007e4

080034e0 <vMBPortTimersEnable>:

inline void
vMBPortTimersEnable(  )
{
	/* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
	downcounter = timeout;
 80034e0:	4b03      	ldr	r3, [pc, #12]	; (80034f0 <vMBPortTimersEnable+0x10>)
	HAL_TIM_Base_Start_IT(&htim7);
 80034e2:	4804      	ldr	r0, [pc, #16]	; (80034f4 <vMBPortTimersEnable+0x14>)
	downcounter = timeout;
 80034e4:	881a      	ldrh	r2, [r3, #0]
 80034e6:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <vMBPortTimersEnable+0x18>)
 80034e8:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7);
 80034ea:	f7ff b80d 	b.w	8002508 <HAL_TIM_Base_Start_IT>
 80034ee:	bf00      	nop
 80034f0:	200007e4 	.word	0x200007e4
 80034f4:	20000fa0 	.word	0x20000fa0
 80034f8:	200007e2 	.word	0x200007e2

080034fc <vMBPortTimersDisable>:

inline void
vMBPortTimersDisable(  )
{
    /* Disable any pending timers. */
	HAL_TIM_Base_Stop_IT(&htim7);
 80034fc:	4801      	ldr	r0, [pc, #4]	; (8003504 <vMBPortTimersDisable+0x8>)
 80034fe:	f7ff b819 	b.w	8002534 <HAL_TIM_Base_Stop_IT>
 8003502:	bf00      	nop
 8003504:	20000fa0 	.word	0x20000fa0

08003508 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8003508:	b570      	push	{r4, r5, r6, lr}
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
 800350a:	23ff      	movs	r3, #255	; 0xff
    int             iIndex;

    while( usLen-- )
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 800350c:	4d07      	ldr	r5, [pc, #28]	; (800352c <usMBCRC16+0x24>)
        ucCRCHi = aucCRCLo[iIndex];
 800350e:	4e08      	ldr	r6, [pc, #32]	; (8003530 <usMBCRC16+0x28>)
 8003510:	4401      	add	r1, r0
    UCHAR           ucCRCHi = 0xFF;
 8003512:	461c      	mov	r4, r3
    while( usLen-- )
 8003514:	4288      	cmp	r0, r1
 8003516:	d102      	bne.n	800351e <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
}
 8003518:	ea43 2004 	orr.w	r0, r3, r4, lsl #8
 800351c:	bd70      	pop	{r4, r5, r6, pc}
        iIndex = ucCRCLo ^ *( pucFrame++ );
 800351e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003522:	405a      	eors	r2, r3
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8003524:	5cab      	ldrb	r3, [r5, r2]
 8003526:	4063      	eors	r3, r4
        ucCRCHi = aucCRCLo[iIndex];
 8003528:	5cb4      	ldrb	r4, [r6, r2]
 800352a:	e7f3      	b.n	8003514 <usMBCRC16+0xc>
 800352c:	080090a4 	.word	0x080090a4
 8003530:	080091a4 	.word	0x080091a4

08003534 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8003534:	b510      	push	{r4, lr}
 8003536:	4614      	mov	r4, r2
 8003538:	4608      	mov	r0, r1

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 800353a:	2208      	movs	r2, #8
 800353c:	4621      	mov	r1, r4
 800353e:	f7ff ff87 	bl	8003450 <xMBPortSerialInit>
 8003542:	2801      	cmp	r0, #1
 8003544:	d10c      	bne.n	8003560 <eMBRTUInit+0x2c>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 8003546:	f5b4 4f96 	cmp.w	r4, #19200	; 0x4b00
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 800354a:	bf97      	itett	ls
 800354c:	4806      	ldrls	r0, [pc, #24]	; (8003568 <eMBRTUInit+0x34>)
            usTimerT35_50us = 35;       /* 1800us. */
 800354e:	2023      	movhi	r0, #35	; 0x23
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8003550:	0064      	lslls	r4, r4, #1
 8003552:	fbb0 f0f4 	udivls	r0, r0, r4
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8003556:	b280      	uxth	r0, r0
 8003558:	f7ff ff96 	bl	8003488 <xMBPortTimersInit>
 800355c:	2801      	cmp	r0, #1
 800355e:	d001      	beq.n	8003564 <eMBRTUInit+0x30>
        {
            eStatus = MB_EPORTERR;
 8003560:	2003      	movs	r0, #3
 8003562:	bd10      	pop	{r4, pc}
    eMBErrorCode    eStatus = MB_ENOERR;
 8003564:	2000      	movs	r0, #0
        }
    }
    EXIT_CRITICAL_SECTION(  );

    return eStatus;
}
 8003566:	bd10      	pop	{r4, pc}
 8003568:	00177fa0 	.word	0x00177fa0

0800356c <eMBRTUStart>:

void
eMBRTUStart( void )
{
 800356c:	b508      	push	{r3, lr}
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 800356e:	4b05      	ldr	r3, [pc, #20]	; (8003584 <eMBRTUStart+0x18>)
 8003570:	2100      	movs	r1, #0
    vMBPortSerialEnable( TRUE, FALSE );
 8003572:	2001      	movs	r0, #1
    eRcvState = STATE_RX_INIT;
 8003574:	7019      	strb	r1, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 8003576:	f7ff ff53 	bl	8003420 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );

    EXIT_CRITICAL_SECTION(  );
}
 800357a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    vMBPortTimersEnable(  );
 800357e:	f7ff bfaf 	b.w	80034e0 <vMBPortTimersEnable>
 8003582:	bf00      	nop
 8003584:	200007e6 	.word	0x200007e6

08003588 <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8003588:	b508      	push	{r3, lr}
    ENTER_CRITICAL_SECTION(  );
    vMBPortSerialEnable( FALSE, FALSE );
 800358a:	2100      	movs	r1, #0
 800358c:	4608      	mov	r0, r1
 800358e:	f7ff ff47 	bl	8003420 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
    EXIT_CRITICAL_SECTION(  );
}
 8003592:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    vMBPortTimersDisable(  );
 8003596:	f7ff bfb1 	b.w	80034fc <vMBPortTimersDisable>
	...

0800359c <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 800359c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 80035a0:	4d13      	ldr	r5, [pc, #76]	; (80035f0 <eMBRTUReceive+0x54>)
 80035a2:	882b      	ldrh	r3, [r5, #0]
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2bff      	cmp	r3, #255	; 0xff
{
 80035a8:	4680      	mov	r8, r0
 80035aa:	460e      	mov	r6, r1
 80035ac:	4617      	mov	r7, r2
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 80035ae:	d905      	bls.n	80035bc <eMBRTUReceive+0x20>
 80035b0:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <eMBRTUReceive+0x58>)
 80035b2:	4a11      	ldr	r2, [pc, #68]	; (80035f8 <eMBRTUReceive+0x5c>)
 80035b4:	4811      	ldr	r0, [pc, #68]	; (80035fc <eMBRTUReceive+0x60>)
 80035b6:	219c      	movs	r1, #156	; 0x9c
 80035b8:	f001 faec 	bl	8004b94 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 80035bc:	882b      	ldrh	r3, [r5, #0]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2b03      	cmp	r3, #3
 80035c2:	d802      	bhi.n	80035ca <eMBRTUReceive+0x2e>
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
        xFrameReceived = TRUE;
    }
    else
    {
        eStatus = MB_EIO;
 80035c4:	2005      	movs	r0, #5
 80035c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 80035ca:	8829      	ldrh	r1, [r5, #0]
 80035cc:	4c0c      	ldr	r4, [pc, #48]	; (8003600 <eMBRTUReceive+0x64>)
 80035ce:	b289      	uxth	r1, r1
 80035d0:	4620      	mov	r0, r4
 80035d2:	f7ff ff99 	bl	8003508 <usMBCRC16>
 80035d6:	2800      	cmp	r0, #0
 80035d8:	d1f4      	bne.n	80035c4 <eMBRTUReceive+0x28>
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 80035da:	f814 2b01 	ldrb.w	r2, [r4], #1
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 80035de:	8829      	ldrh	r1, [r5, #0]
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 80035e0:	f888 2000 	strb.w	r2, [r8]
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 80035e4:	3903      	subs	r1, #3
 80035e6:	8039      	strh	r1, [r7, #0]
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 80035e8:	6034      	str	r4, [r6, #0]
    }

    EXIT_CRITICAL_SECTION(  );
    return eStatus;
}
 80035ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035ee:	bf00      	nop
 80035f0:	200007ec 	.word	0x200007ec
 80035f4:	080092eb 	.word	0x080092eb
 80035f8:	080092a4 	.word	0x080092a4
 80035fc:	08009310 	.word	0x08009310
 8003600:	20000c80 	.word	0x20000c80

08003604 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8003604:	b538      	push	{r3, r4, r5, lr}
 8003606:	4603      	mov	r3, r0

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 8003608:	4817      	ldr	r0, [pc, #92]	; (8003668 <eMBRTUSend+0x64>)
 800360a:	7805      	ldrb	r5, [r0, #0]
 800360c:	b2ed      	uxtb	r5, r5
 800360e:	2d01      	cmp	r5, #1
 8003610:	d127      	bne.n	8003662 <eMBRTUSend+0x5e>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8003612:	4c16      	ldr	r4, [pc, #88]	; (800366c <eMBRTUSend+0x68>)
 8003614:	1e48      	subs	r0, r1, #1
 8003616:	6020      	str	r0, [r4, #0]
        usSndBufferCount = 1;
 8003618:	4c15      	ldr	r4, [pc, #84]	; (8003670 <eMBRTUSend+0x6c>)
 800361a:	8025      	strh	r5, [r4, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 800361c:	f801 3c01 	strb.w	r3, [r1, #-1]
        usSndBufferCount += usLength;
 8003620:	8823      	ldrh	r3, [r4, #0]
 8003622:	fa12 f283 	uxtah	r2, r2, r3
 8003626:	b292      	uxth	r2, r2
 8003628:	8022      	strh	r2, [r4, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 800362a:	8821      	ldrh	r1, [r4, #0]
 800362c:	b289      	uxth	r1, r1
 800362e:	f7ff ff6b 	bl	8003508 <usMBCRC16>
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8003632:	8823      	ldrh	r3, [r4, #0]
 8003634:	490f      	ldr	r1, [pc, #60]	; (8003674 <eMBRTUSend+0x70>)
 8003636:	b29b      	uxth	r3, r3
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	b292      	uxth	r2, r2
 800363c:	8022      	strh	r2, [r4, #0]
 800363e:	b2c2      	uxtb	r2, r0
 8003640:	54ca      	strb	r2, [r1, r3]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8003642:	8823      	ldrh	r3, [r4, #0]
 8003644:	b29b      	uxth	r3, r3
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	b292      	uxth	r2, r2
 800364a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800364e:	8022      	strh	r2, [r4, #0]
 8003650:	54c8      	strb	r0, [r1, r3]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 8003652:	4b09      	ldr	r3, [pc, #36]	; (8003678 <eMBRTUSend+0x74>)
        vMBPortSerialEnable( FALSE, TRUE );
 8003654:	4629      	mov	r1, r5
 8003656:	2000      	movs	r0, #0
        eSndState = STATE_TX_XMIT;
 8003658:	701d      	strb	r5, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 800365a:	f7ff fee1 	bl	8003420 <vMBPortSerialEnable>
    eMBErrorCode    eStatus = MB_ENOERR;
 800365e:	2000      	movs	r0, #0
 8003660:	bd38      	pop	{r3, r4, r5, pc}
    }
    else
    {
        eStatus = MB_EIO;
 8003662:	2005      	movs	r0, #5
    }
    EXIT_CRITICAL_SECTION(  );
    return eStatus;
}
 8003664:	bd38      	pop	{r3, r4, r5, pc}
 8003666:	bf00      	nop
 8003668:	200007e6 	.word	0x200007e6
 800366c:	200007e8 	.word	0x200007e8
 8003670:	200007ee 	.word	0x200007ee
 8003674:	20000c80 	.word	0x20000c80
 8003678:	200007e7 	.word	0x200007e7

0800367c <xMBRTUReceiveFSM>:
xMBRTUReceiveFSM( void )
{
    BOOL            xTaskNeedSwitch = FALSE;
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 800367c:	4b1d      	ldr	r3, [pc, #116]	; (80036f4 <xMBRTUReceiveFSM+0x78>)
 800367e:	781b      	ldrb	r3, [r3, #0]
{
 8003680:	b507      	push	{r0, r1, r2, lr}
    assert( eSndState == STATE_TX_IDLE );
 8003682:	b12b      	cbz	r3, 8003690 <xMBRTUReceiveFSM+0x14>
 8003684:	4b1c      	ldr	r3, [pc, #112]	; (80036f8 <xMBRTUReceiveFSM+0x7c>)
 8003686:	4a1d      	ldr	r2, [pc, #116]	; (80036fc <xMBRTUReceiveFSM+0x80>)
 8003688:	481d      	ldr	r0, [pc, #116]	; (8003700 <xMBRTUReceiveFSM+0x84>)
 800368a:	21e6      	movs	r1, #230	; 0xe6
 800368c:	f001 fa82 	bl	8004b94 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 8003690:	f10d 0007 	add.w	r0, sp, #7
 8003694:	f7ff fef0 	bl	8003478 <xMBPortSerialGetByte>

    switch ( eRcvState )
 8003698:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <xMBRTUReceiveFSM+0x88>)
 800369a:	781a      	ldrb	r2, [r3, #0]
 800369c:	2a03      	cmp	r2, #3
 800369e:	d822      	bhi.n	80036e6 <xMBRTUReceiveFSM+0x6a>
 80036a0:	e8df f002 	tbb	[pc, r2]
 80036a4:	1f11021f 	.word	0x1f11021f
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 80036a8:	4917      	ldr	r1, [pc, #92]	; (8003708 <xMBRTUReceiveFSM+0x8c>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	800a      	strh	r2, [r1, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 80036ae:	880a      	ldrh	r2, [r1, #0]
 80036b0:	b292      	uxth	r2, r2
 80036b2:	1c50      	adds	r0, r2, #1
 80036b4:	b280      	uxth	r0, r0
 80036b6:	8008      	strh	r0, [r1, #0]
 80036b8:	4914      	ldr	r1, [pc, #80]	; (800370c <xMBRTUReceiveFSM+0x90>)
 80036ba:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80036be:	5488      	strb	r0, [r1, r2]
        eRcvState = STATE_RX_RCV;
 80036c0:	2202      	movs	r2, #2
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 80036c2:	701a      	strb	r2, [r3, #0]
 80036c4:	e00d      	b.n	80036e2 <xMBRTUReceiveFSM+0x66>
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 80036c6:	4a10      	ldr	r2, [pc, #64]	; (8003708 <xMBRTUReceiveFSM+0x8c>)
 80036c8:	8811      	ldrh	r1, [r2, #0]
 80036ca:	b289      	uxth	r1, r1
 80036cc:	29ff      	cmp	r1, #255	; 0xff
 80036ce:	d80e      	bhi.n	80036ee <xMBRTUReceiveFSM+0x72>
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 80036d0:	8813      	ldrh	r3, [r2, #0]
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	1c59      	adds	r1, r3, #1
 80036d6:	b289      	uxth	r1, r1
 80036d8:	8011      	strh	r1, [r2, #0]
 80036da:	4a0c      	ldr	r2, [pc, #48]	; (800370c <xMBRTUReceiveFSM+0x90>)
 80036dc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80036e0:	54d1      	strb	r1, [r2, r3]
        }
        vMBPortTimersEnable(  );
 80036e2:	f7ff fefd 	bl	80034e0 <vMBPortTimersEnable>
        break;
    }
    return xTaskNeedSwitch;
}
 80036e6:	2000      	movs	r0, #0
 80036e8:	b003      	add	sp, #12
 80036ea:	f85d fb04 	ldr.w	pc, [sp], #4
            eRcvState = STATE_RX_ERROR;
 80036ee:	2203      	movs	r2, #3
 80036f0:	e7e7      	b.n	80036c2 <xMBRTUReceiveFSM+0x46>
 80036f2:	bf00      	nop
 80036f4:	200007e7 	.word	0x200007e7
 80036f8:	08009331 	.word	0x08009331
 80036fc:	080092b2 	.word	0x080092b2
 8003700:	08009310 	.word	0x08009310
 8003704:	200007e6 	.word	0x200007e6
 8003708:	200007ec 	.word	0x200007ec
 800370c:	20000c80 	.word	0x20000c80

08003710 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8003710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BOOL            xNeedPoll = FALSE;

    assert( eRcvState == STATE_RX_IDLE );
 8003712:	4b1a      	ldr	r3, [pc, #104]	; (800377c <xMBRTUTransmitFSM+0x6c>)
 8003714:	7818      	ldrb	r0, [r3, #0]
 8003716:	b2c0      	uxtb	r0, r0
 8003718:	2801      	cmp	r0, #1
 800371a:	d006      	beq.n	800372a <xMBRTUTransmitFSM+0x1a>
 800371c:	4b18      	ldr	r3, [pc, #96]	; (8003780 <xMBRTUTransmitFSM+0x70>)
 800371e:	4a19      	ldr	r2, [pc, #100]	; (8003784 <xMBRTUTransmitFSM+0x74>)
 8003720:	4819      	ldr	r0, [pc, #100]	; (8003788 <xMBRTUTransmitFSM+0x78>)
 8003722:	f240 1121 	movw	r1, #289	; 0x121
 8003726:	f001 fa35 	bl	8004b94 <__assert_func>

    switch ( eSndState )
 800372a:	4f18      	ldr	r7, [pc, #96]	; (800378c <xMBRTUTransmitFSM+0x7c>)
 800372c:	783b      	ldrb	r3, [r7, #0]
 800372e:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8003732:	b11b      	cbz	r3, 800373c <xMBRTUTransmitFSM+0x2c>
 8003734:	2e01      	cmp	r6, #1
 8003736:	d005      	beq.n	8003744 <xMBRTUTransmitFSM+0x34>
    BOOL            xNeedPoll = FALSE;
 8003738:	2500      	movs	r5, #0
 800373a:	e01d      	b.n	8003778 <xMBRTUTransmitFSM+0x68>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 800373c:	4631      	mov	r1, r6
 800373e:	f7ff fe6f 	bl	8003420 <vMBPortSerialEnable>
 8003742:	e7f9      	b.n	8003738 <xMBRTUTransmitFSM+0x28>
        break;

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 8003744:	4d12      	ldr	r5, [pc, #72]	; (8003790 <xMBRTUTransmitFSM+0x80>)
 8003746:	882c      	ldrh	r4, [r5, #0]
 8003748:	b2a4      	uxth	r4, r4
 800374a:	b164      	cbz	r4, 8003766 <xMBRTUTransmitFSM+0x56>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 800374c:	4c11      	ldr	r4, [pc, #68]	; (8003794 <xMBRTUTransmitFSM+0x84>)
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	7818      	ldrb	r0, [r3, #0]
 8003752:	f7ff fe7f 	bl	8003454 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 8003756:	6823      	ldr	r3, [r4, #0]
 8003758:	3301      	adds	r3, #1
 800375a:	6023      	str	r3, [r4, #0]
            usSndBufferCount--;
 800375c:	882b      	ldrh	r3, [r5, #0]
 800375e:	3b01      	subs	r3, #1
 8003760:	b29b      	uxth	r3, r3
 8003762:	802b      	strh	r3, [r5, #0]
 8003764:	e7e8      	b.n	8003738 <xMBRTUTransmitFSM+0x28>
        }
        else
        {
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 8003766:	2003      	movs	r0, #3
 8003768:	f7ff fe3e 	bl	80033e8 <xMBPortEventPost>
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
 800376c:	4621      	mov	r1, r4
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 800376e:	4605      	mov	r5, r0
            vMBPortSerialEnable( TRUE, FALSE );
 8003770:	4630      	mov	r0, r6
 8003772:	f7ff fe55 	bl	8003420 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 8003776:	703c      	strb	r4, [r7, #0]
        }
        break;
    }

    return xNeedPoll;
}
 8003778:	4628      	mov	r0, r5
 800377a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800377c:	200007e6 	.word	0x200007e6
 8003780:	080093af 	.word	0x080093af
 8003784:	080092c3 	.word	0x080092c3
 8003788:	08009310 	.word	0x08009310
 800378c:	200007e7 	.word	0x200007e7
 8003790:	200007ee 	.word	0x200007ee
 8003794:	200007e8 	.word	0x200007e8

08003798 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8003798:	b538      	push	{r3, r4, r5, lr}
    BOOL            xNeedPoll = FALSE;

    switch ( eRcvState )
 800379a:	4b14      	ldr	r3, [pc, #80]	; (80037ec <xMBRTUTimerT35Expired+0x54>)
 800379c:	7818      	ldrb	r0, [r3, #0]
 800379e:	b2c0      	uxtb	r0, r0
 80037a0:	2802      	cmp	r0, #2
 80037a2:	461d      	mov	r5, r3
 80037a4:	d00b      	beq.n	80037be <xMBRTUTimerT35Expired+0x26>
 80037a6:	2803      	cmp	r0, #3
 80037a8:	d01d      	beq.n	80037e6 <xMBRTUTimerT35Expired+0x4e>
 80037aa:	b950      	cbnz	r0, 80037c2 <xMBRTUTimerT35Expired+0x2a>
        break;

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 80037ac:	f7ff fe1c 	bl	80033e8 <xMBPortEventPost>
 80037b0:	4604      	mov	r4, r0
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 80037b2:	f7ff fea3 	bl	80034fc <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 80037b6:	2301      	movs	r3, #1
 80037b8:	702b      	strb	r3, [r5, #0]

    return xNeedPoll;
}
 80037ba:	4620      	mov	r0, r4
 80037bc:	bd38      	pop	{r3, r4, r5, pc}
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 80037be:	2001      	movs	r0, #1
 80037c0:	e7f4      	b.n	80037ac <xMBRTUTimerT35Expired+0x14>
        assert( ( eRcvState == STATE_RX_INIT ) ||
 80037c2:	781a      	ldrb	r2, [r3, #0]
 80037c4:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 80037c8:	2a00      	cmp	r2, #0
 80037ca:	d0f2      	beq.n	80037b2 <xMBRTUTimerT35Expired+0x1a>
 80037cc:	781a      	ldrb	r2, [r3, #0]
 80037ce:	2a02      	cmp	r2, #2
 80037d0:	d009      	beq.n	80037e6 <xMBRTUTimerT35Expired+0x4e>
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	d006      	beq.n	80037e6 <xMBRTUTimerT35Expired+0x4e>
 80037d8:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <xMBRTUTimerT35Expired+0x58>)
 80037da:	4a06      	ldr	r2, [pc, #24]	; (80037f4 <xMBRTUTimerT35Expired+0x5c>)
 80037dc:	4806      	ldr	r0, [pc, #24]	; (80037f8 <xMBRTUTimerT35Expired+0x60>)
 80037de:	f240 115b 	movw	r1, #347	; 0x15b
 80037e2:	f001 f9d7 	bl	8004b94 <__assert_func>
    BOOL            xNeedPoll = FALSE;
 80037e6:	2400      	movs	r4, #0
 80037e8:	e7e3      	b.n	80037b2 <xMBRTUTimerT35Expired+0x1a>
 80037ea:	bf00      	nop
 80037ec:	200007e6 	.word	0x200007e6
 80037f0:	0800934c 	.word	0x0800934c
 80037f4:	080092d5 	.word	0x080092d5
 80037f8:	08009310 	.word	0x08009310

080037fc <LTC2990_ConfigureControlReg>:
#include "adc.h"

/*
 *	Configure control register
 */
HAL_StatusTypeDef LTC2990_ConfigureControlReg(I2C_HandleTypeDef *hi2c) {
 80037fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_StatusTypeDef retStatus;

	uint8_t controlBuffer[1];
	controlBuffer[0] = 0x1F; //All modes per measurement, V1-V2 (measures current in and out of battery), V3 measures battery voltage (currently disconnected in schematic), V4 measures battery temperature (currently disconnected in schematic)
 80037fe:	aa06      	add	r2, sp, #24
 8003800:	231f      	movs	r3, #31
 8003802:	f802 3d04 	strb.w	r3, [r2, #-4]!

	retStatus = HAL_I2C_Mem_Write(hi2c, 0b10011000, 0x1, I2C_MEMADD_SIZE_8BIT,
 8003806:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800380a:	9302      	str	r3, [sp, #8]
 800380c:	2301      	movs	r3, #1
 800380e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8003812:	2198      	movs	r1, #152	; 0x98
 8003814:	461a      	mov	r2, r3
 8003816:	f7fd ffcb 	bl	80017b0 <HAL_I2C_Mem_Write>
			controlBuffer, I2C_MEMADD_SIZE_8BIT, 500);

	return retStatus;
}
 800381a:	b007      	add	sp, #28
 800381c:	f85d fb04 	ldr.w	pc, [sp], #4

08003820 <LTC2990_Trigger>:

/*
 * Trigger new ADC conversion
 */
HAL_StatusTypeDef LTC2990_Trigger(I2C_HandleTypeDef *hi2c) {
 8003820:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_StatusTypeDef retStatus;
	uint8_t triggerVal = 0x0;
 8003822:	aa06      	add	r2, sp, #24
 8003824:	2300      	movs	r3, #0
 8003826:	f802 3d01 	strb.w	r3, [r2, #-1]!

	retStatus = HAL_I2C_Mem_Write(hi2c, 0b10011000, 0x02,
 800382a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800382e:	9302      	str	r3, [sp, #8]
 8003830:	2301      	movs	r3, #1
 8003832:	e88d 000c 	stmia.w	sp, {r2, r3}
 8003836:	2198      	movs	r1, #152	; 0x98
 8003838:	2202      	movs	r2, #2
 800383a:	f7fd ffb9 	bl	80017b0 <HAL_I2C_Mem_Write>
			I2C_MEMADD_SIZE_8BIT, &triggerVal, I2C_MEMADD_SIZE_8BIT, 1500);

	return retStatus;
}
 800383e:	b007      	add	sp, #28
 8003840:	f85d fb04 	ldr.w	pc, [sp], #4

08003844 <LTC2990_WaitForConversion>:

/*
 * Wait for new ADC conversion
 */
HAL_StatusTypeDef LTC2990_WaitForConversion(I2C_HandleTypeDef *hi2c,
		uint16_t timeout_ms) {
 8003844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003848:	b086      	sub	sp, #24
	HAL_StatusTypeDef retStatus;

	uint8_t statusBuffer = 0;
 800384a:	ae06      	add	r6, sp, #24
 800384c:	2400      	movs	r4, #0
 800384e:	f806 4d01 	strb.w	r4, [r6, #-1]!
		uint16_t timeout_ms) {
 8003852:	4680      	mov	r8, r0
 8003854:	460d      	mov	r5, r1
	uint8_t vccReady = 0;

	while ((timeout_ms != 0) && (vccReady == 0)) {
 8003856:	4627      	mov	r7, r4
		retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x00,
 8003858:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
 800385c:	f04f 0a01 	mov.w	sl, #1
	while ((timeout_ms != 0) && (vccReady == 0)) {
 8003860:	b105      	cbz	r5, 8003864 <LTC2990_WaitForConversion+0x20>
 8003862:	b11c      	cbz	r4, 800386c <LTC2990_WaitForConversion+0x28>
		HAL_Delay(10);
		timeout_ms -= 10;
	}

	return retStatus;
}
 8003864:	4638      	mov	r0, r7
 8003866:	b006      	add	sp, #24
 8003868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x00,
 800386c:	4622      	mov	r2, r4
 800386e:	2301      	movs	r3, #1
 8003870:	2198      	movs	r1, #152	; 0x98
 8003872:	f8cd 9008 	str.w	r9, [sp, #8]
 8003876:	e88d 0440 	stmia.w	sp, {r6, sl}
 800387a:	4640      	mov	r0, r8
 800387c:	f7fe f850 	bl	8001920 <HAL_I2C_Mem_Read>
		vccReady = (statusBuffer & 0b00000100);
 8003880:	f89d 4017 	ldrb.w	r4, [sp, #23]
		retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x00,
 8003884:	4607      	mov	r7, r0
		timeout_ms -= 10;
 8003886:	3d0a      	subs	r5, #10
		HAL_Delay(10);
 8003888:	200a      	movs	r0, #10
		vccReady = (statusBuffer & 0b00000100);
 800388a:	f004 0404 	and.w	r4, r4, #4
		HAL_Delay(10);
 800388e:	f7fd fbcf 	bl	8001030 <HAL_Delay>
		timeout_ms -= 10;
 8003892:	b2ad      	uxth	r5, r5
 8003894:	e7e4      	b.n	8003860 <LTC2990_WaitForConversion+0x1c>
	...

08003898 <LTC2990_ReadVcc>:


/*
 * Read Vcc voltage
 */
HAL_StatusTypeDef LTC2990_ReadVcc(I2C_HandleTypeDef *hi2c, float* Vcc_V) {
 8003898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800389c:	b086      	sub	sp, #24
	HAL_StatusTypeDef retStatus;
	uint16_t Vcc_regData;
	uint8_t VccReadBuffer[2];

	//Read MSB of Vcc ()
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x0E, I2C_MEMADD_SIZE_8BIT,
 800389e:	2501      	movs	r5, #1
 80038a0:	ab05      	add	r3, sp, #20
 80038a2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80038a6:	9300      	str	r3, [sp, #0]
HAL_StatusTypeDef LTC2990_ReadVcc(I2C_HandleTypeDef *hi2c, float* Vcc_V) {
 80038a8:	460f      	mov	r7, r1
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x0E, I2C_MEMADD_SIZE_8BIT,
 80038aa:	9602      	str	r6, [sp, #8]
 80038ac:	9501      	str	r5, [sp, #4]
 80038ae:	462b      	mov	r3, r5
 80038b0:	220e      	movs	r2, #14
 80038b2:	2198      	movs	r1, #152	; 0x98
HAL_StatusTypeDef LTC2990_ReadVcc(I2C_HandleTypeDef *hi2c, float* Vcc_V) {
 80038b4:	4680      	mov	r8, r0
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x0E, I2C_MEMADD_SIZE_8BIT,
 80038b6:	f7fe f833 	bl	8001920 <HAL_I2C_Mem_Read>
			&VccReadBuffer[0], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 80038ba:	4604      	mov	r4, r0
 80038bc:	bb38      	cbnz	r0, 800390e <LTC2990_ReadVcc+0x76>
		return retStatus;
	}

	//Read LSB of Vcc ()
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x0F, I2C_MEMADD_SIZE_8BIT,
 80038be:	f10d 0315 	add.w	r3, sp, #21
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	9602      	str	r6, [sp, #8]
 80038c6:	9501      	str	r5, [sp, #4]
 80038c8:	462b      	mov	r3, r5
 80038ca:	220f      	movs	r2, #15
 80038cc:	2198      	movs	r1, #152	; 0x98
 80038ce:	4640      	mov	r0, r8
 80038d0:	f7fe f826 	bl	8001920 <HAL_I2C_Mem_Read>
			&VccReadBuffer[1], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 80038d4:	4604      	mov	r4, r0
 80038d6:	b9d0      	cbnz	r0, 800390e <LTC2990_ReadVcc+0x76>
		return retStatus;
	}

	//Convert register contents to Vcc
	Vcc_regData = ((VccReadBuffer[0] << 8) | VccReadBuffer[1]) & ~0xC000; //D[13:0]
 80038d8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80038dc:	f89d 0015 	ldrb.w	r0, [sp, #21]
 80038e0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	*Vcc_V = 2.5 + ((Vcc_regData * 305.18) / 1000000);
 80038e4:	f3c0 000d 	ubfx	r0, r0, #0, #14
 80038e8:	f7fc fe24 	bl	8000534 <__aeabi_i2d>
 80038ec:	a30b      	add	r3, pc, #44	; (adr r3, 800391c <LTC2990_ReadVcc+0x84>)
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	f7fc fe85 	bl	8000600 <__aeabi_dmul>
 80038f6:	a30b      	add	r3, pc, #44	; (adr r3, 8003924 <LTC2990_ReadVcc+0x8c>)
 80038f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fc:	f7fc ffaa 	bl	8000854 <__aeabi_ddiv>
 8003900:	2200      	movs	r2, #0
 8003902:	4b05      	ldr	r3, [pc, #20]	; (8003918 <LTC2990_ReadVcc+0x80>)
 8003904:	f7fc fcca 	bl	800029c <__adddf3>
 8003908:	f7fd f972 	bl	8000bf0 <__aeabi_d2f>
 800390c:	6038      	str	r0, [r7, #0]

	return retStatus;
}
 800390e:	4620      	mov	r0, r4
 8003910:	b006      	add	sp, #24
 8003912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003916:	bf00      	nop
 8003918:	40040000 	.word	0x40040000
 800391c:	47ae147b 	.word	0x47ae147b
 8003920:	407312e1 	.word	0x407312e1
 8003924:	00000000 	.word	0x00000000
 8003928:	412e8480 	.word	0x412e8480
 800392c:	00000000 	.word	0x00000000

08003930 <LTC2990_ReadV2>:
}

/*
 * Read V2 voltage
 */
HAL_StatusTypeDef LTC2990_ReadV2(I2C_HandleTypeDef *hi2c, float* V2_V) {
 8003930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003934:	b086      	sub	sp, #24
	HAL_StatusTypeDef retStatus;
	uint16_t V2_regData;
	uint8_t V2ReadBuffer[2];

	//Read MSB of V2
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x08, I2C_MEMADD_SIZE_8BIT,
 8003936:	2501      	movs	r5, #1
 8003938:	ab05      	add	r3, sp, #20
 800393a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800393e:	9300      	str	r3, [sp, #0]
HAL_StatusTypeDef LTC2990_ReadV2(I2C_HandleTypeDef *hi2c, float* V2_V) {
 8003940:	460f      	mov	r7, r1
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x08, I2C_MEMADD_SIZE_8BIT,
 8003942:	9602      	str	r6, [sp, #8]
 8003944:	9501      	str	r5, [sp, #4]
 8003946:	462b      	mov	r3, r5
 8003948:	2208      	movs	r2, #8
 800394a:	2198      	movs	r1, #152	; 0x98
HAL_StatusTypeDef LTC2990_ReadV2(I2C_HandleTypeDef *hi2c, float* V2_V) {
 800394c:	4680      	mov	r8, r0
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x08, I2C_MEMADD_SIZE_8BIT,
 800394e:	f7fd ffe7 	bl	8001920 <HAL_I2C_Mem_Read>
			&V2ReadBuffer[0], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 8003952:	4604      	mov	r4, r0
 8003954:	bb38      	cbnz	r0, 80039a6 <LTC2990_ReadV2+0x76>
		return retStatus;
	}

	//Read LSB of V2
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x09, I2C_MEMADD_SIZE_8BIT,
 8003956:	f10d 0315 	add.w	r3, sp, #21
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	9602      	str	r6, [sp, #8]
 800395e:	9501      	str	r5, [sp, #4]
 8003960:	462b      	mov	r3, r5
 8003962:	2209      	movs	r2, #9
 8003964:	2198      	movs	r1, #152	; 0x98
 8003966:	4640      	mov	r0, r8
 8003968:	f7fd ffda 	bl	8001920 <HAL_I2C_Mem_Read>
			&V2ReadBuffer[1], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 800396c:	4604      	mov	r4, r0
 800396e:	b9d0      	cbnz	r0, 80039a6 <LTC2990_ReadV2+0x76>
		return retStatus;
	}

	//Convert register contents to V4
	V2_regData = ((V2ReadBuffer[0] << 8) | V2ReadBuffer[1]) & ~0xC000; //D[13:0]
 8003970:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8003974:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8003978:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	*V2_V = (((V2_regData * 305.18) / 1000000)* vdividerFactor);
 800397c:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8003980:	f7fc fdd8 	bl	8000534 <__aeabi_i2d>
 8003984:	a30a      	add	r3, pc, #40	; (adr r3, 80039b0 <LTC2990_ReadV2+0x80>)
 8003986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398a:	f7fc fe39 	bl	8000600 <__aeabi_dmul>
 800398e:	a30a      	add	r3, pc, #40	; (adr r3, 80039b8 <LTC2990_ReadV2+0x88>)
 8003990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003994:	f7fc ff5e 	bl	8000854 <__aeabi_ddiv>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	f7fc fc7e 	bl	800029c <__adddf3>
 80039a0:	f7fd f926 	bl	8000bf0 <__aeabi_d2f>
 80039a4:	6038      	str	r0, [r7, #0]

	return retStatus;
}
 80039a6:	4620      	mov	r0, r4
 80039a8:	b006      	add	sp, #24
 80039aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039ae:	bf00      	nop
 80039b0:	47ae147b 	.word	0x47ae147b
 80039b4:	407312e1 	.word	0x407312e1
 80039b8:	00000000 	.word	0x00000000
 80039bc:	412e8480 	.word	0x412e8480

080039c0 <LTC2990_ReadV1>:

/*
 * Read V1 voltage
 */
HAL_StatusTypeDef LTC2990_ReadV1(I2C_HandleTypeDef *hi2c, float* V1_V) {
 80039c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c4:	b086      	sub	sp, #24
	HAL_StatusTypeDef retStatus;
	uint16_t V1_regData;
	uint8_t V1ReadBuffer[2];

	//Read MSB of V1
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x06, I2C_MEMADD_SIZE_8BIT,
 80039c6:	2501      	movs	r5, #1
 80039c8:	ab05      	add	r3, sp, #20
 80039ca:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80039ce:	9300      	str	r3, [sp, #0]
HAL_StatusTypeDef LTC2990_ReadV1(I2C_HandleTypeDef *hi2c, float* V1_V) {
 80039d0:	460f      	mov	r7, r1
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x06, I2C_MEMADD_SIZE_8BIT,
 80039d2:	9602      	str	r6, [sp, #8]
 80039d4:	9501      	str	r5, [sp, #4]
 80039d6:	462b      	mov	r3, r5
 80039d8:	2206      	movs	r2, #6
 80039da:	2198      	movs	r1, #152	; 0x98
HAL_StatusTypeDef LTC2990_ReadV1(I2C_HandleTypeDef *hi2c, float* V1_V) {
 80039dc:	4680      	mov	r8, r0
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x06, I2C_MEMADD_SIZE_8BIT,
 80039de:	f7fd ff9f 	bl	8001920 <HAL_I2C_Mem_Read>
			&V1ReadBuffer[0], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 80039e2:	4604      	mov	r4, r0
 80039e4:	bb38      	cbnz	r0, 8003a36 <LTC2990_ReadV1+0x76>
		return retStatus;
	}

	//Read LSB of V1
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x07, I2C_MEMADD_SIZE_8BIT,
 80039e6:	f10d 0315 	add.w	r3, sp, #21
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	9602      	str	r6, [sp, #8]
 80039ee:	9501      	str	r5, [sp, #4]
 80039f0:	462b      	mov	r3, r5
 80039f2:	2207      	movs	r2, #7
 80039f4:	2198      	movs	r1, #152	; 0x98
 80039f6:	4640      	mov	r0, r8
 80039f8:	f7fd ff92 	bl	8001920 <HAL_I2C_Mem_Read>
			&V1ReadBuffer[1], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 80039fc:	4604      	mov	r4, r0
 80039fe:	b9d0      	cbnz	r0, 8003a36 <LTC2990_ReadV1+0x76>
		return retStatus;
	}

	//Convert register contents to V4
	V1_regData = ((V1ReadBuffer[0] << 8) | V1ReadBuffer[1]) & ~0xC000; //D[13:0]
 8003a00:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8003a04:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8003a08:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	*V1_V = (((V1_regData * 305.18) / 1000000) * vdividerFactor);
 8003a0c:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8003a10:	f7fc fd90 	bl	8000534 <__aeabi_i2d>
 8003a14:	a30a      	add	r3, pc, #40	; (adr r3, 8003a40 <LTC2990_ReadV1+0x80>)
 8003a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1a:	f7fc fdf1 	bl	8000600 <__aeabi_dmul>
 8003a1e:	a30a      	add	r3, pc, #40	; (adr r3, 8003a48 <LTC2990_ReadV1+0x88>)
 8003a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a24:	f7fc ff16 	bl	8000854 <__aeabi_ddiv>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	f7fc fc36 	bl	800029c <__adddf3>
 8003a30:	f7fd f8de 	bl	8000bf0 <__aeabi_d2f>
 8003a34:	6038      	str	r0, [r7, #0]

	return retStatus;
}
 8003a36:	4620      	mov	r0, r4
 8003a38:	b006      	add	sp, #24
 8003a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a3e:	bf00      	nop
 8003a40:	47ae147b 	.word	0x47ae147b
 8003a44:	407312e1 	.word	0x407312e1
 8003a48:	00000000 	.word	0x00000000
 8003a4c:	412e8480 	.word	0x412e8480

08003a50 <LTC2990_ReadCurrent>:
 * Charging gives negative current value when V1_V < V4_V
 * Discharging gives positive current value when V1_V > V4_V
 */
HAL_StatusTypeDef LTC2990_ReadCurrent(I2C_HandleTypeDef *hi2c, float V1_V, float V4_V, float* current_value)
{
	*current_value = (V1_V - V4_V)*1000.0/shuntR;
 8003a50:	ee70 7a60 	vsub.f32	s15, s0, s1
{
 8003a54:	b510      	push	{r4, lr}
	*current_value = (V1_V - V4_V)*1000.0/shuntR;
 8003a56:	ee17 0a90 	vmov	r0, s15
{
 8003a5a:	460c      	mov	r4, r1
	*current_value = (V1_V - V4_V)*1000.0/shuntR;
 8003a5c:	f7fc fd7c 	bl	8000558 <__aeabi_f2d>
 8003a60:	2200      	movs	r2, #0
 8003a62:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <LTC2990_ReadCurrent+0x38>)
 8003a64:	f7fc fdcc 	bl	8000600 <__aeabi_dmul>
 8003a68:	a305      	add	r3, pc, #20	; (adr r3, 8003a80 <LTC2990_ReadCurrent+0x30>)
 8003a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6e:	f7fc fef1 	bl	8000854 <__aeabi_ddiv>
 8003a72:	f7fd f8bd 	bl	8000bf0 <__aeabi_d2f>
 8003a76:	6020      	str	r0, [r4, #0]
}
 8003a78:	bd10      	pop	{r4, pc}
 8003a7a:	bf00      	nop
 8003a7c:	f3af 8000 	nop.w
 8003a80:	40000000 	.word	0x40000000
 8003a84:	3fc3d70a 	.word	0x3fc3d70a
 8003a88:	408f4000 	.word	0x408f4000

08003a8c <LTC2990_ReadVoltage>:
 */
HAL_StatusTypeDef LTC2990_ReadVoltage(I2C_HandleTypeDef *hi2c, ADC_CHANNEL ch, float* voltage_value)
{
	HAL_StatusTypeDef retStatus;

	if(ch == VCC)
 8003a8c:	b911      	cbnz	r1, 8003a94 <LTC2990_ReadVoltage+0x8>
	{
		//Vcc
		retStatus = LTC2990_ReadVcc(hi2c, voltage_value);
 8003a8e:	4611      	mov	r1, r2
 8003a90:	f7ff bf02 	b.w	8003898 <LTC2990_ReadVcc>
	}
	else if(ch == BATTV)
 8003a94:	2901      	cmp	r1, #1
 8003a96:	d102      	bne.n	8003a9e <LTC2990_ReadVoltage+0x12>
	{
		//Vbatt
		retStatus = LTC2990_ReadV1(hi2c, voltage_value);
 8003a98:	4611      	mov	r1, r2
 8003a9a:	f7ff bf91 	b.w	80039c0 <LTC2990_ReadV1>
	}
	else if(ch == BATTV_2)
 8003a9e:	2904      	cmp	r1, #4
 8003aa0:	d102      	bne.n	8003aa8 <LTC2990_ReadVoltage+0x1c>
	{
		//Vbatt2
		retStatus = LTC2990_ReadV2(hi2c, voltage_value);
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	f7ff bf44 	b.w	8003930 <LTC2990_ReadV2>
	}
	else
	{
		//default case
		*voltage_value = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	6013      	str	r3, [r2, #0]
		retStatus = HAL_OK;
	}

	return retStatus;
}
 8003aac:	2000      	movs	r0, #0
 8003aae:	4770      	bx	lr

08003ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ab0:	b530      	push	{r4, r5, lr}
 8003ab2:	b0a7      	sub	sp, #156	; 0x9c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ab4:	2228      	movs	r2, #40	; 0x28
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	a806      	add	r0, sp, #24
 8003aba:	f001 f8d0 	bl	8004c5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003abe:	2214      	movs	r2, #20
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	a801      	add	r0, sp, #4
 8003ac4:	f001 f8cb 	bl	8004c5e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ac8:	2258      	movs	r2, #88	; 0x58
 8003aca:	2100      	movs	r1, #0
 8003acc:	a810      	add	r0, sp, #64	; 0x40
 8003ace:	f001 f8c6 	bl	8004c5e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ad6:	2310      	movs	r3, #16
 8003ad8:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003ade:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ae0:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ae2:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003ae4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003ae8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003aea:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003aec:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003aee:	f7fe f821 	bl	8001b34 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003af2:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003af4:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003af6:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003af8:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003afe:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003b00:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b02:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b04:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b06:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003b08:	f7fe fadc 	bl	80020c4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8003b0c:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <SystemClock_Config+0x74>)
 8003b0e:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b10:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003b12:	9412      	str	r4, [sp, #72]	; 0x48
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003b14:	9413      	str	r4, [sp, #76]	; 0x4c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003b16:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8003b18:	9422      	str	r4, [sp, #136]	; 0x88
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8003b1a:	9423      	str	r4, [sp, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b1c:	f7fe fbb0 	bl	8002280 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8003b20:	b027      	add	sp, #156	; 0x9c
 8003b22:	bd30      	pop	{r4, r5, pc}
 8003b24:	01800023 	.word	0x01800023

08003b28 <getLatestADCValues>:
		//If state is idle
		//Start counting rest time
	}
}

void getLatestADCValues(){
 8003b28:	b537      	push	{r0, r1, r2, r4, r5, lr}

	float battV_2 = 0;
	float voltageADCVcc = 0;

	//Trigger a new conversion
	LTC2990_Trigger(&hi2c1);
 8003b2a:	4c13      	ldr	r4, [pc, #76]	; (8003b78 <getLatestADCValues+0x50>)
	float voltageADCVcc = 0;
 8003b2c:	ad02      	add	r5, sp, #8
	float battV_2 = 0;
 8003b2e:	2300      	movs	r3, #0
	float voltageADCVcc = 0;
 8003b30:	f845 3d04 	str.w	r3, [r5, #-4]!
	LTC2990_Trigger(&hi2c1);
 8003b34:	4620      	mov	r0, r4
	float battV_2 = 0;
 8003b36:	9300      	str	r3, [sp, #0]
	LTC2990_Trigger(&hi2c1);
 8003b38:	f7ff fe72 	bl	8003820 <LTC2990_Trigger>
	LTC2990_WaitForConversion(&hi2c1, 100);
 8003b3c:	2164      	movs	r1, #100	; 0x64
 8003b3e:	4620      	mov	r0, r4
 8003b40:	f7ff fe80 	bl	8003844 <LTC2990_WaitForConversion>

	//Quick ADC test - Read Vcc
	LTC2990_ReadVoltage(&hi2c1, VCC, &voltageADCVcc);
 8003b44:	462a      	mov	r2, r5

	//Current reading
	LTC2990_ReadVoltage(&hi2c1, BATTV, &lastReadBattV);
 8003b46:	4d0d      	ldr	r5, [pc, #52]	; (8003b7c <getLatestADCValues+0x54>)
	LTC2990_ReadVoltage(&hi2c1, VCC, &voltageADCVcc);
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	f7ff ff9e 	bl	8003a8c <LTC2990_ReadVoltage>
	LTC2990_ReadVoltage(&hi2c1, BATTV, &lastReadBattV);
 8003b50:	462a      	mov	r2, r5
 8003b52:	2101      	movs	r1, #1
 8003b54:	4620      	mov	r0, r4
 8003b56:	f7ff ff99 	bl	8003a8c <LTC2990_ReadVoltage>
	LTC2990_ReadVoltage(&hi2c1, BATTV_2, &battV_2);
 8003b5a:	466a      	mov	r2, sp
 8003b5c:	2104      	movs	r1, #4
 8003b5e:	4620      	mov	r0, r4
 8003b60:	f7ff ff94 	bl	8003a8c <LTC2990_ReadVoltage>
    LTC2990_ReadCurrent(&hi2c1, lastReadBattV, battV_2, &lastReadCurr_mA);
 8003b64:	4906      	ldr	r1, [pc, #24]	; (8003b80 <getLatestADCValues+0x58>)
 8003b66:	eddd 0a00 	vldr	s1, [sp]
 8003b6a:	ed95 0a00 	vldr	s0, [r5]
 8003b6e:	4620      	mov	r0, r4
 8003b70:	f7ff ff6e 	bl	8003a50 <LTC2990_ReadCurrent>
}
 8003b74:	b003      	add	sp, #12
 8003b76:	bd30      	pop	{r4, r5, pc}
 8003b78:	20000d94 	.word	0x20000d94
 8003b7c:	20000800 	.word	0x20000800
 8003b80:	20000804 	.word	0x20000804

08003b84 <updateOLED>:


void updateOLED(){
 8003b84:	b510      	push	{r4, lr}
	ssd1306_SetCursor(52,25);
	ssd1306_WriteString(voltageADCVccString, Font_7x10, White);*/

	//State
	ssd1306_SetCursor(15,04);
	ssd1306_WriteString("State  ", Font_7x10, White);
 8003b86:	4c53      	ldr	r4, [pc, #332]	; (8003cd4 <updateOLED+0x150>)
void updateOLED(){
 8003b88:	b08c      	sub	sp, #48	; 0x30
	ssd1306_SetCursor(15,04);
 8003b8a:	2104      	movs	r1, #4
 8003b8c:	200f      	movs	r0, #15
 8003b8e:	f000 fd39 	bl	8004604 <ssd1306_SetCursor>
	ssd1306_WriteString("State  ", Font_7x10, White);
 8003b92:	2301      	movs	r3, #1
 8003b94:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003b98:	484f      	ldr	r0, [pc, #316]	; (8003cd8 <updateOLED+0x154>)
 8003b9a:	f000 fd1d 	bl	80045d8 <ssd1306_WriteString>
	ssd1306_SetCursor(52,04);
 8003b9e:	2104      	movs	r1, #4
 8003ba0:	2034      	movs	r0, #52	; 0x34
 8003ba2:	f000 fd2f 	bl	8004604 <ssd1306_SetCursor>
	if(currentState == IDLE){
 8003ba6:	4b4d      	ldr	r3, [pc, #308]	; (8003cdc <updateOLED+0x158>)
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f040 8082 	bne.w	8003cb4 <updateOLED+0x130>
		ssd1306_WriteString("IDLE", Font_7x10, White);
 8003bb0:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003bb4:	484a      	ldr	r0, [pc, #296]	; (8003ce0 <updateOLED+0x15c>)
 8003bb6:	2301      	movs	r3, #1
	} else if(currentState == CHG){
		ssd1306_WriteString("CHG", Font_7x10, White);
	} else if(currentState == DCHG){
		ssd1306_WriteString("DCHG", Font_7x10, White);
	} else {
		ssd1306_WriteString(" ", Font_7x10, White);
 8003bb8:	f000 fd0e 	bl	80045d8 <ssd1306_WriteString>
	}

	//Power
	char powerString[10];
	sprintf(powerString, "%.2f W", lastComputedPower);
 8003bbc:	4b49      	ldr	r3, [pc, #292]	; (8003ce4 <updateOLED+0x160>)
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	f7fc fcca 	bl	8000558 <__aeabi_f2d>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4668      	mov	r0, sp
 8003bca:	4947      	ldr	r1, [pc, #284]	; (8003ce8 <updateOLED+0x164>)
 8003bcc:	f001 f850 	bl	8004c70 <sprintf>
	ssd1306_SetCursor(15,14);
 8003bd0:	210e      	movs	r1, #14
 8003bd2:	200f      	movs	r0, #15
 8003bd4:	f000 fd16 	bl	8004604 <ssd1306_SetCursor>
	ssd1306_WriteString("Pwr   ", Font_7x10, White);
 8003bd8:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003bdc:	2301      	movs	r3, #1
 8003bde:	4843      	ldr	r0, [pc, #268]	; (8003cec <updateOLED+0x168>)
 8003be0:	f000 fcfa 	bl	80045d8 <ssd1306_WriteString>
	ssd1306_SetCursor(52,14);
 8003be4:	210e      	movs	r1, #14
 8003be6:	2034      	movs	r0, #52	; 0x34
 8003be8:	f000 fd0c 	bl	8004604 <ssd1306_SetCursor>
	ssd1306_WriteString(powerString, Font_7x10, White);
 8003bec:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	4668      	mov	r0, sp
 8003bf4:	f000 fcf0 	bl	80045d8 <ssd1306_WriteString>

	//SOC
	char socString[10];
	sprintf(socString, "%.2f %",currentCellSOC);
 8003bf8:	4b3d      	ldr	r3, [pc, #244]	; (8003cf0 <updateOLED+0x16c>)
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	f7fc fcac 	bl	8000558 <__aeabi_f2d>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	a803      	add	r0, sp, #12
 8003c06:	493b      	ldr	r1, [pc, #236]	; (8003cf4 <updateOLED+0x170>)
 8003c08:	f001 f832 	bl	8004c70 <sprintf>
	ssd1306_SetCursor(15,25);
 8003c0c:	2119      	movs	r1, #25
 8003c0e:	200f      	movs	r0, #15
 8003c10:	f000 fcf8 	bl	8004604 <ssd1306_SetCursor>
	ssd1306_WriteString("SOC  ", Font_7x10, White);
 8003c14:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003c18:	2301      	movs	r3, #1
 8003c1a:	4837      	ldr	r0, [pc, #220]	; (8003cf8 <updateOLED+0x174>)
 8003c1c:	f000 fcdc 	bl	80045d8 <ssd1306_WriteString>
	ssd1306_SetCursor(52,25);
 8003c20:	2119      	movs	r1, #25
 8003c22:	2034      	movs	r0, #52	; 0x34
 8003c24:	f000 fcee 	bl	8004604 <ssd1306_SetCursor>
	ssd1306_WriteString(socString, Font_7x10, White);
 8003c28:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	a803      	add	r0, sp, #12
 8003c30:	f000 fcd2 	bl	80045d8 <ssd1306_WriteString>


	//Current
	char currentString[10];
	sprintf(currentString, "%.3f mA",lastReadCurr_mA);
 8003c34:	4b31      	ldr	r3, [pc, #196]	; (8003cfc <updateOLED+0x178>)
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	f7fc fc8e 	bl	8000558 <__aeabi_f2d>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	a806      	add	r0, sp, #24
 8003c42:	492f      	ldr	r1, [pc, #188]	; (8003d00 <updateOLED+0x17c>)
 8003c44:	f001 f814 	bl	8004c70 <sprintf>
	ssd1306_SetCursor(15,37);
 8003c48:	2125      	movs	r1, #37	; 0x25
 8003c4a:	200f      	movs	r0, #15
 8003c4c:	f000 fcda 	bl	8004604 <ssd1306_SetCursor>
	ssd1306_WriteString("Cur  ", Font_7x10, White);
 8003c50:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003c54:	2301      	movs	r3, #1
 8003c56:	482b      	ldr	r0, [pc, #172]	; (8003d04 <updateOLED+0x180>)
 8003c58:	f000 fcbe 	bl	80045d8 <ssd1306_WriteString>
	ssd1306_SetCursor(52,37);
 8003c5c:	2125      	movs	r1, #37	; 0x25
 8003c5e:	2034      	movs	r0, #52	; 0x34
 8003c60:	f000 fcd0 	bl	8004604 <ssd1306_SetCursor>
	ssd1306_WriteString(currentString, Font_7x10, White);
 8003c64:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003c68:	2301      	movs	r3, #1
 8003c6a:	a806      	add	r0, sp, #24
 8003c6c:	f000 fcb4 	bl	80045d8 <ssd1306_WriteString>

	//Voltage
	char battVString[10];
	sprintf(battVString, "%.3f V",lastReadBattV);
 8003c70:	4b25      	ldr	r3, [pc, #148]	; (8003d08 <updateOLED+0x184>)
 8003c72:	6818      	ldr	r0, [r3, #0]
 8003c74:	f7fc fc70 	bl	8000558 <__aeabi_f2d>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	a809      	add	r0, sp, #36	; 0x24
 8003c7e:	4923      	ldr	r1, [pc, #140]	; (8003d0c <updateOLED+0x188>)
 8003c80:	f000 fff6 	bl	8004c70 <sprintf>
	ssd1306_SetCursor(15,49);
 8003c84:	2131      	movs	r1, #49	; 0x31
 8003c86:	200f      	movs	r0, #15
 8003c88:	f000 fcbc 	bl	8004604 <ssd1306_SetCursor>
	ssd1306_WriteString("BattV   ", Font_7x10, White);
 8003c8c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003c90:	2301      	movs	r3, #1
 8003c92:	481f      	ldr	r0, [pc, #124]	; (8003d10 <updateOLED+0x18c>)
 8003c94:	f000 fca0 	bl	80045d8 <ssd1306_WriteString>
	ssd1306_SetCursor(52,49);
 8003c98:	2131      	movs	r1, #49	; 0x31
 8003c9a:	2034      	movs	r0, #52	; 0x34
 8003c9c:	f000 fcb2 	bl	8004604 <ssd1306_SetCursor>
	ssd1306_WriteString(battVString, Font_7x10, White);
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003ca6:	a809      	add	r0, sp, #36	; 0x24
 8003ca8:	f000 fc96 	bl	80045d8 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8003cac:	f000 fb96 	bl	80043dc <ssd1306_UpdateScreen>

}
 8003cb0:	b00c      	add	sp, #48	; 0x30
 8003cb2:	bd10      	pop	{r4, pc}
	} else if(currentState == CHG){
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d103      	bne.n	8003cc0 <updateOLED+0x13c>
		ssd1306_WriteString("CHG", Font_7x10, White);
 8003cb8:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003cbc:	4815      	ldr	r0, [pc, #84]	; (8003d14 <updateOLED+0x190>)
 8003cbe:	e77b      	b.n	8003bb8 <updateOLED+0x34>
	} else if(currentState == DCHG){
 8003cc0:	2b02      	cmp	r3, #2
		ssd1306_WriteString("DCHG", Font_7x10, White);
 8003cc2:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003cc6:	f04f 0301 	mov.w	r3, #1
 8003cca:	bf0c      	ite	eq
 8003ccc:	4812      	ldreq	r0, [pc, #72]	; (8003d18 <updateOLED+0x194>)
		ssd1306_WriteString(" ", Font_7x10, White);
 8003cce:	4813      	ldrne	r0, [pc, #76]	; (8003d1c <updateOLED+0x198>)
 8003cd0:	e772      	b.n	8003bb8 <updateOLED+0x34>
 8003cd2:	bf00      	nop
 8003cd4:	2000008c 	.word	0x2000008c
 8003cd8:	08009b3e 	.word	0x08009b3e
 8003cdc:	200007f9 	.word	0x200007f9
 8003ce0:	080093c5 	.word	0x080093c5
 8003ce4:	200007fc 	.word	0x200007fc
 8003ce8:	08009b4b 	.word	0x08009b4b
 8003cec:	08009b52 	.word	0x08009b52
 8003cf0:	200007f4 	.word	0x200007f4
 8003cf4:	08009b59 	.word	0x08009b59
 8003cf8:	08009b60 	.word	0x08009b60
 8003cfc:	20000804 	.word	0x20000804
 8003d00:	08009b66 	.word	0x08009b66
 8003d04:	08009b6e 	.word	0x08009b6e
 8003d08:	20000800 	.word	0x20000800
 8003d0c:	08009b74 	.word	0x08009b74
 8003d10:	08009b7b 	.word	0x08009b7b
 8003d14:	08009b47 	.word	0x08009b47
 8003d18:	08009b46 	.word	0x08009b46
 8003d1c:	08009b82 	.word	0x08009b82

08003d20 <updateModbusInputRegisters>:
	HAL_UART_Transmit(&huart1, (uint8_t*)voltageString , 10, 10);

}

void updateModbusInputRegisters()
{
 8003d20:	b530      	push	{r4, r5, lr}
	/* ABCDEF */
	usRegInputBuf[0] = currentState;
 8003d22:	4b21      	ldr	r3, [pc, #132]	; (8003da8 <updateModbusInputRegisters+0x88>)
 8003d24:	4c21      	ldr	r4, [pc, #132]	; (8003dac <updateModbusInputRegisters+0x8c>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	8023      	strh	r3, [r4, #0]
	char powerString[10];
	memset(powerString, 0, 10);
	sprintf(powerString, "%.2f W ", lastComputedPower);
 8003d2a:	4b21      	ldr	r3, [pc, #132]	; (8003db0 <updateModbusInputRegisters+0x90>)
{
 8003d2c:	b085      	sub	sp, #20
	memset(powerString, 0, 10);
 8003d2e:	2500      	movs	r5, #0
	sprintf(powerString, "%.2f W ", lastComputedPower);
 8003d30:	6818      	ldr	r0, [r3, #0]
	memset(powerString, 0, 10);
 8003d32:	9501      	str	r5, [sp, #4]
 8003d34:	9502      	str	r5, [sp, #8]
 8003d36:	f8ad 500c 	strh.w	r5, [sp, #12]
	sprintf(powerString, "%.2f W ", lastComputedPower);
 8003d3a:	f7fc fc0d 	bl	8000558 <__aeabi_f2d>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	a801      	add	r0, sp, #4
 8003d44:	491b      	ldr	r1, [pc, #108]	; (8003db4 <updateModbusInputRegisters+0x94>)
 8003d46:	f000 ff93 	bl	8004c70 <sprintf>
	usRegInputBuf[1] = powerString[1] << 8  | powerString[0];
 8003d4a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003d4e:	f89d 3004 	ldrb.w	r3, [sp, #4]
	usRegInputBuf[2] = powerString[3] << 8  | powerString[2];
	usRegInputBuf[3] = powerString[5] << 8  | powerString[4];
	usRegInputBuf[4] = powerString[7] << 8  | powerString[6];
	usRegInputBuf[5] = powerString[9] << 8  | powerString[8];
	usRegInputBuf[6] = (USHORT)lastReadCurr_mA << 16;
 8003d52:	81a5      	strh	r5, [r4, #12]
	usRegInputBuf[1] = powerString[1] << 8  | powerString[0];
 8003d54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003d58:	8063      	strh	r3, [r4, #2]
	usRegInputBuf[2] = powerString[3] << 8  | powerString[2];
 8003d5a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003d5e:	f89d 3006 	ldrb.w	r3, [sp, #6]
	usRegInputBuf[7] = (USHORT)lastReadBattV;
	usRegInputBuf[8] = (USHORT)lastReadBattV << 16;
 8003d62:	8225      	strh	r5, [r4, #16]
	usRegInputBuf[2] = powerString[3] << 8  | powerString[2];
 8003d64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003d68:	80a3      	strh	r3, [r4, #4]
	usRegInputBuf[3] = powerString[5] << 8  | powerString[4];
 8003d6a:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8003d6e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003d72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003d76:	80e3      	strh	r3, [r4, #6]
	usRegInputBuf[4] = powerString[7] << 8  | powerString[6];
 8003d78:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8003d7c:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8003d80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003d84:	8123      	strh	r3, [r4, #8]
	usRegInputBuf[5] = powerString[9] << 8  | powerString[8];
 8003d86:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8003d8a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003d8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003d92:	8163      	strh	r3, [r4, #10]
	usRegInputBuf[7] = (USHORT)lastReadBattV;
 8003d94:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <updateModbusInputRegisters+0x98>)
 8003d96:	edd3 7a00 	vldr	s15, [r3]
 8003d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d9e:	ee17 3a90 	vmov	r3, s15
 8003da2:	81e3      	strh	r3, [r4, #14]
}
 8003da4:	b005      	add	sp, #20
 8003da6:	bd30      	pop	{r4, r5, pc}
 8003da8:	200007f9 	.word	0x200007f9
 8003dac:	20000818 	.word	0x20000818
 8003db0:	200007fc 	.word	0x200007fc
 8003db4:	08009b36 	.word	0x08009b36
 8003db8:	20000800 	.word	0x20000800

08003dbc <calcSOC>:

void calcSOC(float ocv_V, float chargeRemain_Ah){
 8003dbc:	b538      	push	{r3, r4, r5, lr}
	//Simple switch to start with
	if(currentState == IDLE){
 8003dbe:	4b10      	ldr	r3, [pc, #64]	; (8003e00 <calcSOC+0x44>)
 8003dc0:	4c10      	ldr	r4, [pc, #64]	; (8003e04 <calcSOC+0x48>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	4d10      	ldr	r5, [pc, #64]	; (8003e08 <calcSOC+0x4c>)
void calcSOC(float ocv_V, float chargeRemain_Ah){
 8003dc6:	ed2d 8b02 	vpush	{d8}
 8003dca:	ed9f 8a10 	vldr	s16, [pc, #64]	; 8003e0c <calcSOC+0x50>
 8003dce:	eef0 8a08 	vmov.f32	s17, #8	; 0x40400000  3.0
	if(currentState == IDLE){
 8003dd2:	b963      	cbnz	r3, 8003dee <calcSOC+0x32>
		//If cell is not polarized.
		currentCellSOC = socByOCV(ocv_V);
 8003dd4:	f000 fc4a 	bl	800466c <socByOCV>
		currChargeRemaining = (currentCellSOC / 100) * fullChargeCapacity;
 8003dd8:	eec0 7a08 	vdiv.f32	s15, s0, s16
		currentCellSOC = socByOCV(ocv_V);
 8003ddc:	ed84 0a00 	vstr	s0, [r4]
		currChargeRemaining = (currentCellSOC / 100) * fullChargeCapacity;
 8003de0:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8003de4:	edc5 7a00 	vstr	s15, [r5]
	} else {
		//If cell is polarized
		currentCellSOC = (currChargeRemaining/fullChargeCapacity) * 100;
	}
}
 8003de8:	ecbd 8b02 	vpop	{d8}
 8003dec:	bd38      	pop	{r3, r4, r5, pc}
		currentCellSOC = (currChargeRemaining/fullChargeCapacity) * 100;
 8003dee:	ed95 7a00 	vldr	s14, [r5]
 8003df2:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8003df6:	ee67 7a88 	vmul.f32	s15, s15, s16
 8003dfa:	edc4 7a00 	vstr	s15, [r4]
}
 8003dfe:	e7f3      	b.n	8003de8 <calcSOC+0x2c>
 8003e00:	200007f9 	.word	0x200007f9
 8003e04:	200007f4 	.word	0x200007f4
 8003e08:	200007f0 	.word	0x200007f0
 8003e0c:	42c80000 	.word	0x42c80000

08003e10 <main>:
{
 8003e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e14:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8003e16:	f7fd f8e7 	bl	8000fe8 <HAL_Init>
  SystemClock_Config();
 8003e1a:	f7ff fe49 	bl	8003ab0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e1e:	2214      	movs	r2, #20
 8003e20:	2100      	movs	r1, #0
 8003e22:	a807      	add	r0, sp, #28
 8003e24:	f000 ff1b 	bl	8004c5e <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e28:	4b97      	ldr	r3, [pc, #604]	; (8004088 <main+0x278>)
  hdac1.Instance = DAC1;
 8003e2a:	4d98      	ldr	r5, [pc, #608]	; (800408c <main+0x27c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e2c:	695a      	ldr	r2, [r3, #20]
 8003e2e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003e32:	615a      	str	r2, [r3, #20]
 8003e34:	695a      	ldr	r2, [r3, #20]
 8003e36:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8003e3a:	9203      	str	r2, [sp, #12]
 8003e3c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e3e:	695a      	ldr	r2, [r3, #20]
 8003e40:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003e44:	615a      	str	r2, [r3, #20]
 8003e46:	695a      	ldr	r2, [r3, #20]
 8003e48:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003e4c:	9204      	str	r2, [sp, #16]
 8003e4e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e50:	695a      	ldr	r2, [r3, #20]
 8003e52:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003e56:	615a      	str	r2, [r3, #20]
 8003e58:	695a      	ldr	r2, [r3, #20]
 8003e5a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003e5e:	9205      	str	r2, [sp, #20]
 8003e60:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e62:	695a      	ldr	r2, [r3, #20]
 8003e64:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003e68:	615a      	str	r2, [r3, #20]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e70:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_USR2_Pin, GPIO_PIN_RESET);
 8003e72:	2200      	movs	r2, #0
 8003e74:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e7c:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_USR2_Pin, GPIO_PIN_RESET);
 8003e7e:	f7fd faed 	bl	800145c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, CHG_EN_Pin|LED_USR1_Pin, GPIO_PIN_RESET);
 8003e82:	2200      	movs	r2, #0
 8003e84:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8003e88:	4881      	ldr	r0, [pc, #516]	; (8004090 <main+0x280>)
 8003e8a:	f7fd fae7 	bl	800145c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8003e8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e92:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8003e94:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003e96:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e98:	4b7e      	ldr	r3, [pc, #504]	; (8004094 <main+0x284>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003e9a:	487f      	ldr	r0, [pc, #508]	; (8004098 <main+0x288>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e9c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e9e:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003ea2:	f7fd fa05 	bl	80012b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|LED_USR2_Pin;
 8003ea6:	f44f 6384 	mov.w	r3, #1056	; 0x420
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eaa:	a907      	add	r1, sp, #28
 8003eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LD2_Pin|LED_USR2_Pin;
 8003eb0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003eb2:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb6:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb8:	f7fd f9fa 	bl	80012b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CHG_EN_Pin|LED_USR1_Pin;
 8003ebc:	f44f 6381 	mov.w	r3, #1032	; 0x408
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ec0:	a907      	add	r1, sp, #28
 8003ec2:	4873      	ldr	r0, [pc, #460]	; (8004090 <main+0x280>)
  GPIO_InitStruct.Pin = CHG_EN_Pin|LED_USR1_Pin;
 8003ec4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ec6:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eca:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ecc:	f7fd f9f0 	bl	80012b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = S2_INTERRUPT_Pin|S1_INTERRUPT_Pin;
 8003ed0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003ed4:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ed6:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003ed8:	4b70      	ldr	r3, [pc, #448]	; (800409c <main+0x28c>)
 8003eda:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ee0:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ee2:	f7fd f9e5 	bl	80012b0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003ee6:	4622      	mov	r2, r4
 8003ee8:	4621      	mov	r1, r4
 8003eea:	2017      	movs	r0, #23
 8003eec:	f7fd f8c6 	bl	800107c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003ef0:	2017      	movs	r0, #23
 8003ef2:	f7fd f8f7 	bl	80010e4 <HAL_NVIC_EnableIRQ>
  hdac1.Instance = DAC1;
 8003ef6:	4b6a      	ldr	r3, [pc, #424]	; (80040a0 <main+0x290>)
 8003ef8:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003efa:	4628      	mov	r0, r5
  DAC_ChannelConfTypeDef sConfig = {0};
 8003efc:	9407      	str	r4, [sp, #28]
 8003efe:	9408      	str	r4, [sp, #32]
 8003f00:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003f02:	f7fd f913 	bl	800112c <HAL_DAC_Init>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003f06:	4622      	mov	r2, r4
 8003f08:	a907      	add	r1, sp, #28
 8003f0a:	4628      	mov	r0, r5
  hi2c1.Instance = I2C1;
 8003f0c:	4d65      	ldr	r5, [pc, #404]	; (80040a4 <main+0x294>)
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003f0e:	9407      	str	r4, [sp, #28]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003f10:	9408      	str	r4, [sp, #32]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003f12:	f7fd f958 	bl	80011c6 <HAL_DAC_ConfigChannel>
  hi2c1.Init.Timing = 0x2000090E;
 8003f16:	4a64      	ldr	r2, [pc, #400]	; (80040a8 <main+0x298>)
 8003f18:	4b64      	ldr	r3, [pc, #400]	; (80040ac <main+0x29c>)
  hi2c1.Init.OwnAddress1 = 0;
 8003f1a:	60ac      	str	r4, [r5, #8]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003f1c:	4628      	mov	r0, r5
  hi2c1.Init.Timing = 0x2000090E;
 8003f1e:	e885 000c 	stmia.w	r5, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f22:	60ee      	str	r6, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f24:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003f26:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003f28:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f2a:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f2c:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003f2e:	f7fd fbee 	bl	800170e <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003f32:	4621      	mov	r1, r4
 8003f34:	4628      	mov	r0, r5
  htim6.Instance = TIM6;
 8003f36:	4e5e      	ldr	r6, [pc, #376]	; (80040b0 <main+0x2a0>)
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003f38:	f7fd fdb0 	bl	8001a9c <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003f3c:	4621      	mov	r1, r4
 8003f3e:	4628      	mov	r0, r5
 8003f40:	f7fd fdd2 	bl	8001ae8 <HAL_I2CEx_ConfigDigitalFilter>
  htim6.Init.Prescaler = 36000;
 8003f44:	4b5b      	ldr	r3, [pc, #364]	; (80040b4 <main+0x2a4>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f46:	60b4      	str	r4, [r6, #8]
  htim6.Init.Prescaler = 36000;
 8003f48:	f648 4aa0 	movw	sl, #36000	; 0x8ca0
  htim6.Init.Period = 2500;
 8003f4c:	f640 18c4 	movw	r8, #2500	; 0x9c4
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003f50:	4630      	mov	r0, r6
  htim6.Init.Prescaler = 36000;
 8003f52:	e886 0408 	stmia.w	r6, {r3, sl}
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f56:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f58:	9407      	str	r4, [sp, #28]
 8003f5a:	9408      	str	r4, [sp, #32]
 8003f5c:	9409      	str	r4, [sp, #36]	; 0x24
  htim6.Init.Period = 2500;
 8003f5e:	f8c6 800c 	str.w	r8, [r6, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003f62:	f7fe fc1b 	bl	800279c <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003f66:	a907      	add	r1, sp, #28
 8003f68:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f6a:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f6c:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003f6e:	f7fe fc2f 	bl	80027d0 <HAL_TIMEx_MasterConfigSynchronization>
  huart2.Instance = USART2;
 8003f72:	4851      	ldr	r0, [pc, #324]	; (80040b8 <main+0x2a8>)
  huart2.Init.BaudRate = 38400;
 8003f74:	4b51      	ldr	r3, [pc, #324]	; (80040bc <main+0x2ac>)
  htim7.Instance = TIM7;
 8003f76:	4e52      	ldr	r6, [pc, #328]	; (80040c0 <main+0x2b0>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f78:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 38400;
 8003f7a:	f44f 4716 	mov.w	r7, #38400	; 0x9600
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f7e:	f04f 090c 	mov.w	r9, #12
  huart2.Init.BaudRate = 38400;
 8003f82:	e880 0088 	stmia.w	r0, {r3, r7}
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f86:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f88:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f8a:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f8c:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f8e:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f90:	6244      	str	r4, [r0, #36]	; 0x24
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f92:	f8c0 9014 	str.w	r9, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f96:	f7fe ff57 	bl	8002e48 <HAL_UART_Init>
  htim7.Instance = TIM7;
 8003f9a:	4b4a      	ldr	r3, [pc, #296]	; (80040c4 <main+0x2b4>)
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f9c:	60b4      	str	r4, [r6, #8]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003f9e:	4630      	mov	r0, r6
  htim7.Init.Prescaler = 0;
 8003fa0:	e886 0018 	stmia.w	r6, {r3, r4}
  htim7.Init.Period = 0;
 8003fa4:	60f4      	str	r4, [r6, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fa6:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fa8:	9407      	str	r4, [sp, #28]
 8003faa:	9408      	str	r4, [sp, #32]
 8003fac:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003fae:	f7fe fbf5 	bl	800279c <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003fb2:	a907      	add	r1, sp, #28
 8003fb4:	4630      	mov	r0, r6
  htim16.Instance = TIM16;
 8003fb6:	4e44      	ldr	r6, [pc, #272]	; (80040c8 <main+0x2b8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fb8:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fba:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003fbc:	f7fe fc08 	bl	80027d0 <HAL_TIMEx_MasterConfigSynchronization>
  htim16.Instance = TIM16;
 8003fc0:	4b42      	ldr	r3, [pc, #264]	; (80040cc <main+0x2bc>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fc2:	60b4      	str	r4, [r6, #8]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003fc4:	4630      	mov	r0, r6
  htim16.Init.Prescaler = 36000;
 8003fc6:	e886 0408 	stmia.w	r6, {r3, sl}
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fca:	6134      	str	r4, [r6, #16]
  htim16.Init.RepetitionCounter = 0;
 8003fcc:	6174      	str	r4, [r6, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fce:	61b4      	str	r4, [r6, #24]
  htim16.Init.Period = 2500;
 8003fd0:	f8c6 800c 	str.w	r8, [r6, #12]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003fd4:	f7fe fbe2 	bl	800279c <HAL_TIM_Base_Init>
  htim17.Instance = TIM17;
 8003fd8:	483d      	ldr	r0, [pc, #244]	; (80040d0 <main+0x2c0>)
 8003fda:	4b3e      	ldr	r3, [pc, #248]	; (80040d4 <main+0x2c4>)
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fdc:	6084      	str	r4, [r0, #8]
  htim17.Init.Prescaler = 36000;
 8003fde:	e880 0408 	stmia.w	r0, {r3, sl}
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fe2:	6104      	str	r4, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 8003fe4:	6144      	str	r4, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fe6:	6184      	str	r4, [r0, #24]
  htim17.Init.Period = 2500;
 8003fe8:	f8c0 800c 	str.w	r8, [r0, #12]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003fec:	f7fe fbd6 	bl	800279c <HAL_TIM_Base_Init>
  huart1.Instance = USART1;
 8003ff0:	4839      	ldr	r0, [pc, #228]	; (80040d8 <main+0x2c8>)
 8003ff2:	4b3a      	ldr	r3, [pc, #232]	; (80040dc <main+0x2cc>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ff4:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 38400;
 8003ff6:	e880 0088 	stmia.w	r0, {r3, r7}
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ffa:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ffc:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ffe:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004000:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004002:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004004:	6244      	str	r4, [r0, #36]	; 0x24
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004006:	f8c0 9014 	str.w	r9, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800400a:	f7fe ff1d 	bl	8002e48 <HAL_UART_Init>
  ssd1306_Init();
 800400e:	f000 fa0b 	bl	8004428 <ssd1306_Init>
  ssd1306_Fill(Black);
 8004012:	4620      	mov	r0, r4
 8004014:	f000 f9d4 	bl	80043c0 <ssd1306_Fill>
  LTC2990_ConfigureControlReg(&hi2c1);
 8004018:	4628      	mov	r0, r5
 800401a:	f7ff fbef 	bl	80037fc <LTC2990_ConfigureControlReg>
  HAL_TIM_Base_Start_IT(&htim16);
 800401e:	4630      	mov	r0, r6
 8004020:	f7fe fa72 	bl	8002508 <HAL_TIM_Base_Start_IT>
  usRegInputBuf[0] = 11;
 8004024:	4a2e      	ldr	r2, [pc, #184]	; (80040e0 <main+0x2d0>)
	 calcSOC(lastReadBattV, currChargeRemaining);
 8004026:	4e2f      	ldr	r6, [pc, #188]	; (80040e4 <main+0x2d4>)
	 lastComputedPower = computePower(lastReadBattV);
 8004028:	4d2f      	ldr	r5, [pc, #188]	; (80040e8 <main+0x2d8>)
  usRegInputBuf[0] = 11;
 800402a:	230b      	movs	r3, #11
 800402c:	8013      	strh	r3, [r2, #0]
  usRegInputBuf[1] = 22;
 800402e:	2316      	movs	r3, #22
 8004030:	8053      	strh	r3, [r2, #2]
  usRegInputBuf[2] = 33;
 8004032:	2321      	movs	r3, #33	; 0x21
 8004034:	8093      	strh	r3, [r2, #4]
  usRegInputBuf[3] = 44;
 8004036:	232c      	movs	r3, #44	; 0x2c
 8004038:	80d3      	strh	r3, [r2, #6]
  usRegInputBuf[4] = 55;
 800403a:	2337      	movs	r3, #55	; 0x37
 800403c:	8113      	strh	r3, [r2, #8]
  usRegInputBuf[5] = 66;
 800403e:	2342      	movs	r3, #66	; 0x42
 8004040:	8153      	strh	r3, [r2, #10]
  usRegInputBuf[6] = 77;
 8004042:	234d      	movs	r3, #77	; 0x4d
 8004044:	8193      	strh	r3, [r2, #12]
  usRegInputBuf[7] = 88;
 8004046:	2358      	movs	r3, #88	; 0x58
 8004048:	81d3      	strh	r3, [r2, #14]
  eStatus = eMBInit( MB_RTU, 0x0A, 0, 38400, MB_PAR_NONE );
 800404a:	210a      	movs	r1, #10
 800404c:	4622      	mov	r2, r4
 800404e:	9400      	str	r4, [sp, #0]
 8004050:	463b      	mov	r3, r7
 8004052:	4620      	mov	r0, r4
 8004054:	f7ff f8e0 	bl	8003218 <eMBInit>
  eStatus = eMBEnable();
 8004058:	f7ff f936 	bl	80032c8 <eMBEnable>
	 calcSOC(lastReadBattV, currChargeRemaining);
 800405c:	4c23      	ldr	r4, [pc, #140]	; (80040ec <main+0x2dc>)
	 getLatestADCValues();
 800405e:	f7ff fd63 	bl	8003b28 <getLatestADCValues>
	 calcSOC(lastReadBattV, currChargeRemaining);
 8004062:	edd6 0a00 	vldr	s1, [r6]
 8004066:	ed94 0a00 	vldr	s0, [r4]
 800406a:	f7ff fea7 	bl	8003dbc <calcSOC>
	 lastComputedPower = computePower(lastReadBattV);
 800406e:	ed94 0a00 	vldr	s0, [r4]
 8004072:	f000 facd 	bl	8004610 <computePower>
 8004076:	ed85 0a00 	vstr	s0, [r5]
	 updateOLED();
 800407a:	f7ff fd83 	bl	8003b84 <updateOLED>
	 updateModbusInputRegisters();
 800407e:	f7ff fe4f 	bl	8003d20 <updateModbusInputRegisters>
	 eMBPoll();
 8004082:	f7ff f933 	bl	80032ec <eMBPoll>
 8004086:	e7ea      	b.n	800405e <main+0x24e>
 8004088:	40021000 	.word	0x40021000
 800408c:	20000d80 	.word	0x20000d80
 8004090:	48000400 	.word	0x48000400
 8004094:	10110000 	.word	0x10110000
 8004098:	48000800 	.word	0x48000800
 800409c:	10210000 	.word	0x10210000
 80040a0:	40007400 	.word	0x40007400
 80040a4:	20000d94 	.word	0x20000d94
 80040a8:	40005400 	.word	0x40005400
 80040ac:	2000090e 	.word	0x2000090e
 80040b0:	20000ea0 	.word	0x20000ea0
 80040b4:	40001000 	.word	0x40001000
 80040b8:	20000ee0 	.word	0x20000ee0
 80040bc:	40004400 	.word	0x40004400
 80040c0:	20000fa0 	.word	0x20000fa0
 80040c4:	40001400 	.word	0x40001400
 80040c8:	20000f60 	.word	0x20000f60
 80040cc:	40014400 	.word	0x40014400
 80040d0:	20000de0 	.word	0x20000de0
 80040d4:	40014800 	.word	0x40014800
 80040d8:	20000e20 	.word	0x20000e20
 80040dc:	40013800 	.word	0x40013800
 80040e0:	20000818 	.word	0x20000818
 80040e4:	200007f0 	.word	0x200007f0
 80040e8:	200007fc 	.word	0x200007fc
 80040ec:	20000800 	.word	0x20000800

080040f0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin == S2_INTERRUPT_Pin || GPIO_Pin == S1_INTERRUPT_Pin)
 80040f0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80040f4:	d002      	beq.n	80040fc <HAL_GPIO_EXTI_Callback+0xc>
 80040f6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80040fa:	d102      	bne.n	8004102 <HAL_GPIO_EXTI_Callback+0x12>
	{
		//S2 has been pressed, start software debouncing
		HAL_TIM_Base_Start_IT(&htim6);
 80040fc:	4801      	ldr	r0, [pc, #4]	; (8004104 <HAL_GPIO_EXTI_Callback+0x14>)
 80040fe:	f7fe ba03 	b.w	8002508 <HAL_TIM_Base_Start_IT>
 8004102:	4770      	bx	lr
 8004104:	20000ea0 	.word	0x20000ea0

08004108 <Discharging_Set>:
	}
}

//Where pct should be 0 - 100
void Discharging_Set(uint8_t pct)
{
 8004108:	2864      	cmp	r0, #100	; 0x64
 800410a:	b538      	push	{r3, r4, r5, lr}
 800410c:	bf28      	it	cs
 800410e:	2064      	movcs	r0, #100	; 0x64
 8004110:	4605      	mov	r5, r0
	{
		pct = 100;
	}
	//DAC is 12 bit resolution - 0 - 4095 data codes which translates to 0 - 3.3V analog

	uint32_t dacCode = (uint32_t)(( pct / 100.0 ) * 4095.0);
 8004112:	f7fc fa0f 	bl	8000534 <__aeabi_i2d>
 8004116:	2200      	movs	r2, #0
 8004118:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <Discharging_Set+0x50>)
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacCode);
 800411a:	4c10      	ldr	r4, [pc, #64]	; (800415c <Discharging_Set+0x54>)
	uint32_t dacCode = (uint32_t)(( pct / 100.0 ) * 4095.0);
 800411c:	f7fc fb9a 	bl	8000854 <__aeabi_ddiv>
 8004120:	a30b      	add	r3, pc, #44	; (adr r3, 8004150 <Discharging_Set+0x48>)
 8004122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004126:	f7fc fa6b 	bl	8000600 <__aeabi_dmul>
 800412a:	f7fc fd41 	bl	8000bb0 <__aeabi_d2uiz>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacCode);
 800412e:	2200      	movs	r2, #0
 8004130:	4603      	mov	r3, r0
 8004132:	4611      	mov	r1, r2
 8004134:	4620      	mov	r0, r4
 8004136:	f7fd f80d 	bl	8001154 <HAL_DAC_SetValue>

	currentDchgPct = pct;
 800413a:	4b09      	ldr	r3, [pc, #36]	; (8004160 <Discharging_Set+0x58>)
 800413c:	701d      	strb	r5, [r3, #0]

	//Start DAC
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800413e:	4620      	mov	r0, r4
 8004140:	2100      	movs	r1, #0
}
 8004142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8004146:	f7fd b817 	b.w	8001178 <HAL_DAC_Start>
 800414a:	bf00      	nop
 800414c:	f3af 8000 	nop.w
 8004150:	00000000 	.word	0x00000000
 8004154:	40affe00 	.word	0x40affe00
 8004158:	40590000 	.word	0x40590000
 800415c:	20000d80 	.word	0x20000d80
 8004160:	200007f8 	.word	0x200007f8

08004164 <Change_State.part.2>:
	{
		HAL_GPIO_WritePin(GPIOB, CHG_EN_Pin, GPIO_PIN_RESET);
	}
}

void Change_State(STATE new_state)
 8004164:	b508      	push	{r3, lr}
		HAL_GPIO_WritePin(GPIOB, CHG_EN_Pin, GPIO_PIN_SET);
 8004166:	4805      	ldr	r0, [pc, #20]	; (800417c <Change_State.part.2+0x18>)
 8004168:	2201      	movs	r2, #1
 800416a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800416e:	f7fd f975 	bl	800145c <HAL_GPIO_WritePin>
	}
	//CHARGING
	else if(currentState == CHG)
	{
		Charging_Enable(CHG_ENABLE);
		Discharging_Set(0); //Set discharge current to 0A
 8004172:	2000      	movs	r0, #0
	}
	else
	{
		//HANDLE DEFAULT CASE - MISRA C
	}
}
 8004174:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Discharging_Set(0); //Set discharge current to 0A
 8004178:	f7ff bfc6 	b.w	8004108 <Discharging_Set>
 800417c:	48000400 	.word	0x48000400

08004180 <Charging_Enable>:
	if(chg_en == CHG_ENABLE)
 8004180:	2801      	cmp	r0, #1
{
 8004182:	4602      	mov	r2, r0
		HAL_GPIO_WritePin(GPIOB, CHG_EN_Pin, GPIO_PIN_RESET);
 8004184:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004188:	bf18      	it	ne
 800418a:	2200      	movne	r2, #0
 800418c:	4801      	ldr	r0, [pc, #4]	; (8004194 <Charging_Enable+0x14>)
 800418e:	f7fd b965 	b.w	800145c <HAL_GPIO_WritePin>
 8004192:	bf00      	nop
 8004194:	48000400 	.word	0x48000400

08004198 <Change_State>:
	currentState = new_state;
 8004198:	4b0c      	ldr	r3, [pc, #48]	; (80041cc <Change_State+0x34>)
{
 800419a:	b510      	push	{r4, lr}
 800419c:	4604      	mov	r4, r0
	currentState = new_state;
 800419e:	7018      	strb	r0, [r3, #0]
	if(currentState == IDLE)
 80041a0:	b930      	cbnz	r0, 80041b0 <Change_State+0x18>
		Charging_Enable(CHG_DISABLE);
 80041a2:	f7ff ffed 	bl	8004180 <Charging_Enable>
		Discharging_Set(0); //Set discharge current to 0A
 80041a6:	4620      	mov	r0, r4
}
 80041a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Discharging_Set(10); //Set discharge current to 10%
 80041ac:	f7ff bfac 	b.w	8004108 <Discharging_Set>
	else if(currentState == CHG)
 80041b0:	2801      	cmp	r0, #1
 80041b2:	d103      	bne.n	80041bc <Change_State+0x24>
}
 80041b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041b8:	f7ff bfd4 	b.w	8004164 <Change_State.part.2>
	else if (currentState == DCHG)
 80041bc:	2802      	cmp	r0, #2
 80041be:	d104      	bne.n	80041ca <Change_State+0x32>
		Charging_Enable(CHG_DISABLE);
 80041c0:	2000      	movs	r0, #0
 80041c2:	f7ff ffdd 	bl	8004180 <Charging_Enable>
		Discharging_Set(10); //Set discharge current to 10%
 80041c6:	200a      	movs	r0, #10
 80041c8:	e7ee      	b.n	80041a8 <Change_State+0x10>
 80041ca:	bd10      	pop	{r4, pc}
 80041cc:	200007f9 	.word	0x200007f9

080041d0 <HAL_TIM_PeriodElapsedCallback>:
{
 80041d0:	b538      	push	{r3, r4, r5, lr}
	if(htim == &htim6){
 80041d2:	4b3d      	ldr	r3, [pc, #244]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80041d4:	4298      	cmp	r0, r3
 80041d6:	d15c      	bne.n	8004292 <HAL_TIM_PeriodElapsedCallback+0xc2>
		HAL_GPIO_TogglePin(LED_USR1_GPIO_Port, LED_USR1_Pin); //LED1 toggles every 0.5 seconds
 80041d8:	2108      	movs	r1, #8
 80041da:	483c      	ldr	r0, [pc, #240]	; (80042cc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80041dc:	4c3c      	ldr	r4, [pc, #240]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80041de:	f7fd f942 	bl	8001466 <HAL_GPIO_TogglePin>
		if(HAL_GPIO_ReadPin(GPIOA, S1_INTERRUPT_Pin) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOA, S2_INTERRUPT_Pin) == GPIO_PIN_RESET)
 80041e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80041e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041ea:	f7fd f931 	bl	8001450 <HAL_GPIO_ReadPin>
 80041ee:	bb80      	cbnz	r0, 8004252 <HAL_TIM_PeriodElapsedCallback+0x82>
 80041f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041f8:	f7fd f92a 	bl	8001450 <HAL_GPIO_ReadPin>
 80041fc:	4605      	mov	r5, r0
 80041fe:	bb40      	cbnz	r0, 8004252 <HAL_TIM_PeriodElapsedCallback+0x82>
			if(currentState == IDLE)
 8004200:	7822      	ldrb	r2, [r4, #0]
 8004202:	b97a      	cbnz	r2, 8004224 <HAL_TIM_PeriodElapsedCallback+0x54>
				HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_USR2_Pin, GPIO_PIN_SET);
 8004204:	2201      	movs	r2, #1
 8004206:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800420a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800420e:	f7fd f925 	bl	800145c <HAL_GPIO_WritePin>
	currentState = new_state;
 8004212:	2301      	movs	r3, #1
 8004214:	7023      	strb	r3, [r4, #0]
 8004216:	f7ff ffa5 	bl	8004164 <Change_State.part.2>
		HAL_TIM_Base_Stop_IT(&htim6);
 800421a:	482b      	ldr	r0, [pc, #172]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
}
 800421c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_TIM_Base_Stop_IT(&htim6);
 8004220:	f7fe b988 	b.w	8002534 <HAL_TIM_Base_Stop_IT>
			else if(currentState == CHG)
 8004224:	2a01      	cmp	r2, #1
 8004226:	d109      	bne.n	800423c <HAL_TIM_PeriodElapsedCallback+0x6c>
				HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_USR2_Pin, GPIO_PIN_SET);
 8004228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800422c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004230:	f7fd f914 	bl	800145c <HAL_GPIO_WritePin>
				Change_State(DCHG);
 8004234:	2002      	movs	r0, #2
				Change_State(IDLE);
 8004236:	f7ff ffaf 	bl	8004198 <Change_State>
 800423a:	e7ee      	b.n	800421a <HAL_TIM_PeriodElapsedCallback+0x4a>
			else if(currentState == DCHG)
 800423c:	2a02      	cmp	r2, #2
 800423e:	d1fa      	bne.n	8004236 <HAL_TIM_PeriodElapsedCallback+0x66>
				HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_USR2_Pin, GPIO_PIN_RESET);
 8004240:	4602      	mov	r2, r0
 8004242:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800424a:	f7fd f907 	bl	800145c <HAL_GPIO_WritePin>
				Change_State(IDLE);
 800424e:	4628      	mov	r0, r5
 8004250:	e7f1      	b.n	8004236 <HAL_TIM_PeriodElapsedCallback+0x66>
		else if(currentState == DCHG && HAL_GPIO_ReadPin(GPIOA, S1_INTERRUPT_Pin) == GPIO_PIN_RESET)
 8004252:	7823      	ldrb	r3, [r4, #0]
 8004254:	2b02      	cmp	r3, #2
 8004256:	d10d      	bne.n	8004274 <HAL_TIM_PeriodElapsedCallback+0xa4>
 8004258:	f44f 7100 	mov.w	r1, #512	; 0x200
 800425c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004260:	f7fd f8f6 	bl	8001450 <HAL_GPIO_ReadPin>
 8004264:	b930      	cbnz	r0, 8004274 <HAL_TIM_PeriodElapsedCallback+0xa4>
			uint8_t newDchgPct = currentDchgPct + 10;
 8004266:	4b1b      	ldr	r3, [pc, #108]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004268:	7818      	ldrb	r0, [r3, #0]
 800426a:	300a      	adds	r0, #10
			Discharging_Set(newDchgPct);
 800426c:	b2c0      	uxtb	r0, r0
 800426e:	f7ff ff4b 	bl	8004108 <Discharging_Set>
 8004272:	e7d2      	b.n	800421a <HAL_TIM_PeriodElapsedCallback+0x4a>
		else if(currentState == DCHG && HAL_GPIO_ReadPin(GPIOA, S2_INTERRUPT_Pin) == GPIO_PIN_RESET)
 8004274:	7823      	ldrb	r3, [r4, #0]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d1cf      	bne.n	800421a <HAL_TIM_PeriodElapsedCallback+0x4a>
 800427a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800427e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004282:	f7fd f8e5 	bl	8001450 <HAL_GPIO_ReadPin>
 8004286:	2800      	cmp	r0, #0
 8004288:	d1c7      	bne.n	800421a <HAL_TIM_PeriodElapsedCallback+0x4a>
			uint8_t newDchgPct = currentDchgPct - 10;
 800428a:	4b12      	ldr	r3, [pc, #72]	; (80042d4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800428c:	7818      	ldrb	r0, [r3, #0]
 800428e:	380a      	subs	r0, #10
 8004290:	e7ec      	b.n	800426c <HAL_TIM_PeriodElapsedCallback+0x9c>
	else if(htim == &htim16){ //This timer ticks every one second and is used for charge remaning calculation
 8004292:	4b11      	ldr	r3, [pc, #68]	; (80042d8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8004294:	4298      	cmp	r0, r3
 8004296:	d116      	bne.n	80042c6 <HAL_TIM_PeriodElapsedCallback+0xf6>
		if(currentState == DCHG || currentState == CHG){
 8004298:	4b0d      	ldr	r3, [pc, #52]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	3b01      	subs	r3, #1
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d811      	bhi.n	80042c6 <HAL_TIM_PeriodElapsedCallback+0xf6>
			currChargeRemaining += calcdeltaAh(1, lastReadCurr_mA / 1000.0);
 80042a2:	4b0e      	ldr	r3, [pc, #56]	; (80042dc <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80042a4:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80042e0 <HAL_TIM_PeriodElapsedCallback+0x110>
 80042a8:	edd3 0a00 	vldr	s1, [r3]
 80042ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80042b0:	eec0 0aa7 	vdiv.f32	s1, s1, s15
 80042b4:	f000 f9d0 	bl	8004658 <calcdeltaAh>
 80042b8:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80042ba:	edd3 7a00 	vldr	s15, [r3]
 80042be:	ee37 0a80 	vadd.f32	s0, s15, s0
 80042c2:	ed83 0a00 	vstr	s0, [r3]
 80042c6:	bd38      	pop	{r3, r4, r5, pc}
 80042c8:	20000ea0 	.word	0x20000ea0
 80042cc:	48000400 	.word	0x48000400
 80042d0:	200007f9 	.word	0x200007f9
 80042d4:	200007f8 	.word	0x200007f8
 80042d8:	20000f60 	.word	0x20000f60
 80042dc:	20000804 	.word	0x20000804
 80042e0:	447a0000 	.word	0x447a0000
 80042e4:	200007f0 	.word	0x200007f0

080042e8 <eMBRegInputCB>:
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    int             iRegIndex;

    if( ( usAddress >= REG_INPUT_START )
 80042e8:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
{
 80042ec:	b510      	push	{r4, lr}
    if( ( usAddress >= REG_INPUT_START )
 80042ee:	d317      	bcc.n	8004320 <eMBRegInputCB+0x38>
        && ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
 80042f0:	188c      	adds	r4, r1, r2
 80042f2:	f240 33f1 	movw	r3, #1009	; 0x3f1
 80042f6:	429c      	cmp	r4, r3
 80042f8:	dc12      	bgt.n	8004320 <eMBRegInputCB+0x38>
 80042fa:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <eMBRegInputCB+0x3c>)
 80042fc:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8004300:	f2a1 71d2 	subw	r1, r1, #2002	; 0x7d2
 8004304:	3002      	adds	r0, #2
    {
        iRegIndex = ( int )( usAddress - usRegInputStart );
        while( usNRegs > 0 )
 8004306:	b90a      	cbnz	r2, 800430c <eMBRegInputCB+0x24>
    eMBErrorCode    eStatus = MB_ENOERR;
 8004308:	4610      	mov	r0, r2
 800430a:	bd10      	pop	{r4, pc}
        {
            *pucRegBuffer++ =
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 800430c:	f831 3f02 	ldrh.w	r3, [r1, #2]!
            *pucRegBuffer++ =
                ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
 8004310:	f800 3c01 	strb.w	r3, [r0, #-1]
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 8004314:	0a1c      	lsrs	r4, r3, #8
            iRegIndex++;
            usNRegs--;
 8004316:	3a01      	subs	r2, #1
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 8004318:	f800 4c02 	strb.w	r4, [r0, #-2]
            usNRegs--;
 800431c:	b292      	uxth	r2, r2
 800431e:	e7f1      	b.n	8004304 <eMBRegInputCB+0x1c>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8004320:	2001      	movs	r0, #1
    }

    return eStatus;
}
 8004322:	bd10      	pop	{r4, pc}
 8004324:	20000818 	.word	0x20000818

08004328 <eMBRegHoldingCB>:
                 eMBRegisterMode eMode )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    int             iRegIndex;

    if( ( usAddress >= REG_HOLDING_START ) &&
 8004328:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
{
 800432c:	b510      	push	{r4, lr}
    if( ( usAddress >= REG_HOLDING_START ) &&
 800432e:	d32b      	bcc.n	8004388 <eMBRegHoldingCB+0x60>
        ( usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS ) )
 8004330:	188c      	adds	r4, r1, r2
    if( ( usAddress >= REG_HOLDING_START ) &&
 8004332:	f5b4 6ffb 	cmp.w	r4, #2008	; 0x7d8
 8004336:	dc27      	bgt.n	8004388 <eMBRegHoldingCB+0x60>
    {
        iRegIndex = ( int )( usAddress - usRegHoldingStart );
        switch ( eMode )
 8004338:	b19b      	cbz	r3, 8004362 <eMBRegHoldingCB+0x3a>
 800433a:	2b01      	cmp	r3, #1
 800433c:	d118      	bne.n	8004370 <eMBRegHoldingCB+0x48>
 800433e:	4b13      	ldr	r3, [pc, #76]	; (800438c <eMBRegHoldingCB+0x64>)
 8004340:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8004344:	f6a1 71a2 	subw	r1, r1, #4002	; 0xfa2
 8004348:	3002      	adds	r0, #2
            break;

            /* Update current register values with new values from the
             * protocol stack. */
        case MB_REG_WRITE:
            while( usNRegs > 0 )
 800434a:	b18a      	cbz	r2, 8004370 <eMBRegHoldingCB+0x48>
            {
                usRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 800434c:	f810 4c02 	ldrb.w	r4, [r0, #-2]
                usRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 8004350:	f810 3c01 	ldrb.w	r3, [r0, #-1]
                iRegIndex++;
                usNRegs--;
 8004354:	3a01      	subs	r2, #1
                usRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 8004356:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800435a:	f821 3f02 	strh.w	r3, [r1, #2]!
                usNRegs--;
 800435e:	b292      	uxth	r2, r2
 8004360:	e7f2      	b.n	8004348 <eMBRegHoldingCB+0x20>
 8004362:	4b0a      	ldr	r3, [pc, #40]	; (800438c <eMBRegHoldingCB+0x64>)
 8004364:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8004368:	f6a1 71a2 	subw	r1, r1, #4002	; 0xfa2
 800436c:	3002      	adds	r0, #2
            while( usNRegs > 0 )
 800436e:	b90a      	cbnz	r2, 8004374 <eMBRegHoldingCB+0x4c>
    eMBErrorCode    eStatus = MB_ENOERR;
 8004370:	2000      	movs	r0, #0
    else
    {
        eStatus = MB_ENOREG;
    }
    return eStatus;
}
 8004372:	bd10      	pop	{r4, pc}
                *pucRegBuffer++ = ( UCHAR ) ( usRegHoldingBuf[iRegIndex] >> 8 );
 8004374:	f831 3f02 	ldrh.w	r3, [r1, #2]!
                *pucRegBuffer++ = ( UCHAR ) ( usRegHoldingBuf[iRegIndex] & 0xFF );
 8004378:	f800 3c01 	strb.w	r3, [r0, #-1]
                *pucRegBuffer++ = ( UCHAR ) ( usRegHoldingBuf[iRegIndex] >> 8 );
 800437c:	0a1c      	lsrs	r4, r3, #8
                usNRegs--;
 800437e:	3a01      	subs	r2, #1
                *pucRegBuffer++ = ( UCHAR ) ( usRegHoldingBuf[iRegIndex] >> 8 );
 8004380:	f800 4c02 	strb.w	r4, [r0, #-2]
                usNRegs--;
 8004384:	b292      	uxth	r2, r2
 8004386:	e7f1      	b.n	800436c <eMBRegHoldingCB+0x44>
        eStatus = MB_ENOREG;
 8004388:	2001      	movs	r0, #1
 800438a:	bd10      	pop	{r4, pc}
 800438c:	20000808 	.word	0x20000808

08004390 <eMBRegCoilsCB>:
eMBErrorCode
eMBRegCoilsCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils,
               eMBRegisterMode eMode )
{
    return MB_ENOREG;
}
 8004390:	2001      	movs	r0, #1
 8004392:	4770      	bx	lr

08004394 <eMBRegDiscreteCB>:

eMBErrorCode
eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
    return MB_ENOREG;
}
 8004394:	2001      	movs	r0, #1
 8004396:	4770      	bx	lr

08004398 <ssd1306_WriteCommand>:


static SSD1306_t SSD1306;

void ssd1306_WriteCommand(uint8_t command)
{
 8004398:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800439a:	aa06      	add	r2, sp, #24
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800439c:	230a      	movs	r3, #10
{
 800439e:	f802 0d01 	strb.w	r0, [r2, #-1]!
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80043a2:	9302      	str	r3, [sp, #8]
 80043a4:	2301      	movs	r3, #1
 80043a6:	e88d 000c 	stmia.w	sp, {r2, r3}
 80043aa:	2178      	movs	r1, #120	; 0x78
 80043ac:	2200      	movs	r2, #0
 80043ae:	4803      	ldr	r0, [pc, #12]	; (80043bc <ssd1306_WriteCommand+0x24>)
 80043b0:	f7fd f9fe 	bl	80017b0 <HAL_I2C_Mem_Write>
}
 80043b4:	b007      	add	sp, #28
 80043b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80043ba:	bf00      	nop
 80043bc:	20000d94 	.word	0x20000d94

080043c0 <ssd1306_Fill>:
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80043c0:	4905      	ldr	r1, [pc, #20]	; (80043d8 <ssd1306_Fill+0x18>)
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80043c2:	2300      	movs	r3, #0
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80043c4:	1c02      	adds	r2, r0, #0
 80043c6:	bf18      	it	ne
 80043c8:	2201      	movne	r2, #1
 80043ca:	4252      	negs	r2, r2
 80043cc:	545a      	strb	r2, [r3, r1]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80043ce:	3301      	adds	r3, #1
 80043d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d4:	d1f6      	bne.n	80043c4 <ssd1306_Fill+0x4>
	}
}
 80043d6:	4770      	bx	lr
 80043d8:	20000830 	.word	0x20000830

080043dc <ssd1306_UpdateScreen>:

void ssd1306_UpdateScreen(void)
{
 80043dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	for (i = 0; i < 8; i++) {
		ssd1306_WriteCommand(0xB0 + i);
		ssd1306_WriteCommand(0x00);
		ssd1306_WriteCommand(0x10);

		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 80043de:	4e10      	ldr	r6, [pc, #64]	; (8004420 <ssd1306_UpdateScreen+0x44>)
 80043e0:	4d10      	ldr	r5, [pc, #64]	; (8004424 <ssd1306_UpdateScreen+0x48>)
{
 80043e2:	2400      	movs	r4, #0
		ssd1306_WriteCommand(0xB0 + i);
 80043e4:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 80043e8:	b2c0      	uxtb	r0, r0
 80043ea:	f7ff ffd5 	bl	8004398 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 80043ee:	2000      	movs	r0, #0
 80043f0:	f7ff ffd2 	bl	8004398 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 80043f4:	2010      	movs	r0, #16
 80043f6:	f7ff ffcf 	bl	8004398 <ssd1306_WriteCommand>
		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 80043fa:	2364      	movs	r3, #100	; 0x64
 80043fc:	9302      	str	r3, [sp, #8]
 80043fe:	2380      	movs	r3, #128	; 0x80
 8004400:	9301      	str	r3, [sp, #4]
 8004402:	eb06 13c4 	add.w	r3, r6, r4, lsl #7
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	2240      	movs	r2, #64	; 0x40
 800440a:	2301      	movs	r3, #1
 800440c:	2178      	movs	r1, #120	; 0x78
 800440e:	4628      	mov	r0, r5
 8004410:	3401      	adds	r4, #1
 8004412:	f7fd f9cd 	bl	80017b0 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8004416:	2c08      	cmp	r4, #8
 8004418:	d1e4      	bne.n	80043e4 <ssd1306_UpdateScreen+0x8>
	}
}
 800441a:	b004      	add	sp, #16
 800441c:	bd70      	pop	{r4, r5, r6, pc}
 800441e:	bf00      	nop
 8004420:	20000830 	.word	0x20000830
 8004424:	20000d94 	.word	0x20000d94

08004428 <ssd1306_Init>:
{
 8004428:	b508      	push	{r3, lr}
	HAL_Delay(100);
 800442a:	2064      	movs	r0, #100	; 0x64
 800442c:	f7fc fe00 	bl	8001030 <HAL_Delay>
	ssd1306_WriteCommand(0xAE); //display off
 8004430:	20ae      	movs	r0, #174	; 0xae
 8004432:	f7ff ffb1 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004436:	2020      	movs	r0, #32
 8004438:	f7ff ffae 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800443c:	2010      	movs	r0, #16
 800443e:	f7ff ffab 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004442:	20b0      	movs	r0, #176	; 0xb0
 8004444:	f7ff ffa8 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004448:	20c8      	movs	r0, #200	; 0xc8
 800444a:	f7ff ffa5 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 800444e:	2000      	movs	r0, #0
 8004450:	f7ff ffa2 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8004454:	2010      	movs	r0, #16
 8004456:	f7ff ff9f 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 800445a:	2040      	movs	r0, #64	; 0x40
 800445c:	f7ff ff9c 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8004460:	2081      	movs	r0, #129	; 0x81
 8004462:	f7ff ff99 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8004466:	20ff      	movs	r0, #255	; 0xff
 8004468:	f7ff ff96 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 800446c:	20a1      	movs	r0, #161	; 0xa1
 800446e:	f7ff ff93 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8004472:	20a6      	movs	r0, #166	; 0xa6
 8004474:	f7ff ff90 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8004478:	20a8      	movs	r0, #168	; 0xa8
 800447a:	f7ff ff8d 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 800447e:	203f      	movs	r0, #63	; 0x3f
 8004480:	f7ff ff8a 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004484:	20a4      	movs	r0, #164	; 0xa4
 8004486:	f7ff ff87 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 800448a:	20d3      	movs	r0, #211	; 0xd3
 800448c:	f7ff ff84 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8004490:	2000      	movs	r0, #0
 8004492:	f7ff ff81 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004496:	20d5      	movs	r0, #213	; 0xd5
 8004498:	f7ff ff7e 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 800449c:	20f0      	movs	r0, #240	; 0xf0
 800449e:	f7ff ff7b 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80044a2:	20d9      	movs	r0, #217	; 0xd9
 80044a4:	f7ff ff78 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80044a8:	2022      	movs	r0, #34	; 0x22
 80044aa:	f7ff ff75 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 80044ae:	20da      	movs	r0, #218	; 0xda
 80044b0:	f7ff ff72 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 80044b4:	2012      	movs	r0, #18
 80044b6:	f7ff ff6f 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 80044ba:	20db      	movs	r0, #219	; 0xdb
 80044bc:	f7ff ff6c 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80044c0:	2020      	movs	r0, #32
 80044c2:	f7ff ff69 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80044c6:	208d      	movs	r0, #141	; 0x8d
 80044c8:	f7ff ff66 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 80044cc:	2014      	movs	r0, #20
 80044ce:	f7ff ff63 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80044d2:	20af      	movs	r0, #175	; 0xaf
 80044d4:	f7ff ff60 	bl	8004398 <ssd1306_WriteCommand>
	ssd1306_Fill(Black);
 80044d8:	2000      	movs	r0, #0
 80044da:	f7ff ff71 	bl	80043c0 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 80044de:	f7ff ff7d 	bl	80043dc <ssd1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 80044e2:	4b03      	ldr	r3, [pc, #12]	; (80044f0 <ssd1306_Init+0xc8>)
	SSD1306.Initialized = 1;
 80044e4:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 80044e6:	2200      	movs	r2, #0
	SSD1306.Initialized = 1;
 80044e8:	7158      	strb	r0, [r3, #5]
	SSD1306.CurrentX = 0;
 80044ea:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80044ec:	805a      	strh	r2, [r3, #2]
}
 80044ee:	bd08      	pop	{r3, pc}
 80044f0:	2000082a 	.word	0x2000082a

080044f4 <ssd1306_DrawPixel>:

void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80044f4:	0603      	lsls	r3, r0, #24
{
 80044f6:	b530      	push	{r4, r5, lr}
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80044f8:	d41b      	bmi.n	8004532 <ssd1306_DrawPixel+0x3e>
 80044fa:	293f      	cmp	r1, #63	; 0x3f
 80044fc:	d819      	bhi.n	8004532 <ssd1306_DrawPixel+0x3e>
	{
		return;
	}

	if (SSD1306.Inverted)
 80044fe:	4b0d      	ldr	r3, [pc, #52]	; (8004534 <ssd1306_DrawPixel+0x40>)
 8004500:	791b      	ldrb	r3, [r3, #4]
 8004502:	b113      	cbz	r3, 800450a <ssd1306_DrawPixel+0x16>
	{
		color = (SSD1306_COLOR)!color;
 8004504:	fab2 f282 	clz	r2, r2
 8004508:	0952      	lsrs	r2, r2, #5
 800450a:	08cb      	lsrs	r3, r1, #3
 800450c:	2580      	movs	r5, #128	; 0x80
	}

	if (color == White)
 800450e:	2a01      	cmp	r2, #1
 8004510:	4c09      	ldr	r4, [pc, #36]	; (8004538 <ssd1306_DrawPixel+0x44>)
 8004512:	f001 0107 	and.w	r1, r1, #7
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004516:	fb05 0003 	mla	r0, r5, r3, r0
	if (color == White)
 800451a:	d104      	bne.n	8004526 <ssd1306_DrawPixel+0x32>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800451c:	408a      	lsls	r2, r1
 800451e:	5c21      	ldrb	r1, [r4, r0]
 8004520:	430a      	orrs	r2, r1
 8004522:	5422      	strb	r2, [r4, r0]
 8004524:	bd30      	pop	{r4, r5, pc}
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004526:	2201      	movs	r2, #1
 8004528:	408a      	lsls	r2, r1
 800452a:	5c21      	ldrb	r1, [r4, r0]
 800452c:	ea21 0102 	bic.w	r1, r1, r2
 8004530:	5421      	strb	r1, [r4, r0]
 8004532:	bd30      	pop	{r4, r5, pc}
 8004534:	2000082a 	.word	0x2000082a
 8004538:	20000830 	.word	0x20000830

0800453c <ssd1306_WriteChar>:
	}
}

//	color 	=> Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 800453c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004540:	b087      	sub	sp, #28
 8004542:	4607      	mov	r7, r0
 8004544:	a806      	add	r0, sp, #24
 8004546:	e900 0006 	stmdb	r0, {r1, r2}
 800454a:	469b      	mov	fp, r3
	uint32_t i, b, j;

	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800454c:	4b21      	ldr	r3, [pc, #132]	; (80045d4 <ssd1306_WriteChar+0x98>)
 800454e:	f89d 9010 	ldrb.w	r9, [sp, #16]
 8004552:	881c      	ldrh	r4, [r3, #0]
 8004554:	9301      	str	r3, [sp, #4]
 8004556:	eb04 0209 	add.w	r2, r4, r9
 800455a:	2a7f      	cmp	r2, #127	; 0x7f
 800455c:	dc37      	bgt.n	80045ce <ssd1306_WriteChar+0x92>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800455e:	885b      	ldrh	r3, [r3, #2]
 8004560:	f89d a011 	ldrb.w	sl, [sp, #17]
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	eb03 020a 	add.w	r2, r3, sl
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800456a:	2a3f      	cmp	r2, #63	; 0x3f
 800456c:	dc2f      	bgt.n	80045ce <ssd1306_WriteChar+0x92>
		return 0;
	}

	for (i = 0; i < Font.FontHeight; i++)
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 800456e:	f1a7 0220 	sub.w	r2, r7, #32
 8004572:	fb0a f302 	mul.w	r3, sl, r2
 8004576:	9303      	str	r3, [sp, #12]
 8004578:	2600      	movs	r6, #0
	for (i = 0; i < Font.FontHeight; i++)
 800457a:	4556      	cmp	r6, sl
 800457c:	d306      	bcc.n	800458c <ssd1306_WriteChar+0x50>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
			}
		}
	}

	SSD1306.CurrentX += Font.FontWidth;
 800457e:	9b01      	ldr	r3, [sp, #4]
 8004580:	444c      	add	r4, r9
 8004582:	801c      	strh	r4, [r3, #0]


	return ch;
}
 8004584:	4638      	mov	r0, r7
 8004586:	b007      	add	sp, #28
 8004588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 800458c:	9b03      	ldr	r3, [sp, #12]
 800458e:	9905      	ldr	r1, [sp, #20]
 8004590:	18f2      	adds	r2, r6, r3
		for (j = 0; j < Font.FontWidth; j++)
 8004592:	2500      	movs	r5, #0
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004594:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8004598:	9302      	str	r3, [sp, #8]
 800459a:	9b00      	ldr	r3, [sp, #0]
 800459c:	eb03 0806 	add.w	r8, r3, r6
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80045a0:	fa5f f888 	uxtb.w	r8, r8
		for (j = 0; j < Font.FontWidth; j++)
 80045a4:	454d      	cmp	r5, r9
 80045a6:	d301      	bcc.n	80045ac <ssd1306_WriteChar+0x70>
	for (i = 0; i < Font.FontHeight; i++)
 80045a8:	3601      	adds	r6, #1
 80045aa:	e7e6      	b.n	800457a <ssd1306_WriteChar+0x3e>
			if ((b << j) & 0x8000)
 80045ac:	9b02      	ldr	r3, [sp, #8]
 80045ae:	fa03 f205 	lsl.w	r2, r3, r5
 80045b2:	0413      	lsls	r3, r2, #16
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80045b4:	eb05 0004 	add.w	r0, r5, r4
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80045b8:	bf56      	itet	pl
 80045ba:	fabb f28b 	clzpl	r2, fp
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80045be:	465a      	movmi	r2, fp
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80045c0:	0952      	lsrpl	r2, r2, #5
 80045c2:	4641      	mov	r1, r8
 80045c4:	b2c0      	uxtb	r0, r0
 80045c6:	f7ff ff95 	bl	80044f4 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 80045ca:	3501      	adds	r5, #1
 80045cc:	e7ea      	b.n	80045a4 <ssd1306_WriteChar+0x68>
		return 0;
 80045ce:	2700      	movs	r7, #0
 80045d0:	e7d8      	b.n	8004584 <ssd1306_WriteChar+0x48>
 80045d2:	bf00      	nop
 80045d4:	2000082a 	.word	0x2000082a

080045d8 <ssd1306_WriteString>:

char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 80045d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045da:	e88d 0006 	stmia.w	sp, {r1, r2}
 80045de:	466d      	mov	r5, sp
 80045e0:	461f      	mov	r7, r3
 80045e2:	1e46      	subs	r6, r0, #1

	while (*str)
 80045e4:	7874      	ldrb	r4, [r6, #1]
 80045e6:	b14c      	cbz	r4, 80045fc <ssd1306_WriteString+0x24>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 80045e8:	4620      	mov	r0, r4
 80045ea:	463b      	mov	r3, r7
 80045ec:	e895 0006 	ldmia.w	r5, {r1, r2}
 80045f0:	f7ff ffa4 	bl	800453c <ssd1306_WriteChar>
 80045f4:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 80045f8:	42a0      	cmp	r0, r4
 80045fa:	d0f3      	beq.n	80045e4 <ssd1306_WriteString+0xc>
		str++;
	}


	return *str;
}
 80045fc:	4620      	mov	r0, r4
 80045fe:	b003      	add	sp, #12
 8004600:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004604 <ssd1306_SetCursor>:

void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8004604:	4b01      	ldr	r3, [pc, #4]	; (800460c <ssd1306_SetCursor+0x8>)
 8004606:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8004608:	8059      	strh	r1, [r3, #2]
 800460a:	4770      	bx	lr
 800460c:	2000082a 	.word	0x2000082a

08004610 <computePower>:

	// Need to compute the number of A cell can discharge

	// Simple ohms law V = I*R

	float voltageDiff = cellV - uv_samsung25R;
 8004610:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800464c <computePower+0x3c>
	if(voltageDiff < 0){ //Quick check cellV should never be below UV
		voltageDiff = 0;
 8004614:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004650 <computePower+0x40>
	}

	float current = voltageDiff/ (ir_samsung25R / 1000);
 8004618:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8004654 <computePower+0x44>
	float voltageDiff = cellV - uv_samsung25R;
 800461c:	ee70 7a67 	vsub.f32	s15, s0, s15
		voltageDiff = 0;
 8004620:	eef4 7a47 	vcmp.f32	s15, s14
 8004624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004628:	bf48      	it	mi
 800462a:	eef0 7a47 	vmovmi.f32	s15, s14
	float current = voltageDiff/ (ir_samsung25R / 1000);
 800462e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	//Eg: if 0.7 / 20m = 35A

	//Since our cell samsung25R can do 100A < 1s and 20A continous

	if(current > maxConstCellCurr_samsung25R)
 8004632:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
	{
		current = maxConstCellCurr_samsung25R;
 8004636:	eeb4 7a67 	vcmp.f32	s14, s15
 800463a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800463e:	bfc8      	it	gt
 8004640:	eeb0 7a67 	vmovgt.f32	s14, s15
	}

	return cellV * current; //Watts


}
 8004644:	ee27 0a00 	vmul.f32	s0, s14, s0
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	40333333 	.word	0x40333333
 8004650:	00000000 	.word	0x00000000
 8004654:	3ca3d70a 	.word	0x3ca3d70a

08004658 <calcdeltaAh>:
 * based on timeInterval in seconds and current in amps
 */
float calcdeltaAh(float timeInterval_s, float current_A){

	//Ah = A * hours
	float deltaAh = (-current_A * timeInterval_s / 3600.0);
 8004658:	ee20 0ac0 	vnmul.f32	s0, s1, s0

	return deltaAh;
}
 800465c:	eddf 7a02 	vldr	s15, [pc, #8]	; 8004668 <calcdeltaAh+0x10>
 8004660:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	45610000 	.word	0x45610000

0800466c <socByOCV>:

float socByOCV(float ocv){

	return lookupSOCByOCV(ocv, defaultOcvTable, defaultTableSize, defaultSocTable);
 800466c:	4a02      	ldr	r2, [pc, #8]	; (8004678 <socByOCV+0xc>)
 800466e:	4803      	ldr	r0, [pc, #12]	; (800467c <socByOCV+0x10>)
 8004670:	210f      	movs	r1, #15
 8004672:	f000 b805 	b.w	8004680 <lookupSOCByOCV>
 8004676:	bf00      	nop
 8004678:	200000d0 	.word	0x200000d0
 800467c:	20000094 	.word	0x20000094

08004680 <lookupSOCByOCV>:
	int count = tableSize;

	int i;
	float dx, dy;

	if (restedOcvInput < ocvTable[0]) {
 8004680:	edd0 7a00 	vldr	s15, [r0]
 8004684:	eef4 7ac0 	vcmpe.f32	s15, s0
 8004688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 800468c:	b510      	push	{r4, lr}
	if (restedOcvInput < ocvTable[0]) {
 800468e:	dd02      	ble.n	8004696 <lookupSOCByOCV+0x16>
		 * handle error here if you want */
		return socTable[0]; /* return minimum element */
	}

	if (restedOcvInput > ocvTable[count - 1]) {
		return socTable[count - 1]; /* return maximum */
 8004690:	ed92 0a00 	vldr	s0, [r2]
 8004694:	bd10      	pop	{r4, pc}
	if (restedOcvInput > ocvTable[count - 1]) {
 8004696:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
 800469a:	3c01      	subs	r4, #1
 800469c:	00a4      	lsls	r4, r4, #2
 800469e:	1903      	adds	r3, r0, r4
 80046a0:	edd3 7a00 	vldr	s15, [r3]
 80046a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80046a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ac:	dc28      	bgt.n	8004700 <lookupSOCByOCV+0x80>
 80046ae:	1d04      	adds	r4, r0, #4
 80046b0:	2300      	movs	r3, #0
	}

	/* find i, such that ocvTable[i] <= x < ocvTable[i+1] */
	for (i = 0; i < count - 1; i++) {
 80046b2:	3901      	subs	r1, #1
 80046b4:	428b      	cmp	r3, r1
 80046b6:	f103 0301 	add.w	r3, r3, #1
 80046ba:	da06      	bge.n	80046ca <lookupSOCByOCV+0x4a>
		if (ocvTable[i + 1] > restedOcvInput) {
 80046bc:	ecf4 7a01 	vldmia	r4!, {s15}
 80046c0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80046c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c8:	d5f4      	bpl.n	80046b4 <lookupSOCByOCV+0x34>
			break;
		}
	}

	/* interpolate */
	dx = ocvTable[i + 1] - ocvTable[i];
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	1f19      	subs	r1, r3, #4
 80046ce:	1844      	adds	r4, r0, r1
	dy = socTable[i + 1] - socTable[i];
 80046d0:	4411      	add	r1, r2
 80046d2:	441a      	add	r2, r3
	dx = ocvTable[i + 1] - ocvTable[i];
 80046d4:	ed94 6a00 	vldr	s12, [r4]
	dy = socTable[i + 1] - socTable[i];
 80046d8:	edd1 6a00 	vldr	s13, [r1]
 80046dc:	edd2 7a00 	vldr	s15, [r2]
	dx = ocvTable[i + 1] - ocvTable[i];
 80046e0:	4403      	add	r3, r0
	float socByOcv = socTable[i] + (restedOcvInput - ocvTable[i]) * dy / dx;
 80046e2:	ee30 0a46 	vsub.f32	s0, s0, s12
	dy = socTable[i + 1] - socTable[i];
 80046e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
	dx = ocvTable[i + 1] - ocvTable[i];
 80046ea:	ed93 7a00 	vldr	s14, [r3]
	float socByOcv = socTable[i] + (restedOcvInput - ocvTable[i]) * dy / dx;
 80046ee:	ee67 7a80 	vmul.f32	s15, s15, s0
	dx = ocvTable[i + 1] - ocvTable[i];
 80046f2:	ee37 7a46 	vsub.f32	s14, s14, s12
	float socByOcv = socTable[i] + (restedOcvInput - ocvTable[i]) * dy / dx;
 80046f6:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80046fa:	ee30 0a26 	vadd.f32	s0, s0, s13
	return socByOcv;
 80046fe:	bd10      	pop	{r4, pc}
		return socTable[count - 1]; /* return maximum */
 8004700:	4422      	add	r2, r4
 8004702:	e7c5      	b.n	8004690 <lookupSOCByOCV+0x10>

08004704 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004704:	4b0c      	ldr	r3, [pc, #48]	; (8004738 <HAL_MspInit+0x34>)
{
 8004706:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	f042 0201 	orr.w	r2, r2, #1
 800470e:	619a      	str	r2, [r3, #24]
 8004710:	699a      	ldr	r2, [r3, #24]
 8004712:	f002 0201 	and.w	r2, r2, #1
 8004716:	9200      	str	r2, [sp, #0]
 8004718:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800471a:	69da      	ldr	r2, [r3, #28]
 800471c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004720:	61da      	str	r2, [r3, #28]
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004728:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800472a:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 800472c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800472e:	f7fc fc93 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004732:	b003      	add	sp, #12
 8004734:	f85d fb04 	ldr.w	pc, [sp], #4
 8004738:	40021000 	.word	0x40021000

0800473c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800473c:	b510      	push	{r4, lr}
 800473e:	4604      	mov	r4, r0
 8004740:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004742:	2214      	movs	r2, #20
 8004744:	2100      	movs	r1, #0
 8004746:	a803      	add	r0, sp, #12
 8004748:	f000 fa89 	bl	8004c5e <memset>
  if(hdac->Instance==DAC1)
 800474c:	6822      	ldr	r2, [r4, #0]
 800474e:	4b15      	ldr	r3, [pc, #84]	; (80047a4 <HAL_DAC_MspInit+0x68>)
 8004750:	429a      	cmp	r2, r3
 8004752:	d124      	bne.n	800479e <HAL_DAC_MspInit+0x62>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8004754:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = DCHG_SET_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(DCHG_SET_GPIO_Port, &GPIO_InitStruct);
 8004758:	a903      	add	r1, sp, #12
    __HAL_RCC_DAC1_CLK_ENABLE();
 800475a:	69da      	ldr	r2, [r3, #28]
 800475c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004760:	61da      	str	r2, [r3, #28]
 8004762:	69da      	ldr	r2, [r3, #28]
 8004764:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8004768:	9201      	str	r2, [sp, #4]
 800476a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800476c:	695a      	ldr	r2, [r3, #20]
 800476e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004772:	615a      	str	r2, [r3, #20]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477a:	9302      	str	r3, [sp, #8]
 800477c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DCHG_SET_Pin;
 800477e:	2310      	movs	r3, #16
 8004780:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(DCHG_SET_GPIO_Port, &GPIO_InitStruct);
 8004782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004786:	2303      	movs	r3, #3
 8004788:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(DCHG_SET_GPIO_Port, &GPIO_InitStruct);
 800478a:	f7fc fd91 	bl	80012b0 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800478e:	2200      	movs	r2, #0
 8004790:	2036      	movs	r0, #54	; 0x36
 8004792:	4611      	mov	r1, r2
 8004794:	f7fc fc72 	bl	800107c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004798:	2036      	movs	r0, #54	; 0x36
 800479a:	f7fc fca3 	bl	80010e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800479e:	b008      	add	sp, #32
 80047a0:	bd10      	pop	{r4, pc}
 80047a2:	bf00      	nop
 80047a4:	40007400 	.word	0x40007400

080047a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80047a8:	b510      	push	{r4, lr}
 80047aa:	4604      	mov	r4, r0
 80047ac:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047ae:	2214      	movs	r2, #20
 80047b0:	2100      	movs	r1, #0
 80047b2:	a803      	add	r0, sp, #12
 80047b4:	f000 fa53 	bl	8004c5e <memset>
  if(hi2c->Instance==I2C1)
 80047b8:	6822      	ldr	r2, [r4, #0]
 80047ba:	4b12      	ldr	r3, [pc, #72]	; (8004804 <HAL_I2C_MspInit+0x5c>)
 80047bc:	429a      	cmp	r2, r3
 80047be:	d11f      	bne.n	8004800 <HAL_I2C_MspInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047c0:	4c11      	ldr	r4, [pc, #68]	; (8004808 <HAL_I2C_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047c2:	4812      	ldr	r0, [pc, #72]	; (800480c <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047c4:	6963      	ldr	r3, [r4, #20]
 80047c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047ca:	6163      	str	r3, [r4, #20]
 80047cc:	6963      	ldr	r3, [r4, #20]
 80047ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047d2:	9301      	str	r3, [sp, #4]
 80047d4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80047d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80047da:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047dc:	2312      	movs	r3, #18
 80047de:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047e0:	2303      	movs	r3, #3
 80047e2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047e4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80047e6:	2304      	movs	r3, #4
 80047e8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ea:	f7fc fd61 	bl	80012b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80047ee:	69e3      	ldr	r3, [r4, #28]
 80047f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047f4:	61e3      	str	r3, [r4, #28]
 80047f6:	69e3      	ldr	r3, [r4, #28]
 80047f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047fc:	9302      	str	r3, [sp, #8]
 80047fe:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004800:	b008      	add	sp, #32
 8004802:	bd10      	pop	{r4, pc}
 8004804:	40005400 	.word	0x40005400
 8004808:	40021000 	.word	0x40021000
 800480c:	48000400 	.word	0x48000400

08004810 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(htim_base->Instance==TIM6)
 8004812:	6803      	ldr	r3, [r0, #0]
 8004814:	4a29      	ldr	r2, [pc, #164]	; (80048bc <HAL_TIM_Base_MspInit+0xac>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d114      	bne.n	8004844 <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800481a:	4b29      	ldr	r3, [pc, #164]	; (80048c0 <HAL_TIM_Base_MspInit+0xb0>)
 800481c:	69da      	ldr	r2, [r3, #28]
 800481e:	f042 0210 	orr.w	r2, r2, #16
 8004822:	61da      	str	r2, [r3, #28]
 8004824:	69db      	ldr	r3, [r3, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004826:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004828:	f003 0310 	and.w	r3, r3, #16
 800482c:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800482e:	2036      	movs	r0, #54	; 0x36
 8004830:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004832:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004834:	f7fc fc22 	bl	800107c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004838:	2036      	movs	r0, #54	; 0x36
  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800483a:	f7fc fc53 	bl	80010e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800483e:	b005      	add	sp, #20
 8004840:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM7)
 8004844:	4a1f      	ldr	r2, [pc, #124]	; (80048c4 <HAL_TIM_Base_MspInit+0xb4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d110      	bne.n	800486c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800484a:	4b1d      	ldr	r3, [pc, #116]	; (80048c0 <HAL_TIM_Base_MspInit+0xb0>)
 800484c:	69da      	ldr	r2, [r3, #28]
 800484e:	f042 0220 	orr.w	r2, r2, #32
 8004852:	61da      	str	r2, [r3, #28]
 8004854:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004856:	2200      	movs	r2, #0
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004858:	f003 0320 	and.w	r3, r3, #32
 800485c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800485e:	2037      	movs	r0, #55	; 0x37
 8004860:	4611      	mov	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004862:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004864:	f7fc fc0a 	bl	800107c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004868:	2037      	movs	r0, #55	; 0x37
 800486a:	e7e6      	b.n	800483a <HAL_TIM_Base_MspInit+0x2a>
  else if(htim_base->Instance==TIM16)
 800486c:	4a16      	ldr	r2, [pc, #88]	; (80048c8 <HAL_TIM_Base_MspInit+0xb8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d110      	bne.n	8004894 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004872:	4b13      	ldr	r3, [pc, #76]	; (80048c0 <HAL_TIM_Base_MspInit+0xb0>)
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800487a:	619a      	str	r2, [r3, #24]
 800487c:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800487e:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004884:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004886:	2019      	movs	r0, #25
 8004888:	4611      	mov	r1, r2
    __HAL_RCC_TIM16_CLK_ENABLE();
 800488a:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800488c:	f7fc fbf6 	bl	800107c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004890:	2019      	movs	r0, #25
 8004892:	e7d2      	b.n	800483a <HAL_TIM_Base_MspInit+0x2a>
  else if(htim_base->Instance==TIM17)
 8004894:	4a0d      	ldr	r2, [pc, #52]	; (80048cc <HAL_TIM_Base_MspInit+0xbc>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d1d1      	bne.n	800483e <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800489a:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <HAL_TIM_Base_MspInit+0xb0>)
 800489c:	699a      	ldr	r2, [r3, #24]
 800489e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80048a2:	619a      	str	r2, [r3, #24]
 80048a4:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80048a6:	2200      	movs	r2, #0
    __HAL_RCC_TIM17_CLK_ENABLE();
 80048a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048ac:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80048ae:	201a      	movs	r0, #26
 80048b0:	4611      	mov	r1, r2
    __HAL_RCC_TIM17_CLK_ENABLE();
 80048b2:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80048b4:	f7fc fbe2 	bl	800107c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80048b8:	201a      	movs	r0, #26
 80048ba:	e7be      	b.n	800483a <HAL_TIM_Base_MspInit+0x2a>
 80048bc:	40001000 	.word	0x40001000
 80048c0:	40021000 	.word	0x40021000
 80048c4:	40001400 	.word	0x40001400
 80048c8:	40014400 	.word	0x40014400
 80048cc:	40014800 	.word	0x40014800

080048d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048d0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d2:	2214      	movs	r2, #20
{
 80048d4:	b08a      	sub	sp, #40	; 0x28
 80048d6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d8:	2100      	movs	r1, #0
 80048da:	eb0d 0002 	add.w	r0, sp, r2
 80048de:	f000 f9be 	bl	8004c5e <memset>
  if(huart->Instance==USART1)
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	4a27      	ldr	r2, [pc, #156]	; (8004984 <HAL_UART_MspInit+0xb4>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d128      	bne.n	800493c <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048ea:	4b27      	ldr	r3, [pc, #156]	; (8004988 <HAL_UART_MspInit+0xb8>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048ec:	4827      	ldr	r0, [pc, #156]	; (800498c <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80048ee:	699a      	ldr	r2, [r3, #24]
 80048f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048f4:	619a      	str	r2, [r3, #24]
 80048f6:	699a      	ldr	r2, [r3, #24]
 80048f8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80048fc:	9201      	str	r2, [sp, #4]
 80048fe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004900:	695a      	ldr	r2, [r3, #20]
 8004902:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004906:	615a      	str	r2, [r3, #20]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800490e:	9302      	str	r3, [sp, #8]
 8004910:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004912:	2330      	movs	r3, #48	; 0x30
 8004914:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004916:	2302      	movs	r3, #2
 8004918:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800491a:	2303      	movs	r3, #3
 800491c:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800491e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004920:	2307      	movs	r3, #7
 8004922:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004924:	f7fc fcc4 	bl	80012b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004928:	2200      	movs	r2, #0
 800492a:	2025      	movs	r0, #37	; 0x25
 800492c:	4611      	mov	r1, r2
 800492e:	f7fc fba5 	bl	800107c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004932:	2025      	movs	r0, #37	; 0x25
 8004934:	f7fc fbd6 	bl	80010e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004938:	b00a      	add	sp, #40	; 0x28
 800493a:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 800493c:	4a14      	ldr	r2, [pc, #80]	; (8004990 <HAL_UART_MspInit+0xc0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d1fa      	bne.n	8004938 <HAL_UART_MspInit+0x68>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004942:	4b11      	ldr	r3, [pc, #68]	; (8004988 <HAL_UART_MspInit+0xb8>)
 8004944:	69da      	ldr	r2, [r3, #28]
 8004946:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800494a:	61da      	str	r2, [r3, #28]
 800494c:	69da      	ldr	r2, [r3, #28]
 800494e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004952:	9203      	str	r2, [sp, #12]
 8004954:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004956:	695a      	ldr	r2, [r3, #20]
 8004958:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800495c:	615a      	str	r2, [r3, #20]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004964:	9304      	str	r3, [sp, #16]
 8004966:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004968:	230c      	movs	r3, #12
 800496a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800496c:	2302      	movs	r3, #2
 800496e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004970:	2303      	movs	r3, #3
 8004972:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004974:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004976:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800497c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800497e:	f7fc fc97 	bl	80012b0 <HAL_GPIO_Init>
}
 8004982:	e7d9      	b.n	8004938 <HAL_UART_MspInit+0x68>
 8004984:	40013800 	.word	0x40013800
 8004988:	40021000 	.word	0x40021000
 800498c:	48000800 	.word	0x48000800
 8004990:	40004400 	.word	0x40004400

08004994 <NMI_Handler>:
 8004994:	4770      	bx	lr

08004996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004996:	e7fe      	b.n	8004996 <HardFault_Handler>

08004998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004998:	e7fe      	b.n	8004998 <MemManage_Handler>

0800499a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800499a:	e7fe      	b.n	800499a <BusFault_Handler>

0800499c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800499c:	e7fe      	b.n	800499c <UsageFault_Handler>

0800499e <SVC_Handler>:
 800499e:	4770      	bx	lr

080049a0 <DebugMon_Handler>:
 80049a0:	4770      	bx	lr

080049a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049a2:	4770      	bx	lr

080049a4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049a4:	f7fc bb32 	b.w	800100c <HAL_IncTick>

080049a8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80049a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80049aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80049ae:	f7fc fd61 	bl	8001474 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80049b2:	f44f 7000 	mov.w	r0, #512	; 0x200
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80049b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80049ba:	f7fc bd5b 	b.w	8001474 <HAL_GPIO_EXTI_IRQHandler>
	...

080049c0 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80049c0:	4801      	ldr	r0, [pc, #4]	; (80049c8 <TIM1_UP_TIM16_IRQHandler+0x8>)
 80049c2:	f7fd bdd0 	b.w	8002566 <HAL_TIM_IRQHandler>
 80049c6:	bf00      	nop
 80049c8:	20000f60 	.word	0x20000f60

080049cc <TIM1_TRG_COM_TIM17_IRQHandler>:
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80049cc:	4801      	ldr	r0, [pc, #4]	; (80049d4 <TIM1_TRG_COM_TIM17_IRQHandler+0x8>)
 80049ce:	f7fd bdca 	b.w	8002566 <HAL_TIM_IRQHandler>
 80049d2:	bf00      	nop
 80049d4:	20000de0 	.word	0x20000de0

080049d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80049d8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  uint32_t tmp_flag = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE);
 80049da:	4c0f      	ldr	r4, [pc, #60]	; (8004a18 <USART1_IRQHandler+0x40>)
 80049dc:	6823      	ldr	r3, [r4, #0]
 80049de:	69d9      	ldr	r1, [r3, #28]
  uint32_t tmp_it_source = __HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_RXNE);
 80049e0:	681a      	ldr	r2, [r3, #0]

  if((tmp_flag != RESET) && (tmp_it_source != RESET)) {
 80049e2:	0688      	lsls	r0, r1, #26
 80049e4:	d508      	bpl.n	80049f8 <USART1_IRQHandler+0x20>
 80049e6:	0691      	lsls	r1, r2, #26
 80049e8:	d506      	bpl.n	80049f8 <USART1_IRQHandler+0x20>
    pxMBFrameCBByteReceived();
 80049ea:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <USART1_IRQHandler+0x44>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4798      	blx	r3
	  //xMBRTUReceiveFSM();
    __HAL_UART_CLEAR_PEFLAG(&huart1);
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	2201      	movs	r2, #1
 80049f4:	621a      	str	r2, [r3, #32]
    return;
 80049f6:	bd10      	pop	{r4, pc}
  }

  if((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_TXE) != RESET)) {
 80049f8:	69da      	ldr	r2, [r3, #28]
 80049fa:	0612      	lsls	r2, r2, #24
 80049fc:	d507      	bpl.n	8004a0e <USART1_IRQHandler+0x36>
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	061b      	lsls	r3, r3, #24
 8004a02:	d504      	bpl.n	8004a0e <USART1_IRQHandler+0x36>
    pxMBFrameCBTransmitterEmpty();
 8004a04:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <USART1_IRQHandler+0x48>)
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    pxMBFrameCBTransmitterEmpty();
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4718      	bx	r3
  HAL_UART_IRQHandler(&huart1);
 8004a0e:	4802      	ldr	r0, [pc, #8]	; (8004a18 <USART1_IRQHandler+0x40>)
}
 8004a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_IRQHandler(&huart1);
 8004a14:	f7fd bf3c 	b.w	8002890 <HAL_UART_IRQHandler>
 8004a18:	20000e20 	.word	0x20000e20
 8004a1c:	20000c74 	.word	0x20000c74
 8004a20:	20000c6c 	.word	0x20000c6c

08004a24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004a24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004a26:	4804      	ldr	r0, [pc, #16]	; (8004a38 <TIM6_DAC_IRQHandler+0x14>)
 8004a28:	f7fd fd9d 	bl	8002566 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8004a2c:	4803      	ldr	r0, [pc, #12]	; (8004a3c <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004a2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DAC_IRQHandler(&hdac1);
 8004a32:	f7fc bbe9 	b.w	8001208 <HAL_DAC_IRQHandler>
 8004a36:	bf00      	nop
 8004a38:	20000ea0 	.word	0x20000ea0
 8004a3c:	20000d80 	.word	0x20000d80

08004a40 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004a40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  if(__HAL_TIM_GET_FLAG(&htim7, TIM_FLAG_UPDATE) != RESET && __HAL_TIM_GET_IT_SOURCE(&htim7, TIM_IT_UPDATE) !=RESET)
 8004a42:	4b0c      	ldr	r3, [pc, #48]	; (8004a74 <TIM7_IRQHandler+0x34>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	07d1      	lsls	r1, r2, #31
 8004a4a:	d50e      	bpl.n	8004a6a <TIM7_IRQHandler+0x2a>
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	07d2      	lsls	r2, r2, #31
 8004a50:	d50b      	bpl.n	8004a6a <TIM7_IRQHandler+0x2a>
  {
	__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 8004a52:	f06f 0201 	mvn.w	r2, #1
 8004a56:	611a      	str	r2, [r3, #16]
	if (!--downcounter)
 8004a58:	4a07      	ldr	r2, [pc, #28]	; (8004a78 <TIM7_IRQHandler+0x38>)
 8004a5a:	8813      	ldrh	r3, [r2, #0]
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	8013      	strh	r3, [r2, #0]
 8004a62:	b913      	cbnz	r3, 8004a6a <TIM7_IRQHandler+0x2a>
	{
		pxMBPortCBTimerExpired();
 8004a64:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <TIM7_IRQHandler+0x3c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4798      	blx	r3
	}
  }

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004a6a:	4802      	ldr	r0, [pc, #8]	; (8004a74 <TIM7_IRQHandler+0x34>)
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004a6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim7);
 8004a70:	f7fd bd79 	b.w	8002566 <HAL_TIM_IRQHandler>
 8004a74:	20000fa0 	.word	0x20000fa0
 8004a78:	200007e2 	.word	0x200007e2
 8004a7c:	20000c70 	.word	0x20000c70

08004a80 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8004a80:	2001      	movs	r0, #1
 8004a82:	4770      	bx	lr

08004a84 <_kill>:

int _kill(int pid, int sig)
{
 8004a84:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004a86:	f000 f8a3 	bl	8004bd0 <__errno>
 8004a8a:	2316      	movs	r3, #22
 8004a8c:	6003      	str	r3, [r0, #0]
	return -1;
}
 8004a8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a92:	bd08      	pop	{r3, pc}

08004a94 <_exit>:

void _exit (int status)
{
 8004a94:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004a96:	f000 f89b 	bl	8004bd0 <__errno>
 8004a9a:	2316      	movs	r3, #22
 8004a9c:	6003      	str	r3, [r0, #0]
 8004a9e:	e7fe      	b.n	8004a9e <_exit+0xa>

08004aa0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004aa0:	b570      	push	{r4, r5, r6, lr}
 8004aa2:	460e      	mov	r6, r1
 8004aa4:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	1ba3      	subs	r3, r4, r6
 8004aaa:	429d      	cmp	r5, r3
 8004aac:	dc01      	bgt.n	8004ab2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8004aae:	4628      	mov	r0, r5
 8004ab0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8004ab2:	f3af 8000 	nop.w
 8004ab6:	f804 0b01 	strb.w	r0, [r4], #1
 8004aba:	e7f5      	b.n	8004aa8 <_read+0x8>

08004abc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004abc:	b570      	push	{r4, r5, r6, lr}
 8004abe:	460e      	mov	r6, r1
 8004ac0:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	1ba3      	subs	r3, r4, r6
 8004ac6:	429d      	cmp	r5, r3
 8004ac8:	dc01      	bgt.n	8004ace <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8004aca:	4628      	mov	r0, r5
 8004acc:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8004ace:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004ad2:	f3af 8000 	nop.w
 8004ad6:	e7f5      	b.n	8004ac4 <_write+0x8>

08004ad8 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8004ad8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004ada:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <_sbrk+0x2c>)
 8004adc:	6819      	ldr	r1, [r3, #0]
{
 8004ade:	4602      	mov	r2, r0
	if (heap_end == 0)
 8004ae0:	b909      	cbnz	r1, 8004ae6 <_sbrk+0xe>
		heap_end = &end;
 8004ae2:	4909      	ldr	r1, [pc, #36]	; (8004b08 <_sbrk+0x30>)
 8004ae4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8004ae6:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8004ae8:	4669      	mov	r1, sp
 8004aea:	4402      	add	r2, r0
 8004aec:	428a      	cmp	r2, r1
 8004aee:	d906      	bls.n	8004afe <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004af0:	f000 f86e 	bl	8004bd0 <__errno>
 8004af4:	230c      	movs	r3, #12
 8004af6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004afc:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8004afe:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8004b00:	bd08      	pop	{r3, pc}
 8004b02:	bf00      	nop
 8004b04:	20000c30 	.word	0x20000c30
 8004b08:	20000ff0 	.word	0x20000ff0

08004b0c <_close>:

int _close(int file)
{
	return -1;
}
 8004b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b10:	4770      	bx	lr

08004b12 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004b12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b16:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004b18:	2000      	movs	r0, #0
 8004b1a:	4770      	bx	lr

08004b1c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004b1c:	2001      	movs	r0, #1
 8004b1e:	4770      	bx	lr

08004b20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004b20:	2000      	movs	r0, #0
 8004b22:	4770      	bx	lr

08004b24 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <SystemInit+0x18>)
 8004b26:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b2a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004b2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b36:	609a      	str	r2, [r3, #8]
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	e000ed00 	.word	0xe000ed00

08004b40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004b40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b78 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004b44:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004b46:	e003      	b.n	8004b50 <LoopCopyDataInit>

08004b48 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004b48:	4b0c      	ldr	r3, [pc, #48]	; (8004b7c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004b4a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004b4c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004b4e:	3104      	adds	r1, #4

08004b50 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004b50:	480b      	ldr	r0, [pc, #44]	; (8004b80 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004b52:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004b54:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004b56:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004b58:	d3f6      	bcc.n	8004b48 <CopyDataInit>
	ldr	r2, =_sbss
 8004b5a:	4a0b      	ldr	r2, [pc, #44]	; (8004b88 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004b5c:	e002      	b.n	8004b64 <LoopFillZerobss>

08004b5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004b5e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004b60:	f842 3b04 	str.w	r3, [r2], #4

08004b64 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004b64:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <LoopForever+0x16>)
	cmp	r2, r3
 8004b66:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004b68:	d3f9      	bcc.n	8004b5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004b6a:	f7ff ffdb 	bl	8004b24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b6e:	f000 f847 	bl	8004c00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004b72:	f7ff f94d 	bl	8003e10 <main>

08004b76 <LoopForever>:

LoopForever:
    b LoopForever
 8004b76:	e7fe      	b.n	8004b76 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004b78:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8004b7c:	08009ee0 	.word	0x08009ee0
	ldr	r0, =_sdata
 8004b80:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004b84:	20000780 	.word	0x20000780
	ldr	r2, =_sbss
 8004b88:	20000780 	.word	0x20000780
	ldr	r3, = _ebss
 8004b8c:	20000ff0 	.word	0x20000ff0

08004b90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004b90:	e7fe      	b.n	8004b90 <ADC1_2_IRQHandler>
	...

08004b94 <__assert_func>:
 8004b94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004b96:	461c      	mov	r4, r3
 8004b98:	4b09      	ldr	r3, [pc, #36]	; (8004bc0 <__assert_func+0x2c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4605      	mov	r5, r0
 8004b9e:	68d8      	ldr	r0, [r3, #12]
 8004ba0:	b152      	cbz	r2, 8004bb8 <__assert_func+0x24>
 8004ba2:	4b08      	ldr	r3, [pc, #32]	; (8004bc4 <__assert_func+0x30>)
 8004ba4:	9202      	str	r2, [sp, #8]
 8004ba6:	e88d 000a 	stmia.w	sp, {r1, r3}
 8004baa:	4622      	mov	r2, r4
 8004bac:	462b      	mov	r3, r5
 8004bae:	4906      	ldr	r1, [pc, #24]	; (8004bc8 <__assert_func+0x34>)
 8004bb0:	f000 f814 	bl	8004bdc <fiprintf>
 8004bb4:	f001 fd8e 	bl	80066d4 <abort>
 8004bb8:	4b04      	ldr	r3, [pc, #16]	; (8004bcc <__assert_func+0x38>)
 8004bba:	461a      	mov	r2, r3
 8004bbc:	e7f2      	b.n	8004ba4 <__assert_func+0x10>
 8004bbe:	bf00      	nop
 8004bc0:	20000110 	.word	0x20000110
 8004bc4:	08009b9c 	.word	0x08009b9c
 8004bc8:	08009ba9 	.word	0x08009ba9
 8004bcc:	08009bd7 	.word	0x08009bd7

08004bd0 <__errno>:
 8004bd0:	4b01      	ldr	r3, [pc, #4]	; (8004bd8 <__errno+0x8>)
 8004bd2:	6818      	ldr	r0, [r3, #0]
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	20000110 	.word	0x20000110

08004bdc <fiprintf>:
 8004bdc:	b40e      	push	{r1, r2, r3}
 8004bde:	b503      	push	{r0, r1, lr}
 8004be0:	4601      	mov	r1, r0
 8004be2:	ab03      	add	r3, sp, #12
 8004be4:	4805      	ldr	r0, [pc, #20]	; (8004bfc <fiprintf+0x20>)
 8004be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bea:	6800      	ldr	r0, [r0, #0]
 8004bec:	9301      	str	r3, [sp, #4]
 8004bee:	f001 f86d 	bl	8005ccc <_vfiprintf_r>
 8004bf2:	b002      	add	sp, #8
 8004bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bf8:	b003      	add	sp, #12
 8004bfa:	4770      	bx	lr
 8004bfc:	20000110 	.word	0x20000110

08004c00 <__libc_init_array>:
 8004c00:	b570      	push	{r4, r5, r6, lr}
 8004c02:	4e0d      	ldr	r6, [pc, #52]	; (8004c38 <__libc_init_array+0x38>)
 8004c04:	4c0d      	ldr	r4, [pc, #52]	; (8004c3c <__libc_init_array+0x3c>)
 8004c06:	1ba4      	subs	r4, r4, r6
 8004c08:	10a4      	asrs	r4, r4, #2
 8004c0a:	2500      	movs	r5, #0
 8004c0c:	42a5      	cmp	r5, r4
 8004c0e:	d109      	bne.n	8004c24 <__libc_init_array+0x24>
 8004c10:	4e0b      	ldr	r6, [pc, #44]	; (8004c40 <__libc_init_array+0x40>)
 8004c12:	4c0c      	ldr	r4, [pc, #48]	; (8004c44 <__libc_init_array+0x44>)
 8004c14:	f004 fa22 	bl	800905c <_init>
 8004c18:	1ba4      	subs	r4, r4, r6
 8004c1a:	10a4      	asrs	r4, r4, #2
 8004c1c:	2500      	movs	r5, #0
 8004c1e:	42a5      	cmp	r5, r4
 8004c20:	d105      	bne.n	8004c2e <__libc_init_array+0x2e>
 8004c22:	bd70      	pop	{r4, r5, r6, pc}
 8004c24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c28:	4798      	blx	r3
 8004c2a:	3501      	adds	r5, #1
 8004c2c:	e7ee      	b.n	8004c0c <__libc_init_array+0xc>
 8004c2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c32:	4798      	blx	r3
 8004c34:	3501      	adds	r5, #1
 8004c36:	e7f2      	b.n	8004c1e <__libc_init_array+0x1e>
 8004c38:	08009ed8 	.word	0x08009ed8
 8004c3c:	08009ed8 	.word	0x08009ed8
 8004c40:	08009ed8 	.word	0x08009ed8
 8004c44:	08009edc 	.word	0x08009edc

08004c48 <memcpy>:
 8004c48:	b510      	push	{r4, lr}
 8004c4a:	1e43      	subs	r3, r0, #1
 8004c4c:	440a      	add	r2, r1
 8004c4e:	4291      	cmp	r1, r2
 8004c50:	d100      	bne.n	8004c54 <memcpy+0xc>
 8004c52:	bd10      	pop	{r4, pc}
 8004c54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c5c:	e7f7      	b.n	8004c4e <memcpy+0x6>

08004c5e <memset>:
 8004c5e:	4402      	add	r2, r0
 8004c60:	4603      	mov	r3, r0
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d100      	bne.n	8004c68 <memset+0xa>
 8004c66:	4770      	bx	lr
 8004c68:	f803 1b01 	strb.w	r1, [r3], #1
 8004c6c:	e7f9      	b.n	8004c62 <memset+0x4>
	...

08004c70 <sprintf>:
 8004c70:	b40e      	push	{r1, r2, r3}
 8004c72:	b500      	push	{lr}
 8004c74:	b09c      	sub	sp, #112	; 0x70
 8004c76:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004c7a:	ab1d      	add	r3, sp, #116	; 0x74
 8004c7c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004c80:	9002      	str	r0, [sp, #8]
 8004c82:	9006      	str	r0, [sp, #24]
 8004c84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c88:	480a      	ldr	r0, [pc, #40]	; (8004cb4 <sprintf+0x44>)
 8004c8a:	9104      	str	r1, [sp, #16]
 8004c8c:	9107      	str	r1, [sp, #28]
 8004c8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004c92:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c96:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004c9a:	6800      	ldr	r0, [r0, #0]
 8004c9c:	9301      	str	r3, [sp, #4]
 8004c9e:	a902      	add	r1, sp, #8
 8004ca0:	f000 f80a 	bl	8004cb8 <_svfprintf_r>
 8004ca4:	9b02      	ldr	r3, [sp, #8]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	b01c      	add	sp, #112	; 0x70
 8004cac:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cb0:	b003      	add	sp, #12
 8004cb2:	4770      	bx	lr
 8004cb4:	20000110 	.word	0x20000110

08004cb8 <_svfprintf_r>:
 8004cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cbc:	b0bd      	sub	sp, #244	; 0xf4
 8004cbe:	468a      	mov	sl, r1
 8004cc0:	4615      	mov	r5, r2
 8004cc2:	461f      	mov	r7, r3
 8004cc4:	4683      	mov	fp, r0
 8004cc6:	f003 f805 	bl	8007cd4 <_localeconv_r>
 8004cca:	6803      	ldr	r3, [r0, #0]
 8004ccc:	930d      	str	r3, [sp, #52]	; 0x34
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fb fad6 	bl	8000280 <strlen>
 8004cd4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004cd8:	9008      	str	r0, [sp, #32]
 8004cda:	061b      	lsls	r3, r3, #24
 8004cdc:	d518      	bpl.n	8004d10 <_svfprintf_r+0x58>
 8004cde:	f8da 3010 	ldr.w	r3, [sl, #16]
 8004ce2:	b9ab      	cbnz	r3, 8004d10 <_svfprintf_r+0x58>
 8004ce4:	2140      	movs	r1, #64	; 0x40
 8004ce6:	4658      	mov	r0, fp
 8004ce8:	f003 f87a 	bl	8007de0 <_malloc_r>
 8004cec:	f8ca 0000 	str.w	r0, [sl]
 8004cf0:	f8ca 0010 	str.w	r0, [sl, #16]
 8004cf4:	b948      	cbnz	r0, 8004d0a <_svfprintf_r+0x52>
 8004cf6:	230c      	movs	r3, #12
 8004cf8:	f8cb 3000 	str.w	r3, [fp]
 8004cfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d00:	9309      	str	r3, [sp, #36]	; 0x24
 8004d02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d04:	b03d      	add	sp, #244	; 0xf4
 8004d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d0a:	2340      	movs	r3, #64	; 0x40
 8004d0c:	f8ca 3014 	str.w	r3, [sl, #20]
 8004d10:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8004f78 <_svfprintf_r+0x2c0>
 8004d14:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004d18:	2300      	movs	r3, #0
 8004d1a:	ac2c      	add	r4, sp, #176	; 0xb0
 8004d1c:	941f      	str	r4, [sp, #124]	; 0x7c
 8004d1e:	9321      	str	r3, [sp, #132]	; 0x84
 8004d20:	9320      	str	r3, [sp, #128]	; 0x80
 8004d22:	9505      	str	r5, [sp, #20]
 8004d24:	9303      	str	r3, [sp, #12]
 8004d26:	9311      	str	r3, [sp, #68]	; 0x44
 8004d28:	9310      	str	r3, [sp, #64]	; 0x40
 8004d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d2c:	9d05      	ldr	r5, [sp, #20]
 8004d2e:	462b      	mov	r3, r5
 8004d30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d34:	b112      	cbz	r2, 8004d3c <_svfprintf_r+0x84>
 8004d36:	2a25      	cmp	r2, #37	; 0x25
 8004d38:	f040 8083 	bne.w	8004e42 <_svfprintf_r+0x18a>
 8004d3c:	9b05      	ldr	r3, [sp, #20]
 8004d3e:	1aee      	subs	r6, r5, r3
 8004d40:	d00d      	beq.n	8004d5e <_svfprintf_r+0xa6>
 8004d42:	e884 0048 	stmia.w	r4, {r3, r6}
 8004d46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d48:	4433      	add	r3, r6
 8004d4a:	9321      	str	r3, [sp, #132]	; 0x84
 8004d4c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004d4e:	3301      	adds	r3, #1
 8004d50:	2b07      	cmp	r3, #7
 8004d52:	9320      	str	r3, [sp, #128]	; 0x80
 8004d54:	dc77      	bgt.n	8004e46 <_svfprintf_r+0x18e>
 8004d56:	3408      	adds	r4, #8
 8004d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d5a:	4433      	add	r3, r6
 8004d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d5e:	782b      	ldrb	r3, [r5, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 8729 	beq.w	8005bb8 <_svfprintf_r+0xf00>
 8004d66:	2300      	movs	r3, #0
 8004d68:	1c69      	adds	r1, r5, #1
 8004d6a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004d6e:	461a      	mov	r2, r3
 8004d70:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004d74:	930a      	str	r3, [sp, #40]	; 0x28
 8004d76:	461d      	mov	r5, r3
 8004d78:	200a      	movs	r0, #10
 8004d7a:	1c4e      	adds	r6, r1, #1
 8004d7c:	7809      	ldrb	r1, [r1, #0]
 8004d7e:	9605      	str	r6, [sp, #20]
 8004d80:	9102      	str	r1, [sp, #8]
 8004d82:	9902      	ldr	r1, [sp, #8]
 8004d84:	3920      	subs	r1, #32
 8004d86:	2958      	cmp	r1, #88	; 0x58
 8004d88:	f200 8418 	bhi.w	80055bc <_svfprintf_r+0x904>
 8004d8c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004d90:	041600a6 	.word	0x041600a6
 8004d94:	00ab0416 	.word	0x00ab0416
 8004d98:	04160416 	.word	0x04160416
 8004d9c:	04160416 	.word	0x04160416
 8004da0:	04160416 	.word	0x04160416
 8004da4:	006500ae 	.word	0x006500ae
 8004da8:	00b70416 	.word	0x00b70416
 8004dac:	041600ba 	.word	0x041600ba
 8004db0:	00da00d7 	.word	0x00da00d7
 8004db4:	00da00da 	.word	0x00da00da
 8004db8:	00da00da 	.word	0x00da00da
 8004dbc:	00da00da 	.word	0x00da00da
 8004dc0:	00da00da 	.word	0x00da00da
 8004dc4:	04160416 	.word	0x04160416
 8004dc8:	04160416 	.word	0x04160416
 8004dcc:	04160416 	.word	0x04160416
 8004dd0:	04160416 	.word	0x04160416
 8004dd4:	04160416 	.word	0x04160416
 8004dd8:	012b0115 	.word	0x012b0115
 8004ddc:	012b0416 	.word	0x012b0416
 8004de0:	04160416 	.word	0x04160416
 8004de4:	04160416 	.word	0x04160416
 8004de8:	041600ed 	.word	0x041600ed
 8004dec:	03400416 	.word	0x03400416
 8004df0:	04160416 	.word	0x04160416
 8004df4:	04160416 	.word	0x04160416
 8004df8:	03a80416 	.word	0x03a80416
 8004dfc:	04160416 	.word	0x04160416
 8004e00:	04160086 	.word	0x04160086
 8004e04:	04160416 	.word	0x04160416
 8004e08:	04160416 	.word	0x04160416
 8004e0c:	04160416 	.word	0x04160416
 8004e10:	04160416 	.word	0x04160416
 8004e14:	01070416 	.word	0x01070416
 8004e18:	012b006b 	.word	0x012b006b
 8004e1c:	012b012b 	.word	0x012b012b
 8004e20:	006b00f0 	.word	0x006b00f0
 8004e24:	04160416 	.word	0x04160416
 8004e28:	041600fa 	.word	0x041600fa
 8004e2c:	03420322 	.word	0x03420322
 8004e30:	01010376 	.word	0x01010376
 8004e34:	03870416 	.word	0x03870416
 8004e38:	03aa0416 	.word	0x03aa0416
 8004e3c:	04160416 	.word	0x04160416
 8004e40:	03c2      	.short	0x03c2
 8004e42:	461d      	mov	r5, r3
 8004e44:	e773      	b.n	8004d2e <_svfprintf_r+0x76>
 8004e46:	aa1f      	add	r2, sp, #124	; 0x7c
 8004e48:	4651      	mov	r1, sl
 8004e4a:	4658      	mov	r0, fp
 8004e4c:	f003 fef5 	bl	8008c3a <__ssprint_r>
 8004e50:	2800      	cmp	r0, #0
 8004e52:	f040 8692 	bne.w	8005b7a <_svfprintf_r+0xec2>
 8004e56:	ac2c      	add	r4, sp, #176	; 0xb0
 8004e58:	e77e      	b.n	8004d58 <_svfprintf_r+0xa0>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	222b      	movs	r2, #43	; 0x2b
 8004e5e:	9905      	ldr	r1, [sp, #20]
 8004e60:	e78b      	b.n	8004d7a <_svfprintf_r+0xc2>
 8004e62:	460f      	mov	r7, r1
 8004e64:	e7fb      	b.n	8004e5e <_svfprintf_r+0x1a6>
 8004e66:	b10b      	cbz	r3, 8004e6c <_svfprintf_r+0x1b4>
 8004e68:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004e6c:	06ae      	lsls	r6, r5, #26
 8004e6e:	f140 80aa 	bpl.w	8004fc6 <_svfprintf_r+0x30e>
 8004e72:	3707      	adds	r7, #7
 8004e74:	f027 0707 	bic.w	r7, r7, #7
 8004e78:	f107 0308 	add.w	r3, r7, #8
 8004e7c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004e80:	9304      	str	r3, [sp, #16]
 8004e82:	2e00      	cmp	r6, #0
 8004e84:	f177 0300 	sbcs.w	r3, r7, #0
 8004e88:	da06      	bge.n	8004e98 <_svfprintf_r+0x1e0>
 8004e8a:	4276      	negs	r6, r6
 8004e8c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8004e90:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8004e94:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e2ca      	b.n	8005432 <_svfprintf_r+0x77a>
 8004e9c:	b10b      	cbz	r3, 8004ea2 <_svfprintf_r+0x1ea>
 8004e9e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004ea2:	4b37      	ldr	r3, [pc, #220]	; (8004f80 <_svfprintf_r+0x2c8>)
 8004ea4:	9311      	str	r3, [sp, #68]	; 0x44
 8004ea6:	06ab      	lsls	r3, r5, #26
 8004ea8:	f140 8339 	bpl.w	800551e <_svfprintf_r+0x866>
 8004eac:	3707      	adds	r7, #7
 8004eae:	f027 0707 	bic.w	r7, r7, #7
 8004eb2:	f107 0308 	add.w	r3, r7, #8
 8004eb6:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004eba:	9304      	str	r3, [sp, #16]
 8004ebc:	07e8      	lsls	r0, r5, #31
 8004ebe:	d50b      	bpl.n	8004ed8 <_svfprintf_r+0x220>
 8004ec0:	ea56 0307 	orrs.w	r3, r6, r7
 8004ec4:	d008      	beq.n	8004ed8 <_svfprintf_r+0x220>
 8004ec6:	2330      	movs	r3, #48	; 0x30
 8004ec8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8004ecc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004ed0:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8004ed4:	f045 0502 	orr.w	r5, r5, #2
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e2a7      	b.n	800542c <_svfprintf_r+0x774>
 8004edc:	2a00      	cmp	r2, #0
 8004ede:	d1be      	bne.n	8004e5e <_svfprintf_r+0x1a6>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	e7bb      	b.n	8004e5e <_svfprintf_r+0x1a6>
 8004ee6:	f045 0501 	orr.w	r5, r5, #1
 8004eea:	e7b8      	b.n	8004e5e <_svfprintf_r+0x1a6>
 8004eec:	683e      	ldr	r6, [r7, #0]
 8004eee:	960a      	str	r6, [sp, #40]	; 0x28
 8004ef0:	2e00      	cmp	r6, #0
 8004ef2:	f107 0104 	add.w	r1, r7, #4
 8004ef6:	dab4      	bge.n	8004e62 <_svfprintf_r+0x1aa>
 8004ef8:	4276      	negs	r6, r6
 8004efa:	960a      	str	r6, [sp, #40]	; 0x28
 8004efc:	460f      	mov	r7, r1
 8004efe:	f045 0504 	orr.w	r5, r5, #4
 8004f02:	e7ac      	b.n	8004e5e <_svfprintf_r+0x1a6>
 8004f04:	9905      	ldr	r1, [sp, #20]
 8004f06:	1c4e      	adds	r6, r1, #1
 8004f08:	7809      	ldrb	r1, [r1, #0]
 8004f0a:	9102      	str	r1, [sp, #8]
 8004f0c:	292a      	cmp	r1, #42	; 0x2a
 8004f0e:	d010      	beq.n	8004f32 <_svfprintf_r+0x27a>
 8004f10:	f04f 0900 	mov.w	r9, #0
 8004f14:	9605      	str	r6, [sp, #20]
 8004f16:	9902      	ldr	r1, [sp, #8]
 8004f18:	3930      	subs	r1, #48	; 0x30
 8004f1a:	2909      	cmp	r1, #9
 8004f1c:	f63f af31 	bhi.w	8004d82 <_svfprintf_r+0xca>
 8004f20:	fb00 1909 	mla	r9, r0, r9, r1
 8004f24:	9905      	ldr	r1, [sp, #20]
 8004f26:	460e      	mov	r6, r1
 8004f28:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004f2c:	9102      	str	r1, [sp, #8]
 8004f2e:	9605      	str	r6, [sp, #20]
 8004f30:	e7f1      	b.n	8004f16 <_svfprintf_r+0x25e>
 8004f32:	6839      	ldr	r1, [r7, #0]
 8004f34:	9605      	str	r6, [sp, #20]
 8004f36:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 8004f3a:	3704      	adds	r7, #4
 8004f3c:	e78f      	b.n	8004e5e <_svfprintf_r+0x1a6>
 8004f3e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8004f42:	e78c      	b.n	8004e5e <_svfprintf_r+0x1a6>
 8004f44:	2100      	movs	r1, #0
 8004f46:	910a      	str	r1, [sp, #40]	; 0x28
 8004f48:	9902      	ldr	r1, [sp, #8]
 8004f4a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004f4c:	3930      	subs	r1, #48	; 0x30
 8004f4e:	fb00 1106 	mla	r1, r0, r6, r1
 8004f52:	910a      	str	r1, [sp, #40]	; 0x28
 8004f54:	9905      	ldr	r1, [sp, #20]
 8004f56:	460e      	mov	r6, r1
 8004f58:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004f5c:	9102      	str	r1, [sp, #8]
 8004f5e:	9902      	ldr	r1, [sp, #8]
 8004f60:	9605      	str	r6, [sp, #20]
 8004f62:	3930      	subs	r1, #48	; 0x30
 8004f64:	2909      	cmp	r1, #9
 8004f66:	d9ef      	bls.n	8004f48 <_svfprintf_r+0x290>
 8004f68:	e70b      	b.n	8004d82 <_svfprintf_r+0xca>
 8004f6a:	f045 0508 	orr.w	r5, r5, #8
 8004f6e:	e776      	b.n	8004e5e <_svfprintf_r+0x1a6>
 8004f70:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8004f74:	e773      	b.n	8004e5e <_svfprintf_r+0x1a6>
 8004f76:	bf00      	nop
	...
 8004f80:	08009bec 	.word	0x08009bec
 8004f84:	9905      	ldr	r1, [sp, #20]
 8004f86:	7809      	ldrb	r1, [r1, #0]
 8004f88:	296c      	cmp	r1, #108	; 0x6c
 8004f8a:	d105      	bne.n	8004f98 <_svfprintf_r+0x2e0>
 8004f8c:	9905      	ldr	r1, [sp, #20]
 8004f8e:	3101      	adds	r1, #1
 8004f90:	9105      	str	r1, [sp, #20]
 8004f92:	f045 0520 	orr.w	r5, r5, #32
 8004f96:	e762      	b.n	8004e5e <_svfprintf_r+0x1a6>
 8004f98:	f045 0510 	orr.w	r5, r5, #16
 8004f9c:	e75f      	b.n	8004e5e <_svfprintf_r+0x1a6>
 8004f9e:	1d3b      	adds	r3, r7, #4
 8004fa0:	9304      	str	r3, [sp, #16]
 8004fa2:	2600      	movs	r6, #0
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8004faa:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8004fae:	f04f 0901 	mov.w	r9, #1
 8004fb2:	4637      	mov	r7, r6
 8004fb4:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8004fb8:	e11b      	b.n	80051f2 <_svfprintf_r+0x53a>
 8004fba:	b10b      	cbz	r3, 8004fc0 <_svfprintf_r+0x308>
 8004fbc:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004fc0:	f045 0510 	orr.w	r5, r5, #16
 8004fc4:	e752      	b.n	8004e6c <_svfprintf_r+0x1b4>
 8004fc6:	f015 0f10 	tst.w	r5, #16
 8004fca:	f107 0304 	add.w	r3, r7, #4
 8004fce:	d003      	beq.n	8004fd8 <_svfprintf_r+0x320>
 8004fd0:	683e      	ldr	r6, [r7, #0]
 8004fd2:	9304      	str	r3, [sp, #16]
 8004fd4:	17f7      	asrs	r7, r6, #31
 8004fd6:	e754      	b.n	8004e82 <_svfprintf_r+0x1ca>
 8004fd8:	683e      	ldr	r6, [r7, #0]
 8004fda:	9304      	str	r3, [sp, #16]
 8004fdc:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004fe0:	bf18      	it	ne
 8004fe2:	b236      	sxthne	r6, r6
 8004fe4:	e7f6      	b.n	8004fd4 <_svfprintf_r+0x31c>
 8004fe6:	b10b      	cbz	r3, 8004fec <_svfprintf_r+0x334>
 8004fe8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004fec:	3707      	adds	r7, #7
 8004fee:	f027 0707 	bic.w	r7, r7, #7
 8004ff2:	f107 0308 	add.w	r3, r7, #8
 8004ff6:	9304      	str	r3, [sp, #16]
 8004ff8:	ed97 7b00 	vldr	d7, [r7]
 8004ffc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005000:	9b06      	ldr	r3, [sp, #24]
 8005002:	9312      	str	r3, [sp, #72]	; 0x48
 8005004:	9b07      	ldr	r3, [sp, #28]
 8005006:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800500a:	9313      	str	r3, [sp, #76]	; 0x4c
 800500c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005010:	4b4a      	ldr	r3, [pc, #296]	; (800513c <_svfprintf_r+0x484>)
 8005012:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005016:	f7fb fd8d 	bl	8000b34 <__aeabi_dcmpun>
 800501a:	2800      	cmp	r0, #0
 800501c:	f040 85d5 	bne.w	8005bca <_svfprintf_r+0xf12>
 8005020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005024:	4b45      	ldr	r3, [pc, #276]	; (800513c <_svfprintf_r+0x484>)
 8005026:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800502a:	f7fb fd65 	bl	8000af8 <__aeabi_dcmple>
 800502e:	2800      	cmp	r0, #0
 8005030:	f040 85cb 	bne.w	8005bca <_svfprintf_r+0xf12>
 8005034:	2200      	movs	r2, #0
 8005036:	2300      	movs	r3, #0
 8005038:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800503c:	f7fb fd52 	bl	8000ae4 <__aeabi_dcmplt>
 8005040:	b110      	cbz	r0, 8005048 <_svfprintf_r+0x390>
 8005042:	232d      	movs	r3, #45	; 0x2d
 8005044:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005048:	4b3d      	ldr	r3, [pc, #244]	; (8005140 <_svfprintf_r+0x488>)
 800504a:	4a3e      	ldr	r2, [pc, #248]	; (8005144 <_svfprintf_r+0x48c>)
 800504c:	9902      	ldr	r1, [sp, #8]
 800504e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8005052:	2947      	cmp	r1, #71	; 0x47
 8005054:	bfcc      	ite	gt
 8005056:	4690      	movgt	r8, r2
 8005058:	4698      	movle	r8, r3
 800505a:	f04f 0903 	mov.w	r9, #3
 800505e:	2600      	movs	r6, #0
 8005060:	4637      	mov	r7, r6
 8005062:	e0c6      	b.n	80051f2 <_svfprintf_r+0x53a>
 8005064:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8005068:	d022      	beq.n	80050b0 <_svfprintf_r+0x3f8>
 800506a:	9b02      	ldr	r3, [sp, #8]
 800506c:	f023 0320 	bic.w	r3, r3, #32
 8005070:	2b47      	cmp	r3, #71	; 0x47
 8005072:	d104      	bne.n	800507e <_svfprintf_r+0x3c6>
 8005074:	f1b9 0f00 	cmp.w	r9, #0
 8005078:	bf08      	it	eq
 800507a:	f04f 0901 	moveq.w	r9, #1
 800507e:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8005082:	930c      	str	r3, [sp, #48]	; 0x30
 8005084:	9b07      	ldr	r3, [sp, #28]
 8005086:	2b00      	cmp	r3, #0
 8005088:	da15      	bge.n	80050b6 <_svfprintf_r+0x3fe>
 800508a:	9b06      	ldr	r3, [sp, #24]
 800508c:	930e      	str	r3, [sp, #56]	; 0x38
 800508e:	9b07      	ldr	r3, [sp, #28]
 8005090:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005094:	930f      	str	r3, [sp, #60]	; 0x3c
 8005096:	232d      	movs	r3, #45	; 0x2d
 8005098:	930b      	str	r3, [sp, #44]	; 0x2c
 800509a:	9b02      	ldr	r3, [sp, #8]
 800509c:	f023 0720 	bic.w	r7, r3, #32
 80050a0:	2f46      	cmp	r7, #70	; 0x46
 80050a2:	d00e      	beq.n	80050c2 <_svfprintf_r+0x40a>
 80050a4:	2f45      	cmp	r7, #69	; 0x45
 80050a6:	d146      	bne.n	8005136 <_svfprintf_r+0x47e>
 80050a8:	f109 0601 	add.w	r6, r9, #1
 80050ac:	2102      	movs	r1, #2
 80050ae:	e00a      	b.n	80050c6 <_svfprintf_r+0x40e>
 80050b0:	f04f 0906 	mov.w	r9, #6
 80050b4:	e7e3      	b.n	800507e <_svfprintf_r+0x3c6>
 80050b6:	ed9d 7b06 	vldr	d7, [sp, #24]
 80050ba:	2300      	movs	r3, #0
 80050bc:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80050c0:	e7ea      	b.n	8005098 <_svfprintf_r+0x3e0>
 80050c2:	464e      	mov	r6, r9
 80050c4:	2103      	movs	r1, #3
 80050c6:	ab1d      	add	r3, sp, #116	; 0x74
 80050c8:	9301      	str	r3, [sp, #4]
 80050ca:	ab1a      	add	r3, sp, #104	; 0x68
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	4632      	mov	r2, r6
 80050d0:	ab19      	add	r3, sp, #100	; 0x64
 80050d2:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80050d6:	4658      	mov	r0, fp
 80050d8:	f001 fb92 	bl	8006800 <_dtoa_r>
 80050dc:	2f47      	cmp	r7, #71	; 0x47
 80050de:	4680      	mov	r8, r0
 80050e0:	d102      	bne.n	80050e8 <_svfprintf_r+0x430>
 80050e2:	07e8      	lsls	r0, r5, #31
 80050e4:	f140 857e 	bpl.w	8005be4 <_svfprintf_r+0xf2c>
 80050e8:	eb08 0306 	add.w	r3, r8, r6
 80050ec:	2f46      	cmp	r7, #70	; 0x46
 80050ee:	9303      	str	r3, [sp, #12]
 80050f0:	d111      	bne.n	8005116 <_svfprintf_r+0x45e>
 80050f2:	f898 3000 	ldrb.w	r3, [r8]
 80050f6:	2b30      	cmp	r3, #48	; 0x30
 80050f8:	d109      	bne.n	800510e <_svfprintf_r+0x456>
 80050fa:	2200      	movs	r2, #0
 80050fc:	2300      	movs	r3, #0
 80050fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005102:	f7fb fce5 	bl	8000ad0 <__aeabi_dcmpeq>
 8005106:	b910      	cbnz	r0, 800510e <_svfprintf_r+0x456>
 8005108:	f1c6 0601 	rsb	r6, r6, #1
 800510c:	9619      	str	r6, [sp, #100]	; 0x64
 800510e:	9a03      	ldr	r2, [sp, #12]
 8005110:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005112:	441a      	add	r2, r3
 8005114:	9203      	str	r2, [sp, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	2300      	movs	r3, #0
 800511a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800511e:	f7fb fcd7 	bl	8000ad0 <__aeabi_dcmpeq>
 8005122:	b988      	cbnz	r0, 8005148 <_svfprintf_r+0x490>
 8005124:	2230      	movs	r2, #48	; 0x30
 8005126:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005128:	9903      	ldr	r1, [sp, #12]
 800512a:	4299      	cmp	r1, r3
 800512c:	d90e      	bls.n	800514c <_svfprintf_r+0x494>
 800512e:	1c59      	adds	r1, r3, #1
 8005130:	911d      	str	r1, [sp, #116]	; 0x74
 8005132:	701a      	strb	r2, [r3, #0]
 8005134:	e7f7      	b.n	8005126 <_svfprintf_r+0x46e>
 8005136:	464e      	mov	r6, r9
 8005138:	e7b8      	b.n	80050ac <_svfprintf_r+0x3f4>
 800513a:	bf00      	nop
 800513c:	7fefffff 	.word	0x7fefffff
 8005140:	08009bdc 	.word	0x08009bdc
 8005144:	08009be0 	.word	0x08009be0
 8005148:	9b03      	ldr	r3, [sp, #12]
 800514a:	931d      	str	r3, [sp, #116]	; 0x74
 800514c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800514e:	2f47      	cmp	r7, #71	; 0x47
 8005150:	eba3 0308 	sub.w	r3, r3, r8
 8005154:	9303      	str	r3, [sp, #12]
 8005156:	f040 80fa 	bne.w	800534e <_svfprintf_r+0x696>
 800515a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800515c:	1cd9      	adds	r1, r3, #3
 800515e:	db02      	blt.n	8005166 <_svfprintf_r+0x4ae>
 8005160:	4599      	cmp	r9, r3
 8005162:	f280 8120 	bge.w	80053a6 <_svfprintf_r+0x6ee>
 8005166:	9b02      	ldr	r3, [sp, #8]
 8005168:	3b02      	subs	r3, #2
 800516a:	9302      	str	r3, [sp, #8]
 800516c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800516e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8005172:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8005176:	1e53      	subs	r3, r2, #1
 8005178:	2b00      	cmp	r3, #0
 800517a:	9319      	str	r3, [sp, #100]	; 0x64
 800517c:	bfb6      	itet	lt
 800517e:	f1c2 0301 	rsblt	r3, r2, #1
 8005182:	222b      	movge	r2, #43	; 0x2b
 8005184:	222d      	movlt	r2, #45	; 0x2d
 8005186:	2b09      	cmp	r3, #9
 8005188:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800518c:	f340 80fb 	ble.w	8005386 <_svfprintf_r+0x6ce>
 8005190:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8005194:	260a      	movs	r6, #10
 8005196:	fb93 f0f6 	sdiv	r0, r3, r6
 800519a:	fb06 3310 	mls	r3, r6, r0, r3
 800519e:	3330      	adds	r3, #48	; 0x30
 80051a0:	2809      	cmp	r0, #9
 80051a2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80051a6:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 80051aa:	4603      	mov	r3, r0
 80051ac:	f300 80e4 	bgt.w	8005378 <_svfprintf_r+0x6c0>
 80051b0:	3330      	adds	r3, #48	; 0x30
 80051b2:	f801 3c01 	strb.w	r3, [r1, #-1]
 80051b6:	3a02      	subs	r2, #2
 80051b8:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 80051bc:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 80051c0:	4282      	cmp	r2, r0
 80051c2:	4619      	mov	r1, r3
 80051c4:	f0c0 80da 	bcc.w	800537c <_svfprintf_r+0x6c4>
 80051c8:	9a03      	ldr	r2, [sp, #12]
 80051ca:	ab1b      	add	r3, sp, #108	; 0x6c
 80051cc:	1acb      	subs	r3, r1, r3
 80051ce:	2a01      	cmp	r2, #1
 80051d0:	9310      	str	r3, [sp, #64]	; 0x40
 80051d2:	eb03 0902 	add.w	r9, r3, r2
 80051d6:	dc02      	bgt.n	80051de <_svfprintf_r+0x526>
 80051d8:	f015 0701 	ands.w	r7, r5, #1
 80051dc:	d002      	beq.n	80051e4 <_svfprintf_r+0x52c>
 80051de:	9b08      	ldr	r3, [sp, #32]
 80051e0:	2700      	movs	r7, #0
 80051e2:	4499      	add	r9, r3
 80051e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051e6:	b113      	cbz	r3, 80051ee <_svfprintf_r+0x536>
 80051e8:	232d      	movs	r3, #45	; 0x2d
 80051ea:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80051ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051f0:	2600      	movs	r6, #0
 80051f2:	454e      	cmp	r6, r9
 80051f4:	4633      	mov	r3, r6
 80051f6:	bfb8      	it	lt
 80051f8:	464b      	movlt	r3, r9
 80051fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80051fc:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8005200:	b113      	cbz	r3, 8005208 <_svfprintf_r+0x550>
 8005202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005204:	3301      	adds	r3, #1
 8005206:	930b      	str	r3, [sp, #44]	; 0x2c
 8005208:	f015 0302 	ands.w	r3, r5, #2
 800520c:	9314      	str	r3, [sp, #80]	; 0x50
 800520e:	bf1e      	ittt	ne
 8005210:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8005212:	3302      	addne	r3, #2
 8005214:	930b      	strne	r3, [sp, #44]	; 0x2c
 8005216:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800521a:	9315      	str	r3, [sp, #84]	; 0x54
 800521c:	d118      	bne.n	8005250 <_svfprintf_r+0x598>
 800521e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005220:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005222:	1a9b      	subs	r3, r3, r2
 8005224:	2b00      	cmp	r3, #0
 8005226:	930c      	str	r3, [sp, #48]	; 0x30
 8005228:	dd12      	ble.n	8005250 <_svfprintf_r+0x598>
 800522a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800522c:	2b10      	cmp	r3, #16
 800522e:	4ba9      	ldr	r3, [pc, #676]	; (80054d4 <_svfprintf_r+0x81c>)
 8005230:	6023      	str	r3, [r4, #0]
 8005232:	f300 81d5 	bgt.w	80055e0 <_svfprintf_r+0x928>
 8005236:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005238:	6063      	str	r3, [r4, #4]
 800523a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800523c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800523e:	4413      	add	r3, r2
 8005240:	9321      	str	r3, [sp, #132]	; 0x84
 8005242:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005244:	3301      	adds	r3, #1
 8005246:	2b07      	cmp	r3, #7
 8005248:	9320      	str	r3, [sp, #128]	; 0x80
 800524a:	f300 81e2 	bgt.w	8005612 <_svfprintf_r+0x95a>
 800524e:	3408      	adds	r4, #8
 8005250:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8005254:	b173      	cbz	r3, 8005274 <_svfprintf_r+0x5bc>
 8005256:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 800525a:	6023      	str	r3, [r4, #0]
 800525c:	2301      	movs	r3, #1
 800525e:	6063      	str	r3, [r4, #4]
 8005260:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005262:	3301      	adds	r3, #1
 8005264:	9321      	str	r3, [sp, #132]	; 0x84
 8005266:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005268:	3301      	adds	r3, #1
 800526a:	2b07      	cmp	r3, #7
 800526c:	9320      	str	r3, [sp, #128]	; 0x80
 800526e:	f300 81da 	bgt.w	8005626 <_svfprintf_r+0x96e>
 8005272:	3408      	adds	r4, #8
 8005274:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005276:	b16b      	cbz	r3, 8005294 <_svfprintf_r+0x5dc>
 8005278:	ab18      	add	r3, sp, #96	; 0x60
 800527a:	6023      	str	r3, [r4, #0]
 800527c:	2302      	movs	r3, #2
 800527e:	6063      	str	r3, [r4, #4]
 8005280:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005282:	3302      	adds	r3, #2
 8005284:	9321      	str	r3, [sp, #132]	; 0x84
 8005286:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005288:	3301      	adds	r3, #1
 800528a:	2b07      	cmp	r3, #7
 800528c:	9320      	str	r3, [sp, #128]	; 0x80
 800528e:	f300 81d4 	bgt.w	800563a <_svfprintf_r+0x982>
 8005292:	3408      	adds	r4, #8
 8005294:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005296:	2b80      	cmp	r3, #128	; 0x80
 8005298:	d114      	bne.n	80052c4 <_svfprintf_r+0x60c>
 800529a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800529c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800529e:	1a9b      	subs	r3, r3, r2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	dd0f      	ble.n	80052c4 <_svfprintf_r+0x60c>
 80052a4:	4a8c      	ldr	r2, [pc, #560]	; (80054d8 <_svfprintf_r+0x820>)
 80052a6:	6022      	str	r2, [r4, #0]
 80052a8:	2b10      	cmp	r3, #16
 80052aa:	f300 81d0 	bgt.w	800564e <_svfprintf_r+0x996>
 80052ae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80052b0:	6063      	str	r3, [r4, #4]
 80052b2:	4413      	add	r3, r2
 80052b4:	9321      	str	r3, [sp, #132]	; 0x84
 80052b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80052b8:	3301      	adds	r3, #1
 80052ba:	2b07      	cmp	r3, #7
 80052bc:	9320      	str	r3, [sp, #128]	; 0x80
 80052be:	f300 81df 	bgt.w	8005680 <_svfprintf_r+0x9c8>
 80052c2:	3408      	adds	r4, #8
 80052c4:	eba6 0609 	sub.w	r6, r6, r9
 80052c8:	2e00      	cmp	r6, #0
 80052ca:	dd0f      	ble.n	80052ec <_svfprintf_r+0x634>
 80052cc:	4b82      	ldr	r3, [pc, #520]	; (80054d8 <_svfprintf_r+0x820>)
 80052ce:	6023      	str	r3, [r4, #0]
 80052d0:	2e10      	cmp	r6, #16
 80052d2:	f300 81df 	bgt.w	8005694 <_svfprintf_r+0x9dc>
 80052d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80052d8:	9821      	ldr	r0, [sp, #132]	; 0x84
 80052da:	6066      	str	r6, [r4, #4]
 80052dc:	3301      	adds	r3, #1
 80052de:	4406      	add	r6, r0
 80052e0:	2b07      	cmp	r3, #7
 80052e2:	9621      	str	r6, [sp, #132]	; 0x84
 80052e4:	9320      	str	r3, [sp, #128]	; 0x80
 80052e6:	f300 81ec 	bgt.w	80056c2 <_svfprintf_r+0xa0a>
 80052ea:	3408      	adds	r4, #8
 80052ec:	05eb      	lsls	r3, r5, #23
 80052ee:	f100 81f2 	bmi.w	80056d6 <_svfprintf_r+0xa1e>
 80052f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052f4:	e884 0300 	stmia.w	r4, {r8, r9}
 80052f8:	444b      	add	r3, r9
 80052fa:	9321      	str	r3, [sp, #132]	; 0x84
 80052fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80052fe:	3301      	adds	r3, #1
 8005300:	2b07      	cmp	r3, #7
 8005302:	9320      	str	r3, [sp, #128]	; 0x80
 8005304:	f340 8419 	ble.w	8005b3a <_svfprintf_r+0xe82>
 8005308:	aa1f      	add	r2, sp, #124	; 0x7c
 800530a:	4651      	mov	r1, sl
 800530c:	4658      	mov	r0, fp
 800530e:	f003 fc94 	bl	8008c3a <__ssprint_r>
 8005312:	2800      	cmp	r0, #0
 8005314:	f040 8431 	bne.w	8005b7a <_svfprintf_r+0xec2>
 8005318:	ac2c      	add	r4, sp, #176	; 0xb0
 800531a:	076b      	lsls	r3, r5, #29
 800531c:	f100 8410 	bmi.w	8005b40 <_svfprintf_r+0xe88>
 8005320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005322:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005324:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005326:	428a      	cmp	r2, r1
 8005328:	bfac      	ite	ge
 800532a:	189b      	addge	r3, r3, r2
 800532c:	185b      	addlt	r3, r3, r1
 800532e:	9309      	str	r3, [sp, #36]	; 0x24
 8005330:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005332:	b13b      	cbz	r3, 8005344 <_svfprintf_r+0x68c>
 8005334:	aa1f      	add	r2, sp, #124	; 0x7c
 8005336:	4651      	mov	r1, sl
 8005338:	4658      	mov	r0, fp
 800533a:	f003 fc7e 	bl	8008c3a <__ssprint_r>
 800533e:	2800      	cmp	r0, #0
 8005340:	f040 841b 	bne.w	8005b7a <_svfprintf_r+0xec2>
 8005344:	2300      	movs	r3, #0
 8005346:	9320      	str	r3, [sp, #128]	; 0x80
 8005348:	9f04      	ldr	r7, [sp, #16]
 800534a:	ac2c      	add	r4, sp, #176	; 0xb0
 800534c:	e4ee      	b.n	8004d2c <_svfprintf_r+0x74>
 800534e:	9b02      	ldr	r3, [sp, #8]
 8005350:	2b65      	cmp	r3, #101	; 0x65
 8005352:	f77f af0b 	ble.w	800516c <_svfprintf_r+0x4b4>
 8005356:	9b02      	ldr	r3, [sp, #8]
 8005358:	2b66      	cmp	r3, #102	; 0x66
 800535a:	d124      	bne.n	80053a6 <_svfprintf_r+0x6ee>
 800535c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800535e:	2b00      	cmp	r3, #0
 8005360:	dd19      	ble.n	8005396 <_svfprintf_r+0x6de>
 8005362:	f1b9 0f00 	cmp.w	r9, #0
 8005366:	d101      	bne.n	800536c <_svfprintf_r+0x6b4>
 8005368:	07ea      	lsls	r2, r5, #31
 800536a:	d502      	bpl.n	8005372 <_svfprintf_r+0x6ba>
 800536c:	9a08      	ldr	r2, [sp, #32]
 800536e:	4413      	add	r3, r2
 8005370:	444b      	add	r3, r9
 8005372:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8005374:	4699      	mov	r9, r3
 8005376:	e735      	b.n	80051e4 <_svfprintf_r+0x52c>
 8005378:	460a      	mov	r2, r1
 800537a:	e70c      	b.n	8005196 <_svfprintf_r+0x4de>
 800537c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005380:	f803 1b01 	strb.w	r1, [r3], #1
 8005384:	e71c      	b.n	80051c0 <_svfprintf_r+0x508>
 8005386:	2230      	movs	r2, #48	; 0x30
 8005388:	4413      	add	r3, r2
 800538a:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800538e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8005392:	a91c      	add	r1, sp, #112	; 0x70
 8005394:	e718      	b.n	80051c8 <_svfprintf_r+0x510>
 8005396:	f1b9 0f00 	cmp.w	r9, #0
 800539a:	d101      	bne.n	80053a0 <_svfprintf_r+0x6e8>
 800539c:	07eb      	lsls	r3, r5, #31
 800539e:	d515      	bpl.n	80053cc <_svfprintf_r+0x714>
 80053a0:	9b08      	ldr	r3, [sp, #32]
 80053a2:	3301      	adds	r3, #1
 80053a4:	e7e4      	b.n	8005370 <_svfprintf_r+0x6b8>
 80053a6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80053a8:	9b03      	ldr	r3, [sp, #12]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	db06      	blt.n	80053bc <_svfprintf_r+0x704>
 80053ae:	07ef      	lsls	r7, r5, #31
 80053b0:	d50e      	bpl.n	80053d0 <_svfprintf_r+0x718>
 80053b2:	9b08      	ldr	r3, [sp, #32]
 80053b4:	4413      	add	r3, r2
 80053b6:	2267      	movs	r2, #103	; 0x67
 80053b8:	9202      	str	r2, [sp, #8]
 80053ba:	e7da      	b.n	8005372 <_svfprintf_r+0x6ba>
 80053bc:	9b03      	ldr	r3, [sp, #12]
 80053be:	9908      	ldr	r1, [sp, #32]
 80053c0:	2a00      	cmp	r2, #0
 80053c2:	440b      	add	r3, r1
 80053c4:	dcf7      	bgt.n	80053b6 <_svfprintf_r+0x6fe>
 80053c6:	f1c2 0201 	rsb	r2, r2, #1
 80053ca:	e7f3      	b.n	80053b4 <_svfprintf_r+0x6fc>
 80053cc:	2301      	movs	r3, #1
 80053ce:	e7d0      	b.n	8005372 <_svfprintf_r+0x6ba>
 80053d0:	4613      	mov	r3, r2
 80053d2:	e7f0      	b.n	80053b6 <_svfprintf_r+0x6fe>
 80053d4:	b10b      	cbz	r3, 80053da <_svfprintf_r+0x722>
 80053d6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80053da:	f015 0f20 	tst.w	r5, #32
 80053de:	f107 0304 	add.w	r3, r7, #4
 80053e2:	d008      	beq.n	80053f6 <_svfprintf_r+0x73e>
 80053e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	17ce      	asrs	r6, r1, #31
 80053ea:	4608      	mov	r0, r1
 80053ec:	4631      	mov	r1, r6
 80053ee:	e9c2 0100 	strd	r0, r1, [r2]
 80053f2:	461f      	mov	r7, r3
 80053f4:	e49a      	b.n	8004d2c <_svfprintf_r+0x74>
 80053f6:	06ee      	lsls	r6, r5, #27
 80053f8:	d503      	bpl.n	8005402 <_svfprintf_r+0x74a>
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053fe:	6011      	str	r1, [r2, #0]
 8005400:	e7f7      	b.n	80053f2 <_svfprintf_r+0x73a>
 8005402:	0668      	lsls	r0, r5, #25
 8005404:	d5f9      	bpl.n	80053fa <_svfprintf_r+0x742>
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800540c:	8011      	strh	r1, [r2, #0]
 800540e:	e7f0      	b.n	80053f2 <_svfprintf_r+0x73a>
 8005410:	f045 0510 	orr.w	r5, r5, #16
 8005414:	f015 0320 	ands.w	r3, r5, #32
 8005418:	d022      	beq.n	8005460 <_svfprintf_r+0x7a8>
 800541a:	3707      	adds	r7, #7
 800541c:	f027 0707 	bic.w	r7, r7, #7
 8005420:	f107 0308 	add.w	r3, r7, #8
 8005424:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005428:	9304      	str	r3, [sp, #16]
 800542a:	2300      	movs	r3, #0
 800542c:	2200      	movs	r2, #0
 800542e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005432:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8005436:	f000 83db 	beq.w	8005bf0 <_svfprintf_r+0xf38>
 800543a:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 800543e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005440:	ea56 0207 	orrs.w	r2, r6, r7
 8005444:	f040 83d9 	bne.w	8005bfa <_svfprintf_r+0xf42>
 8005448:	f1b9 0f00 	cmp.w	r9, #0
 800544c:	f000 80aa 	beq.w	80055a4 <_svfprintf_r+0x8ec>
 8005450:	2b01      	cmp	r3, #1
 8005452:	d076      	beq.n	8005542 <_svfprintf_r+0x88a>
 8005454:	2b02      	cmp	r3, #2
 8005456:	f000 8091 	beq.w	800557c <_svfprintf_r+0x8c4>
 800545a:	2600      	movs	r6, #0
 800545c:	2700      	movs	r7, #0
 800545e:	e3d2      	b.n	8005c06 <_svfprintf_r+0xf4e>
 8005460:	1d3a      	adds	r2, r7, #4
 8005462:	f015 0110 	ands.w	r1, r5, #16
 8005466:	9204      	str	r2, [sp, #16]
 8005468:	d002      	beq.n	8005470 <_svfprintf_r+0x7b8>
 800546a:	683e      	ldr	r6, [r7, #0]
 800546c:	2700      	movs	r7, #0
 800546e:	e7dd      	b.n	800542c <_svfprintf_r+0x774>
 8005470:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8005474:	d0f9      	beq.n	800546a <_svfprintf_r+0x7b2>
 8005476:	883e      	ldrh	r6, [r7, #0]
 8005478:	2700      	movs	r7, #0
 800547a:	e7d6      	b.n	800542a <_svfprintf_r+0x772>
 800547c:	1d3b      	adds	r3, r7, #4
 800547e:	9304      	str	r3, [sp, #16]
 8005480:	2330      	movs	r3, #48	; 0x30
 8005482:	2278      	movs	r2, #120	; 0x78
 8005484:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8005488:	4b14      	ldr	r3, [pc, #80]	; (80054dc <_svfprintf_r+0x824>)
 800548a:	683e      	ldr	r6, [r7, #0]
 800548c:	9311      	str	r3, [sp, #68]	; 0x44
 800548e:	2700      	movs	r7, #0
 8005490:	f045 0502 	orr.w	r5, r5, #2
 8005494:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8005498:	2302      	movs	r3, #2
 800549a:	9202      	str	r2, [sp, #8]
 800549c:	e7c6      	b.n	800542c <_svfprintf_r+0x774>
 800549e:	1d3b      	adds	r3, r7, #4
 80054a0:	2600      	movs	r6, #0
 80054a2:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80054a6:	9304      	str	r3, [sp, #16]
 80054a8:	f8d7 8000 	ldr.w	r8, [r7]
 80054ac:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80054b0:	d00a      	beq.n	80054c8 <_svfprintf_r+0x810>
 80054b2:	464a      	mov	r2, r9
 80054b4:	4631      	mov	r1, r6
 80054b6:	4640      	mov	r0, r8
 80054b8:	f7fa fe92 	bl	80001e0 <memchr>
 80054bc:	2800      	cmp	r0, #0
 80054be:	f000 808d 	beq.w	80055dc <_svfprintf_r+0x924>
 80054c2:	eba0 0908 	sub.w	r9, r0, r8
 80054c6:	e5cb      	b.n	8005060 <_svfprintf_r+0x3a8>
 80054c8:	4640      	mov	r0, r8
 80054ca:	f7fa fed9 	bl	8000280 <strlen>
 80054ce:	4681      	mov	r9, r0
 80054d0:	e5c6      	b.n	8005060 <_svfprintf_r+0x3a8>
 80054d2:	bf00      	nop
 80054d4:	08009c10 	.word	0x08009c10
 80054d8:	08009c20 	.word	0x08009c20
 80054dc:	08009bfd 	.word	0x08009bfd
 80054e0:	f045 0510 	orr.w	r5, r5, #16
 80054e4:	06a9      	lsls	r1, r5, #26
 80054e6:	d509      	bpl.n	80054fc <_svfprintf_r+0x844>
 80054e8:	3707      	adds	r7, #7
 80054ea:	f027 0707 	bic.w	r7, r7, #7
 80054ee:	f107 0308 	add.w	r3, r7, #8
 80054f2:	e9d7 6700 	ldrd	r6, r7, [r7]
 80054f6:	9304      	str	r3, [sp, #16]
 80054f8:	2301      	movs	r3, #1
 80054fa:	e797      	b.n	800542c <_svfprintf_r+0x774>
 80054fc:	1d3b      	adds	r3, r7, #4
 80054fe:	f015 0f10 	tst.w	r5, #16
 8005502:	9304      	str	r3, [sp, #16]
 8005504:	d001      	beq.n	800550a <_svfprintf_r+0x852>
 8005506:	683e      	ldr	r6, [r7, #0]
 8005508:	e002      	b.n	8005510 <_svfprintf_r+0x858>
 800550a:	066a      	lsls	r2, r5, #25
 800550c:	d5fb      	bpl.n	8005506 <_svfprintf_r+0x84e>
 800550e:	883e      	ldrh	r6, [r7, #0]
 8005510:	2700      	movs	r7, #0
 8005512:	e7f1      	b.n	80054f8 <_svfprintf_r+0x840>
 8005514:	b10b      	cbz	r3, 800551a <_svfprintf_r+0x862>
 8005516:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800551a:	4ba3      	ldr	r3, [pc, #652]	; (80057a8 <_svfprintf_r+0xaf0>)
 800551c:	e4c2      	b.n	8004ea4 <_svfprintf_r+0x1ec>
 800551e:	1d3b      	adds	r3, r7, #4
 8005520:	f015 0f10 	tst.w	r5, #16
 8005524:	9304      	str	r3, [sp, #16]
 8005526:	d001      	beq.n	800552c <_svfprintf_r+0x874>
 8005528:	683e      	ldr	r6, [r7, #0]
 800552a:	e002      	b.n	8005532 <_svfprintf_r+0x87a>
 800552c:	066e      	lsls	r6, r5, #25
 800552e:	d5fb      	bpl.n	8005528 <_svfprintf_r+0x870>
 8005530:	883e      	ldrh	r6, [r7, #0]
 8005532:	2700      	movs	r7, #0
 8005534:	e4c2      	b.n	8004ebc <_svfprintf_r+0x204>
 8005536:	4643      	mov	r3, r8
 8005538:	e366      	b.n	8005c08 <_svfprintf_r+0xf50>
 800553a:	2f00      	cmp	r7, #0
 800553c:	bf08      	it	eq
 800553e:	2e0a      	cmpeq	r6, #10
 8005540:	d205      	bcs.n	800554e <_svfprintf_r+0x896>
 8005542:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8005546:	3630      	adds	r6, #48	; 0x30
 8005548:	f808 6d41 	strb.w	r6, [r8, #-65]!
 800554c:	e377      	b.n	8005c3e <_svfprintf_r+0xf86>
 800554e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005552:	4630      	mov	r0, r6
 8005554:	4639      	mov	r1, r7
 8005556:	220a      	movs	r2, #10
 8005558:	2300      	movs	r3, #0
 800555a:	f7fb fb99 	bl	8000c90 <__aeabi_uldivmod>
 800555e:	3230      	adds	r2, #48	; 0x30
 8005560:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8005564:	2300      	movs	r3, #0
 8005566:	4630      	mov	r0, r6
 8005568:	4639      	mov	r1, r7
 800556a:	220a      	movs	r2, #10
 800556c:	f7fb fb90 	bl	8000c90 <__aeabi_uldivmod>
 8005570:	4606      	mov	r6, r0
 8005572:	460f      	mov	r7, r1
 8005574:	ea56 0307 	orrs.w	r3, r6, r7
 8005578:	d1eb      	bne.n	8005552 <_svfprintf_r+0x89a>
 800557a:	e360      	b.n	8005c3e <_svfprintf_r+0xf86>
 800557c:	2600      	movs	r6, #0
 800557e:	2700      	movs	r7, #0
 8005580:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005584:	f006 030f 	and.w	r3, r6, #15
 8005588:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800558a:	5cd3      	ldrb	r3, [r2, r3]
 800558c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8005590:	0933      	lsrs	r3, r6, #4
 8005592:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8005596:	093a      	lsrs	r2, r7, #4
 8005598:	461e      	mov	r6, r3
 800559a:	4617      	mov	r7, r2
 800559c:	ea56 0307 	orrs.w	r3, r6, r7
 80055a0:	d1f0      	bne.n	8005584 <_svfprintf_r+0x8cc>
 80055a2:	e34c      	b.n	8005c3e <_svfprintf_r+0xf86>
 80055a4:	b93b      	cbnz	r3, 80055b6 <_svfprintf_r+0x8fe>
 80055a6:	07ea      	lsls	r2, r5, #31
 80055a8:	d505      	bpl.n	80055b6 <_svfprintf_r+0x8fe>
 80055aa:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80055ae:	2330      	movs	r3, #48	; 0x30
 80055b0:	f808 3d41 	strb.w	r3, [r8, #-65]!
 80055b4:	e343      	b.n	8005c3e <_svfprintf_r+0xf86>
 80055b6:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80055ba:	e340      	b.n	8005c3e <_svfprintf_r+0xf86>
 80055bc:	b10b      	cbz	r3, 80055c2 <_svfprintf_r+0x90a>
 80055be:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80055c2:	9b02      	ldr	r3, [sp, #8]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 82f7 	beq.w	8005bb8 <_svfprintf_r+0xf00>
 80055ca:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80055ce:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80055d2:	2600      	movs	r6, #0
 80055d4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80055d8:	9704      	str	r7, [sp, #16]
 80055da:	e4e8      	b.n	8004fae <_svfprintf_r+0x2f6>
 80055dc:	4606      	mov	r6, r0
 80055de:	e53f      	b.n	8005060 <_svfprintf_r+0x3a8>
 80055e0:	2310      	movs	r3, #16
 80055e2:	6063      	str	r3, [r4, #4]
 80055e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055e6:	3310      	adds	r3, #16
 80055e8:	9321      	str	r3, [sp, #132]	; 0x84
 80055ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80055ec:	3301      	adds	r3, #1
 80055ee:	2b07      	cmp	r3, #7
 80055f0:	9320      	str	r3, [sp, #128]	; 0x80
 80055f2:	dc04      	bgt.n	80055fe <_svfprintf_r+0x946>
 80055f4:	3408      	adds	r4, #8
 80055f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80055f8:	3b10      	subs	r3, #16
 80055fa:	930c      	str	r3, [sp, #48]	; 0x30
 80055fc:	e615      	b.n	800522a <_svfprintf_r+0x572>
 80055fe:	aa1f      	add	r2, sp, #124	; 0x7c
 8005600:	4651      	mov	r1, sl
 8005602:	4658      	mov	r0, fp
 8005604:	f003 fb19 	bl	8008c3a <__ssprint_r>
 8005608:	2800      	cmp	r0, #0
 800560a:	f040 82b6 	bne.w	8005b7a <_svfprintf_r+0xec2>
 800560e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005610:	e7f1      	b.n	80055f6 <_svfprintf_r+0x93e>
 8005612:	aa1f      	add	r2, sp, #124	; 0x7c
 8005614:	4651      	mov	r1, sl
 8005616:	4658      	mov	r0, fp
 8005618:	f003 fb0f 	bl	8008c3a <__ssprint_r>
 800561c:	2800      	cmp	r0, #0
 800561e:	f040 82ac 	bne.w	8005b7a <_svfprintf_r+0xec2>
 8005622:	ac2c      	add	r4, sp, #176	; 0xb0
 8005624:	e614      	b.n	8005250 <_svfprintf_r+0x598>
 8005626:	aa1f      	add	r2, sp, #124	; 0x7c
 8005628:	4651      	mov	r1, sl
 800562a:	4658      	mov	r0, fp
 800562c:	f003 fb05 	bl	8008c3a <__ssprint_r>
 8005630:	2800      	cmp	r0, #0
 8005632:	f040 82a2 	bne.w	8005b7a <_svfprintf_r+0xec2>
 8005636:	ac2c      	add	r4, sp, #176	; 0xb0
 8005638:	e61c      	b.n	8005274 <_svfprintf_r+0x5bc>
 800563a:	aa1f      	add	r2, sp, #124	; 0x7c
 800563c:	4651      	mov	r1, sl
 800563e:	4658      	mov	r0, fp
 8005640:	f003 fafb 	bl	8008c3a <__ssprint_r>
 8005644:	2800      	cmp	r0, #0
 8005646:	f040 8298 	bne.w	8005b7a <_svfprintf_r+0xec2>
 800564a:	ac2c      	add	r4, sp, #176	; 0xb0
 800564c:	e622      	b.n	8005294 <_svfprintf_r+0x5dc>
 800564e:	2210      	movs	r2, #16
 8005650:	6062      	str	r2, [r4, #4]
 8005652:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005654:	3210      	adds	r2, #16
 8005656:	9221      	str	r2, [sp, #132]	; 0x84
 8005658:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800565a:	3201      	adds	r2, #1
 800565c:	2a07      	cmp	r2, #7
 800565e:	9220      	str	r2, [sp, #128]	; 0x80
 8005660:	dc02      	bgt.n	8005668 <_svfprintf_r+0x9b0>
 8005662:	3408      	adds	r4, #8
 8005664:	3b10      	subs	r3, #16
 8005666:	e61d      	b.n	80052a4 <_svfprintf_r+0x5ec>
 8005668:	aa1f      	add	r2, sp, #124	; 0x7c
 800566a:	4651      	mov	r1, sl
 800566c:	4658      	mov	r0, fp
 800566e:	930c      	str	r3, [sp, #48]	; 0x30
 8005670:	f003 fae3 	bl	8008c3a <__ssprint_r>
 8005674:	2800      	cmp	r0, #0
 8005676:	f040 8280 	bne.w	8005b7a <_svfprintf_r+0xec2>
 800567a:	ac2c      	add	r4, sp, #176	; 0xb0
 800567c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800567e:	e7f1      	b.n	8005664 <_svfprintf_r+0x9ac>
 8005680:	aa1f      	add	r2, sp, #124	; 0x7c
 8005682:	4651      	mov	r1, sl
 8005684:	4658      	mov	r0, fp
 8005686:	f003 fad8 	bl	8008c3a <__ssprint_r>
 800568a:	2800      	cmp	r0, #0
 800568c:	f040 8275 	bne.w	8005b7a <_svfprintf_r+0xec2>
 8005690:	ac2c      	add	r4, sp, #176	; 0xb0
 8005692:	e617      	b.n	80052c4 <_svfprintf_r+0x60c>
 8005694:	2310      	movs	r3, #16
 8005696:	6063      	str	r3, [r4, #4]
 8005698:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800569a:	3310      	adds	r3, #16
 800569c:	9321      	str	r3, [sp, #132]	; 0x84
 800569e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80056a0:	3301      	adds	r3, #1
 80056a2:	2b07      	cmp	r3, #7
 80056a4:	9320      	str	r3, [sp, #128]	; 0x80
 80056a6:	dc02      	bgt.n	80056ae <_svfprintf_r+0x9f6>
 80056a8:	3408      	adds	r4, #8
 80056aa:	3e10      	subs	r6, #16
 80056ac:	e60e      	b.n	80052cc <_svfprintf_r+0x614>
 80056ae:	aa1f      	add	r2, sp, #124	; 0x7c
 80056b0:	4651      	mov	r1, sl
 80056b2:	4658      	mov	r0, fp
 80056b4:	f003 fac1 	bl	8008c3a <__ssprint_r>
 80056b8:	2800      	cmp	r0, #0
 80056ba:	f040 825e 	bne.w	8005b7a <_svfprintf_r+0xec2>
 80056be:	ac2c      	add	r4, sp, #176	; 0xb0
 80056c0:	e7f3      	b.n	80056aa <_svfprintf_r+0x9f2>
 80056c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80056c4:	4651      	mov	r1, sl
 80056c6:	4658      	mov	r0, fp
 80056c8:	f003 fab7 	bl	8008c3a <__ssprint_r>
 80056cc:	2800      	cmp	r0, #0
 80056ce:	f040 8254 	bne.w	8005b7a <_svfprintf_r+0xec2>
 80056d2:	ac2c      	add	r4, sp, #176	; 0xb0
 80056d4:	e60a      	b.n	80052ec <_svfprintf_r+0x634>
 80056d6:	9b02      	ldr	r3, [sp, #8]
 80056d8:	2b65      	cmp	r3, #101	; 0x65
 80056da:	f340 81a9 	ble.w	8005a30 <_svfprintf_r+0xd78>
 80056de:	2200      	movs	r2, #0
 80056e0:	2300      	movs	r3, #0
 80056e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056e6:	f7fb f9f3 	bl	8000ad0 <__aeabi_dcmpeq>
 80056ea:	2800      	cmp	r0, #0
 80056ec:	d062      	beq.n	80057b4 <_svfprintf_r+0xafc>
 80056ee:	4b2f      	ldr	r3, [pc, #188]	; (80057ac <_svfprintf_r+0xaf4>)
 80056f0:	6023      	str	r3, [r4, #0]
 80056f2:	2301      	movs	r3, #1
 80056f4:	6063      	str	r3, [r4, #4]
 80056f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056f8:	3301      	adds	r3, #1
 80056fa:	9321      	str	r3, [sp, #132]	; 0x84
 80056fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80056fe:	3301      	adds	r3, #1
 8005700:	2b07      	cmp	r3, #7
 8005702:	9320      	str	r3, [sp, #128]	; 0x80
 8005704:	dc25      	bgt.n	8005752 <_svfprintf_r+0xa9a>
 8005706:	3408      	adds	r4, #8
 8005708:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800570a:	9a03      	ldr	r2, [sp, #12]
 800570c:	4293      	cmp	r3, r2
 800570e:	db02      	blt.n	8005716 <_svfprintf_r+0xa5e>
 8005710:	07ee      	lsls	r6, r5, #31
 8005712:	f57f ae02 	bpl.w	800531a <_svfprintf_r+0x662>
 8005716:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	9b08      	ldr	r3, [sp, #32]
 800571c:	6063      	str	r3, [r4, #4]
 800571e:	9a08      	ldr	r2, [sp, #32]
 8005720:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005722:	4413      	add	r3, r2
 8005724:	9321      	str	r3, [sp, #132]	; 0x84
 8005726:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005728:	3301      	adds	r3, #1
 800572a:	2b07      	cmp	r3, #7
 800572c:	9320      	str	r3, [sp, #128]	; 0x80
 800572e:	dc1a      	bgt.n	8005766 <_svfprintf_r+0xaae>
 8005730:	3408      	adds	r4, #8
 8005732:	9b03      	ldr	r3, [sp, #12]
 8005734:	1e5e      	subs	r6, r3, #1
 8005736:	2e00      	cmp	r6, #0
 8005738:	f77f adef 	ble.w	800531a <_svfprintf_r+0x662>
 800573c:	4f1c      	ldr	r7, [pc, #112]	; (80057b0 <_svfprintf_r+0xaf8>)
 800573e:	f04f 0810 	mov.w	r8, #16
 8005742:	2e10      	cmp	r6, #16
 8005744:	6027      	str	r7, [r4, #0]
 8005746:	dc18      	bgt.n	800577a <_svfprintf_r+0xac2>
 8005748:	6066      	str	r6, [r4, #4]
 800574a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800574c:	441e      	add	r6, r3
 800574e:	9621      	str	r6, [sp, #132]	; 0x84
 8005750:	e5d4      	b.n	80052fc <_svfprintf_r+0x644>
 8005752:	aa1f      	add	r2, sp, #124	; 0x7c
 8005754:	4651      	mov	r1, sl
 8005756:	4658      	mov	r0, fp
 8005758:	f003 fa6f 	bl	8008c3a <__ssprint_r>
 800575c:	2800      	cmp	r0, #0
 800575e:	f040 820c 	bne.w	8005b7a <_svfprintf_r+0xec2>
 8005762:	ac2c      	add	r4, sp, #176	; 0xb0
 8005764:	e7d0      	b.n	8005708 <_svfprintf_r+0xa50>
 8005766:	aa1f      	add	r2, sp, #124	; 0x7c
 8005768:	4651      	mov	r1, sl
 800576a:	4658      	mov	r0, fp
 800576c:	f003 fa65 	bl	8008c3a <__ssprint_r>
 8005770:	2800      	cmp	r0, #0
 8005772:	f040 8202 	bne.w	8005b7a <_svfprintf_r+0xec2>
 8005776:	ac2c      	add	r4, sp, #176	; 0xb0
 8005778:	e7db      	b.n	8005732 <_svfprintf_r+0xa7a>
 800577a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800577c:	f8c4 8004 	str.w	r8, [r4, #4]
 8005780:	3310      	adds	r3, #16
 8005782:	9321      	str	r3, [sp, #132]	; 0x84
 8005784:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005786:	3301      	adds	r3, #1
 8005788:	2b07      	cmp	r3, #7
 800578a:	9320      	str	r3, [sp, #128]	; 0x80
 800578c:	dc02      	bgt.n	8005794 <_svfprintf_r+0xadc>
 800578e:	3408      	adds	r4, #8
 8005790:	3e10      	subs	r6, #16
 8005792:	e7d6      	b.n	8005742 <_svfprintf_r+0xa8a>
 8005794:	aa1f      	add	r2, sp, #124	; 0x7c
 8005796:	4651      	mov	r1, sl
 8005798:	4658      	mov	r0, fp
 800579a:	f003 fa4e 	bl	8008c3a <__ssprint_r>
 800579e:	2800      	cmp	r0, #0
 80057a0:	f040 81eb 	bne.w	8005b7a <_svfprintf_r+0xec2>
 80057a4:	ac2c      	add	r4, sp, #176	; 0xb0
 80057a6:	e7f3      	b.n	8005790 <_svfprintf_r+0xad8>
 80057a8:	08009bfd 	.word	0x08009bfd
 80057ac:	08009c0e 	.word	0x08009c0e
 80057b0:	08009c20 	.word	0x08009c20
 80057b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	dc7a      	bgt.n	80058b0 <_svfprintf_r+0xbf8>
 80057ba:	4b9b      	ldr	r3, [pc, #620]	; (8005a28 <_svfprintf_r+0xd70>)
 80057bc:	6023      	str	r3, [r4, #0]
 80057be:	2301      	movs	r3, #1
 80057c0:	6063      	str	r3, [r4, #4]
 80057c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057c4:	3301      	adds	r3, #1
 80057c6:	9321      	str	r3, [sp, #132]	; 0x84
 80057c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80057ca:	3301      	adds	r3, #1
 80057cc:	2b07      	cmp	r3, #7
 80057ce:	9320      	str	r3, [sp, #128]	; 0x80
 80057d0:	dc44      	bgt.n	800585c <_svfprintf_r+0xba4>
 80057d2:	3408      	adds	r4, #8
 80057d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80057d6:	b923      	cbnz	r3, 80057e2 <_svfprintf_r+0xb2a>
 80057d8:	9b03      	ldr	r3, [sp, #12]
 80057da:	b913      	cbnz	r3, 80057e2 <_svfprintf_r+0xb2a>
 80057dc:	07e8      	lsls	r0, r5, #31
 80057de:	f57f ad9c 	bpl.w	800531a <_svfprintf_r+0x662>
 80057e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057e4:	6023      	str	r3, [r4, #0]
 80057e6:	9b08      	ldr	r3, [sp, #32]
 80057e8:	6063      	str	r3, [r4, #4]
 80057ea:	9a08      	ldr	r2, [sp, #32]
 80057ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057ee:	4413      	add	r3, r2
 80057f0:	9321      	str	r3, [sp, #132]	; 0x84
 80057f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80057f4:	3301      	adds	r3, #1
 80057f6:	2b07      	cmp	r3, #7
 80057f8:	9320      	str	r3, [sp, #128]	; 0x80
 80057fa:	dc39      	bgt.n	8005870 <_svfprintf_r+0xbb8>
 80057fc:	f104 0308 	add.w	r3, r4, #8
 8005800:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005802:	2e00      	cmp	r6, #0
 8005804:	da19      	bge.n	800583a <_svfprintf_r+0xb82>
 8005806:	4f89      	ldr	r7, [pc, #548]	; (8005a2c <_svfprintf_r+0xd74>)
 8005808:	4276      	negs	r6, r6
 800580a:	2410      	movs	r4, #16
 800580c:	2e10      	cmp	r6, #16
 800580e:	601f      	str	r7, [r3, #0]
 8005810:	dc38      	bgt.n	8005884 <_svfprintf_r+0xbcc>
 8005812:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005814:	605e      	str	r6, [r3, #4]
 8005816:	4416      	add	r6, r2
 8005818:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800581a:	9621      	str	r6, [sp, #132]	; 0x84
 800581c:	3201      	adds	r2, #1
 800581e:	2a07      	cmp	r2, #7
 8005820:	f103 0308 	add.w	r3, r3, #8
 8005824:	9220      	str	r2, [sp, #128]	; 0x80
 8005826:	dd08      	ble.n	800583a <_svfprintf_r+0xb82>
 8005828:	aa1f      	add	r2, sp, #124	; 0x7c
 800582a:	4651      	mov	r1, sl
 800582c:	4658      	mov	r0, fp
 800582e:	f003 fa04 	bl	8008c3a <__ssprint_r>
 8005832:	2800      	cmp	r0, #0
 8005834:	f040 81a1 	bne.w	8005b7a <_svfprintf_r+0xec2>
 8005838:	ab2c      	add	r3, sp, #176	; 0xb0
 800583a:	9a03      	ldr	r2, [sp, #12]
 800583c:	605a      	str	r2, [r3, #4]
 800583e:	9903      	ldr	r1, [sp, #12]
 8005840:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005842:	f8c3 8000 	str.w	r8, [r3]
 8005846:	440a      	add	r2, r1
 8005848:	9221      	str	r2, [sp, #132]	; 0x84
 800584a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800584c:	3201      	adds	r2, #1
 800584e:	2a07      	cmp	r2, #7
 8005850:	9220      	str	r2, [sp, #128]	; 0x80
 8005852:	f73f ad59 	bgt.w	8005308 <_svfprintf_r+0x650>
 8005856:	f103 0408 	add.w	r4, r3, #8
 800585a:	e55e      	b.n	800531a <_svfprintf_r+0x662>
 800585c:	aa1f      	add	r2, sp, #124	; 0x7c
 800585e:	4651      	mov	r1, sl
 8005860:	4658      	mov	r0, fp
 8005862:	f003 f9ea 	bl	8008c3a <__ssprint_r>
 8005866:	2800      	cmp	r0, #0
 8005868:	f040 8187 	bne.w	8005b7a <_svfprintf_r+0xec2>
 800586c:	ac2c      	add	r4, sp, #176	; 0xb0
 800586e:	e7b1      	b.n	80057d4 <_svfprintf_r+0xb1c>
 8005870:	aa1f      	add	r2, sp, #124	; 0x7c
 8005872:	4651      	mov	r1, sl
 8005874:	4658      	mov	r0, fp
 8005876:	f003 f9e0 	bl	8008c3a <__ssprint_r>
 800587a:	2800      	cmp	r0, #0
 800587c:	f040 817d 	bne.w	8005b7a <_svfprintf_r+0xec2>
 8005880:	ab2c      	add	r3, sp, #176	; 0xb0
 8005882:	e7bd      	b.n	8005800 <_svfprintf_r+0xb48>
 8005884:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005886:	605c      	str	r4, [r3, #4]
 8005888:	3210      	adds	r2, #16
 800588a:	9221      	str	r2, [sp, #132]	; 0x84
 800588c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800588e:	3201      	adds	r2, #1
 8005890:	2a07      	cmp	r2, #7
 8005892:	9220      	str	r2, [sp, #128]	; 0x80
 8005894:	dc02      	bgt.n	800589c <_svfprintf_r+0xbe4>
 8005896:	3308      	adds	r3, #8
 8005898:	3e10      	subs	r6, #16
 800589a:	e7b7      	b.n	800580c <_svfprintf_r+0xb54>
 800589c:	aa1f      	add	r2, sp, #124	; 0x7c
 800589e:	4651      	mov	r1, sl
 80058a0:	4658      	mov	r0, fp
 80058a2:	f003 f9ca 	bl	8008c3a <__ssprint_r>
 80058a6:	2800      	cmp	r0, #0
 80058a8:	f040 8167 	bne.w	8005b7a <_svfprintf_r+0xec2>
 80058ac:	ab2c      	add	r3, sp, #176	; 0xb0
 80058ae:	e7f3      	b.n	8005898 <_svfprintf_r+0xbe0>
 80058b0:	9b03      	ldr	r3, [sp, #12]
 80058b2:	42bb      	cmp	r3, r7
 80058b4:	bfa8      	it	ge
 80058b6:	463b      	movge	r3, r7
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	461e      	mov	r6, r3
 80058bc:	dd0b      	ble.n	80058d6 <_svfprintf_r+0xc1e>
 80058be:	6063      	str	r3, [r4, #4]
 80058c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058c2:	f8c4 8000 	str.w	r8, [r4]
 80058c6:	4433      	add	r3, r6
 80058c8:	9321      	str	r3, [sp, #132]	; 0x84
 80058ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80058cc:	3301      	adds	r3, #1
 80058ce:	2b07      	cmp	r3, #7
 80058d0:	9320      	str	r3, [sp, #128]	; 0x80
 80058d2:	dc5f      	bgt.n	8005994 <_svfprintf_r+0xcdc>
 80058d4:	3408      	adds	r4, #8
 80058d6:	2e00      	cmp	r6, #0
 80058d8:	bfac      	ite	ge
 80058da:	1bbe      	subge	r6, r7, r6
 80058dc:	463e      	movlt	r6, r7
 80058de:	2e00      	cmp	r6, #0
 80058e0:	dd0f      	ble.n	8005902 <_svfprintf_r+0xc4a>
 80058e2:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8005a2c <_svfprintf_r+0xd74>
 80058e6:	f8c4 9000 	str.w	r9, [r4]
 80058ea:	2e10      	cmp	r6, #16
 80058ec:	dc5c      	bgt.n	80059a8 <_svfprintf_r+0xcf0>
 80058ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058f0:	6066      	str	r6, [r4, #4]
 80058f2:	441e      	add	r6, r3
 80058f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80058f6:	9621      	str	r6, [sp, #132]	; 0x84
 80058f8:	3301      	adds	r3, #1
 80058fa:	2b07      	cmp	r3, #7
 80058fc:	9320      	str	r3, [sp, #128]	; 0x80
 80058fe:	dc6a      	bgt.n	80059d6 <_svfprintf_r+0xd1e>
 8005900:	3408      	adds	r4, #8
 8005902:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005904:	9a03      	ldr	r2, [sp, #12]
 8005906:	4293      	cmp	r3, r2
 8005908:	db01      	blt.n	800590e <_svfprintf_r+0xc56>
 800590a:	07e9      	lsls	r1, r5, #31
 800590c:	d50d      	bpl.n	800592a <_svfprintf_r+0xc72>
 800590e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005910:	6023      	str	r3, [r4, #0]
 8005912:	9b08      	ldr	r3, [sp, #32]
 8005914:	6063      	str	r3, [r4, #4]
 8005916:	9a08      	ldr	r2, [sp, #32]
 8005918:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800591a:	4413      	add	r3, r2
 800591c:	9321      	str	r3, [sp, #132]	; 0x84
 800591e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005920:	3301      	adds	r3, #1
 8005922:	2b07      	cmp	r3, #7
 8005924:	9320      	str	r3, [sp, #128]	; 0x80
 8005926:	dc60      	bgt.n	80059ea <_svfprintf_r+0xd32>
 8005928:	3408      	adds	r4, #8
 800592a:	9b03      	ldr	r3, [sp, #12]
 800592c:	9a03      	ldr	r2, [sp, #12]
 800592e:	1bde      	subs	r6, r3, r7
 8005930:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	429e      	cmp	r6, r3
 8005936:	bfa8      	it	ge
 8005938:	461e      	movge	r6, r3
 800593a:	2e00      	cmp	r6, #0
 800593c:	dd0b      	ble.n	8005956 <_svfprintf_r+0xc9e>
 800593e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005940:	6066      	str	r6, [r4, #4]
 8005942:	4433      	add	r3, r6
 8005944:	9321      	str	r3, [sp, #132]	; 0x84
 8005946:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005948:	3301      	adds	r3, #1
 800594a:	4447      	add	r7, r8
 800594c:	2b07      	cmp	r3, #7
 800594e:	6027      	str	r7, [r4, #0]
 8005950:	9320      	str	r3, [sp, #128]	; 0x80
 8005952:	dc54      	bgt.n	80059fe <_svfprintf_r+0xd46>
 8005954:	3408      	adds	r4, #8
 8005956:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005958:	9a03      	ldr	r2, [sp, #12]
 800595a:	2e00      	cmp	r6, #0
 800595c:	eba2 0303 	sub.w	r3, r2, r3
 8005960:	bfac      	ite	ge
 8005962:	1b9e      	subge	r6, r3, r6
 8005964:	461e      	movlt	r6, r3
 8005966:	2e00      	cmp	r6, #0
 8005968:	f77f acd7 	ble.w	800531a <_svfprintf_r+0x662>
 800596c:	4f2f      	ldr	r7, [pc, #188]	; (8005a2c <_svfprintf_r+0xd74>)
 800596e:	f04f 0810 	mov.w	r8, #16
 8005972:	2e10      	cmp	r6, #16
 8005974:	6027      	str	r7, [r4, #0]
 8005976:	f77f aee7 	ble.w	8005748 <_svfprintf_r+0xa90>
 800597a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800597c:	f8c4 8004 	str.w	r8, [r4, #4]
 8005980:	3310      	adds	r3, #16
 8005982:	9321      	str	r3, [sp, #132]	; 0x84
 8005984:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005986:	3301      	adds	r3, #1
 8005988:	2b07      	cmp	r3, #7
 800598a:	9320      	str	r3, [sp, #128]	; 0x80
 800598c:	dc41      	bgt.n	8005a12 <_svfprintf_r+0xd5a>
 800598e:	3408      	adds	r4, #8
 8005990:	3e10      	subs	r6, #16
 8005992:	e7ee      	b.n	8005972 <_svfprintf_r+0xcba>
 8005994:	aa1f      	add	r2, sp, #124	; 0x7c
 8005996:	4651      	mov	r1, sl
 8005998:	4658      	mov	r0, fp
 800599a:	f003 f94e 	bl	8008c3a <__ssprint_r>
 800599e:	2800      	cmp	r0, #0
 80059a0:	f040 80eb 	bne.w	8005b7a <_svfprintf_r+0xec2>
 80059a4:	ac2c      	add	r4, sp, #176	; 0xb0
 80059a6:	e796      	b.n	80058d6 <_svfprintf_r+0xc1e>
 80059a8:	2310      	movs	r3, #16
 80059aa:	6063      	str	r3, [r4, #4]
 80059ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059ae:	3310      	adds	r3, #16
 80059b0:	9321      	str	r3, [sp, #132]	; 0x84
 80059b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80059b4:	3301      	adds	r3, #1
 80059b6:	2b07      	cmp	r3, #7
 80059b8:	9320      	str	r3, [sp, #128]	; 0x80
 80059ba:	dc02      	bgt.n	80059c2 <_svfprintf_r+0xd0a>
 80059bc:	3408      	adds	r4, #8
 80059be:	3e10      	subs	r6, #16
 80059c0:	e791      	b.n	80058e6 <_svfprintf_r+0xc2e>
 80059c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80059c4:	4651      	mov	r1, sl
 80059c6:	4658      	mov	r0, fp
 80059c8:	f003 f937 	bl	8008c3a <__ssprint_r>
 80059cc:	2800      	cmp	r0, #0
 80059ce:	f040 80d4 	bne.w	8005b7a <_svfprintf_r+0xec2>
 80059d2:	ac2c      	add	r4, sp, #176	; 0xb0
 80059d4:	e7f3      	b.n	80059be <_svfprintf_r+0xd06>
 80059d6:	aa1f      	add	r2, sp, #124	; 0x7c
 80059d8:	4651      	mov	r1, sl
 80059da:	4658      	mov	r0, fp
 80059dc:	f003 f92d 	bl	8008c3a <__ssprint_r>
 80059e0:	2800      	cmp	r0, #0
 80059e2:	f040 80ca 	bne.w	8005b7a <_svfprintf_r+0xec2>
 80059e6:	ac2c      	add	r4, sp, #176	; 0xb0
 80059e8:	e78b      	b.n	8005902 <_svfprintf_r+0xc4a>
 80059ea:	aa1f      	add	r2, sp, #124	; 0x7c
 80059ec:	4651      	mov	r1, sl
 80059ee:	4658      	mov	r0, fp
 80059f0:	f003 f923 	bl	8008c3a <__ssprint_r>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	f040 80c0 	bne.w	8005b7a <_svfprintf_r+0xec2>
 80059fa:	ac2c      	add	r4, sp, #176	; 0xb0
 80059fc:	e795      	b.n	800592a <_svfprintf_r+0xc72>
 80059fe:	aa1f      	add	r2, sp, #124	; 0x7c
 8005a00:	4651      	mov	r1, sl
 8005a02:	4658      	mov	r0, fp
 8005a04:	f003 f919 	bl	8008c3a <__ssprint_r>
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	f040 80b6 	bne.w	8005b7a <_svfprintf_r+0xec2>
 8005a0e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005a10:	e7a1      	b.n	8005956 <_svfprintf_r+0xc9e>
 8005a12:	aa1f      	add	r2, sp, #124	; 0x7c
 8005a14:	4651      	mov	r1, sl
 8005a16:	4658      	mov	r0, fp
 8005a18:	f003 f90f 	bl	8008c3a <__ssprint_r>
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	f040 80ac 	bne.w	8005b7a <_svfprintf_r+0xec2>
 8005a22:	ac2c      	add	r4, sp, #176	; 0xb0
 8005a24:	e7b4      	b.n	8005990 <_svfprintf_r+0xcd8>
 8005a26:	bf00      	nop
 8005a28:	08009c0e 	.word	0x08009c0e
 8005a2c:	08009c20 	.word	0x08009c20
 8005a30:	9b03      	ldr	r3, [sp, #12]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	dc01      	bgt.n	8005a3a <_svfprintf_r+0xd82>
 8005a36:	07ea      	lsls	r2, r5, #31
 8005a38:	d576      	bpl.n	8005b28 <_svfprintf_r+0xe70>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	6063      	str	r3, [r4, #4]
 8005a3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a40:	f8c4 8000 	str.w	r8, [r4]
 8005a44:	3301      	adds	r3, #1
 8005a46:	9321      	str	r3, [sp, #132]	; 0x84
 8005a48:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	2b07      	cmp	r3, #7
 8005a4e:	9320      	str	r3, [sp, #128]	; 0x80
 8005a50:	dc36      	bgt.n	8005ac0 <_svfprintf_r+0xe08>
 8005a52:	3408      	adds	r4, #8
 8005a54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a56:	6023      	str	r3, [r4, #0]
 8005a58:	9b08      	ldr	r3, [sp, #32]
 8005a5a:	6063      	str	r3, [r4, #4]
 8005a5c:	9a08      	ldr	r2, [sp, #32]
 8005a5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a60:	4413      	add	r3, r2
 8005a62:	9321      	str	r3, [sp, #132]	; 0x84
 8005a64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a66:	3301      	adds	r3, #1
 8005a68:	2b07      	cmp	r3, #7
 8005a6a:	9320      	str	r3, [sp, #128]	; 0x80
 8005a6c:	dc31      	bgt.n	8005ad2 <_svfprintf_r+0xe1a>
 8005a6e:	3408      	adds	r4, #8
 8005a70:	2300      	movs	r3, #0
 8005a72:	2200      	movs	r2, #0
 8005a74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a78:	f7fb f82a 	bl	8000ad0 <__aeabi_dcmpeq>
 8005a7c:	9b03      	ldr	r3, [sp, #12]
 8005a7e:	1e5e      	subs	r6, r3, #1
 8005a80:	2800      	cmp	r0, #0
 8005a82:	d12f      	bne.n	8005ae4 <_svfprintf_r+0xe2c>
 8005a84:	f108 0301 	add.w	r3, r8, #1
 8005a88:	e884 0048 	stmia.w	r4, {r3, r6}
 8005a8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a8e:	9a03      	ldr	r2, [sp, #12]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	4413      	add	r3, r2
 8005a94:	9321      	str	r3, [sp, #132]	; 0x84
 8005a96:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a98:	3301      	adds	r3, #1
 8005a9a:	2b07      	cmp	r3, #7
 8005a9c:	9320      	str	r3, [sp, #128]	; 0x80
 8005a9e:	dd4a      	ble.n	8005b36 <_svfprintf_r+0xe7e>
 8005aa0:	aa1f      	add	r2, sp, #124	; 0x7c
 8005aa2:	4651      	mov	r1, sl
 8005aa4:	4658      	mov	r0, fp
 8005aa6:	f003 f8c8 	bl	8008c3a <__ssprint_r>
 8005aaa:	2800      	cmp	r0, #0
 8005aac:	d165      	bne.n	8005b7a <_svfprintf_r+0xec2>
 8005aae:	ac2c      	add	r4, sp, #176	; 0xb0
 8005ab0:	ab1b      	add	r3, sp, #108	; 0x6c
 8005ab2:	6023      	str	r3, [r4, #0]
 8005ab4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ab6:	6063      	str	r3, [r4, #4]
 8005ab8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005aba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005abc:	4413      	add	r3, r2
 8005abe:	e41c      	b.n	80052fa <_svfprintf_r+0x642>
 8005ac0:	aa1f      	add	r2, sp, #124	; 0x7c
 8005ac2:	4651      	mov	r1, sl
 8005ac4:	4658      	mov	r0, fp
 8005ac6:	f003 f8b8 	bl	8008c3a <__ssprint_r>
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d155      	bne.n	8005b7a <_svfprintf_r+0xec2>
 8005ace:	ac2c      	add	r4, sp, #176	; 0xb0
 8005ad0:	e7c0      	b.n	8005a54 <_svfprintf_r+0xd9c>
 8005ad2:	aa1f      	add	r2, sp, #124	; 0x7c
 8005ad4:	4651      	mov	r1, sl
 8005ad6:	4658      	mov	r0, fp
 8005ad8:	f003 f8af 	bl	8008c3a <__ssprint_r>
 8005adc:	2800      	cmp	r0, #0
 8005ade:	d14c      	bne.n	8005b7a <_svfprintf_r+0xec2>
 8005ae0:	ac2c      	add	r4, sp, #176	; 0xb0
 8005ae2:	e7c5      	b.n	8005a70 <_svfprintf_r+0xdb8>
 8005ae4:	2e00      	cmp	r6, #0
 8005ae6:	dde3      	ble.n	8005ab0 <_svfprintf_r+0xdf8>
 8005ae8:	4f59      	ldr	r7, [pc, #356]	; (8005c50 <_svfprintf_r+0xf98>)
 8005aea:	f04f 0810 	mov.w	r8, #16
 8005aee:	2e10      	cmp	r6, #16
 8005af0:	6027      	str	r7, [r4, #0]
 8005af2:	dc04      	bgt.n	8005afe <_svfprintf_r+0xe46>
 8005af4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005af6:	6066      	str	r6, [r4, #4]
 8005af8:	441e      	add	r6, r3
 8005afa:	9621      	str	r6, [sp, #132]	; 0x84
 8005afc:	e7cb      	b.n	8005a96 <_svfprintf_r+0xdde>
 8005afe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b00:	f8c4 8004 	str.w	r8, [r4, #4]
 8005b04:	3310      	adds	r3, #16
 8005b06:	9321      	str	r3, [sp, #132]	; 0x84
 8005b08:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	2b07      	cmp	r3, #7
 8005b0e:	9320      	str	r3, [sp, #128]	; 0x80
 8005b10:	dc02      	bgt.n	8005b18 <_svfprintf_r+0xe60>
 8005b12:	3408      	adds	r4, #8
 8005b14:	3e10      	subs	r6, #16
 8005b16:	e7ea      	b.n	8005aee <_svfprintf_r+0xe36>
 8005b18:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b1a:	4651      	mov	r1, sl
 8005b1c:	4658      	mov	r0, fp
 8005b1e:	f003 f88c 	bl	8008c3a <__ssprint_r>
 8005b22:	bb50      	cbnz	r0, 8005b7a <_svfprintf_r+0xec2>
 8005b24:	ac2c      	add	r4, sp, #176	; 0xb0
 8005b26:	e7f5      	b.n	8005b14 <_svfprintf_r+0xe5c>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	6063      	str	r3, [r4, #4]
 8005b2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b2e:	f8c4 8000 	str.w	r8, [r4]
 8005b32:	3301      	adds	r3, #1
 8005b34:	e7ae      	b.n	8005a94 <_svfprintf_r+0xddc>
 8005b36:	3408      	adds	r4, #8
 8005b38:	e7ba      	b.n	8005ab0 <_svfprintf_r+0xdf8>
 8005b3a:	3408      	adds	r4, #8
 8005b3c:	f7ff bbed 	b.w	800531a <_svfprintf_r+0x662>
 8005b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b44:	1a9d      	subs	r5, r3, r2
 8005b46:	2d00      	cmp	r5, #0
 8005b48:	f77f abea 	ble.w	8005320 <_svfprintf_r+0x668>
 8005b4c:	2610      	movs	r6, #16
 8005b4e:	4b41      	ldr	r3, [pc, #260]	; (8005c54 <_svfprintf_r+0xf9c>)
 8005b50:	6023      	str	r3, [r4, #0]
 8005b52:	2d10      	cmp	r5, #16
 8005b54:	dc1b      	bgt.n	8005b8e <_svfprintf_r+0xed6>
 8005b56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b58:	6065      	str	r5, [r4, #4]
 8005b5a:	441d      	add	r5, r3
 8005b5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005b5e:	9521      	str	r5, [sp, #132]	; 0x84
 8005b60:	3301      	adds	r3, #1
 8005b62:	2b07      	cmp	r3, #7
 8005b64:	9320      	str	r3, [sp, #128]	; 0x80
 8005b66:	f77f abdb 	ble.w	8005320 <_svfprintf_r+0x668>
 8005b6a:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b6c:	4651      	mov	r1, sl
 8005b6e:	4658      	mov	r0, fp
 8005b70:	f003 f863 	bl	8008c3a <__ssprint_r>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	f43f abd3 	beq.w	8005320 <_svfprintf_r+0x668>
 8005b7a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8005b7e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b84:	bf18      	it	ne
 8005b86:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8005b8a:	f7ff b8b9 	b.w	8004d00 <_svfprintf_r+0x48>
 8005b8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b90:	6066      	str	r6, [r4, #4]
 8005b92:	3310      	adds	r3, #16
 8005b94:	9321      	str	r3, [sp, #132]	; 0x84
 8005b96:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005b98:	3301      	adds	r3, #1
 8005b9a:	2b07      	cmp	r3, #7
 8005b9c:	9320      	str	r3, [sp, #128]	; 0x80
 8005b9e:	dc02      	bgt.n	8005ba6 <_svfprintf_r+0xeee>
 8005ba0:	3408      	adds	r4, #8
 8005ba2:	3d10      	subs	r5, #16
 8005ba4:	e7d3      	b.n	8005b4e <_svfprintf_r+0xe96>
 8005ba6:	aa1f      	add	r2, sp, #124	; 0x7c
 8005ba8:	4651      	mov	r1, sl
 8005baa:	4658      	mov	r0, fp
 8005bac:	f003 f845 	bl	8008c3a <__ssprint_r>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	d1e2      	bne.n	8005b7a <_svfprintf_r+0xec2>
 8005bb4:	ac2c      	add	r4, sp, #176	; 0xb0
 8005bb6:	e7f4      	b.n	8005ba2 <_svfprintf_r+0xeea>
 8005bb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d0dd      	beq.n	8005b7a <_svfprintf_r+0xec2>
 8005bbe:	aa1f      	add	r2, sp, #124	; 0x7c
 8005bc0:	4651      	mov	r1, sl
 8005bc2:	4658      	mov	r0, fp
 8005bc4:	f003 f839 	bl	8008c3a <__ssprint_r>
 8005bc8:	e7d7      	b.n	8005b7a <_svfprintf_r+0xec2>
 8005bca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005bce:	4610      	mov	r0, r2
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	f7fa ffaf 	bl	8000b34 <__aeabi_dcmpun>
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	f43f aa44 	beq.w	8005064 <_svfprintf_r+0x3ac>
 8005bdc:	4b1e      	ldr	r3, [pc, #120]	; (8005c58 <_svfprintf_r+0xfa0>)
 8005bde:	4a1f      	ldr	r2, [pc, #124]	; (8005c5c <_svfprintf_r+0xfa4>)
 8005be0:	f7ff ba34 	b.w	800504c <_svfprintf_r+0x394>
 8005be4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005be6:	eba3 0308 	sub.w	r3, r3, r8
 8005bea:	9303      	str	r3, [sp, #12]
 8005bec:	f7ff bab5 	b.w	800515a <_svfprintf_r+0x4a2>
 8005bf0:	ea56 0207 	orrs.w	r2, r6, r7
 8005bf4:	950b      	str	r5, [sp, #44]	; 0x2c
 8005bf6:	f43f ac2b 	beq.w	8005450 <_svfprintf_r+0x798>
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	f43f ac9d 	beq.w	800553a <_svfprintf_r+0x882>
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	f43f acbd 	beq.w	8005580 <_svfprintf_r+0x8c8>
 8005c06:	ab2c      	add	r3, sp, #176	; 0xb0
 8005c08:	08f1      	lsrs	r1, r6, #3
 8005c0a:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8005c0e:	08f8      	lsrs	r0, r7, #3
 8005c10:	f006 0207 	and.w	r2, r6, #7
 8005c14:	4607      	mov	r7, r0
 8005c16:	460e      	mov	r6, r1
 8005c18:	3230      	adds	r2, #48	; 0x30
 8005c1a:	ea56 0107 	orrs.w	r1, r6, r7
 8005c1e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8005c22:	f803 2c01 	strb.w	r2, [r3, #-1]
 8005c26:	f47f ac86 	bne.w	8005536 <_svfprintf_r+0x87e>
 8005c2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c2c:	07c9      	lsls	r1, r1, #31
 8005c2e:	d506      	bpl.n	8005c3e <_svfprintf_r+0xf86>
 8005c30:	2a30      	cmp	r2, #48	; 0x30
 8005c32:	d004      	beq.n	8005c3e <_svfprintf_r+0xf86>
 8005c34:	2230      	movs	r2, #48	; 0x30
 8005c36:	f808 2c01 	strb.w	r2, [r8, #-1]
 8005c3a:	f1a3 0802 	sub.w	r8, r3, #2
 8005c3e:	464e      	mov	r6, r9
 8005c40:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8005c44:	eba9 0908 	sub.w	r9, r9, r8
 8005c48:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005c4a:	2700      	movs	r7, #0
 8005c4c:	f7ff bad1 	b.w	80051f2 <_svfprintf_r+0x53a>
 8005c50:	08009c20 	.word	0x08009c20
 8005c54:	08009c10 	.word	0x08009c10
 8005c58:	08009be4 	.word	0x08009be4
 8005c5c:	08009be8 	.word	0x08009be8

08005c60 <__sprint_r>:
 8005c60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c64:	6893      	ldr	r3, [r2, #8]
 8005c66:	4680      	mov	r8, r0
 8005c68:	460f      	mov	r7, r1
 8005c6a:	4614      	mov	r4, r2
 8005c6c:	b91b      	cbnz	r3, 8005c76 <__sprint_r+0x16>
 8005c6e:	6053      	str	r3, [r2, #4]
 8005c70:	4618      	mov	r0, r3
 8005c72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c76:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8005c78:	049d      	lsls	r5, r3, #18
 8005c7a:	d523      	bpl.n	8005cc4 <__sprint_r+0x64>
 8005c7c:	6815      	ldr	r5, [r2, #0]
 8005c7e:	68a0      	ldr	r0, [r4, #8]
 8005c80:	3508      	adds	r5, #8
 8005c82:	b920      	cbnz	r0, 8005c8e <__sprint_r+0x2e>
 8005c84:	2300      	movs	r3, #0
 8005c86:	60a3      	str	r3, [r4, #8]
 8005c88:	6063      	str	r3, [r4, #4]
 8005c8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c8e:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8005c92:	f855 bc08 	ldr.w	fp, [r5, #-8]
 8005c96:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8005c9a:	f04f 0900 	mov.w	r9, #0
 8005c9e:	45ca      	cmp	sl, r9
 8005ca0:	dc05      	bgt.n	8005cae <__sprint_r+0x4e>
 8005ca2:	68a3      	ldr	r3, [r4, #8]
 8005ca4:	f026 0603 	bic.w	r6, r6, #3
 8005ca8:	1b9e      	subs	r6, r3, r6
 8005caa:	60a6      	str	r6, [r4, #8]
 8005cac:	e7e7      	b.n	8005c7e <__sprint_r+0x1e>
 8005cae:	463a      	mov	r2, r7
 8005cb0:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8005cb4:	4640      	mov	r0, r8
 8005cb6:	f001 fd58 	bl	800776a <_fputwc_r>
 8005cba:	1c43      	adds	r3, r0, #1
 8005cbc:	d0e2      	beq.n	8005c84 <__sprint_r+0x24>
 8005cbe:	f109 0901 	add.w	r9, r9, #1
 8005cc2:	e7ec      	b.n	8005c9e <__sprint_r+0x3e>
 8005cc4:	f001 fe8c 	bl	80079e0 <__sfvwrite_r>
 8005cc8:	e7dc      	b.n	8005c84 <__sprint_r+0x24>
	...

08005ccc <_vfiprintf_r>:
 8005ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd0:	460f      	mov	r7, r1
 8005cd2:	b0ab      	sub	sp, #172	; 0xac
 8005cd4:	4615      	mov	r5, r2
 8005cd6:	461e      	mov	r6, r3
 8005cd8:	461c      	mov	r4, r3
 8005cda:	4682      	mov	sl, r0
 8005cdc:	b118      	cbz	r0, 8005ce6 <_vfiprintf_r+0x1a>
 8005cde:	6983      	ldr	r3, [r0, #24]
 8005ce0:	b90b      	cbnz	r3, 8005ce6 <_vfiprintf_r+0x1a>
 8005ce2:	f001 fc81 	bl	80075e8 <__sinit>
 8005ce6:	4b95      	ldr	r3, [pc, #596]	; (8005f3c <_vfiprintf_r+0x270>)
 8005ce8:	429f      	cmp	r7, r3
 8005cea:	d12c      	bne.n	8005d46 <_vfiprintf_r+0x7a>
 8005cec:	f8da 7004 	ldr.w	r7, [sl, #4]
 8005cf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cf2:	07d8      	lsls	r0, r3, #31
 8005cf4:	d405      	bmi.n	8005d02 <_vfiprintf_r+0x36>
 8005cf6:	89bb      	ldrh	r3, [r7, #12]
 8005cf8:	0599      	lsls	r1, r3, #22
 8005cfa:	d402      	bmi.n	8005d02 <_vfiprintf_r+0x36>
 8005cfc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005cfe:	f001 fff9 	bl	8007cf4 <__retarget_lock_acquire_recursive>
 8005d02:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005d06:	049a      	lsls	r2, r3, #18
 8005d08:	d406      	bmi.n	8005d18 <_vfiprintf_r+0x4c>
 8005d0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d0e:	81bb      	strh	r3, [r7, #12]
 8005d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d16:	667b      	str	r3, [r7, #100]	; 0x64
 8005d18:	89bb      	ldrh	r3, [r7, #12]
 8005d1a:	071b      	lsls	r3, r3, #28
 8005d1c:	d501      	bpl.n	8005d22 <_vfiprintf_r+0x56>
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	b9eb      	cbnz	r3, 8005d5e <_vfiprintf_r+0x92>
 8005d22:	4639      	mov	r1, r7
 8005d24:	4650      	mov	r0, sl
 8005d26:	f000 fc67 	bl	80065f8 <__swsetup_r>
 8005d2a:	b1c0      	cbz	r0, 8005d5e <_vfiprintf_r+0x92>
 8005d2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d2e:	07d8      	lsls	r0, r3, #31
 8005d30:	d405      	bmi.n	8005d3e <_vfiprintf_r+0x72>
 8005d32:	89bb      	ldrh	r3, [r7, #12]
 8005d34:	0599      	lsls	r1, r3, #22
 8005d36:	d402      	bmi.n	8005d3e <_vfiprintf_r+0x72>
 8005d38:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005d3a:	f001 ffdc 	bl	8007cf6 <__retarget_lock_release_recursive>
 8005d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d42:	9303      	str	r3, [sp, #12]
 8005d44:	e023      	b.n	8005d8e <_vfiprintf_r+0xc2>
 8005d46:	4b7e      	ldr	r3, [pc, #504]	; (8005f40 <_vfiprintf_r+0x274>)
 8005d48:	429f      	cmp	r7, r3
 8005d4a:	d102      	bne.n	8005d52 <_vfiprintf_r+0x86>
 8005d4c:	f8da 7008 	ldr.w	r7, [sl, #8]
 8005d50:	e7ce      	b.n	8005cf0 <_vfiprintf_r+0x24>
 8005d52:	4b7c      	ldr	r3, [pc, #496]	; (8005f44 <_vfiprintf_r+0x278>)
 8005d54:	429f      	cmp	r7, r3
 8005d56:	bf08      	it	eq
 8005d58:	f8da 700c 	ldreq.w	r7, [sl, #12]
 8005d5c:	e7c8      	b.n	8005cf0 <_vfiprintf_r+0x24>
 8005d5e:	89bb      	ldrh	r3, [r7, #12]
 8005d60:	f003 021a 	and.w	r2, r3, #26
 8005d64:	2a0a      	cmp	r2, #10
 8005d66:	d116      	bne.n	8005d96 <_vfiprintf_r+0xca>
 8005d68:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005d6c:	2a00      	cmp	r2, #0
 8005d6e:	db12      	blt.n	8005d96 <_vfiprintf_r+0xca>
 8005d70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005d72:	07d2      	lsls	r2, r2, #31
 8005d74:	d404      	bmi.n	8005d80 <_vfiprintf_r+0xb4>
 8005d76:	059b      	lsls	r3, r3, #22
 8005d78:	d402      	bmi.n	8005d80 <_vfiprintf_r+0xb4>
 8005d7a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005d7c:	f001 ffbb 	bl	8007cf6 <__retarget_lock_release_recursive>
 8005d80:	4633      	mov	r3, r6
 8005d82:	462a      	mov	r2, r5
 8005d84:	4639      	mov	r1, r7
 8005d86:	4650      	mov	r0, sl
 8005d88:	f000 fbf6 	bl	8006578 <__sbprintf>
 8005d8c:	9003      	str	r0, [sp, #12]
 8005d8e:	9803      	ldr	r0, [sp, #12]
 8005d90:	b02b      	add	sp, #172	; 0xac
 8005d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d96:	2300      	movs	r3, #0
 8005d98:	ae1a      	add	r6, sp, #104	; 0x68
 8005d9a:	960d      	str	r6, [sp, #52]	; 0x34
 8005d9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d9e:	930e      	str	r3, [sp, #56]	; 0x38
 8005da0:	9502      	str	r5, [sp, #8]
 8005da2:	9306      	str	r3, [sp, #24]
 8005da4:	9303      	str	r3, [sp, #12]
 8005da6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005daa:	4645      	mov	r5, r8
 8005dac:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005db0:	b10b      	cbz	r3, 8005db6 <_vfiprintf_r+0xea>
 8005db2:	2b25      	cmp	r3, #37	; 0x25
 8005db4:	d146      	bne.n	8005e44 <_vfiprintf_r+0x178>
 8005db6:	9b02      	ldr	r3, [sp, #8]
 8005db8:	ebb8 0903 	subs.w	r9, r8, r3
 8005dbc:	d00d      	beq.n	8005dda <_vfiprintf_r+0x10e>
 8005dbe:	e886 0208 	stmia.w	r6, {r3, r9}
 8005dc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005dc4:	444b      	add	r3, r9
 8005dc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005dc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dca:	3301      	adds	r3, #1
 8005dcc:	2b07      	cmp	r3, #7
 8005dce:	930e      	str	r3, [sp, #56]	; 0x38
 8005dd0:	dc3a      	bgt.n	8005e48 <_vfiprintf_r+0x17c>
 8005dd2:	3608      	adds	r6, #8
 8005dd4:	9b03      	ldr	r3, [sp, #12]
 8005dd6:	444b      	add	r3, r9
 8005dd8:	9303      	str	r3, [sp, #12]
 8005dda:	f898 3000 	ldrb.w	r3, [r8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 8388 	beq.w	80064f4 <_vfiprintf_r+0x828>
 8005de4:	f04f 0300 	mov.w	r3, #0
 8005de8:	2200      	movs	r2, #0
 8005dea:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8005dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005df2:	4611      	mov	r1, r2
 8005df4:	9301      	str	r3, [sp, #4]
 8005df6:	9204      	str	r2, [sp, #16]
 8005df8:	4693      	mov	fp, r2
 8005dfa:	f04f 0e0a 	mov.w	lr, #10
 8005dfe:	1c6b      	adds	r3, r5, #1
 8005e00:	7828      	ldrb	r0, [r5, #0]
 8005e02:	9302      	str	r3, [sp, #8]
 8005e04:	2858      	cmp	r0, #88	; 0x58
 8005e06:	f000 8165 	beq.w	80060d4 <_vfiprintf_r+0x408>
 8005e0a:	dc49      	bgt.n	8005ea0 <_vfiprintf_r+0x1d4>
 8005e0c:	282e      	cmp	r0, #46	; 0x2e
 8005e0e:	f000 8193 	beq.w	8006138 <_vfiprintf_r+0x46c>
 8005e12:	dc2d      	bgt.n	8005e70 <_vfiprintf_r+0x1a4>
 8005e14:	282a      	cmp	r0, #42	; 0x2a
 8005e16:	f000 8184 	beq.w	8006122 <_vfiprintf_r+0x456>
 8005e1a:	dc21      	bgt.n	8005e60 <_vfiprintf_r+0x194>
 8005e1c:	2820      	cmp	r0, #32
 8005e1e:	f000 8178 	beq.w	8006112 <_vfiprintf_r+0x446>
 8005e22:	2823      	cmp	r0, #35	; 0x23
 8005e24:	f000 817a 	beq.w	800611c <_vfiprintf_r+0x450>
 8005e28:	b10a      	cbz	r2, 8005e2e <_vfiprintf_r+0x162>
 8005e2a:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	f000 8360 	beq.w	80064f4 <_vfiprintf_r+0x828>
 8005e34:	f04f 0300 	mov.w	r3, #0
 8005e38:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
 8005e3c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8005e40:	46a0      	mov	r8, r4
 8005e42:	e1b6      	b.n	80061b2 <_vfiprintf_r+0x4e6>
 8005e44:	46a8      	mov	r8, r5
 8005e46:	e7b0      	b.n	8005daa <_vfiprintf_r+0xde>
 8005e48:	aa0d      	add	r2, sp, #52	; 0x34
 8005e4a:	4639      	mov	r1, r7
 8005e4c:	4650      	mov	r0, sl
 8005e4e:	f7ff ff07 	bl	8005c60 <__sprint_r>
 8005e52:	2800      	cmp	r0, #0
 8005e54:	f040 832d 	bne.w	80064b2 <_vfiprintf_r+0x7e6>
 8005e58:	ae1a      	add	r6, sp, #104	; 0x68
 8005e5a:	e7bb      	b.n	8005dd4 <_vfiprintf_r+0x108>
 8005e5c:	4604      	mov	r4, r0
 8005e5e:	e15b      	b.n	8006118 <_vfiprintf_r+0x44c>
 8005e60:	282b      	cmp	r0, #43	; 0x2b
 8005e62:	f000 8157 	beq.w	8006114 <_vfiprintf_r+0x448>
 8005e66:	282d      	cmp	r0, #45	; 0x2d
 8005e68:	d1de      	bne.n	8005e28 <_vfiprintf_r+0x15c>
 8005e6a:	f04b 0b04 	orr.w	fp, fp, #4
 8005e6e:	e153      	b.n	8006118 <_vfiprintf_r+0x44c>
 8005e70:	2839      	cmp	r0, #57	; 0x39
 8005e72:	dc07      	bgt.n	8005e84 <_vfiprintf_r+0x1b8>
 8005e74:	2831      	cmp	r0, #49	; 0x31
 8005e76:	f280 817d 	bge.w	8006174 <_vfiprintf_r+0x4a8>
 8005e7a:	2830      	cmp	r0, #48	; 0x30
 8005e7c:	d1d4      	bne.n	8005e28 <_vfiprintf_r+0x15c>
 8005e7e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8005e82:	e149      	b.n	8006118 <_vfiprintf_r+0x44c>
 8005e84:	284f      	cmp	r0, #79	; 0x4f
 8005e86:	f000 81c8 	beq.w	800621a <_vfiprintf_r+0x54e>
 8005e8a:	2855      	cmp	r0, #85	; 0x55
 8005e8c:	f000 8205 	beq.w	800629a <_vfiprintf_r+0x5ce>
 8005e90:	2844      	cmp	r0, #68	; 0x44
 8005e92:	d1c9      	bne.n	8005e28 <_vfiprintf_r+0x15c>
 8005e94:	b10a      	cbz	r2, 8005e9a <_vfiprintf_r+0x1ce>
 8005e96:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8005e9a:	f04b 0b10 	orr.w	fp, fp, #16
 8005e9e:	e00f      	b.n	8005ec0 <_vfiprintf_r+0x1f4>
 8005ea0:	286e      	cmp	r0, #110	; 0x6e
 8005ea2:	f000 819a 	beq.w	80061da <_vfiprintf_r+0x50e>
 8005ea6:	dc31      	bgt.n	8005f0c <_vfiprintf_r+0x240>
 8005ea8:	2868      	cmp	r0, #104	; 0x68
 8005eaa:	f000 8173 	beq.w	8006194 <_vfiprintf_r+0x4c8>
 8005eae:	dc1f      	bgt.n	8005ef0 <_vfiprintf_r+0x224>
 8005eb0:	2863      	cmp	r0, #99	; 0x63
 8005eb2:	f000 8175 	beq.w	80061a0 <_vfiprintf_r+0x4d4>
 8005eb6:	2864      	cmp	r0, #100	; 0x64
 8005eb8:	d1b6      	bne.n	8005e28 <_vfiprintf_r+0x15c>
 8005eba:	b10a      	cbz	r2, 8005ec0 <_vfiprintf_r+0x1f4>
 8005ebc:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8005ec0:	f01b 0f20 	tst.w	fp, #32
 8005ec4:	f000 817b 	beq.w	80061be <_vfiprintf_r+0x4f2>
 8005ec8:	3407      	adds	r4, #7
 8005eca:	f024 0407 	bic.w	r4, r4, #7
 8005ece:	f104 0808 	add.w	r8, r4, #8
 8005ed2:	e9d4 4500 	ldrd	r4, r5, [r4]
 8005ed6:	2c00      	cmp	r4, #0
 8005ed8:	f175 0300 	sbcs.w	r3, r5, #0
 8005edc:	da06      	bge.n	8005eec <_vfiprintf_r+0x220>
 8005ede:	4264      	negs	r4, r4
 8005ee0:	f04f 022d 	mov.w	r2, #45	; 0x2d
 8005ee4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8005ee8:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 8005eec:	2201      	movs	r2, #1
 8005eee:	e1a5      	b.n	800623c <_vfiprintf_r+0x570>
 8005ef0:	2869      	cmp	r0, #105	; 0x69
 8005ef2:	d0e2      	beq.n	8005eba <_vfiprintf_r+0x1ee>
 8005ef4:	286c      	cmp	r0, #108	; 0x6c
 8005ef6:	d197      	bne.n	8005e28 <_vfiprintf_r+0x15c>
 8005ef8:	9b02      	ldr	r3, [sp, #8]
 8005efa:	7818      	ldrb	r0, [r3, #0]
 8005efc:	286c      	cmp	r0, #108	; 0x6c
 8005efe:	f040 814c 	bne.w	800619a <_vfiprintf_r+0x4ce>
 8005f02:	3301      	adds	r3, #1
 8005f04:	9302      	str	r3, [sp, #8]
 8005f06:	f04b 0b20 	orr.w	fp, fp, #32
 8005f0a:	e105      	b.n	8006118 <_vfiprintf_r+0x44c>
 8005f0c:	2871      	cmp	r0, #113	; 0x71
 8005f0e:	d0fa      	beq.n	8005f06 <_vfiprintf_r+0x23a>
 8005f10:	dc1c      	bgt.n	8005f4c <_vfiprintf_r+0x280>
 8005f12:	286f      	cmp	r0, #111	; 0x6f
 8005f14:	f000 8183 	beq.w	800621e <_vfiprintf_r+0x552>
 8005f18:	2870      	cmp	r0, #112	; 0x70
 8005f1a:	d185      	bne.n	8005e28 <_vfiprintf_r+0x15c>
 8005f1c:	2230      	movs	r2, #48	; 0x30
 8005f1e:	f104 0804 	add.w	r8, r4, #4
 8005f22:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 8005f26:	4b08      	ldr	r3, [pc, #32]	; (8005f48 <_vfiprintf_r+0x27c>)
 8005f28:	6824      	ldr	r4, [r4, #0]
 8005f2a:	9306      	str	r3, [sp, #24]
 8005f2c:	2278      	movs	r2, #120	; 0x78
 8005f2e:	2500      	movs	r5, #0
 8005f30:	f04b 0b02 	orr.w	fp, fp, #2
 8005f34:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 8005f38:	2202      	movs	r2, #2
 8005f3a:	e17b      	b.n	8006234 <_vfiprintf_r+0x568>
 8005f3c:	08009c80 	.word	0x08009c80
 8005f40:	08009ca0 	.word	0x08009ca0
 8005f44:	08009c60 	.word	0x08009c60
 8005f48:	08009bfd 	.word	0x08009bfd
 8005f4c:	2875      	cmp	r0, #117	; 0x75
 8005f4e:	f000 81a6 	beq.w	800629e <_vfiprintf_r+0x5d2>
 8005f52:	2878      	cmp	r0, #120	; 0x78
 8005f54:	f000 81bc 	beq.w	80062d0 <_vfiprintf_r+0x604>
 8005f58:	2873      	cmp	r0, #115	; 0x73
 8005f5a:	f47f af65 	bne.w	8005e28 <_vfiprintf_r+0x15c>
 8005f5e:	f04f 0300 	mov.w	r3, #0
 8005f62:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8005f66:	9b01      	ldr	r3, [sp, #4]
 8005f68:	f8d4 9000 	ldr.w	r9, [r4]
 8005f6c:	f104 0804 	add.w	r8, r4, #4
 8005f70:	1c5c      	adds	r4, r3, #1
 8005f72:	f000 818d 	beq.w	8006290 <_vfiprintf_r+0x5c4>
 8005f76:	461a      	mov	r2, r3
 8005f78:	2100      	movs	r1, #0
 8005f7a:	4648      	mov	r0, r9
 8005f7c:	f7fa f930 	bl	80001e0 <memchr>
 8005f80:	2800      	cmp	r0, #0
 8005f82:	f000 81fb 	beq.w	800637c <_vfiprintf_r+0x6b0>
 8005f86:	eba0 0309 	sub.w	r3, r0, r9
 8005f8a:	9301      	str	r3, [sp, #4]
 8005f8c:	2500      	movs	r5, #0
 8005f8e:	9b01      	ldr	r3, [sp, #4]
 8005f90:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8005f94:	42ab      	cmp	r3, r5
 8005f96:	bfb8      	it	lt
 8005f98:	462b      	movlt	r3, r5
 8005f9a:	9305      	str	r3, [sp, #20]
 8005f9c:	b10a      	cbz	r2, 8005fa2 <_vfiprintf_r+0x2d6>
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	9305      	str	r3, [sp, #20]
 8005fa2:	f01b 0302 	ands.w	r3, fp, #2
 8005fa6:	9307      	str	r3, [sp, #28]
 8005fa8:	bf1e      	ittt	ne
 8005faa:	9b05      	ldrne	r3, [sp, #20]
 8005fac:	3302      	addne	r3, #2
 8005fae:	9305      	strne	r3, [sp, #20]
 8005fb0:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8005fb4:	9308      	str	r3, [sp, #32]
 8005fb6:	d114      	bne.n	8005fe2 <_vfiprintf_r+0x316>
 8005fb8:	9b04      	ldr	r3, [sp, #16]
 8005fba:	9a05      	ldr	r2, [sp, #20]
 8005fbc:	1a9c      	subs	r4, r3, r2
 8005fbe:	2c00      	cmp	r4, #0
 8005fc0:	dd0f      	ble.n	8005fe2 <_vfiprintf_r+0x316>
 8005fc2:	4bad      	ldr	r3, [pc, #692]	; (8006278 <_vfiprintf_r+0x5ac>)
 8005fc4:	6033      	str	r3, [r6, #0]
 8005fc6:	2c10      	cmp	r4, #16
 8005fc8:	f300 81da 	bgt.w	8006380 <_vfiprintf_r+0x6b4>
 8005fcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005fce:	6074      	str	r4, [r6, #4]
 8005fd0:	4414      	add	r4, r2
 8005fd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fd4:	940f      	str	r4, [sp, #60]	; 0x3c
 8005fd6:	3201      	adds	r2, #1
 8005fd8:	2a07      	cmp	r2, #7
 8005fda:	920e      	str	r2, [sp, #56]	; 0x38
 8005fdc:	f300 81e9 	bgt.w	80063b2 <_vfiprintf_r+0x6e6>
 8005fe0:	3608      	adds	r6, #8
 8005fe2:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8005fe6:	b172      	cbz	r2, 8006006 <_vfiprintf_r+0x33a>
 8005fe8:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
 8005fec:	6032      	str	r2, [r6, #0]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	6072      	str	r2, [r6, #4]
 8005ff2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ff4:	3201      	adds	r2, #1
 8005ff6:	920f      	str	r2, [sp, #60]	; 0x3c
 8005ff8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ffa:	3201      	adds	r2, #1
 8005ffc:	2a07      	cmp	r2, #7
 8005ffe:	920e      	str	r2, [sp, #56]	; 0x38
 8006000:	f300 81e0 	bgt.w	80063c4 <_vfiprintf_r+0x6f8>
 8006004:	3608      	adds	r6, #8
 8006006:	9b07      	ldr	r3, [sp, #28]
 8006008:	b16b      	cbz	r3, 8006026 <_vfiprintf_r+0x35a>
 800600a:	aa0c      	add	r2, sp, #48	; 0x30
 800600c:	6032      	str	r2, [r6, #0]
 800600e:	2202      	movs	r2, #2
 8006010:	6072      	str	r2, [r6, #4]
 8006012:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006014:	3202      	adds	r2, #2
 8006016:	920f      	str	r2, [sp, #60]	; 0x3c
 8006018:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800601a:	3201      	adds	r2, #1
 800601c:	2a07      	cmp	r2, #7
 800601e:	920e      	str	r2, [sp, #56]	; 0x38
 8006020:	f300 81d9 	bgt.w	80063d6 <_vfiprintf_r+0x70a>
 8006024:	3608      	adds	r6, #8
 8006026:	9b08      	ldr	r3, [sp, #32]
 8006028:	2b80      	cmp	r3, #128	; 0x80
 800602a:	d114      	bne.n	8006056 <_vfiprintf_r+0x38a>
 800602c:	9b04      	ldr	r3, [sp, #16]
 800602e:	9a05      	ldr	r2, [sp, #20]
 8006030:	1a9c      	subs	r4, r3, r2
 8006032:	2c00      	cmp	r4, #0
 8006034:	dd0f      	ble.n	8006056 <_vfiprintf_r+0x38a>
 8006036:	4b91      	ldr	r3, [pc, #580]	; (800627c <_vfiprintf_r+0x5b0>)
 8006038:	6033      	str	r3, [r6, #0]
 800603a:	2c10      	cmp	r4, #16
 800603c:	f300 81d4 	bgt.w	80063e8 <_vfiprintf_r+0x71c>
 8006040:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006042:	6074      	str	r4, [r6, #4]
 8006044:	4414      	add	r4, r2
 8006046:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006048:	940f      	str	r4, [sp, #60]	; 0x3c
 800604a:	3201      	adds	r2, #1
 800604c:	2a07      	cmp	r2, #7
 800604e:	920e      	str	r2, [sp, #56]	; 0x38
 8006050:	f300 81e2 	bgt.w	8006418 <_vfiprintf_r+0x74c>
 8006054:	3608      	adds	r6, #8
 8006056:	9b01      	ldr	r3, [sp, #4]
 8006058:	1aec      	subs	r4, r5, r3
 800605a:	2c00      	cmp	r4, #0
 800605c:	dd10      	ble.n	8006080 <_vfiprintf_r+0x3b4>
 800605e:	4d87      	ldr	r5, [pc, #540]	; (800627c <_vfiprintf_r+0x5b0>)
 8006060:	2310      	movs	r3, #16
 8006062:	2c10      	cmp	r4, #16
 8006064:	6035      	str	r5, [r6, #0]
 8006066:	f300 81e0 	bgt.w	800642a <_vfiprintf_r+0x75e>
 800606a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800606c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800606e:	6074      	str	r4, [r6, #4]
 8006070:	3201      	adds	r2, #1
 8006072:	4404      	add	r4, r0
 8006074:	2a07      	cmp	r2, #7
 8006076:	940f      	str	r4, [sp, #60]	; 0x3c
 8006078:	920e      	str	r2, [sp, #56]	; 0x38
 800607a:	f300 81ed 	bgt.w	8006458 <_vfiprintf_r+0x78c>
 800607e:	3608      	adds	r6, #8
 8006080:	9b01      	ldr	r3, [sp, #4]
 8006082:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006084:	f8c6 9000 	str.w	r9, [r6]
 8006088:	441a      	add	r2, r3
 800608a:	920f      	str	r2, [sp, #60]	; 0x3c
 800608c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800608e:	6073      	str	r3, [r6, #4]
 8006090:	3201      	adds	r2, #1
 8006092:	2a07      	cmp	r2, #7
 8006094:	920e      	str	r2, [sp, #56]	; 0x38
 8006096:	f300 81e7 	bgt.w	8006468 <_vfiprintf_r+0x79c>
 800609a:	f106 0208 	add.w	r2, r6, #8
 800609e:	f01b 0f04 	tst.w	fp, #4
 80060a2:	f040 81e9 	bne.w	8006478 <_vfiprintf_r+0x7ac>
 80060a6:	9b03      	ldr	r3, [sp, #12]
 80060a8:	9a04      	ldr	r2, [sp, #16]
 80060aa:	9905      	ldr	r1, [sp, #20]
 80060ac:	428a      	cmp	r2, r1
 80060ae:	bfac      	ite	ge
 80060b0:	189b      	addge	r3, r3, r2
 80060b2:	185b      	addlt	r3, r3, r1
 80060b4:	9303      	str	r3, [sp, #12]
 80060b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060b8:	b13b      	cbz	r3, 80060ca <_vfiprintf_r+0x3fe>
 80060ba:	aa0d      	add	r2, sp, #52	; 0x34
 80060bc:	4639      	mov	r1, r7
 80060be:	4650      	mov	r0, sl
 80060c0:	f7ff fdce 	bl	8005c60 <__sprint_r>
 80060c4:	2800      	cmp	r0, #0
 80060c6:	f040 81f4 	bne.w	80064b2 <_vfiprintf_r+0x7e6>
 80060ca:	2300      	movs	r3, #0
 80060cc:	930e      	str	r3, [sp, #56]	; 0x38
 80060ce:	4644      	mov	r4, r8
 80060d0:	ae1a      	add	r6, sp, #104	; 0x68
 80060d2:	e668      	b.n	8005da6 <_vfiprintf_r+0xda>
 80060d4:	b10a      	cbz	r2, 80060da <_vfiprintf_r+0x40e>
 80060d6:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 80060da:	4b69      	ldr	r3, [pc, #420]	; (8006280 <_vfiprintf_r+0x5b4>)
 80060dc:	9306      	str	r3, [sp, #24]
 80060de:	f01b 0f20 	tst.w	fp, #32
 80060e2:	f000 80fa 	beq.w	80062da <_vfiprintf_r+0x60e>
 80060e6:	3407      	adds	r4, #7
 80060e8:	f024 0407 	bic.w	r4, r4, #7
 80060ec:	f104 0808 	add.w	r8, r4, #8
 80060f0:	e9d4 4500 	ldrd	r4, r5, [r4]
 80060f4:	f01b 0f01 	tst.w	fp, #1
 80060f8:	f43f af1e 	beq.w	8005f38 <_vfiprintf_r+0x26c>
 80060fc:	ea54 0305 	orrs.w	r3, r4, r5
 8006100:	bf1f      	itttt	ne
 8006102:	2230      	movne	r2, #48	; 0x30
 8006104:	f88d 2030 	strbne.w	r2, [sp, #48]	; 0x30
 8006108:	f88d 0031 	strbne.w	r0, [sp, #49]	; 0x31
 800610c:	f04b 0b02 	orrne.w	fp, fp, #2
 8006110:	e712      	b.n	8005f38 <_vfiprintf_r+0x26c>
 8006112:	b909      	cbnz	r1, 8006118 <_vfiprintf_r+0x44c>
 8006114:	2201      	movs	r2, #1
 8006116:	4601      	mov	r1, r0
 8006118:	9d02      	ldr	r5, [sp, #8]
 800611a:	e670      	b.n	8005dfe <_vfiprintf_r+0x132>
 800611c:	f04b 0b01 	orr.w	fp, fp, #1
 8006120:	e7fa      	b.n	8006118 <_vfiprintf_r+0x44c>
 8006122:	6823      	ldr	r3, [r4, #0]
 8006124:	9304      	str	r3, [sp, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	f104 0004 	add.w	r0, r4, #4
 800612c:	f6bf ae96 	bge.w	8005e5c <_vfiprintf_r+0x190>
 8006130:	425b      	negs	r3, r3
 8006132:	9304      	str	r3, [sp, #16]
 8006134:	4604      	mov	r4, r0
 8006136:	e698      	b.n	8005e6a <_vfiprintf_r+0x19e>
 8006138:	9b02      	ldr	r3, [sp, #8]
 800613a:	7818      	ldrb	r0, [r3, #0]
 800613c:	282a      	cmp	r0, #42	; 0x2a
 800613e:	f103 0501 	add.w	r5, r3, #1
 8006142:	d010      	beq.n	8006166 <_vfiprintf_r+0x49a>
 8006144:	2300      	movs	r3, #0
 8006146:	9301      	str	r3, [sp, #4]
 8006148:	9502      	str	r5, [sp, #8]
 800614a:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
 800614e:	2d09      	cmp	r5, #9
 8006150:	f63f ae58 	bhi.w	8005e04 <_vfiprintf_r+0x138>
 8006154:	9b01      	ldr	r3, [sp, #4]
 8006156:	fb0e 5303 	mla	r3, lr, r3, r5
 800615a:	9301      	str	r3, [sp, #4]
 800615c:	9b02      	ldr	r3, [sp, #8]
 800615e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006162:	9302      	str	r3, [sp, #8]
 8006164:	e7f1      	b.n	800614a <_vfiprintf_r+0x47e>
 8006166:	6820      	ldr	r0, [r4, #0]
 8006168:	9502      	str	r5, [sp, #8]
 800616a:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800616e:	9301      	str	r3, [sp, #4]
 8006170:	3404      	adds	r4, #4
 8006172:	e7d1      	b.n	8006118 <_vfiprintf_r+0x44c>
 8006174:	2300      	movs	r3, #0
 8006176:	9304      	str	r3, [sp, #16]
 8006178:	9b04      	ldr	r3, [sp, #16]
 800617a:	3830      	subs	r0, #48	; 0x30
 800617c:	fb0e 0303 	mla	r3, lr, r3, r0
 8006180:	9304      	str	r3, [sp, #16]
 8006182:	9b02      	ldr	r3, [sp, #8]
 8006184:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006188:	9302      	str	r3, [sp, #8]
 800618a:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
 800618e:	2d09      	cmp	r5, #9
 8006190:	d9f2      	bls.n	8006178 <_vfiprintf_r+0x4ac>
 8006192:	e637      	b.n	8005e04 <_vfiprintf_r+0x138>
 8006194:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 8006198:	e7be      	b.n	8006118 <_vfiprintf_r+0x44c>
 800619a:	f04b 0b10 	orr.w	fp, fp, #16
 800619e:	e7bb      	b.n	8006118 <_vfiprintf_r+0x44c>
 80061a0:	6822      	ldr	r2, [r4, #0]
 80061a2:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
 80061a6:	f04f 0300 	mov.w	r3, #0
 80061aa:	f104 0804 	add.w	r8, r4, #4
 80061ae:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 80061b2:	2301      	movs	r3, #1
 80061b4:	9301      	str	r3, [sp, #4]
 80061b6:	2500      	movs	r5, #0
 80061b8:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 80061bc:	e6e7      	b.n	8005f8e <_vfiprintf_r+0x2c2>
 80061be:	f01b 0f10 	tst.w	fp, #16
 80061c2:	f104 0804 	add.w	r8, r4, #4
 80061c6:	d002      	beq.n	80061ce <_vfiprintf_r+0x502>
 80061c8:	6824      	ldr	r4, [r4, #0]
 80061ca:	17e5      	asrs	r5, r4, #31
 80061cc:	e683      	b.n	8005ed6 <_vfiprintf_r+0x20a>
 80061ce:	6824      	ldr	r4, [r4, #0]
 80061d0:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80061d4:	bf18      	it	ne
 80061d6:	b224      	sxthne	r4, r4
 80061d8:	e7f7      	b.n	80061ca <_vfiprintf_r+0x4fe>
 80061da:	b10a      	cbz	r2, 80061e0 <_vfiprintf_r+0x514>
 80061dc:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 80061e0:	f01b 0f20 	tst.w	fp, #32
 80061e4:	f104 0204 	add.w	r2, r4, #4
 80061e8:	d008      	beq.n	80061fc <_vfiprintf_r+0x530>
 80061ea:	9903      	ldr	r1, [sp, #12]
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	17cd      	asrs	r5, r1, #31
 80061f0:	4608      	mov	r0, r1
 80061f2:	4629      	mov	r1, r5
 80061f4:	e9c3 0100 	strd	r0, r1, [r3]
 80061f8:	4614      	mov	r4, r2
 80061fa:	e5d4      	b.n	8005da6 <_vfiprintf_r+0xda>
 80061fc:	f01b 0f10 	tst.w	fp, #16
 8006200:	d003      	beq.n	800620a <_vfiprintf_r+0x53e>
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	9903      	ldr	r1, [sp, #12]
 8006206:	6019      	str	r1, [r3, #0]
 8006208:	e7f6      	b.n	80061f8 <_vfiprintf_r+0x52c>
 800620a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800620e:	d0f8      	beq.n	8006202 <_vfiprintf_r+0x536>
 8006210:	6823      	ldr	r3, [r4, #0]
 8006212:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8006216:	8019      	strh	r1, [r3, #0]
 8006218:	e7ee      	b.n	80061f8 <_vfiprintf_r+0x52c>
 800621a:	f04b 0b10 	orr.w	fp, fp, #16
 800621e:	f01b 0220 	ands.w	r2, fp, #32
 8006222:	d021      	beq.n	8006268 <_vfiprintf_r+0x59c>
 8006224:	3407      	adds	r4, #7
 8006226:	f024 0407 	bic.w	r4, r4, #7
 800622a:	f104 0808 	add.w	r8, r4, #8
 800622e:	e9d4 4500 	ldrd	r4, r5, [r4]
 8006232:	2200      	movs	r2, #0
 8006234:	f04f 0300 	mov.w	r3, #0
 8006238:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 800623c:	9b01      	ldr	r3, [sp, #4]
 800623e:	3301      	adds	r3, #1
 8006240:	f000 8165 	beq.w	800650e <_vfiprintf_r+0x842>
 8006244:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
 8006248:	9305      	str	r3, [sp, #20]
 800624a:	ea54 0305 	orrs.w	r3, r4, r5
 800624e:	f040 8164 	bne.w	800651a <_vfiprintf_r+0x84e>
 8006252:	9b01      	ldr	r3, [sp, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 8084 	beq.w	8006362 <_vfiprintf_r+0x696>
 800625a:	2a01      	cmp	r2, #1
 800625c:	d050      	beq.n	8006300 <_vfiprintf_r+0x634>
 800625e:	2a02      	cmp	r2, #2
 8006260:	d06b      	beq.n	800633a <_vfiprintf_r+0x66e>
 8006262:	2400      	movs	r4, #0
 8006264:	2500      	movs	r5, #0
 8006266:	e15e      	b.n	8006526 <_vfiprintf_r+0x85a>
 8006268:	f01b 0110 	ands.w	r1, fp, #16
 800626c:	f104 0804 	add.w	r8, r4, #4
 8006270:	d008      	beq.n	8006284 <_vfiprintf_r+0x5b8>
 8006272:	6824      	ldr	r4, [r4, #0]
 8006274:	2500      	movs	r5, #0
 8006276:	e7dd      	b.n	8006234 <_vfiprintf_r+0x568>
 8006278:	08009c30 	.word	0x08009c30
 800627c:	08009c40 	.word	0x08009c40
 8006280:	08009bec 	.word	0x08009bec
 8006284:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
 8006288:	d0f3      	beq.n	8006272 <_vfiprintf_r+0x5a6>
 800628a:	8824      	ldrh	r4, [r4, #0]
 800628c:	2500      	movs	r5, #0
 800628e:	e7d0      	b.n	8006232 <_vfiprintf_r+0x566>
 8006290:	4648      	mov	r0, r9
 8006292:	f7f9 fff5 	bl	8000280 <strlen>
 8006296:	9001      	str	r0, [sp, #4]
 8006298:	e678      	b.n	8005f8c <_vfiprintf_r+0x2c0>
 800629a:	f04b 0b10 	orr.w	fp, fp, #16
 800629e:	f01b 0f20 	tst.w	fp, #32
 80062a2:	d008      	beq.n	80062b6 <_vfiprintf_r+0x5ea>
 80062a4:	3407      	adds	r4, #7
 80062a6:	f024 0407 	bic.w	r4, r4, #7
 80062aa:	f104 0808 	add.w	r8, r4, #8
 80062ae:	e9d4 4500 	ldrd	r4, r5, [r4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	e7be      	b.n	8006234 <_vfiprintf_r+0x568>
 80062b6:	f01b 0f10 	tst.w	fp, #16
 80062ba:	f104 0804 	add.w	r8, r4, #4
 80062be:	d001      	beq.n	80062c4 <_vfiprintf_r+0x5f8>
 80062c0:	6824      	ldr	r4, [r4, #0]
 80062c2:	e003      	b.n	80062cc <_vfiprintf_r+0x600>
 80062c4:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80062c8:	d0fa      	beq.n	80062c0 <_vfiprintf_r+0x5f4>
 80062ca:	8824      	ldrh	r4, [r4, #0]
 80062cc:	2500      	movs	r5, #0
 80062ce:	e7f0      	b.n	80062b2 <_vfiprintf_r+0x5e6>
 80062d0:	b10a      	cbz	r2, 80062d6 <_vfiprintf_r+0x60a>
 80062d2:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 80062d6:	4ba6      	ldr	r3, [pc, #664]	; (8006570 <_vfiprintf_r+0x8a4>)
 80062d8:	e700      	b.n	80060dc <_vfiprintf_r+0x410>
 80062da:	f01b 0f10 	tst.w	fp, #16
 80062de:	f104 0804 	add.w	r8, r4, #4
 80062e2:	d001      	beq.n	80062e8 <_vfiprintf_r+0x61c>
 80062e4:	6824      	ldr	r4, [r4, #0]
 80062e6:	e003      	b.n	80062f0 <_vfiprintf_r+0x624>
 80062e8:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80062ec:	d0fa      	beq.n	80062e4 <_vfiprintf_r+0x618>
 80062ee:	8824      	ldrh	r4, [r4, #0]
 80062f0:	2500      	movs	r5, #0
 80062f2:	e6ff      	b.n	80060f4 <_vfiprintf_r+0x428>
 80062f4:	464b      	mov	r3, r9
 80062f6:	e117      	b.n	8006528 <_vfiprintf_r+0x85c>
 80062f8:	2d00      	cmp	r5, #0
 80062fa:	bf08      	it	eq
 80062fc:	2c0a      	cmpeq	r4, #10
 80062fe:	d205      	bcs.n	800630c <_vfiprintf_r+0x640>
 8006300:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 8006304:	3430      	adds	r4, #48	; 0x30
 8006306:	f809 4d41 	strb.w	r4, [r9, #-65]!
 800630a:	e128      	b.n	800655e <_vfiprintf_r+0x892>
 800630c:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8006310:	4620      	mov	r0, r4
 8006312:	4629      	mov	r1, r5
 8006314:	220a      	movs	r2, #10
 8006316:	2300      	movs	r3, #0
 8006318:	f7fa fcba 	bl	8000c90 <__aeabi_uldivmod>
 800631c:	3230      	adds	r2, #48	; 0x30
 800631e:	f809 2d01 	strb.w	r2, [r9, #-1]!
 8006322:	2300      	movs	r3, #0
 8006324:	4620      	mov	r0, r4
 8006326:	4629      	mov	r1, r5
 8006328:	220a      	movs	r2, #10
 800632a:	f7fa fcb1 	bl	8000c90 <__aeabi_uldivmod>
 800632e:	4604      	mov	r4, r0
 8006330:	460d      	mov	r5, r1
 8006332:	ea54 0305 	orrs.w	r3, r4, r5
 8006336:	d1eb      	bne.n	8006310 <_vfiprintf_r+0x644>
 8006338:	e111      	b.n	800655e <_vfiprintf_r+0x892>
 800633a:	2400      	movs	r4, #0
 800633c:	2500      	movs	r5, #0
 800633e:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8006342:	f004 030f 	and.w	r3, r4, #15
 8006346:	9a06      	ldr	r2, [sp, #24]
 8006348:	5cd3      	ldrb	r3, [r2, r3]
 800634a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800634e:	0923      	lsrs	r3, r4, #4
 8006350:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8006354:	092a      	lsrs	r2, r5, #4
 8006356:	461c      	mov	r4, r3
 8006358:	4615      	mov	r5, r2
 800635a:	ea54 0305 	orrs.w	r3, r4, r5
 800635e:	d1f0      	bne.n	8006342 <_vfiprintf_r+0x676>
 8006360:	e0fd      	b.n	800655e <_vfiprintf_r+0x892>
 8006362:	b942      	cbnz	r2, 8006376 <_vfiprintf_r+0x6aa>
 8006364:	f01b 0f01 	tst.w	fp, #1
 8006368:	d005      	beq.n	8006376 <_vfiprintf_r+0x6aa>
 800636a:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 800636e:	2330      	movs	r3, #48	; 0x30
 8006370:	f809 3d41 	strb.w	r3, [r9, #-65]!
 8006374:	e0f3      	b.n	800655e <_vfiprintf_r+0x892>
 8006376:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 800637a:	e0f0      	b.n	800655e <_vfiprintf_r+0x892>
 800637c:	4605      	mov	r5, r0
 800637e:	e606      	b.n	8005f8e <_vfiprintf_r+0x2c2>
 8006380:	2210      	movs	r2, #16
 8006382:	6072      	str	r2, [r6, #4]
 8006384:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006386:	3210      	adds	r2, #16
 8006388:	920f      	str	r2, [sp, #60]	; 0x3c
 800638a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800638c:	3201      	adds	r2, #1
 800638e:	2a07      	cmp	r2, #7
 8006390:	920e      	str	r2, [sp, #56]	; 0x38
 8006392:	dc02      	bgt.n	800639a <_vfiprintf_r+0x6ce>
 8006394:	3608      	adds	r6, #8
 8006396:	3c10      	subs	r4, #16
 8006398:	e614      	b.n	8005fc4 <_vfiprintf_r+0x2f8>
 800639a:	aa0d      	add	r2, sp, #52	; 0x34
 800639c:	4639      	mov	r1, r7
 800639e:	4650      	mov	r0, sl
 80063a0:	9309      	str	r3, [sp, #36]	; 0x24
 80063a2:	f7ff fc5d 	bl	8005c60 <__sprint_r>
 80063a6:	2800      	cmp	r0, #0
 80063a8:	f040 8083 	bne.w	80064b2 <_vfiprintf_r+0x7e6>
 80063ac:	ae1a      	add	r6, sp, #104	; 0x68
 80063ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b0:	e7f1      	b.n	8006396 <_vfiprintf_r+0x6ca>
 80063b2:	aa0d      	add	r2, sp, #52	; 0x34
 80063b4:	4639      	mov	r1, r7
 80063b6:	4650      	mov	r0, sl
 80063b8:	f7ff fc52 	bl	8005c60 <__sprint_r>
 80063bc:	2800      	cmp	r0, #0
 80063be:	d178      	bne.n	80064b2 <_vfiprintf_r+0x7e6>
 80063c0:	ae1a      	add	r6, sp, #104	; 0x68
 80063c2:	e60e      	b.n	8005fe2 <_vfiprintf_r+0x316>
 80063c4:	aa0d      	add	r2, sp, #52	; 0x34
 80063c6:	4639      	mov	r1, r7
 80063c8:	4650      	mov	r0, sl
 80063ca:	f7ff fc49 	bl	8005c60 <__sprint_r>
 80063ce:	2800      	cmp	r0, #0
 80063d0:	d16f      	bne.n	80064b2 <_vfiprintf_r+0x7e6>
 80063d2:	ae1a      	add	r6, sp, #104	; 0x68
 80063d4:	e617      	b.n	8006006 <_vfiprintf_r+0x33a>
 80063d6:	aa0d      	add	r2, sp, #52	; 0x34
 80063d8:	4639      	mov	r1, r7
 80063da:	4650      	mov	r0, sl
 80063dc:	f7ff fc40 	bl	8005c60 <__sprint_r>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	d166      	bne.n	80064b2 <_vfiprintf_r+0x7e6>
 80063e4:	ae1a      	add	r6, sp, #104	; 0x68
 80063e6:	e61e      	b.n	8006026 <_vfiprintf_r+0x35a>
 80063e8:	2210      	movs	r2, #16
 80063ea:	6072      	str	r2, [r6, #4]
 80063ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063ee:	3210      	adds	r2, #16
 80063f0:	920f      	str	r2, [sp, #60]	; 0x3c
 80063f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063f4:	3201      	adds	r2, #1
 80063f6:	2a07      	cmp	r2, #7
 80063f8:	920e      	str	r2, [sp, #56]	; 0x38
 80063fa:	dc02      	bgt.n	8006402 <_vfiprintf_r+0x736>
 80063fc:	3608      	adds	r6, #8
 80063fe:	3c10      	subs	r4, #16
 8006400:	e61a      	b.n	8006038 <_vfiprintf_r+0x36c>
 8006402:	aa0d      	add	r2, sp, #52	; 0x34
 8006404:	4639      	mov	r1, r7
 8006406:	4650      	mov	r0, sl
 8006408:	9307      	str	r3, [sp, #28]
 800640a:	f7ff fc29 	bl	8005c60 <__sprint_r>
 800640e:	2800      	cmp	r0, #0
 8006410:	d14f      	bne.n	80064b2 <_vfiprintf_r+0x7e6>
 8006412:	ae1a      	add	r6, sp, #104	; 0x68
 8006414:	9b07      	ldr	r3, [sp, #28]
 8006416:	e7f2      	b.n	80063fe <_vfiprintf_r+0x732>
 8006418:	aa0d      	add	r2, sp, #52	; 0x34
 800641a:	4639      	mov	r1, r7
 800641c:	4650      	mov	r0, sl
 800641e:	f7ff fc1f 	bl	8005c60 <__sprint_r>
 8006422:	2800      	cmp	r0, #0
 8006424:	d145      	bne.n	80064b2 <_vfiprintf_r+0x7e6>
 8006426:	ae1a      	add	r6, sp, #104	; 0x68
 8006428:	e615      	b.n	8006056 <_vfiprintf_r+0x38a>
 800642a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800642c:	6073      	str	r3, [r6, #4]
 800642e:	3210      	adds	r2, #16
 8006430:	920f      	str	r2, [sp, #60]	; 0x3c
 8006432:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006434:	3201      	adds	r2, #1
 8006436:	2a07      	cmp	r2, #7
 8006438:	920e      	str	r2, [sp, #56]	; 0x38
 800643a:	dc02      	bgt.n	8006442 <_vfiprintf_r+0x776>
 800643c:	3608      	adds	r6, #8
 800643e:	3c10      	subs	r4, #16
 8006440:	e60f      	b.n	8006062 <_vfiprintf_r+0x396>
 8006442:	aa0d      	add	r2, sp, #52	; 0x34
 8006444:	4639      	mov	r1, r7
 8006446:	4650      	mov	r0, sl
 8006448:	9307      	str	r3, [sp, #28]
 800644a:	f7ff fc09 	bl	8005c60 <__sprint_r>
 800644e:	2800      	cmp	r0, #0
 8006450:	d12f      	bne.n	80064b2 <_vfiprintf_r+0x7e6>
 8006452:	ae1a      	add	r6, sp, #104	; 0x68
 8006454:	9b07      	ldr	r3, [sp, #28]
 8006456:	e7f2      	b.n	800643e <_vfiprintf_r+0x772>
 8006458:	aa0d      	add	r2, sp, #52	; 0x34
 800645a:	4639      	mov	r1, r7
 800645c:	4650      	mov	r0, sl
 800645e:	f7ff fbff 	bl	8005c60 <__sprint_r>
 8006462:	bb30      	cbnz	r0, 80064b2 <_vfiprintf_r+0x7e6>
 8006464:	ae1a      	add	r6, sp, #104	; 0x68
 8006466:	e60b      	b.n	8006080 <_vfiprintf_r+0x3b4>
 8006468:	aa0d      	add	r2, sp, #52	; 0x34
 800646a:	4639      	mov	r1, r7
 800646c:	4650      	mov	r0, sl
 800646e:	f7ff fbf7 	bl	8005c60 <__sprint_r>
 8006472:	b9f0      	cbnz	r0, 80064b2 <_vfiprintf_r+0x7e6>
 8006474:	aa1a      	add	r2, sp, #104	; 0x68
 8006476:	e612      	b.n	800609e <_vfiprintf_r+0x3d2>
 8006478:	9b04      	ldr	r3, [sp, #16]
 800647a:	9905      	ldr	r1, [sp, #20]
 800647c:	1a5c      	subs	r4, r3, r1
 800647e:	2c00      	cmp	r4, #0
 8006480:	f77f ae11 	ble.w	80060a6 <_vfiprintf_r+0x3da>
 8006484:	4d3b      	ldr	r5, [pc, #236]	; (8006574 <_vfiprintf_r+0x8a8>)
 8006486:	2610      	movs	r6, #16
 8006488:	2c10      	cmp	r4, #16
 800648a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800648c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800648e:	6015      	str	r5, [r2, #0]
 8006490:	dc1d      	bgt.n	80064ce <_vfiprintf_r+0x802>
 8006492:	3301      	adds	r3, #1
 8006494:	6054      	str	r4, [r2, #4]
 8006496:	2b07      	cmp	r3, #7
 8006498:	440c      	add	r4, r1
 800649a:	940f      	str	r4, [sp, #60]	; 0x3c
 800649c:	930e      	str	r3, [sp, #56]	; 0x38
 800649e:	f77f ae02 	ble.w	80060a6 <_vfiprintf_r+0x3da>
 80064a2:	aa0d      	add	r2, sp, #52	; 0x34
 80064a4:	4639      	mov	r1, r7
 80064a6:	4650      	mov	r0, sl
 80064a8:	f7ff fbda 	bl	8005c60 <__sprint_r>
 80064ac:	2800      	cmp	r0, #0
 80064ae:	f43f adfa 	beq.w	80060a6 <_vfiprintf_r+0x3da>
 80064b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064b4:	07d9      	lsls	r1, r3, #31
 80064b6:	d405      	bmi.n	80064c4 <_vfiprintf_r+0x7f8>
 80064b8:	89bb      	ldrh	r3, [r7, #12]
 80064ba:	059a      	lsls	r2, r3, #22
 80064bc:	d402      	bmi.n	80064c4 <_vfiprintf_r+0x7f8>
 80064be:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80064c0:	f001 fc19 	bl	8007cf6 <__retarget_lock_release_recursive>
 80064c4:	89bb      	ldrh	r3, [r7, #12]
 80064c6:	065b      	lsls	r3, r3, #25
 80064c8:	f57f ac61 	bpl.w	8005d8e <_vfiprintf_r+0xc2>
 80064cc:	e437      	b.n	8005d3e <_vfiprintf_r+0x72>
 80064ce:	3301      	adds	r3, #1
 80064d0:	3110      	adds	r1, #16
 80064d2:	2b07      	cmp	r3, #7
 80064d4:	6056      	str	r6, [r2, #4]
 80064d6:	910f      	str	r1, [sp, #60]	; 0x3c
 80064d8:	930e      	str	r3, [sp, #56]	; 0x38
 80064da:	dc02      	bgt.n	80064e2 <_vfiprintf_r+0x816>
 80064dc:	3208      	adds	r2, #8
 80064de:	3c10      	subs	r4, #16
 80064e0:	e7d2      	b.n	8006488 <_vfiprintf_r+0x7bc>
 80064e2:	aa0d      	add	r2, sp, #52	; 0x34
 80064e4:	4639      	mov	r1, r7
 80064e6:	4650      	mov	r0, sl
 80064e8:	f7ff fbba 	bl	8005c60 <__sprint_r>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	d1e0      	bne.n	80064b2 <_vfiprintf_r+0x7e6>
 80064f0:	aa1a      	add	r2, sp, #104	; 0x68
 80064f2:	e7f4      	b.n	80064de <_vfiprintf_r+0x812>
 80064f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064f6:	b913      	cbnz	r3, 80064fe <_vfiprintf_r+0x832>
 80064f8:	2300      	movs	r3, #0
 80064fa:	930e      	str	r3, [sp, #56]	; 0x38
 80064fc:	e7d9      	b.n	80064b2 <_vfiprintf_r+0x7e6>
 80064fe:	aa0d      	add	r2, sp, #52	; 0x34
 8006500:	4639      	mov	r1, r7
 8006502:	4650      	mov	r0, sl
 8006504:	f7ff fbac 	bl	8005c60 <__sprint_r>
 8006508:	2800      	cmp	r0, #0
 800650a:	d0f5      	beq.n	80064f8 <_vfiprintf_r+0x82c>
 800650c:	e7d1      	b.n	80064b2 <_vfiprintf_r+0x7e6>
 800650e:	ea54 0305 	orrs.w	r3, r4, r5
 8006512:	f8cd b014 	str.w	fp, [sp, #20]
 8006516:	f43f aea0 	beq.w	800625a <_vfiprintf_r+0x58e>
 800651a:	2a01      	cmp	r2, #1
 800651c:	f43f aeec 	beq.w	80062f8 <_vfiprintf_r+0x62c>
 8006520:	2a02      	cmp	r2, #2
 8006522:	f43f af0c 	beq.w	800633e <_vfiprintf_r+0x672>
 8006526:	ab1a      	add	r3, sp, #104	; 0x68
 8006528:	08e1      	lsrs	r1, r4, #3
 800652a:	ea41 7145 	orr.w	r1, r1, r5, lsl #29
 800652e:	08e8      	lsrs	r0, r5, #3
 8006530:	f004 0207 	and.w	r2, r4, #7
 8006534:	4605      	mov	r5, r0
 8006536:	460c      	mov	r4, r1
 8006538:	3230      	adds	r2, #48	; 0x30
 800653a:	ea54 0105 	orrs.w	r1, r4, r5
 800653e:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 8006542:	f803 2c01 	strb.w	r2, [r3, #-1]
 8006546:	f47f aed5 	bne.w	80062f4 <_vfiprintf_r+0x628>
 800654a:	9905      	ldr	r1, [sp, #20]
 800654c:	07c8      	lsls	r0, r1, #31
 800654e:	d506      	bpl.n	800655e <_vfiprintf_r+0x892>
 8006550:	2a30      	cmp	r2, #48	; 0x30
 8006552:	d004      	beq.n	800655e <_vfiprintf_r+0x892>
 8006554:	2230      	movs	r2, #48	; 0x30
 8006556:	f809 2c01 	strb.w	r2, [r9, #-1]
 800655a:	f1a3 0902 	sub.w	r9, r3, #2
 800655e:	ab1a      	add	r3, sp, #104	; 0x68
 8006560:	eba3 0309 	sub.w	r3, r3, r9
 8006564:	9d01      	ldr	r5, [sp, #4]
 8006566:	f8dd b014 	ldr.w	fp, [sp, #20]
 800656a:	9301      	str	r3, [sp, #4]
 800656c:	e50f      	b.n	8005f8e <_vfiprintf_r+0x2c2>
 800656e:	bf00      	nop
 8006570:	08009bfd 	.word	0x08009bfd
 8006574:	08009c30 	.word	0x08009c30

08006578 <__sbprintf>:
 8006578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800657a:	460c      	mov	r4, r1
 800657c:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8006580:	461f      	mov	r7, r3
 8006582:	8989      	ldrh	r1, [r1, #12]
 8006584:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006586:	9319      	str	r3, [sp, #100]	; 0x64
 8006588:	89e3      	ldrh	r3, [r4, #14]
 800658a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800658e:	f021 0102 	bic.w	r1, r1, #2
 8006592:	6a23      	ldr	r3, [r4, #32]
 8006594:	f8ad 100c 	strh.w	r1, [sp, #12]
 8006598:	9308      	str	r3, [sp, #32]
 800659a:	a91a      	add	r1, sp, #104	; 0x68
 800659c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800659e:	930a      	str	r3, [sp, #40]	; 0x28
 80065a0:	4615      	mov	r5, r2
 80065a2:	2300      	movs	r3, #0
 80065a4:	4606      	mov	r6, r0
 80065a6:	9100      	str	r1, [sp, #0]
 80065a8:	9104      	str	r1, [sp, #16]
 80065aa:	a816      	add	r0, sp, #88	; 0x58
 80065ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065b0:	9102      	str	r1, [sp, #8]
 80065b2:	9105      	str	r1, [sp, #20]
 80065b4:	9306      	str	r3, [sp, #24]
 80065b6:	f001 fb9b 	bl	8007cf0 <__retarget_lock_init_recursive>
 80065ba:	462a      	mov	r2, r5
 80065bc:	463b      	mov	r3, r7
 80065be:	4669      	mov	r1, sp
 80065c0:	4630      	mov	r0, r6
 80065c2:	f7ff fb83 	bl	8005ccc <_vfiprintf_r>
 80065c6:	1e05      	subs	r5, r0, #0
 80065c8:	db07      	blt.n	80065da <__sbprintf+0x62>
 80065ca:	4669      	mov	r1, sp
 80065cc:	4630      	mov	r0, r6
 80065ce:	f000 ff77 	bl	80074c0 <_fflush_r>
 80065d2:	2800      	cmp	r0, #0
 80065d4:	bf18      	it	ne
 80065d6:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80065da:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80065de:	9816      	ldr	r0, [sp, #88]	; 0x58
 80065e0:	065b      	lsls	r3, r3, #25
 80065e2:	bf42      	ittt	mi
 80065e4:	89a3      	ldrhmi	r3, [r4, #12]
 80065e6:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80065ea:	81a3      	strhmi	r3, [r4, #12]
 80065ec:	f001 fb81 	bl	8007cf2 <__retarget_lock_close_recursive>
 80065f0:	4628      	mov	r0, r5
 80065f2:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 80065f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080065f8 <__swsetup_r>:
 80065f8:	4b32      	ldr	r3, [pc, #200]	; (80066c4 <__swsetup_r+0xcc>)
 80065fa:	b570      	push	{r4, r5, r6, lr}
 80065fc:	681d      	ldr	r5, [r3, #0]
 80065fe:	4606      	mov	r6, r0
 8006600:	460c      	mov	r4, r1
 8006602:	b125      	cbz	r5, 800660e <__swsetup_r+0x16>
 8006604:	69ab      	ldr	r3, [r5, #24]
 8006606:	b913      	cbnz	r3, 800660e <__swsetup_r+0x16>
 8006608:	4628      	mov	r0, r5
 800660a:	f000 ffed 	bl	80075e8 <__sinit>
 800660e:	4b2e      	ldr	r3, [pc, #184]	; (80066c8 <__swsetup_r+0xd0>)
 8006610:	429c      	cmp	r4, r3
 8006612:	d10f      	bne.n	8006634 <__swsetup_r+0x3c>
 8006614:	686c      	ldr	r4, [r5, #4]
 8006616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800661a:	b29a      	uxth	r2, r3
 800661c:	0715      	lsls	r5, r2, #28
 800661e:	d42c      	bmi.n	800667a <__swsetup_r+0x82>
 8006620:	06d0      	lsls	r0, r2, #27
 8006622:	d411      	bmi.n	8006648 <__swsetup_r+0x50>
 8006624:	2209      	movs	r2, #9
 8006626:	6032      	str	r2, [r6, #0]
 8006628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800662c:	81a3      	strh	r3, [r4, #12]
 800662e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006632:	bd70      	pop	{r4, r5, r6, pc}
 8006634:	4b25      	ldr	r3, [pc, #148]	; (80066cc <__swsetup_r+0xd4>)
 8006636:	429c      	cmp	r4, r3
 8006638:	d101      	bne.n	800663e <__swsetup_r+0x46>
 800663a:	68ac      	ldr	r4, [r5, #8]
 800663c:	e7eb      	b.n	8006616 <__swsetup_r+0x1e>
 800663e:	4b24      	ldr	r3, [pc, #144]	; (80066d0 <__swsetup_r+0xd8>)
 8006640:	429c      	cmp	r4, r3
 8006642:	bf08      	it	eq
 8006644:	68ec      	ldreq	r4, [r5, #12]
 8006646:	e7e6      	b.n	8006616 <__swsetup_r+0x1e>
 8006648:	0751      	lsls	r1, r2, #29
 800664a:	d512      	bpl.n	8006672 <__swsetup_r+0x7a>
 800664c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800664e:	b141      	cbz	r1, 8006662 <__swsetup_r+0x6a>
 8006650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006654:	4299      	cmp	r1, r3
 8006656:	d002      	beq.n	800665e <__swsetup_r+0x66>
 8006658:	4630      	mov	r0, r6
 800665a:	f001 f905 	bl	8007868 <_free_r>
 800665e:	2300      	movs	r3, #0
 8006660:	6363      	str	r3, [r4, #52]	; 0x34
 8006662:	89a3      	ldrh	r3, [r4, #12]
 8006664:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006668:	81a3      	strh	r3, [r4, #12]
 800666a:	2300      	movs	r3, #0
 800666c:	6063      	str	r3, [r4, #4]
 800666e:	6923      	ldr	r3, [r4, #16]
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	89a3      	ldrh	r3, [r4, #12]
 8006674:	f043 0308 	orr.w	r3, r3, #8
 8006678:	81a3      	strh	r3, [r4, #12]
 800667a:	6923      	ldr	r3, [r4, #16]
 800667c:	b94b      	cbnz	r3, 8006692 <__swsetup_r+0x9a>
 800667e:	89a3      	ldrh	r3, [r4, #12]
 8006680:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006688:	d003      	beq.n	8006692 <__swsetup_r+0x9a>
 800668a:	4621      	mov	r1, r4
 800668c:	4630      	mov	r0, r6
 800668e:	f001 fb5f 	bl	8007d50 <__smakebuf_r>
 8006692:	89a2      	ldrh	r2, [r4, #12]
 8006694:	f012 0301 	ands.w	r3, r2, #1
 8006698:	d00c      	beq.n	80066b4 <__swsetup_r+0xbc>
 800669a:	2300      	movs	r3, #0
 800669c:	60a3      	str	r3, [r4, #8]
 800669e:	6963      	ldr	r3, [r4, #20]
 80066a0:	425b      	negs	r3, r3
 80066a2:	61a3      	str	r3, [r4, #24]
 80066a4:	6923      	ldr	r3, [r4, #16]
 80066a6:	b953      	cbnz	r3, 80066be <__swsetup_r+0xc6>
 80066a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80066b0:	d1ba      	bne.n	8006628 <__swsetup_r+0x30>
 80066b2:	bd70      	pop	{r4, r5, r6, pc}
 80066b4:	0792      	lsls	r2, r2, #30
 80066b6:	bf58      	it	pl
 80066b8:	6963      	ldrpl	r3, [r4, #20]
 80066ba:	60a3      	str	r3, [r4, #8]
 80066bc:	e7f2      	b.n	80066a4 <__swsetup_r+0xac>
 80066be:	2000      	movs	r0, #0
 80066c0:	e7f7      	b.n	80066b2 <__swsetup_r+0xba>
 80066c2:	bf00      	nop
 80066c4:	20000110 	.word	0x20000110
 80066c8:	08009c80 	.word	0x08009c80
 80066cc:	08009ca0 	.word	0x08009ca0
 80066d0:	08009c60 	.word	0x08009c60

080066d4 <abort>:
 80066d4:	b508      	push	{r3, lr}
 80066d6:	2006      	movs	r0, #6
 80066d8:	f002 fa50 	bl	8008b7c <raise>
 80066dc:	2001      	movs	r0, #1
 80066de:	f7fe f9d9 	bl	8004a94 <_exit>

080066e2 <quorem>:
 80066e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e6:	6903      	ldr	r3, [r0, #16]
 80066e8:	690c      	ldr	r4, [r1, #16]
 80066ea:	429c      	cmp	r4, r3
 80066ec:	4680      	mov	r8, r0
 80066ee:	f300 8082 	bgt.w	80067f6 <quorem+0x114>
 80066f2:	3c01      	subs	r4, #1
 80066f4:	f101 0714 	add.w	r7, r1, #20
 80066f8:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80066fc:	f100 0614 	add.w	r6, r0, #20
 8006700:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006704:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006708:	eb06 030e 	add.w	r3, r6, lr
 800670c:	3501      	adds	r5, #1
 800670e:	eb07 090e 	add.w	r9, r7, lr
 8006712:	9301      	str	r3, [sp, #4]
 8006714:	fbb0 f5f5 	udiv	r5, r0, r5
 8006718:	b395      	cbz	r5, 8006780 <quorem+0x9e>
 800671a:	f04f 0a00 	mov.w	sl, #0
 800671e:	4638      	mov	r0, r7
 8006720:	46b4      	mov	ip, r6
 8006722:	46d3      	mov	fp, sl
 8006724:	f850 2b04 	ldr.w	r2, [r0], #4
 8006728:	b293      	uxth	r3, r2
 800672a:	fb05 a303 	mla	r3, r5, r3, sl
 800672e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006732:	b29b      	uxth	r3, r3
 8006734:	ebab 0303 	sub.w	r3, fp, r3
 8006738:	0c12      	lsrs	r2, r2, #16
 800673a:	f8bc b000 	ldrh.w	fp, [ip]
 800673e:	fb05 a202 	mla	r2, r5, r2, sl
 8006742:	fa13 f38b 	uxtah	r3, r3, fp
 8006746:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800674a:	fa1f fb82 	uxth.w	fp, r2
 800674e:	f8dc 2000 	ldr.w	r2, [ip]
 8006752:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006756:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800675a:	b29b      	uxth	r3, r3
 800675c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006760:	4581      	cmp	r9, r0
 8006762:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006766:	f84c 3b04 	str.w	r3, [ip], #4
 800676a:	d2db      	bcs.n	8006724 <quorem+0x42>
 800676c:	f856 300e 	ldr.w	r3, [r6, lr]
 8006770:	b933      	cbnz	r3, 8006780 <quorem+0x9e>
 8006772:	9b01      	ldr	r3, [sp, #4]
 8006774:	3b04      	subs	r3, #4
 8006776:	429e      	cmp	r6, r3
 8006778:	461a      	mov	r2, r3
 800677a:	d330      	bcc.n	80067de <quorem+0xfc>
 800677c:	f8c8 4010 	str.w	r4, [r8, #16]
 8006780:	4640      	mov	r0, r8
 8006782:	f001 ff7c 	bl	800867e <__mcmp>
 8006786:	2800      	cmp	r0, #0
 8006788:	db25      	blt.n	80067d6 <quorem+0xf4>
 800678a:	3501      	adds	r5, #1
 800678c:	4630      	mov	r0, r6
 800678e:	f04f 0e00 	mov.w	lr, #0
 8006792:	f857 2b04 	ldr.w	r2, [r7], #4
 8006796:	f8d0 c000 	ldr.w	ip, [r0]
 800679a:	b293      	uxth	r3, r2
 800679c:	ebae 0303 	sub.w	r3, lr, r3
 80067a0:	0c12      	lsrs	r2, r2, #16
 80067a2:	fa13 f38c 	uxtah	r3, r3, ip
 80067a6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80067aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067b4:	45b9      	cmp	r9, r7
 80067b6:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80067ba:	f840 3b04 	str.w	r3, [r0], #4
 80067be:	d2e8      	bcs.n	8006792 <quorem+0xb0>
 80067c0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80067c4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80067c8:	b92a      	cbnz	r2, 80067d6 <quorem+0xf4>
 80067ca:	3b04      	subs	r3, #4
 80067cc:	429e      	cmp	r6, r3
 80067ce:	461a      	mov	r2, r3
 80067d0:	d30b      	bcc.n	80067ea <quorem+0x108>
 80067d2:	f8c8 4010 	str.w	r4, [r8, #16]
 80067d6:	4628      	mov	r0, r5
 80067d8:	b003      	add	sp, #12
 80067da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067de:	6812      	ldr	r2, [r2, #0]
 80067e0:	3b04      	subs	r3, #4
 80067e2:	2a00      	cmp	r2, #0
 80067e4:	d1ca      	bne.n	800677c <quorem+0x9a>
 80067e6:	3c01      	subs	r4, #1
 80067e8:	e7c5      	b.n	8006776 <quorem+0x94>
 80067ea:	6812      	ldr	r2, [r2, #0]
 80067ec:	3b04      	subs	r3, #4
 80067ee:	2a00      	cmp	r2, #0
 80067f0:	d1ef      	bne.n	80067d2 <quorem+0xf0>
 80067f2:	3c01      	subs	r4, #1
 80067f4:	e7ea      	b.n	80067cc <quorem+0xea>
 80067f6:	2000      	movs	r0, #0
 80067f8:	e7ee      	b.n	80067d8 <quorem+0xf6>
 80067fa:	0000      	movs	r0, r0
 80067fc:	0000      	movs	r0, r0
	...

08006800 <_dtoa_r>:
 8006800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006804:	ec57 6b10 	vmov	r6, r7, d0
 8006808:	b097      	sub	sp, #92	; 0x5c
 800680a:	e9cd 6700 	strd	r6, r7, [sp]
 800680e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006810:	9107      	str	r1, [sp, #28]
 8006812:	4604      	mov	r4, r0
 8006814:	920a      	str	r2, [sp, #40]	; 0x28
 8006816:	930f      	str	r3, [sp, #60]	; 0x3c
 8006818:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800681a:	b93e      	cbnz	r6, 800682c <_dtoa_r+0x2c>
 800681c:	2010      	movs	r0, #16
 800681e:	f001 fad7 	bl	8007dd0 <malloc>
 8006822:	6260      	str	r0, [r4, #36]	; 0x24
 8006824:	6046      	str	r6, [r0, #4]
 8006826:	6086      	str	r6, [r0, #8]
 8006828:	6006      	str	r6, [r0, #0]
 800682a:	60c6      	str	r6, [r0, #12]
 800682c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800682e:	6819      	ldr	r1, [r3, #0]
 8006830:	b151      	cbz	r1, 8006848 <_dtoa_r+0x48>
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	604a      	str	r2, [r1, #4]
 8006836:	2301      	movs	r3, #1
 8006838:	4093      	lsls	r3, r2
 800683a:	608b      	str	r3, [r1, #8]
 800683c:	4620      	mov	r0, r4
 800683e:	f001 fd49 	bl	80082d4 <_Bfree>
 8006842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006844:	2200      	movs	r2, #0
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	9b01      	ldr	r3, [sp, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	bfbf      	itttt	lt
 800684e:	2301      	movlt	r3, #1
 8006850:	602b      	strlt	r3, [r5, #0]
 8006852:	9b01      	ldrlt	r3, [sp, #4]
 8006854:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006858:	bfb2      	itee	lt
 800685a:	9301      	strlt	r3, [sp, #4]
 800685c:	2300      	movge	r3, #0
 800685e:	602b      	strge	r3, [r5, #0]
 8006860:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006864:	4ba8      	ldr	r3, [pc, #672]	; (8006b08 <_dtoa_r+0x308>)
 8006866:	ea33 0308 	bics.w	r3, r3, r8
 800686a:	d11b      	bne.n	80068a4 <_dtoa_r+0xa4>
 800686c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800686e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	9b00      	ldr	r3, [sp, #0]
 8006876:	b923      	cbnz	r3, 8006882 <_dtoa_r+0x82>
 8006878:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800687c:	2800      	cmp	r0, #0
 800687e:	f000 8578 	beq.w	8007372 <_dtoa_r+0xb72>
 8006882:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006884:	b953      	cbnz	r3, 800689c <_dtoa_r+0x9c>
 8006886:	4ba1      	ldr	r3, [pc, #644]	; (8006b0c <_dtoa_r+0x30c>)
 8006888:	e021      	b.n	80068ce <_dtoa_r+0xce>
 800688a:	4ba1      	ldr	r3, [pc, #644]	; (8006b10 <_dtoa_r+0x310>)
 800688c:	9302      	str	r3, [sp, #8]
 800688e:	3308      	adds	r3, #8
 8006890:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006892:	6013      	str	r3, [r2, #0]
 8006894:	9802      	ldr	r0, [sp, #8]
 8006896:	b017      	add	sp, #92	; 0x5c
 8006898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800689c:	4b9b      	ldr	r3, [pc, #620]	; (8006b0c <_dtoa_r+0x30c>)
 800689e:	9302      	str	r3, [sp, #8]
 80068a0:	3303      	adds	r3, #3
 80068a2:	e7f5      	b.n	8006890 <_dtoa_r+0x90>
 80068a4:	e9dd 6700 	ldrd	r6, r7, [sp]
 80068a8:	2200      	movs	r2, #0
 80068aa:	2300      	movs	r3, #0
 80068ac:	4630      	mov	r0, r6
 80068ae:	4639      	mov	r1, r7
 80068b0:	f7fa f90e 	bl	8000ad0 <__aeabi_dcmpeq>
 80068b4:	4681      	mov	r9, r0
 80068b6:	b160      	cbz	r0, 80068d2 <_dtoa_r+0xd2>
 80068b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80068ba:	2301      	movs	r3, #1
 80068bc:	6013      	str	r3, [r2, #0]
 80068be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 8553 	beq.w	800736c <_dtoa_r+0xb6c>
 80068c6:	4b93      	ldr	r3, [pc, #588]	; (8006b14 <_dtoa_r+0x314>)
 80068c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80068ca:	6013      	str	r3, [r2, #0]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	9302      	str	r3, [sp, #8]
 80068d0:	e7e0      	b.n	8006894 <_dtoa_r+0x94>
 80068d2:	aa14      	add	r2, sp, #80	; 0x50
 80068d4:	a915      	add	r1, sp, #84	; 0x54
 80068d6:	ec47 6b10 	vmov	d0, r6, r7
 80068da:	4620      	mov	r0, r4
 80068dc:	f001 ff47 	bl	800876e <__d2b>
 80068e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80068e4:	4682      	mov	sl, r0
 80068e6:	2d00      	cmp	r5, #0
 80068e8:	d07e      	beq.n	80069e8 <_dtoa_r+0x1e8>
 80068ea:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80068ee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80068f2:	4630      	mov	r0, r6
 80068f4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80068f8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80068fc:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8006900:	2200      	movs	r2, #0
 8006902:	4b85      	ldr	r3, [pc, #532]	; (8006b18 <_dtoa_r+0x318>)
 8006904:	f7f9 fcc8 	bl	8000298 <__aeabi_dsub>
 8006908:	a379      	add	r3, pc, #484	; (adr r3, 8006af0 <_dtoa_r+0x2f0>)
 800690a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690e:	f7f9 fe77 	bl	8000600 <__aeabi_dmul>
 8006912:	a379      	add	r3, pc, #484	; (adr r3, 8006af8 <_dtoa_r+0x2f8>)
 8006914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006918:	f7f9 fcc0 	bl	800029c <__adddf3>
 800691c:	4606      	mov	r6, r0
 800691e:	4628      	mov	r0, r5
 8006920:	460f      	mov	r7, r1
 8006922:	f7f9 fe07 	bl	8000534 <__aeabi_i2d>
 8006926:	a376      	add	r3, pc, #472	; (adr r3, 8006b00 <_dtoa_r+0x300>)
 8006928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692c:	f7f9 fe68 	bl	8000600 <__aeabi_dmul>
 8006930:	4602      	mov	r2, r0
 8006932:	460b      	mov	r3, r1
 8006934:	4630      	mov	r0, r6
 8006936:	4639      	mov	r1, r7
 8006938:	f7f9 fcb0 	bl	800029c <__adddf3>
 800693c:	4606      	mov	r6, r0
 800693e:	460f      	mov	r7, r1
 8006940:	f7fa f90e 	bl	8000b60 <__aeabi_d2iz>
 8006944:	2200      	movs	r2, #0
 8006946:	4683      	mov	fp, r0
 8006948:	2300      	movs	r3, #0
 800694a:	4630      	mov	r0, r6
 800694c:	4639      	mov	r1, r7
 800694e:	f7fa f8c9 	bl	8000ae4 <__aeabi_dcmplt>
 8006952:	b158      	cbz	r0, 800696c <_dtoa_r+0x16c>
 8006954:	4658      	mov	r0, fp
 8006956:	f7f9 fded 	bl	8000534 <__aeabi_i2d>
 800695a:	4602      	mov	r2, r0
 800695c:	460b      	mov	r3, r1
 800695e:	4630      	mov	r0, r6
 8006960:	4639      	mov	r1, r7
 8006962:	f7fa f8b5 	bl	8000ad0 <__aeabi_dcmpeq>
 8006966:	b908      	cbnz	r0, 800696c <_dtoa_r+0x16c>
 8006968:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800696c:	f1bb 0f16 	cmp.w	fp, #22
 8006970:	d859      	bhi.n	8006a26 <_dtoa_r+0x226>
 8006972:	496a      	ldr	r1, [pc, #424]	; (8006b1c <_dtoa_r+0x31c>)
 8006974:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8006978:	e9dd 2300 	ldrd	r2, r3, [sp]
 800697c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006980:	f7fa f8ce 	bl	8000b20 <__aeabi_dcmpgt>
 8006984:	2800      	cmp	r0, #0
 8006986:	d050      	beq.n	8006a2a <_dtoa_r+0x22a>
 8006988:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800698c:	2300      	movs	r3, #0
 800698e:	930e      	str	r3, [sp, #56]	; 0x38
 8006990:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006992:	1b5d      	subs	r5, r3, r5
 8006994:	1e6b      	subs	r3, r5, #1
 8006996:	9306      	str	r3, [sp, #24]
 8006998:	bf45      	ittet	mi
 800699a:	f1c5 0301 	rsbmi	r3, r5, #1
 800699e:	9305      	strmi	r3, [sp, #20]
 80069a0:	2300      	movpl	r3, #0
 80069a2:	2300      	movmi	r3, #0
 80069a4:	bf4c      	ite	mi
 80069a6:	9306      	strmi	r3, [sp, #24]
 80069a8:	9305      	strpl	r3, [sp, #20]
 80069aa:	f1bb 0f00 	cmp.w	fp, #0
 80069ae:	db3e      	blt.n	8006a2e <_dtoa_r+0x22e>
 80069b0:	9b06      	ldr	r3, [sp, #24]
 80069b2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80069b6:	445b      	add	r3, fp
 80069b8:	9306      	str	r3, [sp, #24]
 80069ba:	2300      	movs	r3, #0
 80069bc:	9308      	str	r3, [sp, #32]
 80069be:	9b07      	ldr	r3, [sp, #28]
 80069c0:	2b09      	cmp	r3, #9
 80069c2:	f200 80af 	bhi.w	8006b24 <_dtoa_r+0x324>
 80069c6:	2b05      	cmp	r3, #5
 80069c8:	bfc4      	itt	gt
 80069ca:	3b04      	subgt	r3, #4
 80069cc:	9307      	strgt	r3, [sp, #28]
 80069ce:	9b07      	ldr	r3, [sp, #28]
 80069d0:	f1a3 0302 	sub.w	r3, r3, #2
 80069d4:	bfcc      	ite	gt
 80069d6:	2600      	movgt	r6, #0
 80069d8:	2601      	movle	r6, #1
 80069da:	2b03      	cmp	r3, #3
 80069dc:	f200 80ae 	bhi.w	8006b3c <_dtoa_r+0x33c>
 80069e0:	e8df f003 	tbb	[pc, r3]
 80069e4:	772f8482 	.word	0x772f8482
 80069e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069ea:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80069ec:	441d      	add	r5, r3
 80069ee:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80069f2:	2b20      	cmp	r3, #32
 80069f4:	dd11      	ble.n	8006a1a <_dtoa_r+0x21a>
 80069f6:	9a00      	ldr	r2, [sp, #0]
 80069f8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80069fc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006a00:	fa22 f000 	lsr.w	r0, r2, r0
 8006a04:	fa08 f303 	lsl.w	r3, r8, r3
 8006a08:	4318      	orrs	r0, r3
 8006a0a:	f7f9 fd83 	bl	8000514 <__aeabi_ui2d>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006a14:	3d01      	subs	r5, #1
 8006a16:	9312      	str	r3, [sp, #72]	; 0x48
 8006a18:	e772      	b.n	8006900 <_dtoa_r+0x100>
 8006a1a:	f1c3 0020 	rsb	r0, r3, #32
 8006a1e:	9b00      	ldr	r3, [sp, #0]
 8006a20:	fa03 f000 	lsl.w	r0, r3, r0
 8006a24:	e7f1      	b.n	8006a0a <_dtoa_r+0x20a>
 8006a26:	2301      	movs	r3, #1
 8006a28:	e7b1      	b.n	800698e <_dtoa_r+0x18e>
 8006a2a:	900e      	str	r0, [sp, #56]	; 0x38
 8006a2c:	e7b0      	b.n	8006990 <_dtoa_r+0x190>
 8006a2e:	9b05      	ldr	r3, [sp, #20]
 8006a30:	eba3 030b 	sub.w	r3, r3, fp
 8006a34:	9305      	str	r3, [sp, #20]
 8006a36:	f1cb 0300 	rsb	r3, fp, #0
 8006a3a:	9308      	str	r3, [sp, #32]
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a40:	e7bd      	b.n	80069be <_dtoa_r+0x1be>
 8006a42:	2301      	movs	r3, #1
 8006a44:	9309      	str	r3, [sp, #36]	; 0x24
 8006a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	dd7a      	ble.n	8006b42 <_dtoa_r+0x342>
 8006a4c:	9304      	str	r3, [sp, #16]
 8006a4e:	9303      	str	r3, [sp, #12]
 8006a50:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006a52:	2200      	movs	r2, #0
 8006a54:	606a      	str	r2, [r5, #4]
 8006a56:	2104      	movs	r1, #4
 8006a58:	f101 0214 	add.w	r2, r1, #20
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d975      	bls.n	8006b4c <_dtoa_r+0x34c>
 8006a60:	6869      	ldr	r1, [r5, #4]
 8006a62:	4620      	mov	r0, r4
 8006a64:	f001 fc02 	bl	800826c <_Balloc>
 8006a68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a6a:	6028      	str	r0, [r5, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	9302      	str	r3, [sp, #8]
 8006a70:	9b03      	ldr	r3, [sp, #12]
 8006a72:	2b0e      	cmp	r3, #14
 8006a74:	f200 80e5 	bhi.w	8006c42 <_dtoa_r+0x442>
 8006a78:	2e00      	cmp	r6, #0
 8006a7a:	f000 80e2 	beq.w	8006c42 <_dtoa_r+0x442>
 8006a7e:	ed9d 7b00 	vldr	d7, [sp]
 8006a82:	f1bb 0f00 	cmp.w	fp, #0
 8006a86:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8006a8a:	dd74      	ble.n	8006b76 <_dtoa_r+0x376>
 8006a8c:	4a23      	ldr	r2, [pc, #140]	; (8006b1c <_dtoa_r+0x31c>)
 8006a8e:	f00b 030f 	and.w	r3, fp, #15
 8006a92:	ea4f 162b 	mov.w	r6, fp, asr #4
 8006a96:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006a9a:	06f0      	lsls	r0, r6, #27
 8006a9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006aa0:	d559      	bpl.n	8006b56 <_dtoa_r+0x356>
 8006aa2:	4b1f      	ldr	r3, [pc, #124]	; (8006b20 <_dtoa_r+0x320>)
 8006aa4:	ec51 0b17 	vmov	r0, r1, d7
 8006aa8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006aac:	f7f9 fed2 	bl	8000854 <__aeabi_ddiv>
 8006ab0:	e9cd 0100 	strd	r0, r1, [sp]
 8006ab4:	f006 060f 	and.w	r6, r6, #15
 8006ab8:	2503      	movs	r5, #3
 8006aba:	4f19      	ldr	r7, [pc, #100]	; (8006b20 <_dtoa_r+0x320>)
 8006abc:	2e00      	cmp	r6, #0
 8006abe:	d14c      	bne.n	8006b5a <_dtoa_r+0x35a>
 8006ac0:	4642      	mov	r2, r8
 8006ac2:	464b      	mov	r3, r9
 8006ac4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ac8:	f7f9 fec4 	bl	8000854 <__aeabi_ddiv>
 8006acc:	e9cd 0100 	strd	r0, r1, [sp]
 8006ad0:	e06a      	b.n	8006ba8 <_dtoa_r+0x3a8>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ad8:	445b      	add	r3, fp
 8006ada:	9304      	str	r3, [sp, #16]
 8006adc:	3301      	adds	r3, #1
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	9303      	str	r3, [sp, #12]
 8006ae2:	bfb8      	it	lt
 8006ae4:	2301      	movlt	r3, #1
 8006ae6:	e7b3      	b.n	8006a50 <_dtoa_r+0x250>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	e7ab      	b.n	8006a44 <_dtoa_r+0x244>
 8006aec:	2300      	movs	r3, #0
 8006aee:	e7f1      	b.n	8006ad4 <_dtoa_r+0x2d4>
 8006af0:	636f4361 	.word	0x636f4361
 8006af4:	3fd287a7 	.word	0x3fd287a7
 8006af8:	8b60c8b3 	.word	0x8b60c8b3
 8006afc:	3fc68a28 	.word	0x3fc68a28
 8006b00:	509f79fb 	.word	0x509f79fb
 8006b04:	3fd34413 	.word	0x3fd34413
 8006b08:	7ff00000 	.word	0x7ff00000
 8006b0c:	08009c59 	.word	0x08009c59
 8006b10:	08009c50 	.word	0x08009c50
 8006b14:	08009c0f 	.word	0x08009c0f
 8006b18:	3ff80000 	.word	0x3ff80000
 8006b1c:	08009cf8 	.word	0x08009cf8
 8006b20:	08009cd0 	.word	0x08009cd0
 8006b24:	2601      	movs	r6, #1
 8006b26:	2300      	movs	r3, #0
 8006b28:	9307      	str	r3, [sp, #28]
 8006b2a:	9609      	str	r6, [sp, #36]	; 0x24
 8006b2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b30:	9304      	str	r3, [sp, #16]
 8006b32:	9303      	str	r3, [sp, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	2312      	movs	r3, #18
 8006b38:	920a      	str	r2, [sp, #40]	; 0x28
 8006b3a:	e789      	b.n	8006a50 <_dtoa_r+0x250>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b40:	e7f4      	b.n	8006b2c <_dtoa_r+0x32c>
 8006b42:	2301      	movs	r3, #1
 8006b44:	9304      	str	r3, [sp, #16]
 8006b46:	9303      	str	r3, [sp, #12]
 8006b48:	461a      	mov	r2, r3
 8006b4a:	e7f5      	b.n	8006b38 <_dtoa_r+0x338>
 8006b4c:	686a      	ldr	r2, [r5, #4]
 8006b4e:	3201      	adds	r2, #1
 8006b50:	606a      	str	r2, [r5, #4]
 8006b52:	0049      	lsls	r1, r1, #1
 8006b54:	e780      	b.n	8006a58 <_dtoa_r+0x258>
 8006b56:	2502      	movs	r5, #2
 8006b58:	e7af      	b.n	8006aba <_dtoa_r+0x2ba>
 8006b5a:	07f1      	lsls	r1, r6, #31
 8006b5c:	d508      	bpl.n	8006b70 <_dtoa_r+0x370>
 8006b5e:	4640      	mov	r0, r8
 8006b60:	4649      	mov	r1, r9
 8006b62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b66:	f7f9 fd4b 	bl	8000600 <__aeabi_dmul>
 8006b6a:	3501      	adds	r5, #1
 8006b6c:	4680      	mov	r8, r0
 8006b6e:	4689      	mov	r9, r1
 8006b70:	1076      	asrs	r6, r6, #1
 8006b72:	3708      	adds	r7, #8
 8006b74:	e7a2      	b.n	8006abc <_dtoa_r+0x2bc>
 8006b76:	f000 809d 	beq.w	8006cb4 <_dtoa_r+0x4b4>
 8006b7a:	f1cb 0600 	rsb	r6, fp, #0
 8006b7e:	4b9f      	ldr	r3, [pc, #636]	; (8006dfc <_dtoa_r+0x5fc>)
 8006b80:	4f9f      	ldr	r7, [pc, #636]	; (8006e00 <_dtoa_r+0x600>)
 8006b82:	f006 020f 	and.w	r2, r6, #15
 8006b86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b92:	f7f9 fd35 	bl	8000600 <__aeabi_dmul>
 8006b96:	e9cd 0100 	strd	r0, r1, [sp]
 8006b9a:	1136      	asrs	r6, r6, #4
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	2502      	movs	r5, #2
 8006ba0:	2e00      	cmp	r6, #0
 8006ba2:	d17c      	bne.n	8006c9e <_dtoa_r+0x49e>
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d191      	bne.n	8006acc <_dtoa_r+0x2cc>
 8006ba8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 8084 	beq.w	8006cb8 <_dtoa_r+0x4b8>
 8006bb0:	e9dd 8900 	ldrd	r8, r9, [sp]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	4b93      	ldr	r3, [pc, #588]	; (8006e04 <_dtoa_r+0x604>)
 8006bb8:	4640      	mov	r0, r8
 8006bba:	4649      	mov	r1, r9
 8006bbc:	f7f9 ff92 	bl	8000ae4 <__aeabi_dcmplt>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d079      	beq.n	8006cb8 <_dtoa_r+0x4b8>
 8006bc4:	9b03      	ldr	r3, [sp, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d076      	beq.n	8006cb8 <_dtoa_r+0x4b8>
 8006bca:	9b04      	ldr	r3, [sp, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	dd34      	ble.n	8006c3a <_dtoa_r+0x43a>
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	4b8d      	ldr	r3, [pc, #564]	; (8006e08 <_dtoa_r+0x608>)
 8006bd4:	4640      	mov	r0, r8
 8006bd6:	4649      	mov	r1, r9
 8006bd8:	f7f9 fd12 	bl	8000600 <__aeabi_dmul>
 8006bdc:	e9cd 0100 	strd	r0, r1, [sp]
 8006be0:	9e04      	ldr	r6, [sp, #16]
 8006be2:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8006be6:	3501      	adds	r5, #1
 8006be8:	4628      	mov	r0, r5
 8006bea:	f7f9 fca3 	bl	8000534 <__aeabi_i2d>
 8006bee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bf2:	f7f9 fd05 	bl	8000600 <__aeabi_dmul>
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	4b84      	ldr	r3, [pc, #528]	; (8006e0c <_dtoa_r+0x60c>)
 8006bfa:	f7f9 fb4f 	bl	800029c <__adddf3>
 8006bfe:	4680      	mov	r8, r0
 8006c00:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8006c04:	2e00      	cmp	r6, #0
 8006c06:	d15a      	bne.n	8006cbe <_dtoa_r+0x4be>
 8006c08:	2200      	movs	r2, #0
 8006c0a:	4b81      	ldr	r3, [pc, #516]	; (8006e10 <_dtoa_r+0x610>)
 8006c0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c10:	f7f9 fb42 	bl	8000298 <__aeabi_dsub>
 8006c14:	4642      	mov	r2, r8
 8006c16:	464b      	mov	r3, r9
 8006c18:	e9cd 0100 	strd	r0, r1, [sp]
 8006c1c:	f7f9 ff80 	bl	8000b20 <__aeabi_dcmpgt>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	f040 829b 	bne.w	800715c <_dtoa_r+0x95c>
 8006c26:	4642      	mov	r2, r8
 8006c28:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006c2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c30:	f7f9 ff58 	bl	8000ae4 <__aeabi_dcmplt>
 8006c34:	2800      	cmp	r0, #0
 8006c36:	f040 828f 	bne.w	8007158 <_dtoa_r+0x958>
 8006c3a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006c3e:	e9cd 2300 	strd	r2, r3, [sp]
 8006c42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f2c0 8150 	blt.w	8006eea <_dtoa_r+0x6ea>
 8006c4a:	f1bb 0f0e 	cmp.w	fp, #14
 8006c4e:	f300 814c 	bgt.w	8006eea <_dtoa_r+0x6ea>
 8006c52:	4b6a      	ldr	r3, [pc, #424]	; (8006dfc <_dtoa_r+0x5fc>)
 8006c54:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006c58:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f280 80da 	bge.w	8006e18 <_dtoa_r+0x618>
 8006c64:	9b03      	ldr	r3, [sp, #12]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f300 80d6 	bgt.w	8006e18 <_dtoa_r+0x618>
 8006c6c:	f040 8273 	bne.w	8007156 <_dtoa_r+0x956>
 8006c70:	2200      	movs	r2, #0
 8006c72:	4b67      	ldr	r3, [pc, #412]	; (8006e10 <_dtoa_r+0x610>)
 8006c74:	4640      	mov	r0, r8
 8006c76:	4649      	mov	r1, r9
 8006c78:	f7f9 fcc2 	bl	8000600 <__aeabi_dmul>
 8006c7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c80:	f7f9 ff44 	bl	8000b0c <__aeabi_dcmpge>
 8006c84:	9e03      	ldr	r6, [sp, #12]
 8006c86:	4637      	mov	r7, r6
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	f040 824a 	bne.w	8007122 <_dtoa_r+0x922>
 8006c8e:	9b02      	ldr	r3, [sp, #8]
 8006c90:	9a02      	ldr	r2, [sp, #8]
 8006c92:	1c5d      	adds	r5, r3, #1
 8006c94:	2331      	movs	r3, #49	; 0x31
 8006c96:	7013      	strb	r3, [r2, #0]
 8006c98:	f10b 0b01 	add.w	fp, fp, #1
 8006c9c:	e245      	b.n	800712a <_dtoa_r+0x92a>
 8006c9e:	07f2      	lsls	r2, r6, #31
 8006ca0:	d505      	bpl.n	8006cae <_dtoa_r+0x4ae>
 8006ca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ca6:	f7f9 fcab 	bl	8000600 <__aeabi_dmul>
 8006caa:	3501      	adds	r5, #1
 8006cac:	2301      	movs	r3, #1
 8006cae:	1076      	asrs	r6, r6, #1
 8006cb0:	3708      	adds	r7, #8
 8006cb2:	e775      	b.n	8006ba0 <_dtoa_r+0x3a0>
 8006cb4:	2502      	movs	r5, #2
 8006cb6:	e777      	b.n	8006ba8 <_dtoa_r+0x3a8>
 8006cb8:	465f      	mov	r7, fp
 8006cba:	9e03      	ldr	r6, [sp, #12]
 8006cbc:	e794      	b.n	8006be8 <_dtoa_r+0x3e8>
 8006cbe:	9a02      	ldr	r2, [sp, #8]
 8006cc0:	4b4e      	ldr	r3, [pc, #312]	; (8006dfc <_dtoa_r+0x5fc>)
 8006cc2:	4432      	add	r2, r6
 8006cc4:	9213      	str	r2, [sp, #76]	; 0x4c
 8006cc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cc8:	1e71      	subs	r1, r6, #1
 8006cca:	2a00      	cmp	r2, #0
 8006ccc:	d048      	beq.n	8006d60 <_dtoa_r+0x560>
 8006cce:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd6:	2000      	movs	r0, #0
 8006cd8:	494e      	ldr	r1, [pc, #312]	; (8006e14 <_dtoa_r+0x614>)
 8006cda:	f7f9 fdbb 	bl	8000854 <__aeabi_ddiv>
 8006cde:	4642      	mov	r2, r8
 8006ce0:	464b      	mov	r3, r9
 8006ce2:	f7f9 fad9 	bl	8000298 <__aeabi_dsub>
 8006ce6:	9d02      	ldr	r5, [sp, #8]
 8006ce8:	4680      	mov	r8, r0
 8006cea:	4689      	mov	r9, r1
 8006cec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006cf0:	f7f9 ff36 	bl	8000b60 <__aeabi_d2iz>
 8006cf4:	4606      	mov	r6, r0
 8006cf6:	f7f9 fc1d 	bl	8000534 <__aeabi_i2d>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d02:	f7f9 fac9 	bl	8000298 <__aeabi_dsub>
 8006d06:	3630      	adds	r6, #48	; 0x30
 8006d08:	f805 6b01 	strb.w	r6, [r5], #1
 8006d0c:	4642      	mov	r2, r8
 8006d0e:	464b      	mov	r3, r9
 8006d10:	e9cd 0100 	strd	r0, r1, [sp]
 8006d14:	f7f9 fee6 	bl	8000ae4 <__aeabi_dcmplt>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	d165      	bne.n	8006de8 <_dtoa_r+0x5e8>
 8006d1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d20:	2000      	movs	r0, #0
 8006d22:	4938      	ldr	r1, [pc, #224]	; (8006e04 <_dtoa_r+0x604>)
 8006d24:	f7f9 fab8 	bl	8000298 <__aeabi_dsub>
 8006d28:	4642      	mov	r2, r8
 8006d2a:	464b      	mov	r3, r9
 8006d2c:	f7f9 feda 	bl	8000ae4 <__aeabi_dcmplt>
 8006d30:	2800      	cmp	r0, #0
 8006d32:	f040 80ba 	bne.w	8006eaa <_dtoa_r+0x6aa>
 8006d36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d38:	429d      	cmp	r5, r3
 8006d3a:	f43f af7e 	beq.w	8006c3a <_dtoa_r+0x43a>
 8006d3e:	2200      	movs	r2, #0
 8006d40:	4b31      	ldr	r3, [pc, #196]	; (8006e08 <_dtoa_r+0x608>)
 8006d42:	4640      	mov	r0, r8
 8006d44:	4649      	mov	r1, r9
 8006d46:	f7f9 fc5b 	bl	8000600 <__aeabi_dmul>
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	4680      	mov	r8, r0
 8006d4e:	4689      	mov	r9, r1
 8006d50:	4b2d      	ldr	r3, [pc, #180]	; (8006e08 <_dtoa_r+0x608>)
 8006d52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d56:	f7f9 fc53 	bl	8000600 <__aeabi_dmul>
 8006d5a:	e9cd 0100 	strd	r0, r1, [sp]
 8006d5e:	e7c5      	b.n	8006cec <_dtoa_r+0x4ec>
 8006d60:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006d64:	4642      	mov	r2, r8
 8006d66:	464b      	mov	r3, r9
 8006d68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d6c:	f7f9 fc48 	bl	8000600 <__aeabi_dmul>
 8006d70:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d74:	9d02      	ldr	r5, [sp, #8]
 8006d76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d7a:	f7f9 fef1 	bl	8000b60 <__aeabi_d2iz>
 8006d7e:	4606      	mov	r6, r0
 8006d80:	f7f9 fbd8 	bl	8000534 <__aeabi_i2d>
 8006d84:	3630      	adds	r6, #48	; 0x30
 8006d86:	4602      	mov	r2, r0
 8006d88:	460b      	mov	r3, r1
 8006d8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d8e:	f7f9 fa83 	bl	8000298 <__aeabi_dsub>
 8006d92:	f805 6b01 	strb.w	r6, [r5], #1
 8006d96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d98:	42ab      	cmp	r3, r5
 8006d9a:	4680      	mov	r8, r0
 8006d9c:	4689      	mov	r9, r1
 8006d9e:	f04f 0200 	mov.w	r2, #0
 8006da2:	d125      	bne.n	8006df0 <_dtoa_r+0x5f0>
 8006da4:	4b1b      	ldr	r3, [pc, #108]	; (8006e14 <_dtoa_r+0x614>)
 8006da6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006daa:	f7f9 fa77 	bl	800029c <__adddf3>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	4640      	mov	r0, r8
 8006db4:	4649      	mov	r1, r9
 8006db6:	f7f9 feb3 	bl	8000b20 <__aeabi_dcmpgt>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d175      	bne.n	8006eaa <_dtoa_r+0x6aa>
 8006dbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	4913      	ldr	r1, [pc, #76]	; (8006e14 <_dtoa_r+0x614>)
 8006dc6:	f7f9 fa67 	bl	8000298 <__aeabi_dsub>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	4640      	mov	r0, r8
 8006dd0:	4649      	mov	r1, r9
 8006dd2:	f7f9 fe87 	bl	8000ae4 <__aeabi_dcmplt>
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	f43f af2f 	beq.w	8006c3a <_dtoa_r+0x43a>
 8006ddc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006de0:	2b30      	cmp	r3, #48	; 0x30
 8006de2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006de6:	d001      	beq.n	8006dec <_dtoa_r+0x5ec>
 8006de8:	46bb      	mov	fp, r7
 8006dea:	e04d      	b.n	8006e88 <_dtoa_r+0x688>
 8006dec:	4615      	mov	r5, r2
 8006dee:	e7f5      	b.n	8006ddc <_dtoa_r+0x5dc>
 8006df0:	4b05      	ldr	r3, [pc, #20]	; (8006e08 <_dtoa_r+0x608>)
 8006df2:	f7f9 fc05 	bl	8000600 <__aeabi_dmul>
 8006df6:	e9cd 0100 	strd	r0, r1, [sp]
 8006dfa:	e7bc      	b.n	8006d76 <_dtoa_r+0x576>
 8006dfc:	08009cf8 	.word	0x08009cf8
 8006e00:	08009cd0 	.word	0x08009cd0
 8006e04:	3ff00000 	.word	0x3ff00000
 8006e08:	40240000 	.word	0x40240000
 8006e0c:	401c0000 	.word	0x401c0000
 8006e10:	40140000 	.word	0x40140000
 8006e14:	3fe00000 	.word	0x3fe00000
 8006e18:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006e1c:	9d02      	ldr	r5, [sp, #8]
 8006e1e:	4642      	mov	r2, r8
 8006e20:	464b      	mov	r3, r9
 8006e22:	4630      	mov	r0, r6
 8006e24:	4639      	mov	r1, r7
 8006e26:	f7f9 fd15 	bl	8000854 <__aeabi_ddiv>
 8006e2a:	f7f9 fe99 	bl	8000b60 <__aeabi_d2iz>
 8006e2e:	9000      	str	r0, [sp, #0]
 8006e30:	f7f9 fb80 	bl	8000534 <__aeabi_i2d>
 8006e34:	4642      	mov	r2, r8
 8006e36:	464b      	mov	r3, r9
 8006e38:	f7f9 fbe2 	bl	8000600 <__aeabi_dmul>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4630      	mov	r0, r6
 8006e42:	4639      	mov	r1, r7
 8006e44:	f7f9 fa28 	bl	8000298 <__aeabi_dsub>
 8006e48:	9e00      	ldr	r6, [sp, #0]
 8006e4a:	9f03      	ldr	r7, [sp, #12]
 8006e4c:	3630      	adds	r6, #48	; 0x30
 8006e4e:	f805 6b01 	strb.w	r6, [r5], #1
 8006e52:	9e02      	ldr	r6, [sp, #8]
 8006e54:	1bae      	subs	r6, r5, r6
 8006e56:	42b7      	cmp	r7, r6
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	d138      	bne.n	8006ed0 <_dtoa_r+0x6d0>
 8006e5e:	f7f9 fa1d 	bl	800029c <__adddf3>
 8006e62:	4606      	mov	r6, r0
 8006e64:	460f      	mov	r7, r1
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4640      	mov	r0, r8
 8006e6c:	4649      	mov	r1, r9
 8006e6e:	f7f9 fe39 	bl	8000ae4 <__aeabi_dcmplt>
 8006e72:	b9c8      	cbnz	r0, 8006ea8 <_dtoa_r+0x6a8>
 8006e74:	4632      	mov	r2, r6
 8006e76:	463b      	mov	r3, r7
 8006e78:	4640      	mov	r0, r8
 8006e7a:	4649      	mov	r1, r9
 8006e7c:	f7f9 fe28 	bl	8000ad0 <__aeabi_dcmpeq>
 8006e80:	b110      	cbz	r0, 8006e88 <_dtoa_r+0x688>
 8006e82:	9b00      	ldr	r3, [sp, #0]
 8006e84:	07db      	lsls	r3, r3, #31
 8006e86:	d40f      	bmi.n	8006ea8 <_dtoa_r+0x6a8>
 8006e88:	4651      	mov	r1, sl
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f001 fa22 	bl	80082d4 <_Bfree>
 8006e90:	2300      	movs	r3, #0
 8006e92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e94:	702b      	strb	r3, [r5, #0]
 8006e96:	f10b 0301 	add.w	r3, fp, #1
 8006e9a:	6013      	str	r3, [r2, #0]
 8006e9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f43f acf8 	beq.w	8006894 <_dtoa_r+0x94>
 8006ea4:	601d      	str	r5, [r3, #0]
 8006ea6:	e4f5      	b.n	8006894 <_dtoa_r+0x94>
 8006ea8:	465f      	mov	r7, fp
 8006eaa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006eae:	2a39      	cmp	r2, #57	; 0x39
 8006eb0:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8006eb4:	d106      	bne.n	8006ec4 <_dtoa_r+0x6c4>
 8006eb6:	9a02      	ldr	r2, [sp, #8]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d107      	bne.n	8006ecc <_dtoa_r+0x6cc>
 8006ebc:	2330      	movs	r3, #48	; 0x30
 8006ebe:	7013      	strb	r3, [r2, #0]
 8006ec0:	3701      	adds	r7, #1
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	781a      	ldrb	r2, [r3, #0]
 8006ec6:	3201      	adds	r2, #1
 8006ec8:	701a      	strb	r2, [r3, #0]
 8006eca:	e78d      	b.n	8006de8 <_dtoa_r+0x5e8>
 8006ecc:	461d      	mov	r5, r3
 8006ece:	e7ec      	b.n	8006eaa <_dtoa_r+0x6aa>
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	4ba4      	ldr	r3, [pc, #656]	; (8007164 <_dtoa_r+0x964>)
 8006ed4:	f7f9 fb94 	bl	8000600 <__aeabi_dmul>
 8006ed8:	2200      	movs	r2, #0
 8006eda:	2300      	movs	r3, #0
 8006edc:	4606      	mov	r6, r0
 8006ede:	460f      	mov	r7, r1
 8006ee0:	f7f9 fdf6 	bl	8000ad0 <__aeabi_dcmpeq>
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	d09a      	beq.n	8006e1e <_dtoa_r+0x61e>
 8006ee8:	e7ce      	b.n	8006e88 <_dtoa_r+0x688>
 8006eea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eec:	2a00      	cmp	r2, #0
 8006eee:	f000 80cd 	beq.w	800708c <_dtoa_r+0x88c>
 8006ef2:	9a07      	ldr	r2, [sp, #28]
 8006ef4:	2a01      	cmp	r2, #1
 8006ef6:	f300 80af 	bgt.w	8007058 <_dtoa_r+0x858>
 8006efa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006efc:	2a00      	cmp	r2, #0
 8006efe:	f000 80a7 	beq.w	8007050 <_dtoa_r+0x850>
 8006f02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006f06:	9e08      	ldr	r6, [sp, #32]
 8006f08:	9d05      	ldr	r5, [sp, #20]
 8006f0a:	9a05      	ldr	r2, [sp, #20]
 8006f0c:	441a      	add	r2, r3
 8006f0e:	9205      	str	r2, [sp, #20]
 8006f10:	9a06      	ldr	r2, [sp, #24]
 8006f12:	2101      	movs	r1, #1
 8006f14:	441a      	add	r2, r3
 8006f16:	4620      	mov	r0, r4
 8006f18:	9206      	str	r2, [sp, #24]
 8006f1a:	f001 fa7b 	bl	8008414 <__i2b>
 8006f1e:	4607      	mov	r7, r0
 8006f20:	2d00      	cmp	r5, #0
 8006f22:	dd0c      	ble.n	8006f3e <_dtoa_r+0x73e>
 8006f24:	9b06      	ldr	r3, [sp, #24]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	dd09      	ble.n	8006f3e <_dtoa_r+0x73e>
 8006f2a:	42ab      	cmp	r3, r5
 8006f2c:	9a05      	ldr	r2, [sp, #20]
 8006f2e:	bfa8      	it	ge
 8006f30:	462b      	movge	r3, r5
 8006f32:	1ad2      	subs	r2, r2, r3
 8006f34:	9205      	str	r2, [sp, #20]
 8006f36:	9a06      	ldr	r2, [sp, #24]
 8006f38:	1aed      	subs	r5, r5, r3
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	9306      	str	r3, [sp, #24]
 8006f3e:	9b08      	ldr	r3, [sp, #32]
 8006f40:	b1f3      	cbz	r3, 8006f80 <_dtoa_r+0x780>
 8006f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f000 80a5 	beq.w	8007094 <_dtoa_r+0x894>
 8006f4a:	2e00      	cmp	r6, #0
 8006f4c:	dd10      	ble.n	8006f70 <_dtoa_r+0x770>
 8006f4e:	4639      	mov	r1, r7
 8006f50:	4632      	mov	r2, r6
 8006f52:	4620      	mov	r0, r4
 8006f54:	f001 faf4 	bl	8008540 <__pow5mult>
 8006f58:	4652      	mov	r2, sl
 8006f5a:	4601      	mov	r1, r0
 8006f5c:	4607      	mov	r7, r0
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f001 fa61 	bl	8008426 <__multiply>
 8006f64:	4651      	mov	r1, sl
 8006f66:	4680      	mov	r8, r0
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f001 f9b3 	bl	80082d4 <_Bfree>
 8006f6e:	46c2      	mov	sl, r8
 8006f70:	9b08      	ldr	r3, [sp, #32]
 8006f72:	1b9a      	subs	r2, r3, r6
 8006f74:	d004      	beq.n	8006f80 <_dtoa_r+0x780>
 8006f76:	4651      	mov	r1, sl
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f001 fae1 	bl	8008540 <__pow5mult>
 8006f7e:	4682      	mov	sl, r0
 8006f80:	2101      	movs	r1, #1
 8006f82:	4620      	mov	r0, r4
 8006f84:	f001 fa46 	bl	8008414 <__i2b>
 8006f88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	4606      	mov	r6, r0
 8006f8e:	f340 8083 	ble.w	8007098 <_dtoa_r+0x898>
 8006f92:	461a      	mov	r2, r3
 8006f94:	4601      	mov	r1, r0
 8006f96:	4620      	mov	r0, r4
 8006f98:	f001 fad2 	bl	8008540 <__pow5mult>
 8006f9c:	9b07      	ldr	r3, [sp, #28]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	4606      	mov	r6, r0
 8006fa2:	dd7c      	ble.n	800709e <_dtoa_r+0x89e>
 8006fa4:	f04f 0800 	mov.w	r8, #0
 8006fa8:	6933      	ldr	r3, [r6, #16]
 8006faa:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006fae:	6918      	ldr	r0, [r3, #16]
 8006fb0:	f001 f9e2 	bl	8008378 <__hi0bits>
 8006fb4:	f1c0 0020 	rsb	r0, r0, #32
 8006fb8:	9b06      	ldr	r3, [sp, #24]
 8006fba:	4418      	add	r0, r3
 8006fbc:	f010 001f 	ands.w	r0, r0, #31
 8006fc0:	f000 8096 	beq.w	80070f0 <_dtoa_r+0x8f0>
 8006fc4:	f1c0 0320 	rsb	r3, r0, #32
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	f340 8087 	ble.w	80070dc <_dtoa_r+0x8dc>
 8006fce:	9b05      	ldr	r3, [sp, #20]
 8006fd0:	f1c0 001c 	rsb	r0, r0, #28
 8006fd4:	4403      	add	r3, r0
 8006fd6:	9305      	str	r3, [sp, #20]
 8006fd8:	9b06      	ldr	r3, [sp, #24]
 8006fda:	4405      	add	r5, r0
 8006fdc:	4403      	add	r3, r0
 8006fde:	9306      	str	r3, [sp, #24]
 8006fe0:	9b05      	ldr	r3, [sp, #20]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	dd05      	ble.n	8006ff2 <_dtoa_r+0x7f2>
 8006fe6:	4651      	mov	r1, sl
 8006fe8:	461a      	mov	r2, r3
 8006fea:	4620      	mov	r0, r4
 8006fec:	f001 faf6 	bl	80085dc <__lshift>
 8006ff0:	4682      	mov	sl, r0
 8006ff2:	9b06      	ldr	r3, [sp, #24]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	dd05      	ble.n	8007004 <_dtoa_r+0x804>
 8006ff8:	4631      	mov	r1, r6
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	f001 faed 	bl	80085dc <__lshift>
 8007002:	4606      	mov	r6, r0
 8007004:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007006:	2b00      	cmp	r3, #0
 8007008:	d074      	beq.n	80070f4 <_dtoa_r+0x8f4>
 800700a:	4631      	mov	r1, r6
 800700c:	4650      	mov	r0, sl
 800700e:	f001 fb36 	bl	800867e <__mcmp>
 8007012:	2800      	cmp	r0, #0
 8007014:	da6e      	bge.n	80070f4 <_dtoa_r+0x8f4>
 8007016:	2300      	movs	r3, #0
 8007018:	4651      	mov	r1, sl
 800701a:	220a      	movs	r2, #10
 800701c:	4620      	mov	r0, r4
 800701e:	f001 f970 	bl	8008302 <__multadd>
 8007022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007024:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007028:	4682      	mov	sl, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	f000 81a8 	beq.w	8007380 <_dtoa_r+0xb80>
 8007030:	2300      	movs	r3, #0
 8007032:	4639      	mov	r1, r7
 8007034:	220a      	movs	r2, #10
 8007036:	4620      	mov	r0, r4
 8007038:	f001 f963 	bl	8008302 <__multadd>
 800703c:	9b04      	ldr	r3, [sp, #16]
 800703e:	2b00      	cmp	r3, #0
 8007040:	4607      	mov	r7, r0
 8007042:	f300 80c8 	bgt.w	80071d6 <_dtoa_r+0x9d6>
 8007046:	9b07      	ldr	r3, [sp, #28]
 8007048:	2b02      	cmp	r3, #2
 800704a:	f340 80c4 	ble.w	80071d6 <_dtoa_r+0x9d6>
 800704e:	e059      	b.n	8007104 <_dtoa_r+0x904>
 8007050:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007052:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007056:	e756      	b.n	8006f06 <_dtoa_r+0x706>
 8007058:	9b03      	ldr	r3, [sp, #12]
 800705a:	1e5e      	subs	r6, r3, #1
 800705c:	9b08      	ldr	r3, [sp, #32]
 800705e:	42b3      	cmp	r3, r6
 8007060:	bfbf      	itttt	lt
 8007062:	9b08      	ldrlt	r3, [sp, #32]
 8007064:	9608      	strlt	r6, [sp, #32]
 8007066:	1af2      	sublt	r2, r6, r3
 8007068:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800706a:	bfb6      	itet	lt
 800706c:	189b      	addlt	r3, r3, r2
 800706e:	1b9e      	subge	r6, r3, r6
 8007070:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8007072:	9b03      	ldr	r3, [sp, #12]
 8007074:	bfb8      	it	lt
 8007076:	2600      	movlt	r6, #0
 8007078:	2b00      	cmp	r3, #0
 800707a:	bfb9      	ittee	lt
 800707c:	9b05      	ldrlt	r3, [sp, #20]
 800707e:	9a03      	ldrlt	r2, [sp, #12]
 8007080:	9d05      	ldrge	r5, [sp, #20]
 8007082:	9b03      	ldrge	r3, [sp, #12]
 8007084:	bfbc      	itt	lt
 8007086:	1a9d      	sublt	r5, r3, r2
 8007088:	2300      	movlt	r3, #0
 800708a:	e73e      	b.n	8006f0a <_dtoa_r+0x70a>
 800708c:	9e08      	ldr	r6, [sp, #32]
 800708e:	9d05      	ldr	r5, [sp, #20]
 8007090:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007092:	e745      	b.n	8006f20 <_dtoa_r+0x720>
 8007094:	9a08      	ldr	r2, [sp, #32]
 8007096:	e76e      	b.n	8006f76 <_dtoa_r+0x776>
 8007098:	9b07      	ldr	r3, [sp, #28]
 800709a:	2b01      	cmp	r3, #1
 800709c:	dc19      	bgt.n	80070d2 <_dtoa_r+0x8d2>
 800709e:	9b00      	ldr	r3, [sp, #0]
 80070a0:	b9bb      	cbnz	r3, 80070d2 <_dtoa_r+0x8d2>
 80070a2:	9b01      	ldr	r3, [sp, #4]
 80070a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070a8:	b99b      	cbnz	r3, 80070d2 <_dtoa_r+0x8d2>
 80070aa:	9b01      	ldr	r3, [sp, #4]
 80070ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070b0:	0d1b      	lsrs	r3, r3, #20
 80070b2:	051b      	lsls	r3, r3, #20
 80070b4:	b183      	cbz	r3, 80070d8 <_dtoa_r+0x8d8>
 80070b6:	9b05      	ldr	r3, [sp, #20]
 80070b8:	3301      	adds	r3, #1
 80070ba:	9305      	str	r3, [sp, #20]
 80070bc:	9b06      	ldr	r3, [sp, #24]
 80070be:	3301      	adds	r3, #1
 80070c0:	9306      	str	r3, [sp, #24]
 80070c2:	f04f 0801 	mov.w	r8, #1
 80070c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f47f af6d 	bne.w	8006fa8 <_dtoa_r+0x7a8>
 80070ce:	2001      	movs	r0, #1
 80070d0:	e772      	b.n	8006fb8 <_dtoa_r+0x7b8>
 80070d2:	f04f 0800 	mov.w	r8, #0
 80070d6:	e7f6      	b.n	80070c6 <_dtoa_r+0x8c6>
 80070d8:	4698      	mov	r8, r3
 80070da:	e7f4      	b.n	80070c6 <_dtoa_r+0x8c6>
 80070dc:	d080      	beq.n	8006fe0 <_dtoa_r+0x7e0>
 80070de:	9a05      	ldr	r2, [sp, #20]
 80070e0:	331c      	adds	r3, #28
 80070e2:	441a      	add	r2, r3
 80070e4:	9205      	str	r2, [sp, #20]
 80070e6:	9a06      	ldr	r2, [sp, #24]
 80070e8:	441a      	add	r2, r3
 80070ea:	441d      	add	r5, r3
 80070ec:	4613      	mov	r3, r2
 80070ee:	e776      	b.n	8006fde <_dtoa_r+0x7de>
 80070f0:	4603      	mov	r3, r0
 80070f2:	e7f4      	b.n	80070de <_dtoa_r+0x8de>
 80070f4:	9b03      	ldr	r3, [sp, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	dc36      	bgt.n	8007168 <_dtoa_r+0x968>
 80070fa:	9b07      	ldr	r3, [sp, #28]
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	dd33      	ble.n	8007168 <_dtoa_r+0x968>
 8007100:	9b03      	ldr	r3, [sp, #12]
 8007102:	9304      	str	r3, [sp, #16]
 8007104:	9b04      	ldr	r3, [sp, #16]
 8007106:	b963      	cbnz	r3, 8007122 <_dtoa_r+0x922>
 8007108:	4631      	mov	r1, r6
 800710a:	2205      	movs	r2, #5
 800710c:	4620      	mov	r0, r4
 800710e:	f001 f8f8 	bl	8008302 <__multadd>
 8007112:	4601      	mov	r1, r0
 8007114:	4606      	mov	r6, r0
 8007116:	4650      	mov	r0, sl
 8007118:	f001 fab1 	bl	800867e <__mcmp>
 800711c:	2800      	cmp	r0, #0
 800711e:	f73f adb6 	bgt.w	8006c8e <_dtoa_r+0x48e>
 8007122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007124:	9d02      	ldr	r5, [sp, #8]
 8007126:	ea6f 0b03 	mvn.w	fp, r3
 800712a:	2300      	movs	r3, #0
 800712c:	9303      	str	r3, [sp, #12]
 800712e:	4631      	mov	r1, r6
 8007130:	4620      	mov	r0, r4
 8007132:	f001 f8cf 	bl	80082d4 <_Bfree>
 8007136:	2f00      	cmp	r7, #0
 8007138:	f43f aea6 	beq.w	8006e88 <_dtoa_r+0x688>
 800713c:	9b03      	ldr	r3, [sp, #12]
 800713e:	b12b      	cbz	r3, 800714c <_dtoa_r+0x94c>
 8007140:	42bb      	cmp	r3, r7
 8007142:	d003      	beq.n	800714c <_dtoa_r+0x94c>
 8007144:	4619      	mov	r1, r3
 8007146:	4620      	mov	r0, r4
 8007148:	f001 f8c4 	bl	80082d4 <_Bfree>
 800714c:	4639      	mov	r1, r7
 800714e:	4620      	mov	r0, r4
 8007150:	f001 f8c0 	bl	80082d4 <_Bfree>
 8007154:	e698      	b.n	8006e88 <_dtoa_r+0x688>
 8007156:	2600      	movs	r6, #0
 8007158:	4637      	mov	r7, r6
 800715a:	e7e2      	b.n	8007122 <_dtoa_r+0x922>
 800715c:	46bb      	mov	fp, r7
 800715e:	4637      	mov	r7, r6
 8007160:	e595      	b.n	8006c8e <_dtoa_r+0x48e>
 8007162:	bf00      	nop
 8007164:	40240000 	.word	0x40240000
 8007168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800716a:	bb93      	cbnz	r3, 80071d2 <_dtoa_r+0x9d2>
 800716c:	9b03      	ldr	r3, [sp, #12]
 800716e:	9304      	str	r3, [sp, #16]
 8007170:	9d02      	ldr	r5, [sp, #8]
 8007172:	4631      	mov	r1, r6
 8007174:	4650      	mov	r0, sl
 8007176:	f7ff fab4 	bl	80066e2 <quorem>
 800717a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800717e:	f805 9b01 	strb.w	r9, [r5], #1
 8007182:	9b02      	ldr	r3, [sp, #8]
 8007184:	9a04      	ldr	r2, [sp, #16]
 8007186:	1aeb      	subs	r3, r5, r3
 8007188:	429a      	cmp	r2, r3
 800718a:	f300 80dc 	bgt.w	8007346 <_dtoa_r+0xb46>
 800718e:	9b02      	ldr	r3, [sp, #8]
 8007190:	2a01      	cmp	r2, #1
 8007192:	bfac      	ite	ge
 8007194:	189b      	addge	r3, r3, r2
 8007196:	3301      	addlt	r3, #1
 8007198:	4698      	mov	r8, r3
 800719a:	2300      	movs	r3, #0
 800719c:	9303      	str	r3, [sp, #12]
 800719e:	4651      	mov	r1, sl
 80071a0:	2201      	movs	r2, #1
 80071a2:	4620      	mov	r0, r4
 80071a4:	f001 fa1a 	bl	80085dc <__lshift>
 80071a8:	4631      	mov	r1, r6
 80071aa:	4682      	mov	sl, r0
 80071ac:	f001 fa67 	bl	800867e <__mcmp>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	f300 808d 	bgt.w	80072d0 <_dtoa_r+0xad0>
 80071b6:	d103      	bne.n	80071c0 <_dtoa_r+0x9c0>
 80071b8:	f019 0f01 	tst.w	r9, #1
 80071bc:	f040 8088 	bne.w	80072d0 <_dtoa_r+0xad0>
 80071c0:	4645      	mov	r5, r8
 80071c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80071c6:	2b30      	cmp	r3, #48	; 0x30
 80071c8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80071cc:	d1af      	bne.n	800712e <_dtoa_r+0x92e>
 80071ce:	4615      	mov	r5, r2
 80071d0:	e7f7      	b.n	80071c2 <_dtoa_r+0x9c2>
 80071d2:	9b03      	ldr	r3, [sp, #12]
 80071d4:	9304      	str	r3, [sp, #16]
 80071d6:	2d00      	cmp	r5, #0
 80071d8:	dd05      	ble.n	80071e6 <_dtoa_r+0x9e6>
 80071da:	4639      	mov	r1, r7
 80071dc:	462a      	mov	r2, r5
 80071de:	4620      	mov	r0, r4
 80071e0:	f001 f9fc 	bl	80085dc <__lshift>
 80071e4:	4607      	mov	r7, r0
 80071e6:	f1b8 0f00 	cmp.w	r8, #0
 80071ea:	d04c      	beq.n	8007286 <_dtoa_r+0xa86>
 80071ec:	6879      	ldr	r1, [r7, #4]
 80071ee:	4620      	mov	r0, r4
 80071f0:	f001 f83c 	bl	800826c <_Balloc>
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	3202      	adds	r2, #2
 80071f8:	4605      	mov	r5, r0
 80071fa:	0092      	lsls	r2, r2, #2
 80071fc:	f107 010c 	add.w	r1, r7, #12
 8007200:	300c      	adds	r0, #12
 8007202:	f7fd fd21 	bl	8004c48 <memcpy>
 8007206:	2201      	movs	r2, #1
 8007208:	4629      	mov	r1, r5
 800720a:	4620      	mov	r0, r4
 800720c:	f001 f9e6 	bl	80085dc <__lshift>
 8007210:	9b00      	ldr	r3, [sp, #0]
 8007212:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007216:	9703      	str	r7, [sp, #12]
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	4607      	mov	r7, r0
 800721e:	9305      	str	r3, [sp, #20]
 8007220:	4631      	mov	r1, r6
 8007222:	4650      	mov	r0, sl
 8007224:	f7ff fa5d 	bl	80066e2 <quorem>
 8007228:	9903      	ldr	r1, [sp, #12]
 800722a:	4605      	mov	r5, r0
 800722c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007230:	4650      	mov	r0, sl
 8007232:	f001 fa24 	bl	800867e <__mcmp>
 8007236:	463a      	mov	r2, r7
 8007238:	9000      	str	r0, [sp, #0]
 800723a:	4631      	mov	r1, r6
 800723c:	4620      	mov	r0, r4
 800723e:	f001 fa38 	bl	80086b2 <__mdiff>
 8007242:	68c3      	ldr	r3, [r0, #12]
 8007244:	4602      	mov	r2, r0
 8007246:	bb03      	cbnz	r3, 800728a <_dtoa_r+0xa8a>
 8007248:	4601      	mov	r1, r0
 800724a:	9006      	str	r0, [sp, #24]
 800724c:	4650      	mov	r0, sl
 800724e:	f001 fa16 	bl	800867e <__mcmp>
 8007252:	9a06      	ldr	r2, [sp, #24]
 8007254:	4603      	mov	r3, r0
 8007256:	4611      	mov	r1, r2
 8007258:	4620      	mov	r0, r4
 800725a:	9306      	str	r3, [sp, #24]
 800725c:	f001 f83a 	bl	80082d4 <_Bfree>
 8007260:	9b06      	ldr	r3, [sp, #24]
 8007262:	b9a3      	cbnz	r3, 800728e <_dtoa_r+0xa8e>
 8007264:	9a07      	ldr	r2, [sp, #28]
 8007266:	b992      	cbnz	r2, 800728e <_dtoa_r+0xa8e>
 8007268:	9a05      	ldr	r2, [sp, #20]
 800726a:	b982      	cbnz	r2, 800728e <_dtoa_r+0xa8e>
 800726c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007270:	d029      	beq.n	80072c6 <_dtoa_r+0xac6>
 8007272:	9b00      	ldr	r3, [sp, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	dd01      	ble.n	800727c <_dtoa_r+0xa7c>
 8007278:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800727c:	f108 0501 	add.w	r5, r8, #1
 8007280:	f888 9000 	strb.w	r9, [r8]
 8007284:	e753      	b.n	800712e <_dtoa_r+0x92e>
 8007286:	4638      	mov	r0, r7
 8007288:	e7c2      	b.n	8007210 <_dtoa_r+0xa10>
 800728a:	2301      	movs	r3, #1
 800728c:	e7e3      	b.n	8007256 <_dtoa_r+0xa56>
 800728e:	9a00      	ldr	r2, [sp, #0]
 8007290:	2a00      	cmp	r2, #0
 8007292:	db04      	blt.n	800729e <_dtoa_r+0xa9e>
 8007294:	d125      	bne.n	80072e2 <_dtoa_r+0xae2>
 8007296:	9a07      	ldr	r2, [sp, #28]
 8007298:	bb1a      	cbnz	r2, 80072e2 <_dtoa_r+0xae2>
 800729a:	9a05      	ldr	r2, [sp, #20]
 800729c:	bb0a      	cbnz	r2, 80072e2 <_dtoa_r+0xae2>
 800729e:	2b00      	cmp	r3, #0
 80072a0:	ddec      	ble.n	800727c <_dtoa_r+0xa7c>
 80072a2:	4651      	mov	r1, sl
 80072a4:	2201      	movs	r2, #1
 80072a6:	4620      	mov	r0, r4
 80072a8:	f001 f998 	bl	80085dc <__lshift>
 80072ac:	4631      	mov	r1, r6
 80072ae:	4682      	mov	sl, r0
 80072b0:	f001 f9e5 	bl	800867e <__mcmp>
 80072b4:	2800      	cmp	r0, #0
 80072b6:	dc03      	bgt.n	80072c0 <_dtoa_r+0xac0>
 80072b8:	d1e0      	bne.n	800727c <_dtoa_r+0xa7c>
 80072ba:	f019 0f01 	tst.w	r9, #1
 80072be:	d0dd      	beq.n	800727c <_dtoa_r+0xa7c>
 80072c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80072c4:	d1d8      	bne.n	8007278 <_dtoa_r+0xa78>
 80072c6:	2339      	movs	r3, #57	; 0x39
 80072c8:	f888 3000 	strb.w	r3, [r8]
 80072cc:	f108 0801 	add.w	r8, r8, #1
 80072d0:	4645      	mov	r5, r8
 80072d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80072d6:	2b39      	cmp	r3, #57	; 0x39
 80072d8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80072dc:	d03b      	beq.n	8007356 <_dtoa_r+0xb56>
 80072de:	3301      	adds	r3, #1
 80072e0:	e040      	b.n	8007364 <_dtoa_r+0xb64>
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f108 0501 	add.w	r5, r8, #1
 80072e8:	dd05      	ble.n	80072f6 <_dtoa_r+0xaf6>
 80072ea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80072ee:	d0ea      	beq.n	80072c6 <_dtoa_r+0xac6>
 80072f0:	f109 0901 	add.w	r9, r9, #1
 80072f4:	e7c4      	b.n	8007280 <_dtoa_r+0xa80>
 80072f6:	9b02      	ldr	r3, [sp, #8]
 80072f8:	9a04      	ldr	r2, [sp, #16]
 80072fa:	f805 9c01 	strb.w	r9, [r5, #-1]
 80072fe:	1aeb      	subs	r3, r5, r3
 8007300:	4293      	cmp	r3, r2
 8007302:	46a8      	mov	r8, r5
 8007304:	f43f af4b 	beq.w	800719e <_dtoa_r+0x99e>
 8007308:	4651      	mov	r1, sl
 800730a:	2300      	movs	r3, #0
 800730c:	220a      	movs	r2, #10
 800730e:	4620      	mov	r0, r4
 8007310:	f000 fff7 	bl	8008302 <__multadd>
 8007314:	9b03      	ldr	r3, [sp, #12]
 8007316:	9903      	ldr	r1, [sp, #12]
 8007318:	42bb      	cmp	r3, r7
 800731a:	4682      	mov	sl, r0
 800731c:	f04f 0300 	mov.w	r3, #0
 8007320:	f04f 020a 	mov.w	r2, #10
 8007324:	4620      	mov	r0, r4
 8007326:	d104      	bne.n	8007332 <_dtoa_r+0xb32>
 8007328:	f000 ffeb 	bl	8008302 <__multadd>
 800732c:	9003      	str	r0, [sp, #12]
 800732e:	4607      	mov	r7, r0
 8007330:	e776      	b.n	8007220 <_dtoa_r+0xa20>
 8007332:	f000 ffe6 	bl	8008302 <__multadd>
 8007336:	2300      	movs	r3, #0
 8007338:	9003      	str	r0, [sp, #12]
 800733a:	220a      	movs	r2, #10
 800733c:	4639      	mov	r1, r7
 800733e:	4620      	mov	r0, r4
 8007340:	f000 ffdf 	bl	8008302 <__multadd>
 8007344:	e7f3      	b.n	800732e <_dtoa_r+0xb2e>
 8007346:	4651      	mov	r1, sl
 8007348:	2300      	movs	r3, #0
 800734a:	220a      	movs	r2, #10
 800734c:	4620      	mov	r0, r4
 800734e:	f000 ffd8 	bl	8008302 <__multadd>
 8007352:	4682      	mov	sl, r0
 8007354:	e70d      	b.n	8007172 <_dtoa_r+0x972>
 8007356:	9b02      	ldr	r3, [sp, #8]
 8007358:	4293      	cmp	r3, r2
 800735a:	d105      	bne.n	8007368 <_dtoa_r+0xb68>
 800735c:	9a02      	ldr	r2, [sp, #8]
 800735e:	f10b 0b01 	add.w	fp, fp, #1
 8007362:	2331      	movs	r3, #49	; 0x31
 8007364:	7013      	strb	r3, [r2, #0]
 8007366:	e6e2      	b.n	800712e <_dtoa_r+0x92e>
 8007368:	4615      	mov	r5, r2
 800736a:	e7b2      	b.n	80072d2 <_dtoa_r+0xad2>
 800736c:	4b09      	ldr	r3, [pc, #36]	; (8007394 <_dtoa_r+0xb94>)
 800736e:	f7ff baae 	b.w	80068ce <_dtoa_r+0xce>
 8007372:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007374:	2b00      	cmp	r3, #0
 8007376:	f47f aa88 	bne.w	800688a <_dtoa_r+0x8a>
 800737a:	4b07      	ldr	r3, [pc, #28]	; (8007398 <_dtoa_r+0xb98>)
 800737c:	f7ff baa7 	b.w	80068ce <_dtoa_r+0xce>
 8007380:	9b04      	ldr	r3, [sp, #16]
 8007382:	2b00      	cmp	r3, #0
 8007384:	f73f aef4 	bgt.w	8007170 <_dtoa_r+0x970>
 8007388:	9b07      	ldr	r3, [sp, #28]
 800738a:	2b02      	cmp	r3, #2
 800738c:	f77f aef0 	ble.w	8007170 <_dtoa_r+0x970>
 8007390:	e6b8      	b.n	8007104 <_dtoa_r+0x904>
 8007392:	bf00      	nop
 8007394:	08009c0e 	.word	0x08009c0e
 8007398:	08009c50 	.word	0x08009c50

0800739c <__sflush_r>:
 800739c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80073a0:	b293      	uxth	r3, r2
 80073a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073a6:	4605      	mov	r5, r0
 80073a8:	0718      	lsls	r0, r3, #28
 80073aa:	460c      	mov	r4, r1
 80073ac:	d461      	bmi.n	8007472 <__sflush_r+0xd6>
 80073ae:	684b      	ldr	r3, [r1, #4]
 80073b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	818a      	strh	r2, [r1, #12]
 80073b8:	dc05      	bgt.n	80073c6 <__sflush_r+0x2a>
 80073ba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80073bc:	2b00      	cmp	r3, #0
 80073be:	dc02      	bgt.n	80073c6 <__sflush_r+0x2a>
 80073c0:	2000      	movs	r0, #0
 80073c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073c8:	2e00      	cmp	r6, #0
 80073ca:	d0f9      	beq.n	80073c0 <__sflush_r+0x24>
 80073cc:	2300      	movs	r3, #0
 80073ce:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80073d2:	682f      	ldr	r7, [r5, #0]
 80073d4:	602b      	str	r3, [r5, #0]
 80073d6:	d037      	beq.n	8007448 <__sflush_r+0xac>
 80073d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80073da:	89a3      	ldrh	r3, [r4, #12]
 80073dc:	075a      	lsls	r2, r3, #29
 80073de:	d505      	bpl.n	80073ec <__sflush_r+0x50>
 80073e0:	6863      	ldr	r3, [r4, #4]
 80073e2:	1ac0      	subs	r0, r0, r3
 80073e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073e6:	b10b      	cbz	r3, 80073ec <__sflush_r+0x50>
 80073e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073ea:	1ac0      	subs	r0, r0, r3
 80073ec:	2300      	movs	r3, #0
 80073ee:	4602      	mov	r2, r0
 80073f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073f2:	6a21      	ldr	r1, [r4, #32]
 80073f4:	4628      	mov	r0, r5
 80073f6:	47b0      	blx	r6
 80073f8:	1c43      	adds	r3, r0, #1
 80073fa:	89a3      	ldrh	r3, [r4, #12]
 80073fc:	d106      	bne.n	800740c <__sflush_r+0x70>
 80073fe:	6829      	ldr	r1, [r5, #0]
 8007400:	291d      	cmp	r1, #29
 8007402:	d84f      	bhi.n	80074a4 <__sflush_r+0x108>
 8007404:	4a2d      	ldr	r2, [pc, #180]	; (80074bc <__sflush_r+0x120>)
 8007406:	40ca      	lsrs	r2, r1
 8007408:	07d6      	lsls	r6, r2, #31
 800740a:	d54b      	bpl.n	80074a4 <__sflush_r+0x108>
 800740c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007410:	b21b      	sxth	r3, r3
 8007412:	2200      	movs	r2, #0
 8007414:	6062      	str	r2, [r4, #4]
 8007416:	04d9      	lsls	r1, r3, #19
 8007418:	6922      	ldr	r2, [r4, #16]
 800741a:	81a3      	strh	r3, [r4, #12]
 800741c:	6022      	str	r2, [r4, #0]
 800741e:	d504      	bpl.n	800742a <__sflush_r+0x8e>
 8007420:	1c42      	adds	r2, r0, #1
 8007422:	d101      	bne.n	8007428 <__sflush_r+0x8c>
 8007424:	682b      	ldr	r3, [r5, #0]
 8007426:	b903      	cbnz	r3, 800742a <__sflush_r+0x8e>
 8007428:	6560      	str	r0, [r4, #84]	; 0x54
 800742a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800742c:	602f      	str	r7, [r5, #0]
 800742e:	2900      	cmp	r1, #0
 8007430:	d0c6      	beq.n	80073c0 <__sflush_r+0x24>
 8007432:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007436:	4299      	cmp	r1, r3
 8007438:	d002      	beq.n	8007440 <__sflush_r+0xa4>
 800743a:	4628      	mov	r0, r5
 800743c:	f000 fa14 	bl	8007868 <_free_r>
 8007440:	2000      	movs	r0, #0
 8007442:	6360      	str	r0, [r4, #52]	; 0x34
 8007444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007448:	6a21      	ldr	r1, [r4, #32]
 800744a:	2301      	movs	r3, #1
 800744c:	4628      	mov	r0, r5
 800744e:	47b0      	blx	r6
 8007450:	1c41      	adds	r1, r0, #1
 8007452:	d1c2      	bne.n	80073da <__sflush_r+0x3e>
 8007454:	682b      	ldr	r3, [r5, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d0bf      	beq.n	80073da <__sflush_r+0x3e>
 800745a:	2b1d      	cmp	r3, #29
 800745c:	d001      	beq.n	8007462 <__sflush_r+0xc6>
 800745e:	2b16      	cmp	r3, #22
 8007460:	d101      	bne.n	8007466 <__sflush_r+0xca>
 8007462:	602f      	str	r7, [r5, #0]
 8007464:	e7ac      	b.n	80073c0 <__sflush_r+0x24>
 8007466:	89a3      	ldrh	r3, [r4, #12]
 8007468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800746c:	81a3      	strh	r3, [r4, #12]
 800746e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007472:	690f      	ldr	r7, [r1, #16]
 8007474:	2f00      	cmp	r7, #0
 8007476:	d0a3      	beq.n	80073c0 <__sflush_r+0x24>
 8007478:	079b      	lsls	r3, r3, #30
 800747a:	680e      	ldr	r6, [r1, #0]
 800747c:	bf08      	it	eq
 800747e:	694b      	ldreq	r3, [r1, #20]
 8007480:	600f      	str	r7, [r1, #0]
 8007482:	bf18      	it	ne
 8007484:	2300      	movne	r3, #0
 8007486:	eba6 0807 	sub.w	r8, r6, r7
 800748a:	608b      	str	r3, [r1, #8]
 800748c:	f1b8 0f00 	cmp.w	r8, #0
 8007490:	dd96      	ble.n	80073c0 <__sflush_r+0x24>
 8007492:	4643      	mov	r3, r8
 8007494:	463a      	mov	r2, r7
 8007496:	6a21      	ldr	r1, [r4, #32]
 8007498:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800749a:	4628      	mov	r0, r5
 800749c:	47b0      	blx	r6
 800749e:	2800      	cmp	r0, #0
 80074a0:	dc07      	bgt.n	80074b2 <__sflush_r+0x116>
 80074a2:	89a3      	ldrh	r3, [r4, #12]
 80074a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074a8:	81a3      	strh	r3, [r4, #12]
 80074aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074b2:	4407      	add	r7, r0
 80074b4:	eba8 0800 	sub.w	r8, r8, r0
 80074b8:	e7e8      	b.n	800748c <__sflush_r+0xf0>
 80074ba:	bf00      	nop
 80074bc:	20400001 	.word	0x20400001

080074c0 <_fflush_r>:
 80074c0:	b538      	push	{r3, r4, r5, lr}
 80074c2:	690b      	ldr	r3, [r1, #16]
 80074c4:	4605      	mov	r5, r0
 80074c6:	460c      	mov	r4, r1
 80074c8:	b913      	cbnz	r3, 80074d0 <_fflush_r+0x10>
 80074ca:	2500      	movs	r5, #0
 80074cc:	4628      	mov	r0, r5
 80074ce:	bd38      	pop	{r3, r4, r5, pc}
 80074d0:	b118      	cbz	r0, 80074da <_fflush_r+0x1a>
 80074d2:	6983      	ldr	r3, [r0, #24]
 80074d4:	b90b      	cbnz	r3, 80074da <_fflush_r+0x1a>
 80074d6:	f000 f887 	bl	80075e8 <__sinit>
 80074da:	4b14      	ldr	r3, [pc, #80]	; (800752c <_fflush_r+0x6c>)
 80074dc:	429c      	cmp	r4, r3
 80074de:	d11b      	bne.n	8007518 <_fflush_r+0x58>
 80074e0:	686c      	ldr	r4, [r5, #4]
 80074e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d0ef      	beq.n	80074ca <_fflush_r+0xa>
 80074ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80074ec:	07d0      	lsls	r0, r2, #31
 80074ee:	d404      	bmi.n	80074fa <_fflush_r+0x3a>
 80074f0:	0599      	lsls	r1, r3, #22
 80074f2:	d402      	bmi.n	80074fa <_fflush_r+0x3a>
 80074f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074f6:	f000 fbfd 	bl	8007cf4 <__retarget_lock_acquire_recursive>
 80074fa:	4628      	mov	r0, r5
 80074fc:	4621      	mov	r1, r4
 80074fe:	f7ff ff4d 	bl	800739c <__sflush_r>
 8007502:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007504:	07da      	lsls	r2, r3, #31
 8007506:	4605      	mov	r5, r0
 8007508:	d4e0      	bmi.n	80074cc <_fflush_r+0xc>
 800750a:	89a3      	ldrh	r3, [r4, #12]
 800750c:	059b      	lsls	r3, r3, #22
 800750e:	d4dd      	bmi.n	80074cc <_fflush_r+0xc>
 8007510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007512:	f000 fbf0 	bl	8007cf6 <__retarget_lock_release_recursive>
 8007516:	e7d9      	b.n	80074cc <_fflush_r+0xc>
 8007518:	4b05      	ldr	r3, [pc, #20]	; (8007530 <_fflush_r+0x70>)
 800751a:	429c      	cmp	r4, r3
 800751c:	d101      	bne.n	8007522 <_fflush_r+0x62>
 800751e:	68ac      	ldr	r4, [r5, #8]
 8007520:	e7df      	b.n	80074e2 <_fflush_r+0x22>
 8007522:	4b04      	ldr	r3, [pc, #16]	; (8007534 <_fflush_r+0x74>)
 8007524:	429c      	cmp	r4, r3
 8007526:	bf08      	it	eq
 8007528:	68ec      	ldreq	r4, [r5, #12]
 800752a:	e7da      	b.n	80074e2 <_fflush_r+0x22>
 800752c:	08009c80 	.word	0x08009c80
 8007530:	08009ca0 	.word	0x08009ca0
 8007534:	08009c60 	.word	0x08009c60

08007538 <_cleanup_r>:
 8007538:	4901      	ldr	r1, [pc, #4]	; (8007540 <_cleanup_r+0x8>)
 800753a:	f000 bb9f 	b.w	8007c7c <_fwalk_reent>
 800753e:	bf00      	nop
 8007540:	08008ef9 	.word	0x08008ef9

08007544 <std.isra.0>:
 8007544:	2300      	movs	r3, #0
 8007546:	b510      	push	{r4, lr}
 8007548:	4604      	mov	r4, r0
 800754a:	6003      	str	r3, [r0, #0]
 800754c:	6043      	str	r3, [r0, #4]
 800754e:	6083      	str	r3, [r0, #8]
 8007550:	8181      	strh	r1, [r0, #12]
 8007552:	6643      	str	r3, [r0, #100]	; 0x64
 8007554:	81c2      	strh	r2, [r0, #14]
 8007556:	6103      	str	r3, [r0, #16]
 8007558:	6143      	str	r3, [r0, #20]
 800755a:	6183      	str	r3, [r0, #24]
 800755c:	4619      	mov	r1, r3
 800755e:	2208      	movs	r2, #8
 8007560:	305c      	adds	r0, #92	; 0x5c
 8007562:	f7fd fb7c 	bl	8004c5e <memset>
 8007566:	4b05      	ldr	r3, [pc, #20]	; (800757c <std.isra.0+0x38>)
 8007568:	6263      	str	r3, [r4, #36]	; 0x24
 800756a:	4b05      	ldr	r3, [pc, #20]	; (8007580 <std.isra.0+0x3c>)
 800756c:	62a3      	str	r3, [r4, #40]	; 0x28
 800756e:	4b05      	ldr	r3, [pc, #20]	; (8007584 <std.isra.0+0x40>)
 8007570:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007572:	4b05      	ldr	r3, [pc, #20]	; (8007588 <std.isra.0+0x44>)
 8007574:	6224      	str	r4, [r4, #32]
 8007576:	6323      	str	r3, [r4, #48]	; 0x30
 8007578:	bd10      	pop	{r4, pc}
 800757a:	bf00      	nop
 800757c:	08008bb5 	.word	0x08008bb5
 8007580:	08008bd7 	.word	0x08008bd7
 8007584:	08008c0f 	.word	0x08008c0f
 8007588:	08008c33 	.word	0x08008c33

0800758c <__sfmoreglue>:
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	1e4a      	subs	r2, r1, #1
 8007590:	2568      	movs	r5, #104	; 0x68
 8007592:	4355      	muls	r5, r2
 8007594:	460e      	mov	r6, r1
 8007596:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800759a:	f000 fc21 	bl	8007de0 <_malloc_r>
 800759e:	4604      	mov	r4, r0
 80075a0:	b140      	cbz	r0, 80075b4 <__sfmoreglue+0x28>
 80075a2:	2100      	movs	r1, #0
 80075a4:	e880 0042 	stmia.w	r0, {r1, r6}
 80075a8:	300c      	adds	r0, #12
 80075aa:	60a0      	str	r0, [r4, #8]
 80075ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80075b0:	f7fd fb55 	bl	8004c5e <memset>
 80075b4:	4620      	mov	r0, r4
 80075b6:	bd70      	pop	{r4, r5, r6, pc}

080075b8 <__sfp_lock_acquire>:
 80075b8:	4801      	ldr	r0, [pc, #4]	; (80075c0 <__sfp_lock_acquire+0x8>)
 80075ba:	f000 bb9b 	b.w	8007cf4 <__retarget_lock_acquire_recursive>
 80075be:	bf00      	nop
 80075c0:	20000fe8 	.word	0x20000fe8

080075c4 <__sfp_lock_release>:
 80075c4:	4801      	ldr	r0, [pc, #4]	; (80075cc <__sfp_lock_release+0x8>)
 80075c6:	f000 bb96 	b.w	8007cf6 <__retarget_lock_release_recursive>
 80075ca:	bf00      	nop
 80075cc:	20000fe8 	.word	0x20000fe8

080075d0 <__sinit_lock_acquire>:
 80075d0:	4801      	ldr	r0, [pc, #4]	; (80075d8 <__sinit_lock_acquire+0x8>)
 80075d2:	f000 bb8f 	b.w	8007cf4 <__retarget_lock_acquire_recursive>
 80075d6:	bf00      	nop
 80075d8:	20000fe3 	.word	0x20000fe3

080075dc <__sinit_lock_release>:
 80075dc:	4801      	ldr	r0, [pc, #4]	; (80075e4 <__sinit_lock_release+0x8>)
 80075de:	f000 bb8a 	b.w	8007cf6 <__retarget_lock_release_recursive>
 80075e2:	bf00      	nop
 80075e4:	20000fe3 	.word	0x20000fe3

080075e8 <__sinit>:
 80075e8:	b510      	push	{r4, lr}
 80075ea:	4604      	mov	r4, r0
 80075ec:	f7ff fff0 	bl	80075d0 <__sinit_lock_acquire>
 80075f0:	69a3      	ldr	r3, [r4, #24]
 80075f2:	b11b      	cbz	r3, 80075fc <__sinit+0x14>
 80075f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075f8:	f7ff bff0 	b.w	80075dc <__sinit_lock_release>
 80075fc:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8007600:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 8007604:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8007608:	4b12      	ldr	r3, [pc, #72]	; (8007654 <__sinit+0x6c>)
 800760a:	4a13      	ldr	r2, [pc, #76]	; (8007658 <__sinit+0x70>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	62a2      	str	r2, [r4, #40]	; 0x28
 8007610:	429c      	cmp	r4, r3
 8007612:	bf04      	itt	eq
 8007614:	2301      	moveq	r3, #1
 8007616:	61a3      	streq	r3, [r4, #24]
 8007618:	4620      	mov	r0, r4
 800761a:	f000 f81f 	bl	800765c <__sfp>
 800761e:	6060      	str	r0, [r4, #4]
 8007620:	4620      	mov	r0, r4
 8007622:	f000 f81b 	bl	800765c <__sfp>
 8007626:	60a0      	str	r0, [r4, #8]
 8007628:	4620      	mov	r0, r4
 800762a:	f000 f817 	bl	800765c <__sfp>
 800762e:	2200      	movs	r2, #0
 8007630:	60e0      	str	r0, [r4, #12]
 8007632:	2104      	movs	r1, #4
 8007634:	6860      	ldr	r0, [r4, #4]
 8007636:	f7ff ff85 	bl	8007544 <std.isra.0>
 800763a:	2201      	movs	r2, #1
 800763c:	2109      	movs	r1, #9
 800763e:	68a0      	ldr	r0, [r4, #8]
 8007640:	f7ff ff80 	bl	8007544 <std.isra.0>
 8007644:	2202      	movs	r2, #2
 8007646:	2112      	movs	r1, #18
 8007648:	68e0      	ldr	r0, [r4, #12]
 800764a:	f7ff ff7b 	bl	8007544 <std.isra.0>
 800764e:	2301      	movs	r3, #1
 8007650:	61a3      	str	r3, [r4, #24]
 8007652:	e7cf      	b.n	80075f4 <__sinit+0xc>
 8007654:	08009bd8 	.word	0x08009bd8
 8007658:	08007539 	.word	0x08007539

0800765c <__sfp>:
 800765c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765e:	4607      	mov	r7, r0
 8007660:	f7ff ffaa 	bl	80075b8 <__sfp_lock_acquire>
 8007664:	4b1f      	ldr	r3, [pc, #124]	; (80076e4 <__sfp+0x88>)
 8007666:	681e      	ldr	r6, [r3, #0]
 8007668:	69b3      	ldr	r3, [r6, #24]
 800766a:	b913      	cbnz	r3, 8007672 <__sfp+0x16>
 800766c:	4630      	mov	r0, r6
 800766e:	f7ff ffbb 	bl	80075e8 <__sinit>
 8007672:	36d8      	adds	r6, #216	; 0xd8
 8007674:	68b4      	ldr	r4, [r6, #8]
 8007676:	6873      	ldr	r3, [r6, #4]
 8007678:	3b01      	subs	r3, #1
 800767a:	d503      	bpl.n	8007684 <__sfp+0x28>
 800767c:	6833      	ldr	r3, [r6, #0]
 800767e:	b133      	cbz	r3, 800768e <__sfp+0x32>
 8007680:	6836      	ldr	r6, [r6, #0]
 8007682:	e7f7      	b.n	8007674 <__sfp+0x18>
 8007684:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007688:	b17d      	cbz	r5, 80076aa <__sfp+0x4e>
 800768a:	3468      	adds	r4, #104	; 0x68
 800768c:	e7f4      	b.n	8007678 <__sfp+0x1c>
 800768e:	2104      	movs	r1, #4
 8007690:	4638      	mov	r0, r7
 8007692:	f7ff ff7b 	bl	800758c <__sfmoreglue>
 8007696:	4604      	mov	r4, r0
 8007698:	6030      	str	r0, [r6, #0]
 800769a:	2800      	cmp	r0, #0
 800769c:	d1f0      	bne.n	8007680 <__sfp+0x24>
 800769e:	f7ff ff91 	bl	80075c4 <__sfp_lock_release>
 80076a2:	230c      	movs	r3, #12
 80076a4:	603b      	str	r3, [r7, #0]
 80076a6:	4620      	mov	r0, r4
 80076a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076ae:	81e3      	strh	r3, [r4, #14]
 80076b0:	2301      	movs	r3, #1
 80076b2:	81a3      	strh	r3, [r4, #12]
 80076b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076b8:	6665      	str	r5, [r4, #100]	; 0x64
 80076ba:	f000 fb19 	bl	8007cf0 <__retarget_lock_init_recursive>
 80076be:	f7ff ff81 	bl	80075c4 <__sfp_lock_release>
 80076c2:	6025      	str	r5, [r4, #0]
 80076c4:	60a5      	str	r5, [r4, #8]
 80076c6:	6065      	str	r5, [r4, #4]
 80076c8:	6125      	str	r5, [r4, #16]
 80076ca:	6165      	str	r5, [r4, #20]
 80076cc:	61a5      	str	r5, [r4, #24]
 80076ce:	2208      	movs	r2, #8
 80076d0:	4629      	mov	r1, r5
 80076d2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80076d6:	f7fd fac2 	bl	8004c5e <memset>
 80076da:	6365      	str	r5, [r4, #52]	; 0x34
 80076dc:	63a5      	str	r5, [r4, #56]	; 0x38
 80076de:	64a5      	str	r5, [r4, #72]	; 0x48
 80076e0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80076e2:	e7e0      	b.n	80076a6 <__sfp+0x4a>
 80076e4:	08009bd8 	.word	0x08009bd8

080076e8 <__fputwc>:
 80076e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80076ec:	4680      	mov	r8, r0
 80076ee:	460e      	mov	r6, r1
 80076f0:	4614      	mov	r4, r2
 80076f2:	f000 fae1 	bl	8007cb8 <__locale_mb_cur_max>
 80076f6:	2801      	cmp	r0, #1
 80076f8:	d11c      	bne.n	8007734 <__fputwc+0x4c>
 80076fa:	1e73      	subs	r3, r6, #1
 80076fc:	2bfe      	cmp	r3, #254	; 0xfe
 80076fe:	d819      	bhi.n	8007734 <__fputwc+0x4c>
 8007700:	f88d 6004 	strb.w	r6, [sp, #4]
 8007704:	4605      	mov	r5, r0
 8007706:	2700      	movs	r7, #0
 8007708:	f10d 0904 	add.w	r9, sp, #4
 800770c:	42af      	cmp	r7, r5
 800770e:	d020      	beq.n	8007752 <__fputwc+0x6a>
 8007710:	68a3      	ldr	r3, [r4, #8]
 8007712:	f817 1009 	ldrb.w	r1, [r7, r9]
 8007716:	3b01      	subs	r3, #1
 8007718:	2b00      	cmp	r3, #0
 800771a:	60a3      	str	r3, [r4, #8]
 800771c:	da04      	bge.n	8007728 <__fputwc+0x40>
 800771e:	69a2      	ldr	r2, [r4, #24]
 8007720:	4293      	cmp	r3, r2
 8007722:	db1a      	blt.n	800775a <__fputwc+0x72>
 8007724:	290a      	cmp	r1, #10
 8007726:	d018      	beq.n	800775a <__fputwc+0x72>
 8007728:	6823      	ldr	r3, [r4, #0]
 800772a:	1c5a      	adds	r2, r3, #1
 800772c:	6022      	str	r2, [r4, #0]
 800772e:	7019      	strb	r1, [r3, #0]
 8007730:	3701      	adds	r7, #1
 8007732:	e7eb      	b.n	800770c <__fputwc+0x24>
 8007734:	4632      	mov	r2, r6
 8007736:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800773a:	a901      	add	r1, sp, #4
 800773c:	4640      	mov	r0, r8
 800773e:	f001 fb55 	bl	8008dec <_wcrtomb_r>
 8007742:	1c42      	adds	r2, r0, #1
 8007744:	4605      	mov	r5, r0
 8007746:	d1de      	bne.n	8007706 <__fputwc+0x1e>
 8007748:	89a3      	ldrh	r3, [r4, #12]
 800774a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800774e:	81a3      	strh	r3, [r4, #12]
 8007750:	4606      	mov	r6, r0
 8007752:	4630      	mov	r0, r6
 8007754:	b003      	add	sp, #12
 8007756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800775a:	4622      	mov	r2, r4
 800775c:	4640      	mov	r0, r8
 800775e:	f001 fae7 	bl	8008d30 <__swbuf_r>
 8007762:	1c43      	adds	r3, r0, #1
 8007764:	d1e4      	bne.n	8007730 <__fputwc+0x48>
 8007766:	4606      	mov	r6, r0
 8007768:	e7f3      	b.n	8007752 <__fputwc+0x6a>

0800776a <_fputwc_r>:
 800776a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800776c:	07db      	lsls	r3, r3, #31
 800776e:	b570      	push	{r4, r5, r6, lr}
 8007770:	4605      	mov	r5, r0
 8007772:	460e      	mov	r6, r1
 8007774:	4614      	mov	r4, r2
 8007776:	d405      	bmi.n	8007784 <_fputwc_r+0x1a>
 8007778:	8993      	ldrh	r3, [r2, #12]
 800777a:	0598      	lsls	r0, r3, #22
 800777c:	d402      	bmi.n	8007784 <_fputwc_r+0x1a>
 800777e:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8007780:	f000 fab8 	bl	8007cf4 <__retarget_lock_acquire_recursive>
 8007784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007788:	0499      	lsls	r1, r3, #18
 800778a:	d406      	bmi.n	800779a <_fputwc_r+0x30>
 800778c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007790:	81a3      	strh	r3, [r4, #12]
 8007792:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007794:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007798:	6663      	str	r3, [r4, #100]	; 0x64
 800779a:	4622      	mov	r2, r4
 800779c:	4628      	mov	r0, r5
 800779e:	4631      	mov	r1, r6
 80077a0:	f7ff ffa2 	bl	80076e8 <__fputwc>
 80077a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077a6:	07da      	lsls	r2, r3, #31
 80077a8:	4605      	mov	r5, r0
 80077aa:	d405      	bmi.n	80077b8 <_fputwc_r+0x4e>
 80077ac:	89a3      	ldrh	r3, [r4, #12]
 80077ae:	059b      	lsls	r3, r3, #22
 80077b0:	d402      	bmi.n	80077b8 <_fputwc_r+0x4e>
 80077b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077b4:	f000 fa9f 	bl	8007cf6 <__retarget_lock_release_recursive>
 80077b8:	4628      	mov	r0, r5
 80077ba:	bd70      	pop	{r4, r5, r6, pc}

080077bc <_malloc_trim_r>:
 80077bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077c0:	4f25      	ldr	r7, [pc, #148]	; (8007858 <_malloc_trim_r+0x9c>)
 80077c2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8007864 <_malloc_trim_r+0xa8>
 80077c6:	4689      	mov	r9, r1
 80077c8:	4606      	mov	r6, r0
 80077ca:	f000 fd43 	bl	8008254 <__malloc_lock>
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	685d      	ldr	r5, [r3, #4]
 80077d2:	f1a8 0411 	sub.w	r4, r8, #17
 80077d6:	f025 0503 	bic.w	r5, r5, #3
 80077da:	eba4 0409 	sub.w	r4, r4, r9
 80077de:	442c      	add	r4, r5
 80077e0:	fbb4 f4f8 	udiv	r4, r4, r8
 80077e4:	3c01      	subs	r4, #1
 80077e6:	fb08 f404 	mul.w	r4, r8, r4
 80077ea:	4544      	cmp	r4, r8
 80077ec:	da05      	bge.n	80077fa <_malloc_trim_r+0x3e>
 80077ee:	4630      	mov	r0, r6
 80077f0:	f000 fd36 	bl	8008260 <__malloc_unlock>
 80077f4:	2000      	movs	r0, #0
 80077f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077fa:	2100      	movs	r1, #0
 80077fc:	4630      	mov	r0, r6
 80077fe:	f001 f985 	bl	8008b0c <_sbrk_r>
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	442b      	add	r3, r5
 8007806:	4298      	cmp	r0, r3
 8007808:	d1f1      	bne.n	80077ee <_malloc_trim_r+0x32>
 800780a:	4261      	negs	r1, r4
 800780c:	4630      	mov	r0, r6
 800780e:	f001 f97d 	bl	8008b0c <_sbrk_r>
 8007812:	3001      	adds	r0, #1
 8007814:	d110      	bne.n	8007838 <_malloc_trim_r+0x7c>
 8007816:	2100      	movs	r1, #0
 8007818:	4630      	mov	r0, r6
 800781a:	f001 f977 	bl	8008b0c <_sbrk_r>
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	1a83      	subs	r3, r0, r2
 8007822:	2b0f      	cmp	r3, #15
 8007824:	dde3      	ble.n	80077ee <_malloc_trim_r+0x32>
 8007826:	490d      	ldr	r1, [pc, #52]	; (800785c <_malloc_trim_r+0xa0>)
 8007828:	6809      	ldr	r1, [r1, #0]
 800782a:	1a40      	subs	r0, r0, r1
 800782c:	490c      	ldr	r1, [pc, #48]	; (8007860 <_malloc_trim_r+0xa4>)
 800782e:	f043 0301 	orr.w	r3, r3, #1
 8007832:	6008      	str	r0, [r1, #0]
 8007834:	6053      	str	r3, [r2, #4]
 8007836:	e7da      	b.n	80077ee <_malloc_trim_r+0x32>
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	4a09      	ldr	r2, [pc, #36]	; (8007860 <_malloc_trim_r+0xa4>)
 800783c:	1b2d      	subs	r5, r5, r4
 800783e:	f045 0501 	orr.w	r5, r5, #1
 8007842:	605d      	str	r5, [r3, #4]
 8007844:	6813      	ldr	r3, [r2, #0]
 8007846:	4630      	mov	r0, r6
 8007848:	1b1c      	subs	r4, r3, r4
 800784a:	6014      	str	r4, [r2, #0]
 800784c:	f000 fd08 	bl	8008260 <__malloc_unlock>
 8007850:	2001      	movs	r0, #1
 8007852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007856:	bf00      	nop
 8007858:	20000370 	.word	0x20000370
 800785c:	20000778 	.word	0x20000778
 8007860:	20000c34 	.word	0x20000c34
 8007864:	00000080 	.word	0x00000080

08007868 <_free_r>:
 8007868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800786c:	4604      	mov	r4, r0
 800786e:	4688      	mov	r8, r1
 8007870:	2900      	cmp	r1, #0
 8007872:	f000 80ab 	beq.w	80079cc <_free_r+0x164>
 8007876:	f000 fced 	bl	8008254 <__malloc_lock>
 800787a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800787e:	4d54      	ldr	r5, [pc, #336]	; (80079d0 <_free_r+0x168>)
 8007880:	f022 0001 	bic.w	r0, r2, #1
 8007884:	f1a8 0308 	sub.w	r3, r8, #8
 8007888:	181f      	adds	r7, r3, r0
 800788a:	68a9      	ldr	r1, [r5, #8]
 800788c:	687e      	ldr	r6, [r7, #4]
 800788e:	428f      	cmp	r7, r1
 8007890:	f026 0603 	bic.w	r6, r6, #3
 8007894:	f002 0201 	and.w	r2, r2, #1
 8007898:	d11b      	bne.n	80078d2 <_free_r+0x6a>
 800789a:	4430      	add	r0, r6
 800789c:	b93a      	cbnz	r2, 80078ae <_free_r+0x46>
 800789e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80078a2:	1a9b      	subs	r3, r3, r2
 80078a4:	4410      	add	r0, r2
 80078a6:	6899      	ldr	r1, [r3, #8]
 80078a8:	68da      	ldr	r2, [r3, #12]
 80078aa:	60ca      	str	r2, [r1, #12]
 80078ac:	6091      	str	r1, [r2, #8]
 80078ae:	f040 0201 	orr.w	r2, r0, #1
 80078b2:	605a      	str	r2, [r3, #4]
 80078b4:	60ab      	str	r3, [r5, #8]
 80078b6:	4b47      	ldr	r3, [pc, #284]	; (80079d4 <_free_r+0x16c>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4298      	cmp	r0, r3
 80078bc:	d304      	bcc.n	80078c8 <_free_r+0x60>
 80078be:	4b46      	ldr	r3, [pc, #280]	; (80079d8 <_free_r+0x170>)
 80078c0:	4620      	mov	r0, r4
 80078c2:	6819      	ldr	r1, [r3, #0]
 80078c4:	f7ff ff7a 	bl	80077bc <_malloc_trim_r>
 80078c8:	4620      	mov	r0, r4
 80078ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ce:	f000 bcc7 	b.w	8008260 <__malloc_unlock>
 80078d2:	607e      	str	r6, [r7, #4]
 80078d4:	2a00      	cmp	r2, #0
 80078d6:	d139      	bne.n	800794c <_free_r+0xe4>
 80078d8:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80078dc:	1a5b      	subs	r3, r3, r1
 80078de:	4408      	add	r0, r1
 80078e0:	6899      	ldr	r1, [r3, #8]
 80078e2:	f105 0e08 	add.w	lr, r5, #8
 80078e6:	4571      	cmp	r1, lr
 80078e8:	d032      	beq.n	8007950 <_free_r+0xe8>
 80078ea:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80078ee:	f8c1 e00c 	str.w	lr, [r1, #12]
 80078f2:	f8ce 1008 	str.w	r1, [lr, #8]
 80078f6:	19b9      	adds	r1, r7, r6
 80078f8:	6849      	ldr	r1, [r1, #4]
 80078fa:	07c9      	lsls	r1, r1, #31
 80078fc:	d40a      	bmi.n	8007914 <_free_r+0xac>
 80078fe:	4430      	add	r0, r6
 8007900:	68b9      	ldr	r1, [r7, #8]
 8007902:	bb3a      	cbnz	r2, 8007954 <_free_r+0xec>
 8007904:	4e35      	ldr	r6, [pc, #212]	; (80079dc <_free_r+0x174>)
 8007906:	42b1      	cmp	r1, r6
 8007908:	d124      	bne.n	8007954 <_free_r+0xec>
 800790a:	616b      	str	r3, [r5, #20]
 800790c:	612b      	str	r3, [r5, #16]
 800790e:	2201      	movs	r2, #1
 8007910:	60d9      	str	r1, [r3, #12]
 8007912:	6099      	str	r1, [r3, #8]
 8007914:	f040 0101 	orr.w	r1, r0, #1
 8007918:	6059      	str	r1, [r3, #4]
 800791a:	5018      	str	r0, [r3, r0]
 800791c:	2a00      	cmp	r2, #0
 800791e:	d1d3      	bne.n	80078c8 <_free_r+0x60>
 8007920:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007924:	d21a      	bcs.n	800795c <_free_r+0xf4>
 8007926:	08c0      	lsrs	r0, r0, #3
 8007928:	1081      	asrs	r1, r0, #2
 800792a:	2201      	movs	r2, #1
 800792c:	408a      	lsls	r2, r1
 800792e:	6869      	ldr	r1, [r5, #4]
 8007930:	3001      	adds	r0, #1
 8007932:	430a      	orrs	r2, r1
 8007934:	606a      	str	r2, [r5, #4]
 8007936:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800793a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800793e:	6099      	str	r1, [r3, #8]
 8007940:	3a08      	subs	r2, #8
 8007942:	60da      	str	r2, [r3, #12]
 8007944:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8007948:	60cb      	str	r3, [r1, #12]
 800794a:	e7bd      	b.n	80078c8 <_free_r+0x60>
 800794c:	2200      	movs	r2, #0
 800794e:	e7d2      	b.n	80078f6 <_free_r+0x8e>
 8007950:	2201      	movs	r2, #1
 8007952:	e7d0      	b.n	80078f6 <_free_r+0x8e>
 8007954:	68fe      	ldr	r6, [r7, #12]
 8007956:	60ce      	str	r6, [r1, #12]
 8007958:	60b1      	str	r1, [r6, #8]
 800795a:	e7db      	b.n	8007914 <_free_r+0xac>
 800795c:	0a42      	lsrs	r2, r0, #9
 800795e:	2a04      	cmp	r2, #4
 8007960:	d813      	bhi.n	800798a <_free_r+0x122>
 8007962:	0982      	lsrs	r2, r0, #6
 8007964:	3238      	adds	r2, #56	; 0x38
 8007966:	1c51      	adds	r1, r2, #1
 8007968:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800796c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8007970:	428e      	cmp	r6, r1
 8007972:	d124      	bne.n	80079be <_free_r+0x156>
 8007974:	2001      	movs	r0, #1
 8007976:	1092      	asrs	r2, r2, #2
 8007978:	fa00 f202 	lsl.w	r2, r0, r2
 800797c:	6868      	ldr	r0, [r5, #4]
 800797e:	4302      	orrs	r2, r0
 8007980:	606a      	str	r2, [r5, #4]
 8007982:	60de      	str	r6, [r3, #12]
 8007984:	6099      	str	r1, [r3, #8]
 8007986:	60b3      	str	r3, [r6, #8]
 8007988:	e7de      	b.n	8007948 <_free_r+0xe0>
 800798a:	2a14      	cmp	r2, #20
 800798c:	d801      	bhi.n	8007992 <_free_r+0x12a>
 800798e:	325b      	adds	r2, #91	; 0x5b
 8007990:	e7e9      	b.n	8007966 <_free_r+0xfe>
 8007992:	2a54      	cmp	r2, #84	; 0x54
 8007994:	d802      	bhi.n	800799c <_free_r+0x134>
 8007996:	0b02      	lsrs	r2, r0, #12
 8007998:	326e      	adds	r2, #110	; 0x6e
 800799a:	e7e4      	b.n	8007966 <_free_r+0xfe>
 800799c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80079a0:	d802      	bhi.n	80079a8 <_free_r+0x140>
 80079a2:	0bc2      	lsrs	r2, r0, #15
 80079a4:	3277      	adds	r2, #119	; 0x77
 80079a6:	e7de      	b.n	8007966 <_free_r+0xfe>
 80079a8:	f240 5154 	movw	r1, #1364	; 0x554
 80079ac:	428a      	cmp	r2, r1
 80079ae:	bf9a      	itte	ls
 80079b0:	0c82      	lsrls	r2, r0, #18
 80079b2:	327c      	addls	r2, #124	; 0x7c
 80079b4:	227e      	movhi	r2, #126	; 0x7e
 80079b6:	e7d6      	b.n	8007966 <_free_r+0xfe>
 80079b8:	6889      	ldr	r1, [r1, #8]
 80079ba:	428e      	cmp	r6, r1
 80079bc:	d004      	beq.n	80079c8 <_free_r+0x160>
 80079be:	684a      	ldr	r2, [r1, #4]
 80079c0:	f022 0203 	bic.w	r2, r2, #3
 80079c4:	4290      	cmp	r0, r2
 80079c6:	d3f7      	bcc.n	80079b8 <_free_r+0x150>
 80079c8:	68ce      	ldr	r6, [r1, #12]
 80079ca:	e7da      	b.n	8007982 <_free_r+0x11a>
 80079cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079d0:	20000370 	.word	0x20000370
 80079d4:	2000077c 	.word	0x2000077c
 80079d8:	20000c64 	.word	0x20000c64
 80079dc:	20000378 	.word	0x20000378

080079e0 <__sfvwrite_r>:
 80079e0:	6893      	ldr	r3, [r2, #8]
 80079e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e6:	4607      	mov	r7, r0
 80079e8:	460c      	mov	r4, r1
 80079ea:	4690      	mov	r8, r2
 80079ec:	b91b      	cbnz	r3, 80079f6 <__sfvwrite_r+0x16>
 80079ee:	2000      	movs	r0, #0
 80079f0:	b003      	add	sp, #12
 80079f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f6:	898b      	ldrh	r3, [r1, #12]
 80079f8:	0718      	lsls	r0, r3, #28
 80079fa:	d526      	bpl.n	8007a4a <__sfvwrite_r+0x6a>
 80079fc:	690b      	ldr	r3, [r1, #16]
 80079fe:	b323      	cbz	r3, 8007a4a <__sfvwrite_r+0x6a>
 8007a00:	89a3      	ldrh	r3, [r4, #12]
 8007a02:	f8d8 6000 	ldr.w	r6, [r8]
 8007a06:	f013 0902 	ands.w	r9, r3, #2
 8007a0a:	d02d      	beq.n	8007a68 <__sfvwrite_r+0x88>
 8007a0c:	f04f 0a00 	mov.w	sl, #0
 8007a10:	f8df b264 	ldr.w	fp, [pc, #612]	; 8007c78 <__sfvwrite_r+0x298>
 8007a14:	46d1      	mov	r9, sl
 8007a16:	f1b9 0f00 	cmp.w	r9, #0
 8007a1a:	d01f      	beq.n	8007a5c <__sfvwrite_r+0x7c>
 8007a1c:	45d9      	cmp	r9, fp
 8007a1e:	464b      	mov	r3, r9
 8007a20:	4652      	mov	r2, sl
 8007a22:	bf28      	it	cs
 8007a24:	465b      	movcs	r3, fp
 8007a26:	6a21      	ldr	r1, [r4, #32]
 8007a28:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007a2a:	4638      	mov	r0, r7
 8007a2c:	47a8      	blx	r5
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	f340 8089 	ble.w	8007b46 <__sfvwrite_r+0x166>
 8007a34:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007a38:	4482      	add	sl, r0
 8007a3a:	eba9 0900 	sub.w	r9, r9, r0
 8007a3e:	1a18      	subs	r0, r3, r0
 8007a40:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a44:	2800      	cmp	r0, #0
 8007a46:	d1e6      	bne.n	8007a16 <__sfvwrite_r+0x36>
 8007a48:	e7d1      	b.n	80079ee <__sfvwrite_r+0xe>
 8007a4a:	4621      	mov	r1, r4
 8007a4c:	4638      	mov	r0, r7
 8007a4e:	f7fe fdd3 	bl	80065f8 <__swsetup_r>
 8007a52:	2800      	cmp	r0, #0
 8007a54:	d0d4      	beq.n	8007a00 <__sfvwrite_r+0x20>
 8007a56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a5a:	e7c9      	b.n	80079f0 <__sfvwrite_r+0x10>
 8007a5c:	f8d6 a000 	ldr.w	sl, [r6]
 8007a60:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8007a64:	3608      	adds	r6, #8
 8007a66:	e7d6      	b.n	8007a16 <__sfvwrite_r+0x36>
 8007a68:	f013 0301 	ands.w	r3, r3, #1
 8007a6c:	d043      	beq.n	8007af6 <__sfvwrite_r+0x116>
 8007a6e:	4648      	mov	r0, r9
 8007a70:	46ca      	mov	sl, r9
 8007a72:	46cb      	mov	fp, r9
 8007a74:	f1bb 0f00 	cmp.w	fp, #0
 8007a78:	f000 80d9 	beq.w	8007c2e <__sfvwrite_r+0x24e>
 8007a7c:	b950      	cbnz	r0, 8007a94 <__sfvwrite_r+0xb4>
 8007a7e:	465a      	mov	r2, fp
 8007a80:	210a      	movs	r1, #10
 8007a82:	4650      	mov	r0, sl
 8007a84:	f7f8 fbac 	bl	80001e0 <memchr>
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	f000 80d5 	beq.w	8007c38 <__sfvwrite_r+0x258>
 8007a8e:	3001      	adds	r0, #1
 8007a90:	eba0 090a 	sub.w	r9, r0, sl
 8007a94:	6820      	ldr	r0, [r4, #0]
 8007a96:	6921      	ldr	r1, [r4, #16]
 8007a98:	6962      	ldr	r2, [r4, #20]
 8007a9a:	45d9      	cmp	r9, fp
 8007a9c:	464b      	mov	r3, r9
 8007a9e:	bf28      	it	cs
 8007aa0:	465b      	movcs	r3, fp
 8007aa2:	4288      	cmp	r0, r1
 8007aa4:	f240 80cb 	bls.w	8007c3e <__sfvwrite_r+0x25e>
 8007aa8:	68a5      	ldr	r5, [r4, #8]
 8007aaa:	4415      	add	r5, r2
 8007aac:	42ab      	cmp	r3, r5
 8007aae:	f340 80c6 	ble.w	8007c3e <__sfvwrite_r+0x25e>
 8007ab2:	4651      	mov	r1, sl
 8007ab4:	462a      	mov	r2, r5
 8007ab6:	f000 fbb3 	bl	8008220 <memmove>
 8007aba:	6823      	ldr	r3, [r4, #0]
 8007abc:	442b      	add	r3, r5
 8007abe:	6023      	str	r3, [r4, #0]
 8007ac0:	4621      	mov	r1, r4
 8007ac2:	4638      	mov	r0, r7
 8007ac4:	f7ff fcfc 	bl	80074c0 <_fflush_r>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	d13c      	bne.n	8007b46 <__sfvwrite_r+0x166>
 8007acc:	ebb9 0905 	subs.w	r9, r9, r5
 8007ad0:	f040 80cf 	bne.w	8007c72 <__sfvwrite_r+0x292>
 8007ad4:	4621      	mov	r1, r4
 8007ad6:	4638      	mov	r0, r7
 8007ad8:	f7ff fcf2 	bl	80074c0 <_fflush_r>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	d132      	bne.n	8007b46 <__sfvwrite_r+0x166>
 8007ae0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007ae4:	44aa      	add	sl, r5
 8007ae6:	ebab 0b05 	sub.w	fp, fp, r5
 8007aea:	1b5d      	subs	r5, r3, r5
 8007aec:	f8c8 5008 	str.w	r5, [r8, #8]
 8007af0:	2d00      	cmp	r5, #0
 8007af2:	d1bf      	bne.n	8007a74 <__sfvwrite_r+0x94>
 8007af4:	e77b      	b.n	80079ee <__sfvwrite_r+0xe>
 8007af6:	4699      	mov	r9, r3
 8007af8:	469a      	mov	sl, r3
 8007afa:	f1ba 0f00 	cmp.w	sl, #0
 8007afe:	d027      	beq.n	8007b50 <__sfvwrite_r+0x170>
 8007b00:	89a2      	ldrh	r2, [r4, #12]
 8007b02:	68a5      	ldr	r5, [r4, #8]
 8007b04:	0591      	lsls	r1, r2, #22
 8007b06:	d565      	bpl.n	8007bd4 <__sfvwrite_r+0x1f4>
 8007b08:	45aa      	cmp	sl, r5
 8007b0a:	d33b      	bcc.n	8007b84 <__sfvwrite_r+0x1a4>
 8007b0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b10:	d036      	beq.n	8007b80 <__sfvwrite_r+0x1a0>
 8007b12:	6921      	ldr	r1, [r4, #16]
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	1a5b      	subs	r3, r3, r1
 8007b18:	9301      	str	r3, [sp, #4]
 8007b1a:	6963      	ldr	r3, [r4, #20]
 8007b1c:	2002      	movs	r0, #2
 8007b1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007b22:	fb93 fbf0 	sdiv	fp, r3, r0
 8007b26:	9b01      	ldr	r3, [sp, #4]
 8007b28:	1c58      	adds	r0, r3, #1
 8007b2a:	4450      	add	r0, sl
 8007b2c:	4583      	cmp	fp, r0
 8007b2e:	bf38      	it	cc
 8007b30:	4683      	movcc	fp, r0
 8007b32:	0553      	lsls	r3, r2, #21
 8007b34:	d53e      	bpl.n	8007bb4 <__sfvwrite_r+0x1d4>
 8007b36:	4659      	mov	r1, fp
 8007b38:	4638      	mov	r0, r7
 8007b3a:	f000 f951 	bl	8007de0 <_malloc_r>
 8007b3e:	4605      	mov	r5, r0
 8007b40:	b950      	cbnz	r0, 8007b58 <__sfvwrite_r+0x178>
 8007b42:	230c      	movs	r3, #12
 8007b44:	603b      	str	r3, [r7, #0]
 8007b46:	89a3      	ldrh	r3, [r4, #12]
 8007b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b4c:	81a3      	strh	r3, [r4, #12]
 8007b4e:	e782      	b.n	8007a56 <__sfvwrite_r+0x76>
 8007b50:	e896 0600 	ldmia.w	r6, {r9, sl}
 8007b54:	3608      	adds	r6, #8
 8007b56:	e7d0      	b.n	8007afa <__sfvwrite_r+0x11a>
 8007b58:	9a01      	ldr	r2, [sp, #4]
 8007b5a:	6921      	ldr	r1, [r4, #16]
 8007b5c:	f7fd f874 	bl	8004c48 <memcpy>
 8007b60:	89a2      	ldrh	r2, [r4, #12]
 8007b62:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8007b66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b6a:	81a2      	strh	r2, [r4, #12]
 8007b6c:	9b01      	ldr	r3, [sp, #4]
 8007b6e:	6125      	str	r5, [r4, #16]
 8007b70:	441d      	add	r5, r3
 8007b72:	ebab 0303 	sub.w	r3, fp, r3
 8007b76:	6025      	str	r5, [r4, #0]
 8007b78:	f8c4 b014 	str.w	fp, [r4, #20]
 8007b7c:	4655      	mov	r5, sl
 8007b7e:	60a3      	str	r3, [r4, #8]
 8007b80:	45aa      	cmp	sl, r5
 8007b82:	d200      	bcs.n	8007b86 <__sfvwrite_r+0x1a6>
 8007b84:	4655      	mov	r5, sl
 8007b86:	462a      	mov	r2, r5
 8007b88:	4649      	mov	r1, r9
 8007b8a:	6820      	ldr	r0, [r4, #0]
 8007b8c:	f000 fb48 	bl	8008220 <memmove>
 8007b90:	68a3      	ldr	r3, [r4, #8]
 8007b92:	1b5b      	subs	r3, r3, r5
 8007b94:	60a3      	str	r3, [r4, #8]
 8007b96:	6823      	ldr	r3, [r4, #0]
 8007b98:	441d      	add	r5, r3
 8007b9a:	6025      	str	r5, [r4, #0]
 8007b9c:	4655      	mov	r5, sl
 8007b9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007ba2:	44a9      	add	r9, r5
 8007ba4:	ebaa 0a05 	sub.w	sl, sl, r5
 8007ba8:	1b5d      	subs	r5, r3, r5
 8007baa:	f8c8 5008 	str.w	r5, [r8, #8]
 8007bae:	2d00      	cmp	r5, #0
 8007bb0:	d1a3      	bne.n	8007afa <__sfvwrite_r+0x11a>
 8007bb2:	e71c      	b.n	80079ee <__sfvwrite_r+0xe>
 8007bb4:	465a      	mov	r2, fp
 8007bb6:	4638      	mov	r0, r7
 8007bb8:	f000 fe28 	bl	800880c <_realloc_r>
 8007bbc:	4605      	mov	r5, r0
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	d1d4      	bne.n	8007b6c <__sfvwrite_r+0x18c>
 8007bc2:	6921      	ldr	r1, [r4, #16]
 8007bc4:	4638      	mov	r0, r7
 8007bc6:	f7ff fe4f 	bl	8007868 <_free_r>
 8007bca:	89a3      	ldrh	r3, [r4, #12]
 8007bcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bd0:	81a3      	strh	r3, [r4, #12]
 8007bd2:	e7b6      	b.n	8007b42 <__sfvwrite_r+0x162>
 8007bd4:	6820      	ldr	r0, [r4, #0]
 8007bd6:	6923      	ldr	r3, [r4, #16]
 8007bd8:	4298      	cmp	r0, r3
 8007bda:	d802      	bhi.n	8007be2 <__sfvwrite_r+0x202>
 8007bdc:	6962      	ldr	r2, [r4, #20]
 8007bde:	4592      	cmp	sl, r2
 8007be0:	d215      	bcs.n	8007c0e <__sfvwrite_r+0x22e>
 8007be2:	4555      	cmp	r5, sl
 8007be4:	bf28      	it	cs
 8007be6:	4655      	movcs	r5, sl
 8007be8:	462a      	mov	r2, r5
 8007bea:	4649      	mov	r1, r9
 8007bec:	f000 fb18 	bl	8008220 <memmove>
 8007bf0:	68a3      	ldr	r3, [r4, #8]
 8007bf2:	6822      	ldr	r2, [r4, #0]
 8007bf4:	1b5b      	subs	r3, r3, r5
 8007bf6:	442a      	add	r2, r5
 8007bf8:	60a3      	str	r3, [r4, #8]
 8007bfa:	6022      	str	r2, [r4, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1ce      	bne.n	8007b9e <__sfvwrite_r+0x1be>
 8007c00:	4621      	mov	r1, r4
 8007c02:	4638      	mov	r0, r7
 8007c04:	f7ff fc5c 	bl	80074c0 <_fflush_r>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d0c8      	beq.n	8007b9e <__sfvwrite_r+0x1be>
 8007c0c:	e79b      	b.n	8007b46 <__sfvwrite_r+0x166>
 8007c0e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007c12:	4553      	cmp	r3, sl
 8007c14:	bf28      	it	cs
 8007c16:	4653      	movcs	r3, sl
 8007c18:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007c1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c1e:	6a21      	ldr	r1, [r4, #32]
 8007c20:	4353      	muls	r3, r2
 8007c22:	4638      	mov	r0, r7
 8007c24:	464a      	mov	r2, r9
 8007c26:	47a8      	blx	r5
 8007c28:	1e05      	subs	r5, r0, #0
 8007c2a:	dcb8      	bgt.n	8007b9e <__sfvwrite_r+0x1be>
 8007c2c:	e78b      	b.n	8007b46 <__sfvwrite_r+0x166>
 8007c2e:	e896 0c00 	ldmia.w	r6, {sl, fp}
 8007c32:	2000      	movs	r0, #0
 8007c34:	3608      	adds	r6, #8
 8007c36:	e71d      	b.n	8007a74 <__sfvwrite_r+0x94>
 8007c38:	f10b 0901 	add.w	r9, fp, #1
 8007c3c:	e72a      	b.n	8007a94 <__sfvwrite_r+0xb4>
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	db09      	blt.n	8007c56 <__sfvwrite_r+0x276>
 8007c42:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007c44:	6a21      	ldr	r1, [r4, #32]
 8007c46:	4613      	mov	r3, r2
 8007c48:	4638      	mov	r0, r7
 8007c4a:	4652      	mov	r2, sl
 8007c4c:	47a8      	blx	r5
 8007c4e:	1e05      	subs	r5, r0, #0
 8007c50:	f73f af3c 	bgt.w	8007acc <__sfvwrite_r+0xec>
 8007c54:	e777      	b.n	8007b46 <__sfvwrite_r+0x166>
 8007c56:	461a      	mov	r2, r3
 8007c58:	4651      	mov	r1, sl
 8007c5a:	9301      	str	r3, [sp, #4]
 8007c5c:	f000 fae0 	bl	8008220 <memmove>
 8007c60:	9b01      	ldr	r3, [sp, #4]
 8007c62:	68a2      	ldr	r2, [r4, #8]
 8007c64:	1ad2      	subs	r2, r2, r3
 8007c66:	60a2      	str	r2, [r4, #8]
 8007c68:	6822      	ldr	r2, [r4, #0]
 8007c6a:	441a      	add	r2, r3
 8007c6c:	6022      	str	r2, [r4, #0]
 8007c6e:	461d      	mov	r5, r3
 8007c70:	e72c      	b.n	8007acc <__sfvwrite_r+0xec>
 8007c72:	2001      	movs	r0, #1
 8007c74:	e734      	b.n	8007ae0 <__sfvwrite_r+0x100>
 8007c76:	bf00      	nop
 8007c78:	7ffffc00 	.word	0x7ffffc00

08007c7c <_fwalk_reent>:
 8007c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c80:	4680      	mov	r8, r0
 8007c82:	4689      	mov	r9, r1
 8007c84:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8007c88:	2600      	movs	r6, #0
 8007c8a:	b914      	cbnz	r4, 8007c92 <_fwalk_reent+0x16>
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c92:	68a5      	ldr	r5, [r4, #8]
 8007c94:	6867      	ldr	r7, [r4, #4]
 8007c96:	3f01      	subs	r7, #1
 8007c98:	d501      	bpl.n	8007c9e <_fwalk_reent+0x22>
 8007c9a:	6824      	ldr	r4, [r4, #0]
 8007c9c:	e7f5      	b.n	8007c8a <_fwalk_reent+0xe>
 8007c9e:	89ab      	ldrh	r3, [r5, #12]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d907      	bls.n	8007cb4 <_fwalk_reent+0x38>
 8007ca4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	d003      	beq.n	8007cb4 <_fwalk_reent+0x38>
 8007cac:	4629      	mov	r1, r5
 8007cae:	4640      	mov	r0, r8
 8007cb0:	47c8      	blx	r9
 8007cb2:	4306      	orrs	r6, r0
 8007cb4:	3568      	adds	r5, #104	; 0x68
 8007cb6:	e7ee      	b.n	8007c96 <_fwalk_reent+0x1a>

08007cb8 <__locale_mb_cur_max>:
 8007cb8:	4b04      	ldr	r3, [pc, #16]	; (8007ccc <__locale_mb_cur_max+0x14>)
 8007cba:	4a05      	ldr	r2, [pc, #20]	; (8007cd0 <__locale_mb_cur_max+0x18>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	6a1b      	ldr	r3, [r3, #32]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	bf08      	it	eq
 8007cc4:	4613      	moveq	r3, r2
 8007cc6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8007cca:	4770      	bx	lr
 8007ccc:	20000110 	.word	0x20000110
 8007cd0:	20000204 	.word	0x20000204

08007cd4 <_localeconv_r>:
 8007cd4:	4b04      	ldr	r3, [pc, #16]	; (8007ce8 <_localeconv_r+0x14>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6a18      	ldr	r0, [r3, #32]
 8007cda:	4b04      	ldr	r3, [pc, #16]	; (8007cec <_localeconv_r+0x18>)
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	bf08      	it	eq
 8007ce0:	4618      	moveq	r0, r3
 8007ce2:	30f0      	adds	r0, #240	; 0xf0
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	20000110 	.word	0x20000110
 8007cec:	20000204 	.word	0x20000204

08007cf0 <__retarget_lock_init_recursive>:
 8007cf0:	4770      	bx	lr

08007cf2 <__retarget_lock_close_recursive>:
 8007cf2:	4770      	bx	lr

08007cf4 <__retarget_lock_acquire_recursive>:
 8007cf4:	4770      	bx	lr

08007cf6 <__retarget_lock_release_recursive>:
 8007cf6:	4770      	bx	lr

08007cf8 <__swhatbuf_r>:
 8007cf8:	b570      	push	{r4, r5, r6, lr}
 8007cfa:	460e      	mov	r6, r1
 8007cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d00:	2900      	cmp	r1, #0
 8007d02:	b090      	sub	sp, #64	; 0x40
 8007d04:	4614      	mov	r4, r2
 8007d06:	461d      	mov	r5, r3
 8007d08:	da09      	bge.n	8007d1e <__swhatbuf_r+0x26>
 8007d0a:	89b3      	ldrh	r3, [r6, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007d12:	602a      	str	r2, [r5, #0]
 8007d14:	d116      	bne.n	8007d44 <__swhatbuf_r+0x4c>
 8007d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d1a:	6023      	str	r3, [r4, #0]
 8007d1c:	e015      	b.n	8007d4a <__swhatbuf_r+0x52>
 8007d1e:	aa01      	add	r2, sp, #4
 8007d20:	f001 f956 	bl	8008fd0 <_fstat_r>
 8007d24:	2800      	cmp	r0, #0
 8007d26:	dbf0      	blt.n	8007d0a <__swhatbuf_r+0x12>
 8007d28:	9a02      	ldr	r2, [sp, #8]
 8007d2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d32:	425a      	negs	r2, r3
 8007d34:	415a      	adcs	r2, r3
 8007d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d3a:	602a      	str	r2, [r5, #0]
 8007d3c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007d40:	6023      	str	r3, [r4, #0]
 8007d42:	e002      	b.n	8007d4a <__swhatbuf_r+0x52>
 8007d44:	2340      	movs	r3, #64	; 0x40
 8007d46:	6023      	str	r3, [r4, #0]
 8007d48:	4610      	mov	r0, r2
 8007d4a:	b010      	add	sp, #64	; 0x40
 8007d4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d50 <__smakebuf_r>:
 8007d50:	898b      	ldrh	r3, [r1, #12]
 8007d52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d54:	079d      	lsls	r5, r3, #30
 8007d56:	4606      	mov	r6, r0
 8007d58:	460c      	mov	r4, r1
 8007d5a:	d507      	bpl.n	8007d6c <__smakebuf_r+0x1c>
 8007d5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d60:	6023      	str	r3, [r4, #0]
 8007d62:	6123      	str	r3, [r4, #16]
 8007d64:	2301      	movs	r3, #1
 8007d66:	6163      	str	r3, [r4, #20]
 8007d68:	b002      	add	sp, #8
 8007d6a:	bd70      	pop	{r4, r5, r6, pc}
 8007d6c:	ab01      	add	r3, sp, #4
 8007d6e:	466a      	mov	r2, sp
 8007d70:	f7ff ffc2 	bl	8007cf8 <__swhatbuf_r>
 8007d74:	9900      	ldr	r1, [sp, #0]
 8007d76:	4605      	mov	r5, r0
 8007d78:	4630      	mov	r0, r6
 8007d7a:	f000 f831 	bl	8007de0 <_malloc_r>
 8007d7e:	b948      	cbnz	r0, 8007d94 <__smakebuf_r+0x44>
 8007d80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d84:	059a      	lsls	r2, r3, #22
 8007d86:	d4ef      	bmi.n	8007d68 <__smakebuf_r+0x18>
 8007d88:	f023 0303 	bic.w	r3, r3, #3
 8007d8c:	f043 0302 	orr.w	r3, r3, #2
 8007d90:	81a3      	strh	r3, [r4, #12]
 8007d92:	e7e3      	b.n	8007d5c <__smakebuf_r+0xc>
 8007d94:	4b0d      	ldr	r3, [pc, #52]	; (8007dcc <__smakebuf_r+0x7c>)
 8007d96:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d98:	89a3      	ldrh	r3, [r4, #12]
 8007d9a:	6020      	str	r0, [r4, #0]
 8007d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da0:	81a3      	strh	r3, [r4, #12]
 8007da2:	9b00      	ldr	r3, [sp, #0]
 8007da4:	6163      	str	r3, [r4, #20]
 8007da6:	9b01      	ldr	r3, [sp, #4]
 8007da8:	6120      	str	r0, [r4, #16]
 8007daa:	b15b      	cbz	r3, 8007dc4 <__smakebuf_r+0x74>
 8007dac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007db0:	4630      	mov	r0, r6
 8007db2:	f001 f91f 	bl	8008ff4 <_isatty_r>
 8007db6:	b128      	cbz	r0, 8007dc4 <__smakebuf_r+0x74>
 8007db8:	89a3      	ldrh	r3, [r4, #12]
 8007dba:	f023 0303 	bic.w	r3, r3, #3
 8007dbe:	f043 0301 	orr.w	r3, r3, #1
 8007dc2:	81a3      	strh	r3, [r4, #12]
 8007dc4:	89a3      	ldrh	r3, [r4, #12]
 8007dc6:	431d      	orrs	r5, r3
 8007dc8:	81a5      	strh	r5, [r4, #12]
 8007dca:	e7cd      	b.n	8007d68 <__smakebuf_r+0x18>
 8007dcc:	08007539 	.word	0x08007539

08007dd0 <malloc>:
 8007dd0:	4b02      	ldr	r3, [pc, #8]	; (8007ddc <malloc+0xc>)
 8007dd2:	4601      	mov	r1, r0
 8007dd4:	6818      	ldr	r0, [r3, #0]
 8007dd6:	f000 b803 	b.w	8007de0 <_malloc_r>
 8007dda:	bf00      	nop
 8007ddc:	20000110 	.word	0x20000110

08007de0 <_malloc_r>:
 8007de0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de4:	f101 040b 	add.w	r4, r1, #11
 8007de8:	2c16      	cmp	r4, #22
 8007dea:	4681      	mov	r9, r0
 8007dec:	d907      	bls.n	8007dfe <_malloc_r+0x1e>
 8007dee:	f034 0407 	bics.w	r4, r4, #7
 8007df2:	d505      	bpl.n	8007e00 <_malloc_r+0x20>
 8007df4:	230c      	movs	r3, #12
 8007df6:	f8c9 3000 	str.w	r3, [r9]
 8007dfa:	2600      	movs	r6, #0
 8007dfc:	e131      	b.n	8008062 <_malloc_r+0x282>
 8007dfe:	2410      	movs	r4, #16
 8007e00:	428c      	cmp	r4, r1
 8007e02:	d3f7      	bcc.n	8007df4 <_malloc_r+0x14>
 8007e04:	4648      	mov	r0, r9
 8007e06:	f000 fa25 	bl	8008254 <__malloc_lock>
 8007e0a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8007e0e:	4d9c      	ldr	r5, [pc, #624]	; (8008080 <_malloc_r+0x2a0>)
 8007e10:	d236      	bcs.n	8007e80 <_malloc_r+0xa0>
 8007e12:	f104 0208 	add.w	r2, r4, #8
 8007e16:	442a      	add	r2, r5
 8007e18:	f1a2 0108 	sub.w	r1, r2, #8
 8007e1c:	6856      	ldr	r6, [r2, #4]
 8007e1e:	428e      	cmp	r6, r1
 8007e20:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8007e24:	d102      	bne.n	8007e2c <_malloc_r+0x4c>
 8007e26:	68d6      	ldr	r6, [r2, #12]
 8007e28:	42b2      	cmp	r2, r6
 8007e2a:	d010      	beq.n	8007e4e <_malloc_r+0x6e>
 8007e2c:	6873      	ldr	r3, [r6, #4]
 8007e2e:	68f2      	ldr	r2, [r6, #12]
 8007e30:	68b1      	ldr	r1, [r6, #8]
 8007e32:	f023 0303 	bic.w	r3, r3, #3
 8007e36:	60ca      	str	r2, [r1, #12]
 8007e38:	4433      	add	r3, r6
 8007e3a:	6091      	str	r1, [r2, #8]
 8007e3c:	685a      	ldr	r2, [r3, #4]
 8007e3e:	f042 0201 	orr.w	r2, r2, #1
 8007e42:	605a      	str	r2, [r3, #4]
 8007e44:	4648      	mov	r0, r9
 8007e46:	f000 fa0b 	bl	8008260 <__malloc_unlock>
 8007e4a:	3608      	adds	r6, #8
 8007e4c:	e109      	b.n	8008062 <_malloc_r+0x282>
 8007e4e:	3302      	adds	r3, #2
 8007e50:	4a8c      	ldr	r2, [pc, #560]	; (8008084 <_malloc_r+0x2a4>)
 8007e52:	692e      	ldr	r6, [r5, #16]
 8007e54:	4296      	cmp	r6, r2
 8007e56:	4611      	mov	r1, r2
 8007e58:	d06d      	beq.n	8007f36 <_malloc_r+0x156>
 8007e5a:	6870      	ldr	r0, [r6, #4]
 8007e5c:	f020 0003 	bic.w	r0, r0, #3
 8007e60:	1b07      	subs	r7, r0, r4
 8007e62:	2f0f      	cmp	r7, #15
 8007e64:	dd47      	ble.n	8007ef6 <_malloc_r+0x116>
 8007e66:	1933      	adds	r3, r6, r4
 8007e68:	f044 0401 	orr.w	r4, r4, #1
 8007e6c:	6074      	str	r4, [r6, #4]
 8007e6e:	616b      	str	r3, [r5, #20]
 8007e70:	612b      	str	r3, [r5, #16]
 8007e72:	60da      	str	r2, [r3, #12]
 8007e74:	609a      	str	r2, [r3, #8]
 8007e76:	f047 0201 	orr.w	r2, r7, #1
 8007e7a:	605a      	str	r2, [r3, #4]
 8007e7c:	5037      	str	r7, [r6, r0]
 8007e7e:	e7e1      	b.n	8007e44 <_malloc_r+0x64>
 8007e80:	0a63      	lsrs	r3, r4, #9
 8007e82:	d02a      	beq.n	8007eda <_malloc_r+0xfa>
 8007e84:	2b04      	cmp	r3, #4
 8007e86:	d812      	bhi.n	8007eae <_malloc_r+0xce>
 8007e88:	09a3      	lsrs	r3, r4, #6
 8007e8a:	3338      	adds	r3, #56	; 0x38
 8007e8c:	1c5a      	adds	r2, r3, #1
 8007e8e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8007e92:	f1a2 0008 	sub.w	r0, r2, #8
 8007e96:	6856      	ldr	r6, [r2, #4]
 8007e98:	4286      	cmp	r6, r0
 8007e9a:	d006      	beq.n	8007eaa <_malloc_r+0xca>
 8007e9c:	6872      	ldr	r2, [r6, #4]
 8007e9e:	f022 0203 	bic.w	r2, r2, #3
 8007ea2:	1b11      	subs	r1, r2, r4
 8007ea4:	290f      	cmp	r1, #15
 8007ea6:	dd1c      	ble.n	8007ee2 <_malloc_r+0x102>
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	3301      	adds	r3, #1
 8007eac:	e7d0      	b.n	8007e50 <_malloc_r+0x70>
 8007eae:	2b14      	cmp	r3, #20
 8007eb0:	d801      	bhi.n	8007eb6 <_malloc_r+0xd6>
 8007eb2:	335b      	adds	r3, #91	; 0x5b
 8007eb4:	e7ea      	b.n	8007e8c <_malloc_r+0xac>
 8007eb6:	2b54      	cmp	r3, #84	; 0x54
 8007eb8:	d802      	bhi.n	8007ec0 <_malloc_r+0xe0>
 8007eba:	0b23      	lsrs	r3, r4, #12
 8007ebc:	336e      	adds	r3, #110	; 0x6e
 8007ebe:	e7e5      	b.n	8007e8c <_malloc_r+0xac>
 8007ec0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007ec4:	d802      	bhi.n	8007ecc <_malloc_r+0xec>
 8007ec6:	0be3      	lsrs	r3, r4, #15
 8007ec8:	3377      	adds	r3, #119	; 0x77
 8007eca:	e7df      	b.n	8007e8c <_malloc_r+0xac>
 8007ecc:	f240 5254 	movw	r2, #1364	; 0x554
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d804      	bhi.n	8007ede <_malloc_r+0xfe>
 8007ed4:	0ca3      	lsrs	r3, r4, #18
 8007ed6:	337c      	adds	r3, #124	; 0x7c
 8007ed8:	e7d8      	b.n	8007e8c <_malloc_r+0xac>
 8007eda:	233f      	movs	r3, #63	; 0x3f
 8007edc:	e7d6      	b.n	8007e8c <_malloc_r+0xac>
 8007ede:	237e      	movs	r3, #126	; 0x7e
 8007ee0:	e7d4      	b.n	8007e8c <_malloc_r+0xac>
 8007ee2:	2900      	cmp	r1, #0
 8007ee4:	68f1      	ldr	r1, [r6, #12]
 8007ee6:	db04      	blt.n	8007ef2 <_malloc_r+0x112>
 8007ee8:	68b3      	ldr	r3, [r6, #8]
 8007eea:	60d9      	str	r1, [r3, #12]
 8007eec:	608b      	str	r3, [r1, #8]
 8007eee:	18b3      	adds	r3, r6, r2
 8007ef0:	e7a4      	b.n	8007e3c <_malloc_r+0x5c>
 8007ef2:	460e      	mov	r6, r1
 8007ef4:	e7d0      	b.n	8007e98 <_malloc_r+0xb8>
 8007ef6:	2f00      	cmp	r7, #0
 8007ef8:	616a      	str	r2, [r5, #20]
 8007efa:	612a      	str	r2, [r5, #16]
 8007efc:	db05      	blt.n	8007f0a <_malloc_r+0x12a>
 8007efe:	4430      	add	r0, r6
 8007f00:	6843      	ldr	r3, [r0, #4]
 8007f02:	f043 0301 	orr.w	r3, r3, #1
 8007f06:	6043      	str	r3, [r0, #4]
 8007f08:	e79c      	b.n	8007e44 <_malloc_r+0x64>
 8007f0a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007f0e:	d244      	bcs.n	8007f9a <_malloc_r+0x1ba>
 8007f10:	08c0      	lsrs	r0, r0, #3
 8007f12:	1087      	asrs	r7, r0, #2
 8007f14:	2201      	movs	r2, #1
 8007f16:	fa02 f707 	lsl.w	r7, r2, r7
 8007f1a:	686a      	ldr	r2, [r5, #4]
 8007f1c:	3001      	adds	r0, #1
 8007f1e:	433a      	orrs	r2, r7
 8007f20:	606a      	str	r2, [r5, #4]
 8007f22:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8007f26:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8007f2a:	60b7      	str	r7, [r6, #8]
 8007f2c:	3a08      	subs	r2, #8
 8007f2e:	60f2      	str	r2, [r6, #12]
 8007f30:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8007f34:	60fe      	str	r6, [r7, #12]
 8007f36:	2001      	movs	r0, #1
 8007f38:	109a      	asrs	r2, r3, #2
 8007f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8007f3e:	6868      	ldr	r0, [r5, #4]
 8007f40:	4282      	cmp	r2, r0
 8007f42:	f200 80a1 	bhi.w	8008088 <_malloc_r+0x2a8>
 8007f46:	4202      	tst	r2, r0
 8007f48:	d106      	bne.n	8007f58 <_malloc_r+0x178>
 8007f4a:	f023 0303 	bic.w	r3, r3, #3
 8007f4e:	0052      	lsls	r2, r2, #1
 8007f50:	4202      	tst	r2, r0
 8007f52:	f103 0304 	add.w	r3, r3, #4
 8007f56:	d0fa      	beq.n	8007f4e <_malloc_r+0x16e>
 8007f58:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8007f5c:	46e0      	mov	r8, ip
 8007f5e:	469e      	mov	lr, r3
 8007f60:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8007f64:	4546      	cmp	r6, r8
 8007f66:	d153      	bne.n	8008010 <_malloc_r+0x230>
 8007f68:	f10e 0e01 	add.w	lr, lr, #1
 8007f6c:	f01e 0f03 	tst.w	lr, #3
 8007f70:	f108 0808 	add.w	r8, r8, #8
 8007f74:	d1f4      	bne.n	8007f60 <_malloc_r+0x180>
 8007f76:	0798      	lsls	r0, r3, #30
 8007f78:	d179      	bne.n	800806e <_malloc_r+0x28e>
 8007f7a:	686b      	ldr	r3, [r5, #4]
 8007f7c:	ea23 0302 	bic.w	r3, r3, r2
 8007f80:	606b      	str	r3, [r5, #4]
 8007f82:	6868      	ldr	r0, [r5, #4]
 8007f84:	0052      	lsls	r2, r2, #1
 8007f86:	4282      	cmp	r2, r0
 8007f88:	d87e      	bhi.n	8008088 <_malloc_r+0x2a8>
 8007f8a:	2a00      	cmp	r2, #0
 8007f8c:	d07c      	beq.n	8008088 <_malloc_r+0x2a8>
 8007f8e:	4673      	mov	r3, lr
 8007f90:	4202      	tst	r2, r0
 8007f92:	d1e1      	bne.n	8007f58 <_malloc_r+0x178>
 8007f94:	3304      	adds	r3, #4
 8007f96:	0052      	lsls	r2, r2, #1
 8007f98:	e7fa      	b.n	8007f90 <_malloc_r+0x1b0>
 8007f9a:	0a42      	lsrs	r2, r0, #9
 8007f9c:	2a04      	cmp	r2, #4
 8007f9e:	d815      	bhi.n	8007fcc <_malloc_r+0x1ec>
 8007fa0:	0982      	lsrs	r2, r0, #6
 8007fa2:	3238      	adds	r2, #56	; 0x38
 8007fa4:	1c57      	adds	r7, r2, #1
 8007fa6:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8007faa:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8007fae:	45be      	cmp	lr, r7
 8007fb0:	d126      	bne.n	8008000 <_malloc_r+0x220>
 8007fb2:	2001      	movs	r0, #1
 8007fb4:	1092      	asrs	r2, r2, #2
 8007fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8007fba:	6868      	ldr	r0, [r5, #4]
 8007fbc:	4310      	orrs	r0, r2
 8007fbe:	6068      	str	r0, [r5, #4]
 8007fc0:	f8c6 e00c 	str.w	lr, [r6, #12]
 8007fc4:	60b7      	str	r7, [r6, #8]
 8007fc6:	f8ce 6008 	str.w	r6, [lr, #8]
 8007fca:	e7b3      	b.n	8007f34 <_malloc_r+0x154>
 8007fcc:	2a14      	cmp	r2, #20
 8007fce:	d801      	bhi.n	8007fd4 <_malloc_r+0x1f4>
 8007fd0:	325b      	adds	r2, #91	; 0x5b
 8007fd2:	e7e7      	b.n	8007fa4 <_malloc_r+0x1c4>
 8007fd4:	2a54      	cmp	r2, #84	; 0x54
 8007fd6:	d802      	bhi.n	8007fde <_malloc_r+0x1fe>
 8007fd8:	0b02      	lsrs	r2, r0, #12
 8007fda:	326e      	adds	r2, #110	; 0x6e
 8007fdc:	e7e2      	b.n	8007fa4 <_malloc_r+0x1c4>
 8007fde:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007fe2:	d802      	bhi.n	8007fea <_malloc_r+0x20a>
 8007fe4:	0bc2      	lsrs	r2, r0, #15
 8007fe6:	3277      	adds	r2, #119	; 0x77
 8007fe8:	e7dc      	b.n	8007fa4 <_malloc_r+0x1c4>
 8007fea:	f240 5754 	movw	r7, #1364	; 0x554
 8007fee:	42ba      	cmp	r2, r7
 8007ff0:	bf9a      	itte	ls
 8007ff2:	0c82      	lsrls	r2, r0, #18
 8007ff4:	327c      	addls	r2, #124	; 0x7c
 8007ff6:	227e      	movhi	r2, #126	; 0x7e
 8007ff8:	e7d4      	b.n	8007fa4 <_malloc_r+0x1c4>
 8007ffa:	68bf      	ldr	r7, [r7, #8]
 8007ffc:	45be      	cmp	lr, r7
 8007ffe:	d004      	beq.n	800800a <_malloc_r+0x22a>
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	f022 0203 	bic.w	r2, r2, #3
 8008006:	4290      	cmp	r0, r2
 8008008:	d3f7      	bcc.n	8007ffa <_malloc_r+0x21a>
 800800a:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800800e:	e7d7      	b.n	8007fc0 <_malloc_r+0x1e0>
 8008010:	6870      	ldr	r0, [r6, #4]
 8008012:	68f7      	ldr	r7, [r6, #12]
 8008014:	f020 0003 	bic.w	r0, r0, #3
 8008018:	eba0 0a04 	sub.w	sl, r0, r4
 800801c:	f1ba 0f0f 	cmp.w	sl, #15
 8008020:	dd10      	ble.n	8008044 <_malloc_r+0x264>
 8008022:	68b2      	ldr	r2, [r6, #8]
 8008024:	1933      	adds	r3, r6, r4
 8008026:	f044 0401 	orr.w	r4, r4, #1
 800802a:	6074      	str	r4, [r6, #4]
 800802c:	60d7      	str	r7, [r2, #12]
 800802e:	60ba      	str	r2, [r7, #8]
 8008030:	f04a 0201 	orr.w	r2, sl, #1
 8008034:	616b      	str	r3, [r5, #20]
 8008036:	612b      	str	r3, [r5, #16]
 8008038:	60d9      	str	r1, [r3, #12]
 800803a:	6099      	str	r1, [r3, #8]
 800803c:	605a      	str	r2, [r3, #4]
 800803e:	f846 a000 	str.w	sl, [r6, r0]
 8008042:	e6ff      	b.n	8007e44 <_malloc_r+0x64>
 8008044:	f1ba 0f00 	cmp.w	sl, #0
 8008048:	db0f      	blt.n	800806a <_malloc_r+0x28a>
 800804a:	4430      	add	r0, r6
 800804c:	6843      	ldr	r3, [r0, #4]
 800804e:	f043 0301 	orr.w	r3, r3, #1
 8008052:	6043      	str	r3, [r0, #4]
 8008054:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8008058:	4648      	mov	r0, r9
 800805a:	60df      	str	r7, [r3, #12]
 800805c:	60bb      	str	r3, [r7, #8]
 800805e:	f000 f8ff 	bl	8008260 <__malloc_unlock>
 8008062:	4630      	mov	r0, r6
 8008064:	b003      	add	sp, #12
 8008066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800806a:	463e      	mov	r6, r7
 800806c:	e77a      	b.n	8007f64 <_malloc_r+0x184>
 800806e:	f85c 0908 	ldr.w	r0, [ip], #-8
 8008072:	4584      	cmp	ip, r0
 8008074:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008078:	f43f af7d 	beq.w	8007f76 <_malloc_r+0x196>
 800807c:	e781      	b.n	8007f82 <_malloc_r+0x1a2>
 800807e:	bf00      	nop
 8008080:	20000370 	.word	0x20000370
 8008084:	20000378 	.word	0x20000378
 8008088:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800808c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8008090:	f026 0603 	bic.w	r6, r6, #3
 8008094:	42b4      	cmp	r4, r6
 8008096:	d803      	bhi.n	80080a0 <_malloc_r+0x2c0>
 8008098:	1b33      	subs	r3, r6, r4
 800809a:	2b0f      	cmp	r3, #15
 800809c:	f300 8096 	bgt.w	80081cc <_malloc_r+0x3ec>
 80080a0:	4a4f      	ldr	r2, [pc, #316]	; (80081e0 <_malloc_r+0x400>)
 80080a2:	6817      	ldr	r7, [r2, #0]
 80080a4:	4a4f      	ldr	r2, [pc, #316]	; (80081e4 <_malloc_r+0x404>)
 80080a6:	6811      	ldr	r1, [r2, #0]
 80080a8:	3710      	adds	r7, #16
 80080aa:	3101      	adds	r1, #1
 80080ac:	eb0b 0306 	add.w	r3, fp, r6
 80080b0:	4427      	add	r7, r4
 80080b2:	d005      	beq.n	80080c0 <_malloc_r+0x2e0>
 80080b4:	494c      	ldr	r1, [pc, #304]	; (80081e8 <_malloc_r+0x408>)
 80080b6:	3901      	subs	r1, #1
 80080b8:	440f      	add	r7, r1
 80080ba:	3101      	adds	r1, #1
 80080bc:	4249      	negs	r1, r1
 80080be:	400f      	ands	r7, r1
 80080c0:	4639      	mov	r1, r7
 80080c2:	4648      	mov	r0, r9
 80080c4:	9201      	str	r2, [sp, #4]
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	f000 fd20 	bl	8008b0c <_sbrk_r>
 80080cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80080d0:	4680      	mov	r8, r0
 80080d2:	d056      	beq.n	8008182 <_malloc_r+0x3a2>
 80080d4:	9b00      	ldr	r3, [sp, #0]
 80080d6:	9a01      	ldr	r2, [sp, #4]
 80080d8:	4283      	cmp	r3, r0
 80080da:	d901      	bls.n	80080e0 <_malloc_r+0x300>
 80080dc:	45ab      	cmp	fp, r5
 80080de:	d150      	bne.n	8008182 <_malloc_r+0x3a2>
 80080e0:	4842      	ldr	r0, [pc, #264]	; (80081ec <_malloc_r+0x40c>)
 80080e2:	6801      	ldr	r1, [r0, #0]
 80080e4:	4543      	cmp	r3, r8
 80080e6:	eb07 0e01 	add.w	lr, r7, r1
 80080ea:	f8c0 e000 	str.w	lr, [r0]
 80080ee:	4940      	ldr	r1, [pc, #256]	; (80081f0 <_malloc_r+0x410>)
 80080f0:	4682      	mov	sl, r0
 80080f2:	d113      	bne.n	800811c <_malloc_r+0x33c>
 80080f4:	420b      	tst	r3, r1
 80080f6:	d111      	bne.n	800811c <_malloc_r+0x33c>
 80080f8:	68ab      	ldr	r3, [r5, #8]
 80080fa:	443e      	add	r6, r7
 80080fc:	f046 0601 	orr.w	r6, r6, #1
 8008100:	605e      	str	r6, [r3, #4]
 8008102:	4a3c      	ldr	r2, [pc, #240]	; (80081f4 <_malloc_r+0x414>)
 8008104:	f8da 3000 	ldr.w	r3, [sl]
 8008108:	6811      	ldr	r1, [r2, #0]
 800810a:	428b      	cmp	r3, r1
 800810c:	bf88      	it	hi
 800810e:	6013      	strhi	r3, [r2, #0]
 8008110:	4a39      	ldr	r2, [pc, #228]	; (80081f8 <_malloc_r+0x418>)
 8008112:	6811      	ldr	r1, [r2, #0]
 8008114:	428b      	cmp	r3, r1
 8008116:	bf88      	it	hi
 8008118:	6013      	strhi	r3, [r2, #0]
 800811a:	e032      	b.n	8008182 <_malloc_r+0x3a2>
 800811c:	6810      	ldr	r0, [r2, #0]
 800811e:	3001      	adds	r0, #1
 8008120:	bf1b      	ittet	ne
 8008122:	eba8 0303 	subne.w	r3, r8, r3
 8008126:	4473      	addne	r3, lr
 8008128:	f8c2 8000 	streq.w	r8, [r2]
 800812c:	f8ca 3000 	strne.w	r3, [sl]
 8008130:	f018 0007 	ands.w	r0, r8, #7
 8008134:	bf1c      	itt	ne
 8008136:	f1c0 0008 	rsbne	r0, r0, #8
 800813a:	4480      	addne	r8, r0
 800813c:	4b2a      	ldr	r3, [pc, #168]	; (80081e8 <_malloc_r+0x408>)
 800813e:	4447      	add	r7, r8
 8008140:	4418      	add	r0, r3
 8008142:	400f      	ands	r7, r1
 8008144:	1bc7      	subs	r7, r0, r7
 8008146:	4639      	mov	r1, r7
 8008148:	4648      	mov	r0, r9
 800814a:	f000 fcdf 	bl	8008b0c <_sbrk_r>
 800814e:	1c43      	adds	r3, r0, #1
 8008150:	bf08      	it	eq
 8008152:	4640      	moveq	r0, r8
 8008154:	f8da 3000 	ldr.w	r3, [sl]
 8008158:	f8c5 8008 	str.w	r8, [r5, #8]
 800815c:	bf08      	it	eq
 800815e:	2700      	moveq	r7, #0
 8008160:	eba0 0008 	sub.w	r0, r0, r8
 8008164:	443b      	add	r3, r7
 8008166:	4407      	add	r7, r0
 8008168:	f047 0701 	orr.w	r7, r7, #1
 800816c:	45ab      	cmp	fp, r5
 800816e:	f8ca 3000 	str.w	r3, [sl]
 8008172:	f8c8 7004 	str.w	r7, [r8, #4]
 8008176:	d0c4      	beq.n	8008102 <_malloc_r+0x322>
 8008178:	2e0f      	cmp	r6, #15
 800817a:	d810      	bhi.n	800819e <_malloc_r+0x3be>
 800817c:	2301      	movs	r3, #1
 800817e:	f8c8 3004 	str.w	r3, [r8, #4]
 8008182:	68ab      	ldr	r3, [r5, #8]
 8008184:	685a      	ldr	r2, [r3, #4]
 8008186:	f022 0203 	bic.w	r2, r2, #3
 800818a:	4294      	cmp	r4, r2
 800818c:	eba2 0304 	sub.w	r3, r2, r4
 8008190:	d801      	bhi.n	8008196 <_malloc_r+0x3b6>
 8008192:	2b0f      	cmp	r3, #15
 8008194:	dc1a      	bgt.n	80081cc <_malloc_r+0x3ec>
 8008196:	4648      	mov	r0, r9
 8008198:	f000 f862 	bl	8008260 <__malloc_unlock>
 800819c:	e62d      	b.n	8007dfa <_malloc_r+0x1a>
 800819e:	f8db 3004 	ldr.w	r3, [fp, #4]
 80081a2:	3e0c      	subs	r6, #12
 80081a4:	f026 0607 	bic.w	r6, r6, #7
 80081a8:	f003 0301 	and.w	r3, r3, #1
 80081ac:	4333      	orrs	r3, r6
 80081ae:	f8cb 3004 	str.w	r3, [fp, #4]
 80081b2:	eb0b 0306 	add.w	r3, fp, r6
 80081b6:	2205      	movs	r2, #5
 80081b8:	2e0f      	cmp	r6, #15
 80081ba:	605a      	str	r2, [r3, #4]
 80081bc:	609a      	str	r2, [r3, #8]
 80081be:	d9a0      	bls.n	8008102 <_malloc_r+0x322>
 80081c0:	f10b 0108 	add.w	r1, fp, #8
 80081c4:	4648      	mov	r0, r9
 80081c6:	f7ff fb4f 	bl	8007868 <_free_r>
 80081ca:	e79a      	b.n	8008102 <_malloc_r+0x322>
 80081cc:	68ae      	ldr	r6, [r5, #8]
 80081ce:	f044 0201 	orr.w	r2, r4, #1
 80081d2:	4434      	add	r4, r6
 80081d4:	f043 0301 	orr.w	r3, r3, #1
 80081d8:	6072      	str	r2, [r6, #4]
 80081da:	60ac      	str	r4, [r5, #8]
 80081dc:	6063      	str	r3, [r4, #4]
 80081de:	e631      	b.n	8007e44 <_malloc_r+0x64>
 80081e0:	20000c64 	.word	0x20000c64
 80081e4:	20000778 	.word	0x20000778
 80081e8:	00000080 	.word	0x00000080
 80081ec:	20000c34 	.word	0x20000c34
 80081f0:	0000007f 	.word	0x0000007f
 80081f4:	20000c5c 	.word	0x20000c5c
 80081f8:	20000c60 	.word	0x20000c60

080081fc <__ascii_mbtowc>:
 80081fc:	b082      	sub	sp, #8
 80081fe:	b901      	cbnz	r1, 8008202 <__ascii_mbtowc+0x6>
 8008200:	a901      	add	r1, sp, #4
 8008202:	b142      	cbz	r2, 8008216 <__ascii_mbtowc+0x1a>
 8008204:	b14b      	cbz	r3, 800821a <__ascii_mbtowc+0x1e>
 8008206:	7813      	ldrb	r3, [r2, #0]
 8008208:	600b      	str	r3, [r1, #0]
 800820a:	7812      	ldrb	r2, [r2, #0]
 800820c:	1c10      	adds	r0, r2, #0
 800820e:	bf18      	it	ne
 8008210:	2001      	movne	r0, #1
 8008212:	b002      	add	sp, #8
 8008214:	4770      	bx	lr
 8008216:	4610      	mov	r0, r2
 8008218:	e7fb      	b.n	8008212 <__ascii_mbtowc+0x16>
 800821a:	f06f 0001 	mvn.w	r0, #1
 800821e:	e7f8      	b.n	8008212 <__ascii_mbtowc+0x16>

08008220 <memmove>:
 8008220:	4288      	cmp	r0, r1
 8008222:	b510      	push	{r4, lr}
 8008224:	eb01 0302 	add.w	r3, r1, r2
 8008228:	d803      	bhi.n	8008232 <memmove+0x12>
 800822a:	1e42      	subs	r2, r0, #1
 800822c:	4299      	cmp	r1, r3
 800822e:	d10c      	bne.n	800824a <memmove+0x2a>
 8008230:	bd10      	pop	{r4, pc}
 8008232:	4298      	cmp	r0, r3
 8008234:	d2f9      	bcs.n	800822a <memmove+0xa>
 8008236:	1881      	adds	r1, r0, r2
 8008238:	1ad2      	subs	r2, r2, r3
 800823a:	42d3      	cmn	r3, r2
 800823c:	d100      	bne.n	8008240 <memmove+0x20>
 800823e:	bd10      	pop	{r4, pc}
 8008240:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008244:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008248:	e7f7      	b.n	800823a <memmove+0x1a>
 800824a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800824e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008252:	e7eb      	b.n	800822c <memmove+0xc>

08008254 <__malloc_lock>:
 8008254:	4801      	ldr	r0, [pc, #4]	; (800825c <__malloc_lock+0x8>)
 8008256:	f7ff bd4d 	b.w	8007cf4 <__retarget_lock_acquire_recursive>
 800825a:	bf00      	nop
 800825c:	20000fe4 	.word	0x20000fe4

08008260 <__malloc_unlock>:
 8008260:	4801      	ldr	r0, [pc, #4]	; (8008268 <__malloc_unlock+0x8>)
 8008262:	f7ff bd48 	b.w	8007cf6 <__retarget_lock_release_recursive>
 8008266:	bf00      	nop
 8008268:	20000fe4 	.word	0x20000fe4

0800826c <_Balloc>:
 800826c:	b570      	push	{r4, r5, r6, lr}
 800826e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008270:	4604      	mov	r4, r0
 8008272:	460e      	mov	r6, r1
 8008274:	b93d      	cbnz	r5, 8008286 <_Balloc+0x1a>
 8008276:	2010      	movs	r0, #16
 8008278:	f7ff fdaa 	bl	8007dd0 <malloc>
 800827c:	6260      	str	r0, [r4, #36]	; 0x24
 800827e:	6045      	str	r5, [r0, #4]
 8008280:	6085      	str	r5, [r0, #8]
 8008282:	6005      	str	r5, [r0, #0]
 8008284:	60c5      	str	r5, [r0, #12]
 8008286:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008288:	68eb      	ldr	r3, [r5, #12]
 800828a:	b183      	cbz	r3, 80082ae <_Balloc+0x42>
 800828c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008294:	b9b8      	cbnz	r0, 80082c6 <_Balloc+0x5a>
 8008296:	2101      	movs	r1, #1
 8008298:	fa01 f506 	lsl.w	r5, r1, r6
 800829c:	1d6a      	adds	r2, r5, #5
 800829e:	0092      	lsls	r2, r2, #2
 80082a0:	4620      	mov	r0, r4
 80082a2:	f000 fdeb 	bl	8008e7c <_calloc_r>
 80082a6:	b160      	cbz	r0, 80082c2 <_Balloc+0x56>
 80082a8:	6046      	str	r6, [r0, #4]
 80082aa:	6085      	str	r5, [r0, #8]
 80082ac:	e00e      	b.n	80082cc <_Balloc+0x60>
 80082ae:	2221      	movs	r2, #33	; 0x21
 80082b0:	2104      	movs	r1, #4
 80082b2:	4620      	mov	r0, r4
 80082b4:	f000 fde2 	bl	8008e7c <_calloc_r>
 80082b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082ba:	60e8      	str	r0, [r5, #12]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1e4      	bne.n	800828c <_Balloc+0x20>
 80082c2:	2000      	movs	r0, #0
 80082c4:	bd70      	pop	{r4, r5, r6, pc}
 80082c6:	6802      	ldr	r2, [r0, #0]
 80082c8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80082cc:	2300      	movs	r3, #0
 80082ce:	6103      	str	r3, [r0, #16]
 80082d0:	60c3      	str	r3, [r0, #12]
 80082d2:	bd70      	pop	{r4, r5, r6, pc}

080082d4 <_Bfree>:
 80082d4:	b570      	push	{r4, r5, r6, lr}
 80082d6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80082d8:	4606      	mov	r6, r0
 80082da:	460d      	mov	r5, r1
 80082dc:	b93c      	cbnz	r4, 80082ee <_Bfree+0x1a>
 80082de:	2010      	movs	r0, #16
 80082e0:	f7ff fd76 	bl	8007dd0 <malloc>
 80082e4:	6270      	str	r0, [r6, #36]	; 0x24
 80082e6:	6044      	str	r4, [r0, #4]
 80082e8:	6084      	str	r4, [r0, #8]
 80082ea:	6004      	str	r4, [r0, #0]
 80082ec:	60c4      	str	r4, [r0, #12]
 80082ee:	b13d      	cbz	r5, 8008300 <_Bfree+0x2c>
 80082f0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80082f2:	686a      	ldr	r2, [r5, #4]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082fa:	6029      	str	r1, [r5, #0]
 80082fc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008300:	bd70      	pop	{r4, r5, r6, pc}

08008302 <__multadd>:
 8008302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008306:	690d      	ldr	r5, [r1, #16]
 8008308:	461f      	mov	r7, r3
 800830a:	4606      	mov	r6, r0
 800830c:	460c      	mov	r4, r1
 800830e:	f101 0e14 	add.w	lr, r1, #20
 8008312:	2300      	movs	r3, #0
 8008314:	f8de 0000 	ldr.w	r0, [lr]
 8008318:	b281      	uxth	r1, r0
 800831a:	fb02 7101 	mla	r1, r2, r1, r7
 800831e:	0c0f      	lsrs	r7, r1, #16
 8008320:	0c00      	lsrs	r0, r0, #16
 8008322:	fb02 7000 	mla	r0, r2, r0, r7
 8008326:	b289      	uxth	r1, r1
 8008328:	3301      	adds	r3, #1
 800832a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800832e:	429d      	cmp	r5, r3
 8008330:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008334:	f84e 1b04 	str.w	r1, [lr], #4
 8008338:	dcec      	bgt.n	8008314 <__multadd+0x12>
 800833a:	b1d7      	cbz	r7, 8008372 <__multadd+0x70>
 800833c:	68a3      	ldr	r3, [r4, #8]
 800833e:	429d      	cmp	r5, r3
 8008340:	db12      	blt.n	8008368 <__multadd+0x66>
 8008342:	6861      	ldr	r1, [r4, #4]
 8008344:	4630      	mov	r0, r6
 8008346:	3101      	adds	r1, #1
 8008348:	f7ff ff90 	bl	800826c <_Balloc>
 800834c:	6922      	ldr	r2, [r4, #16]
 800834e:	3202      	adds	r2, #2
 8008350:	f104 010c 	add.w	r1, r4, #12
 8008354:	4680      	mov	r8, r0
 8008356:	0092      	lsls	r2, r2, #2
 8008358:	300c      	adds	r0, #12
 800835a:	f7fc fc75 	bl	8004c48 <memcpy>
 800835e:	4621      	mov	r1, r4
 8008360:	4630      	mov	r0, r6
 8008362:	f7ff ffb7 	bl	80082d4 <_Bfree>
 8008366:	4644      	mov	r4, r8
 8008368:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800836c:	3501      	adds	r5, #1
 800836e:	615f      	str	r7, [r3, #20]
 8008370:	6125      	str	r5, [r4, #16]
 8008372:	4620      	mov	r0, r4
 8008374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008378 <__hi0bits>:
 8008378:	0c02      	lsrs	r2, r0, #16
 800837a:	0412      	lsls	r2, r2, #16
 800837c:	4603      	mov	r3, r0
 800837e:	b9b2      	cbnz	r2, 80083ae <__hi0bits+0x36>
 8008380:	0403      	lsls	r3, r0, #16
 8008382:	2010      	movs	r0, #16
 8008384:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008388:	bf04      	itt	eq
 800838a:	021b      	lsleq	r3, r3, #8
 800838c:	3008      	addeq	r0, #8
 800838e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008392:	bf04      	itt	eq
 8008394:	011b      	lsleq	r3, r3, #4
 8008396:	3004      	addeq	r0, #4
 8008398:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800839c:	bf04      	itt	eq
 800839e:	009b      	lsleq	r3, r3, #2
 80083a0:	3002      	addeq	r0, #2
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	db06      	blt.n	80083b4 <__hi0bits+0x3c>
 80083a6:	005b      	lsls	r3, r3, #1
 80083a8:	d503      	bpl.n	80083b2 <__hi0bits+0x3a>
 80083aa:	3001      	adds	r0, #1
 80083ac:	4770      	bx	lr
 80083ae:	2000      	movs	r0, #0
 80083b0:	e7e8      	b.n	8008384 <__hi0bits+0xc>
 80083b2:	2020      	movs	r0, #32
 80083b4:	4770      	bx	lr

080083b6 <__lo0bits>:
 80083b6:	6803      	ldr	r3, [r0, #0]
 80083b8:	f013 0207 	ands.w	r2, r3, #7
 80083bc:	4601      	mov	r1, r0
 80083be:	d00b      	beq.n	80083d8 <__lo0bits+0x22>
 80083c0:	07da      	lsls	r2, r3, #31
 80083c2:	d423      	bmi.n	800840c <__lo0bits+0x56>
 80083c4:	0798      	lsls	r0, r3, #30
 80083c6:	bf49      	itett	mi
 80083c8:	085b      	lsrmi	r3, r3, #1
 80083ca:	089b      	lsrpl	r3, r3, #2
 80083cc:	2001      	movmi	r0, #1
 80083ce:	600b      	strmi	r3, [r1, #0]
 80083d0:	bf5c      	itt	pl
 80083d2:	600b      	strpl	r3, [r1, #0]
 80083d4:	2002      	movpl	r0, #2
 80083d6:	4770      	bx	lr
 80083d8:	b298      	uxth	r0, r3
 80083da:	b9a8      	cbnz	r0, 8008408 <__lo0bits+0x52>
 80083dc:	0c1b      	lsrs	r3, r3, #16
 80083de:	2010      	movs	r0, #16
 80083e0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80083e4:	bf04      	itt	eq
 80083e6:	0a1b      	lsreq	r3, r3, #8
 80083e8:	3008      	addeq	r0, #8
 80083ea:	071a      	lsls	r2, r3, #28
 80083ec:	bf04      	itt	eq
 80083ee:	091b      	lsreq	r3, r3, #4
 80083f0:	3004      	addeq	r0, #4
 80083f2:	079a      	lsls	r2, r3, #30
 80083f4:	bf04      	itt	eq
 80083f6:	089b      	lsreq	r3, r3, #2
 80083f8:	3002      	addeq	r0, #2
 80083fa:	07da      	lsls	r2, r3, #31
 80083fc:	d402      	bmi.n	8008404 <__lo0bits+0x4e>
 80083fe:	085b      	lsrs	r3, r3, #1
 8008400:	d006      	beq.n	8008410 <__lo0bits+0x5a>
 8008402:	3001      	adds	r0, #1
 8008404:	600b      	str	r3, [r1, #0]
 8008406:	4770      	bx	lr
 8008408:	4610      	mov	r0, r2
 800840a:	e7e9      	b.n	80083e0 <__lo0bits+0x2a>
 800840c:	2000      	movs	r0, #0
 800840e:	4770      	bx	lr
 8008410:	2020      	movs	r0, #32
 8008412:	4770      	bx	lr

08008414 <__i2b>:
 8008414:	b510      	push	{r4, lr}
 8008416:	460c      	mov	r4, r1
 8008418:	2101      	movs	r1, #1
 800841a:	f7ff ff27 	bl	800826c <_Balloc>
 800841e:	2201      	movs	r2, #1
 8008420:	6144      	str	r4, [r0, #20]
 8008422:	6102      	str	r2, [r0, #16]
 8008424:	bd10      	pop	{r4, pc}

08008426 <__multiply>:
 8008426:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842a:	4614      	mov	r4, r2
 800842c:	690a      	ldr	r2, [r1, #16]
 800842e:	6923      	ldr	r3, [r4, #16]
 8008430:	429a      	cmp	r2, r3
 8008432:	bfb8      	it	lt
 8008434:	460b      	movlt	r3, r1
 8008436:	4689      	mov	r9, r1
 8008438:	bfbc      	itt	lt
 800843a:	46a1      	movlt	r9, r4
 800843c:	461c      	movlt	r4, r3
 800843e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008442:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008446:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800844a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800844e:	eb07 060a 	add.w	r6, r7, sl
 8008452:	429e      	cmp	r6, r3
 8008454:	bfc8      	it	gt
 8008456:	3101      	addgt	r1, #1
 8008458:	f7ff ff08 	bl	800826c <_Balloc>
 800845c:	f100 0514 	add.w	r5, r0, #20
 8008460:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008464:	462b      	mov	r3, r5
 8008466:	2200      	movs	r2, #0
 8008468:	4543      	cmp	r3, r8
 800846a:	d316      	bcc.n	800849a <__multiply+0x74>
 800846c:	f104 0214 	add.w	r2, r4, #20
 8008470:	f109 0114 	add.w	r1, r9, #20
 8008474:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8008478:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800847c:	9301      	str	r3, [sp, #4]
 800847e:	9c01      	ldr	r4, [sp, #4]
 8008480:	4294      	cmp	r4, r2
 8008482:	4613      	mov	r3, r2
 8008484:	d80c      	bhi.n	80084a0 <__multiply+0x7a>
 8008486:	2e00      	cmp	r6, #0
 8008488:	dd03      	ble.n	8008492 <__multiply+0x6c>
 800848a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800848e:	2b00      	cmp	r3, #0
 8008490:	d054      	beq.n	800853c <__multiply+0x116>
 8008492:	6106      	str	r6, [r0, #16]
 8008494:	b003      	add	sp, #12
 8008496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800849a:	f843 2b04 	str.w	r2, [r3], #4
 800849e:	e7e3      	b.n	8008468 <__multiply+0x42>
 80084a0:	f8b3 a000 	ldrh.w	sl, [r3]
 80084a4:	3204      	adds	r2, #4
 80084a6:	f1ba 0f00 	cmp.w	sl, #0
 80084aa:	d020      	beq.n	80084ee <__multiply+0xc8>
 80084ac:	46ae      	mov	lr, r5
 80084ae:	4689      	mov	r9, r1
 80084b0:	f04f 0c00 	mov.w	ip, #0
 80084b4:	f859 4b04 	ldr.w	r4, [r9], #4
 80084b8:	f8be b000 	ldrh.w	fp, [lr]
 80084bc:	b2a3      	uxth	r3, r4
 80084be:	fb0a b303 	mla	r3, sl, r3, fp
 80084c2:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80084c6:	f8de 4000 	ldr.w	r4, [lr]
 80084ca:	4463      	add	r3, ip
 80084cc:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80084d0:	fb0a c40b 	mla	r4, sl, fp, ip
 80084d4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80084d8:	b29b      	uxth	r3, r3
 80084da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80084de:	454f      	cmp	r7, r9
 80084e0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80084e4:	f84e 3b04 	str.w	r3, [lr], #4
 80084e8:	d8e4      	bhi.n	80084b4 <__multiply+0x8e>
 80084ea:	f8ce c000 	str.w	ip, [lr]
 80084ee:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 80084f2:	f1b9 0f00 	cmp.w	r9, #0
 80084f6:	d01f      	beq.n	8008538 <__multiply+0x112>
 80084f8:	682b      	ldr	r3, [r5, #0]
 80084fa:	46ae      	mov	lr, r5
 80084fc:	468c      	mov	ip, r1
 80084fe:	f04f 0a00 	mov.w	sl, #0
 8008502:	f8bc 4000 	ldrh.w	r4, [ip]
 8008506:	f8be b002 	ldrh.w	fp, [lr, #2]
 800850a:	fb09 b404 	mla	r4, r9, r4, fp
 800850e:	44a2      	add	sl, r4
 8008510:	b29b      	uxth	r3, r3
 8008512:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8008516:	f84e 3b04 	str.w	r3, [lr], #4
 800851a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800851e:	f8be 4000 	ldrh.w	r4, [lr]
 8008522:	0c1b      	lsrs	r3, r3, #16
 8008524:	fb09 4303 	mla	r3, r9, r3, r4
 8008528:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800852c:	4567      	cmp	r7, ip
 800852e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008532:	d8e6      	bhi.n	8008502 <__multiply+0xdc>
 8008534:	f8ce 3000 	str.w	r3, [lr]
 8008538:	3504      	adds	r5, #4
 800853a:	e7a0      	b.n	800847e <__multiply+0x58>
 800853c:	3e01      	subs	r6, #1
 800853e:	e7a2      	b.n	8008486 <__multiply+0x60>

08008540 <__pow5mult>:
 8008540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008544:	4615      	mov	r5, r2
 8008546:	f012 0203 	ands.w	r2, r2, #3
 800854a:	4606      	mov	r6, r0
 800854c:	460f      	mov	r7, r1
 800854e:	d007      	beq.n	8008560 <__pow5mult+0x20>
 8008550:	3a01      	subs	r2, #1
 8008552:	4c21      	ldr	r4, [pc, #132]	; (80085d8 <__pow5mult+0x98>)
 8008554:	2300      	movs	r3, #0
 8008556:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800855a:	f7ff fed2 	bl	8008302 <__multadd>
 800855e:	4607      	mov	r7, r0
 8008560:	10ad      	asrs	r5, r5, #2
 8008562:	d035      	beq.n	80085d0 <__pow5mult+0x90>
 8008564:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008566:	b93c      	cbnz	r4, 8008578 <__pow5mult+0x38>
 8008568:	2010      	movs	r0, #16
 800856a:	f7ff fc31 	bl	8007dd0 <malloc>
 800856e:	6270      	str	r0, [r6, #36]	; 0x24
 8008570:	6044      	str	r4, [r0, #4]
 8008572:	6084      	str	r4, [r0, #8]
 8008574:	6004      	str	r4, [r0, #0]
 8008576:	60c4      	str	r4, [r0, #12]
 8008578:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800857c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008580:	b94c      	cbnz	r4, 8008596 <__pow5mult+0x56>
 8008582:	f240 2171 	movw	r1, #625	; 0x271
 8008586:	4630      	mov	r0, r6
 8008588:	f7ff ff44 	bl	8008414 <__i2b>
 800858c:	2300      	movs	r3, #0
 800858e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008592:	4604      	mov	r4, r0
 8008594:	6003      	str	r3, [r0, #0]
 8008596:	f04f 0800 	mov.w	r8, #0
 800859a:	07eb      	lsls	r3, r5, #31
 800859c:	d50a      	bpl.n	80085b4 <__pow5mult+0x74>
 800859e:	4639      	mov	r1, r7
 80085a0:	4622      	mov	r2, r4
 80085a2:	4630      	mov	r0, r6
 80085a4:	f7ff ff3f 	bl	8008426 <__multiply>
 80085a8:	4639      	mov	r1, r7
 80085aa:	4681      	mov	r9, r0
 80085ac:	4630      	mov	r0, r6
 80085ae:	f7ff fe91 	bl	80082d4 <_Bfree>
 80085b2:	464f      	mov	r7, r9
 80085b4:	106d      	asrs	r5, r5, #1
 80085b6:	d00b      	beq.n	80085d0 <__pow5mult+0x90>
 80085b8:	6820      	ldr	r0, [r4, #0]
 80085ba:	b938      	cbnz	r0, 80085cc <__pow5mult+0x8c>
 80085bc:	4622      	mov	r2, r4
 80085be:	4621      	mov	r1, r4
 80085c0:	4630      	mov	r0, r6
 80085c2:	f7ff ff30 	bl	8008426 <__multiply>
 80085c6:	6020      	str	r0, [r4, #0]
 80085c8:	f8c0 8000 	str.w	r8, [r0]
 80085cc:	4604      	mov	r4, r0
 80085ce:	e7e4      	b.n	800859a <__pow5mult+0x5a>
 80085d0:	4638      	mov	r0, r7
 80085d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085d6:	bf00      	nop
 80085d8:	08009dc0 	.word	0x08009dc0

080085dc <__lshift>:
 80085dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e0:	460c      	mov	r4, r1
 80085e2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80085e6:	6923      	ldr	r3, [r4, #16]
 80085e8:	6849      	ldr	r1, [r1, #4]
 80085ea:	eb0a 0903 	add.w	r9, sl, r3
 80085ee:	68a3      	ldr	r3, [r4, #8]
 80085f0:	4607      	mov	r7, r0
 80085f2:	4616      	mov	r6, r2
 80085f4:	f109 0501 	add.w	r5, r9, #1
 80085f8:	42ab      	cmp	r3, r5
 80085fa:	db31      	blt.n	8008660 <__lshift+0x84>
 80085fc:	4638      	mov	r0, r7
 80085fe:	f7ff fe35 	bl	800826c <_Balloc>
 8008602:	2200      	movs	r2, #0
 8008604:	4680      	mov	r8, r0
 8008606:	f100 0314 	add.w	r3, r0, #20
 800860a:	4611      	mov	r1, r2
 800860c:	4552      	cmp	r2, sl
 800860e:	db2a      	blt.n	8008666 <__lshift+0x8a>
 8008610:	6920      	ldr	r0, [r4, #16]
 8008612:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008616:	f104 0114 	add.w	r1, r4, #20
 800861a:	f016 021f 	ands.w	r2, r6, #31
 800861e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8008622:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8008626:	d022      	beq.n	800866e <__lshift+0x92>
 8008628:	f1c2 0c20 	rsb	ip, r2, #32
 800862c:	2000      	movs	r0, #0
 800862e:	680e      	ldr	r6, [r1, #0]
 8008630:	4096      	lsls	r6, r2
 8008632:	4330      	orrs	r0, r6
 8008634:	f843 0b04 	str.w	r0, [r3], #4
 8008638:	f851 0b04 	ldr.w	r0, [r1], #4
 800863c:	458e      	cmp	lr, r1
 800863e:	fa20 f00c 	lsr.w	r0, r0, ip
 8008642:	d8f4      	bhi.n	800862e <__lshift+0x52>
 8008644:	6018      	str	r0, [r3, #0]
 8008646:	b108      	cbz	r0, 800864c <__lshift+0x70>
 8008648:	f109 0502 	add.w	r5, r9, #2
 800864c:	3d01      	subs	r5, #1
 800864e:	4638      	mov	r0, r7
 8008650:	f8c8 5010 	str.w	r5, [r8, #16]
 8008654:	4621      	mov	r1, r4
 8008656:	f7ff fe3d 	bl	80082d4 <_Bfree>
 800865a:	4640      	mov	r0, r8
 800865c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008660:	3101      	adds	r1, #1
 8008662:	005b      	lsls	r3, r3, #1
 8008664:	e7c8      	b.n	80085f8 <__lshift+0x1c>
 8008666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800866a:	3201      	adds	r2, #1
 800866c:	e7ce      	b.n	800860c <__lshift+0x30>
 800866e:	3b04      	subs	r3, #4
 8008670:	f851 2b04 	ldr.w	r2, [r1], #4
 8008674:	f843 2f04 	str.w	r2, [r3, #4]!
 8008678:	458e      	cmp	lr, r1
 800867a:	d8f9      	bhi.n	8008670 <__lshift+0x94>
 800867c:	e7e6      	b.n	800864c <__lshift+0x70>

0800867e <__mcmp>:
 800867e:	6903      	ldr	r3, [r0, #16]
 8008680:	690a      	ldr	r2, [r1, #16]
 8008682:	1a9b      	subs	r3, r3, r2
 8008684:	b530      	push	{r4, r5, lr}
 8008686:	d10c      	bne.n	80086a2 <__mcmp+0x24>
 8008688:	0092      	lsls	r2, r2, #2
 800868a:	3014      	adds	r0, #20
 800868c:	3114      	adds	r1, #20
 800868e:	1884      	adds	r4, r0, r2
 8008690:	4411      	add	r1, r2
 8008692:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008696:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800869a:	4295      	cmp	r5, r2
 800869c:	d003      	beq.n	80086a6 <__mcmp+0x28>
 800869e:	d305      	bcc.n	80086ac <__mcmp+0x2e>
 80086a0:	2301      	movs	r3, #1
 80086a2:	4618      	mov	r0, r3
 80086a4:	bd30      	pop	{r4, r5, pc}
 80086a6:	42a0      	cmp	r0, r4
 80086a8:	d3f3      	bcc.n	8008692 <__mcmp+0x14>
 80086aa:	e7fa      	b.n	80086a2 <__mcmp+0x24>
 80086ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086b0:	e7f7      	b.n	80086a2 <__mcmp+0x24>

080086b2 <__mdiff>:
 80086b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086b6:	460d      	mov	r5, r1
 80086b8:	4607      	mov	r7, r0
 80086ba:	4611      	mov	r1, r2
 80086bc:	4628      	mov	r0, r5
 80086be:	4614      	mov	r4, r2
 80086c0:	f7ff ffdd 	bl	800867e <__mcmp>
 80086c4:	1e06      	subs	r6, r0, #0
 80086c6:	d108      	bne.n	80086da <__mdiff+0x28>
 80086c8:	4631      	mov	r1, r6
 80086ca:	4638      	mov	r0, r7
 80086cc:	f7ff fdce 	bl	800826c <_Balloc>
 80086d0:	2301      	movs	r3, #1
 80086d2:	6103      	str	r3, [r0, #16]
 80086d4:	6146      	str	r6, [r0, #20]
 80086d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086da:	bfa4      	itt	ge
 80086dc:	4623      	movge	r3, r4
 80086de:	462c      	movge	r4, r5
 80086e0:	4638      	mov	r0, r7
 80086e2:	6861      	ldr	r1, [r4, #4]
 80086e4:	bfa6      	itte	ge
 80086e6:	461d      	movge	r5, r3
 80086e8:	2600      	movge	r6, #0
 80086ea:	2601      	movlt	r6, #1
 80086ec:	f7ff fdbe 	bl	800826c <_Balloc>
 80086f0:	692b      	ldr	r3, [r5, #16]
 80086f2:	60c6      	str	r6, [r0, #12]
 80086f4:	6926      	ldr	r6, [r4, #16]
 80086f6:	f105 0914 	add.w	r9, r5, #20
 80086fa:	f104 0214 	add.w	r2, r4, #20
 80086fe:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008702:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008706:	f100 0514 	add.w	r5, r0, #20
 800870a:	f04f 0c00 	mov.w	ip, #0
 800870e:	f852 ab04 	ldr.w	sl, [r2], #4
 8008712:	f859 4b04 	ldr.w	r4, [r9], #4
 8008716:	fa1c f18a 	uxtah	r1, ip, sl
 800871a:	b2a3      	uxth	r3, r4
 800871c:	1ac9      	subs	r1, r1, r3
 800871e:	0c23      	lsrs	r3, r4, #16
 8008720:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008724:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008728:	b289      	uxth	r1, r1
 800872a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800872e:	45c8      	cmp	r8, r9
 8008730:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008734:	4696      	mov	lr, r2
 8008736:	f845 3b04 	str.w	r3, [r5], #4
 800873a:	d8e8      	bhi.n	800870e <__mdiff+0x5c>
 800873c:	45be      	cmp	lr, r7
 800873e:	d305      	bcc.n	800874c <__mdiff+0x9a>
 8008740:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008744:	b18b      	cbz	r3, 800876a <__mdiff+0xb8>
 8008746:	6106      	str	r6, [r0, #16]
 8008748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800874c:	f85e 1b04 	ldr.w	r1, [lr], #4
 8008750:	fa1c f381 	uxtah	r3, ip, r1
 8008754:	141a      	asrs	r2, r3, #16
 8008756:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800875a:	b29b      	uxth	r3, r3
 800875c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008760:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008764:	f845 3b04 	str.w	r3, [r5], #4
 8008768:	e7e8      	b.n	800873c <__mdiff+0x8a>
 800876a:	3e01      	subs	r6, #1
 800876c:	e7e8      	b.n	8008740 <__mdiff+0x8e>

0800876e <__d2b>:
 800876e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008772:	460e      	mov	r6, r1
 8008774:	2101      	movs	r1, #1
 8008776:	ec59 8b10 	vmov	r8, r9, d0
 800877a:	4615      	mov	r5, r2
 800877c:	f7ff fd76 	bl	800826c <_Balloc>
 8008780:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008784:	4607      	mov	r7, r0
 8008786:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800878a:	bb34      	cbnz	r4, 80087da <__d2b+0x6c>
 800878c:	9301      	str	r3, [sp, #4]
 800878e:	f1b8 0f00 	cmp.w	r8, #0
 8008792:	d027      	beq.n	80087e4 <__d2b+0x76>
 8008794:	a802      	add	r0, sp, #8
 8008796:	f840 8d08 	str.w	r8, [r0, #-8]!
 800879a:	f7ff fe0c 	bl	80083b6 <__lo0bits>
 800879e:	9900      	ldr	r1, [sp, #0]
 80087a0:	b1f0      	cbz	r0, 80087e0 <__d2b+0x72>
 80087a2:	9a01      	ldr	r2, [sp, #4]
 80087a4:	f1c0 0320 	rsb	r3, r0, #32
 80087a8:	fa02 f303 	lsl.w	r3, r2, r3
 80087ac:	430b      	orrs	r3, r1
 80087ae:	40c2      	lsrs	r2, r0
 80087b0:	617b      	str	r3, [r7, #20]
 80087b2:	9201      	str	r2, [sp, #4]
 80087b4:	9b01      	ldr	r3, [sp, #4]
 80087b6:	61bb      	str	r3, [r7, #24]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	bf14      	ite	ne
 80087bc:	2102      	movne	r1, #2
 80087be:	2101      	moveq	r1, #1
 80087c0:	6139      	str	r1, [r7, #16]
 80087c2:	b1c4      	cbz	r4, 80087f6 <__d2b+0x88>
 80087c4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80087c8:	4404      	add	r4, r0
 80087ca:	6034      	str	r4, [r6, #0]
 80087cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80087d0:	6028      	str	r0, [r5, #0]
 80087d2:	4638      	mov	r0, r7
 80087d4:	b003      	add	sp, #12
 80087d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087de:	e7d5      	b.n	800878c <__d2b+0x1e>
 80087e0:	6179      	str	r1, [r7, #20]
 80087e2:	e7e7      	b.n	80087b4 <__d2b+0x46>
 80087e4:	a801      	add	r0, sp, #4
 80087e6:	f7ff fde6 	bl	80083b6 <__lo0bits>
 80087ea:	9b01      	ldr	r3, [sp, #4]
 80087ec:	617b      	str	r3, [r7, #20]
 80087ee:	2101      	movs	r1, #1
 80087f0:	6139      	str	r1, [r7, #16]
 80087f2:	3020      	adds	r0, #32
 80087f4:	e7e5      	b.n	80087c2 <__d2b+0x54>
 80087f6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80087fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80087fe:	6030      	str	r0, [r6, #0]
 8008800:	6918      	ldr	r0, [r3, #16]
 8008802:	f7ff fdb9 	bl	8008378 <__hi0bits>
 8008806:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800880a:	e7e1      	b.n	80087d0 <__d2b+0x62>

0800880c <_realloc_r>:
 800880c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008810:	4682      	mov	sl, r0
 8008812:	460c      	mov	r4, r1
 8008814:	b929      	cbnz	r1, 8008822 <_realloc_r+0x16>
 8008816:	4611      	mov	r1, r2
 8008818:	b003      	add	sp, #12
 800881a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800881e:	f7ff badf 	b.w	8007de0 <_malloc_r>
 8008822:	9201      	str	r2, [sp, #4]
 8008824:	f7ff fd16 	bl	8008254 <__malloc_lock>
 8008828:	9a01      	ldr	r2, [sp, #4]
 800882a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800882e:	f102 080b 	add.w	r8, r2, #11
 8008832:	f1b8 0f16 	cmp.w	r8, #22
 8008836:	f1a4 0908 	sub.w	r9, r4, #8
 800883a:	f025 0603 	bic.w	r6, r5, #3
 800883e:	d90a      	bls.n	8008856 <_realloc_r+0x4a>
 8008840:	f038 0807 	bics.w	r8, r8, #7
 8008844:	d509      	bpl.n	800885a <_realloc_r+0x4e>
 8008846:	230c      	movs	r3, #12
 8008848:	f8ca 3000 	str.w	r3, [sl]
 800884c:	2700      	movs	r7, #0
 800884e:	4638      	mov	r0, r7
 8008850:	b003      	add	sp, #12
 8008852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008856:	f04f 0810 	mov.w	r8, #16
 800885a:	4590      	cmp	r8, r2
 800885c:	d3f3      	bcc.n	8008846 <_realloc_r+0x3a>
 800885e:	45b0      	cmp	r8, r6
 8008860:	f340 8145 	ble.w	8008aee <_realloc_r+0x2e2>
 8008864:	4ba8      	ldr	r3, [pc, #672]	; (8008b08 <_realloc_r+0x2fc>)
 8008866:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800886a:	eb09 0106 	add.w	r1, r9, r6
 800886e:	4571      	cmp	r1, lr
 8008870:	469b      	mov	fp, r3
 8008872:	684b      	ldr	r3, [r1, #4]
 8008874:	d005      	beq.n	8008882 <_realloc_r+0x76>
 8008876:	f023 0001 	bic.w	r0, r3, #1
 800887a:	4408      	add	r0, r1
 800887c:	6840      	ldr	r0, [r0, #4]
 800887e:	07c7      	lsls	r7, r0, #31
 8008880:	d447      	bmi.n	8008912 <_realloc_r+0x106>
 8008882:	f023 0303 	bic.w	r3, r3, #3
 8008886:	4571      	cmp	r1, lr
 8008888:	eb06 0703 	add.w	r7, r6, r3
 800888c:	d119      	bne.n	80088c2 <_realloc_r+0xb6>
 800888e:	f108 0010 	add.w	r0, r8, #16
 8008892:	4287      	cmp	r7, r0
 8008894:	db3f      	blt.n	8008916 <_realloc_r+0x10a>
 8008896:	eb09 0308 	add.w	r3, r9, r8
 800889a:	eba7 0708 	sub.w	r7, r7, r8
 800889e:	f047 0701 	orr.w	r7, r7, #1
 80088a2:	f8cb 3008 	str.w	r3, [fp, #8]
 80088a6:	605f      	str	r7, [r3, #4]
 80088a8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80088ac:	f003 0301 	and.w	r3, r3, #1
 80088b0:	ea43 0308 	orr.w	r3, r3, r8
 80088b4:	f844 3c04 	str.w	r3, [r4, #-4]
 80088b8:	4650      	mov	r0, sl
 80088ba:	f7ff fcd1 	bl	8008260 <__malloc_unlock>
 80088be:	4627      	mov	r7, r4
 80088c0:	e7c5      	b.n	800884e <_realloc_r+0x42>
 80088c2:	45b8      	cmp	r8, r7
 80088c4:	dc27      	bgt.n	8008916 <_realloc_r+0x10a>
 80088c6:	68cb      	ldr	r3, [r1, #12]
 80088c8:	688a      	ldr	r2, [r1, #8]
 80088ca:	60d3      	str	r3, [r2, #12]
 80088cc:	609a      	str	r2, [r3, #8]
 80088ce:	eba7 0008 	sub.w	r0, r7, r8
 80088d2:	280f      	cmp	r0, #15
 80088d4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80088d8:	eb09 0207 	add.w	r2, r9, r7
 80088dc:	f240 8109 	bls.w	8008af2 <_realloc_r+0x2e6>
 80088e0:	eb09 0108 	add.w	r1, r9, r8
 80088e4:	f003 0301 	and.w	r3, r3, #1
 80088e8:	ea43 0308 	orr.w	r3, r3, r8
 80088ec:	f040 0001 	orr.w	r0, r0, #1
 80088f0:	f8c9 3004 	str.w	r3, [r9, #4]
 80088f4:	6048      	str	r0, [r1, #4]
 80088f6:	6853      	ldr	r3, [r2, #4]
 80088f8:	f043 0301 	orr.w	r3, r3, #1
 80088fc:	6053      	str	r3, [r2, #4]
 80088fe:	3108      	adds	r1, #8
 8008900:	4650      	mov	r0, sl
 8008902:	f7fe ffb1 	bl	8007868 <_free_r>
 8008906:	4650      	mov	r0, sl
 8008908:	f7ff fcaa 	bl	8008260 <__malloc_unlock>
 800890c:	f109 0708 	add.w	r7, r9, #8
 8008910:	e79d      	b.n	800884e <_realloc_r+0x42>
 8008912:	2300      	movs	r3, #0
 8008914:	4619      	mov	r1, r3
 8008916:	07e8      	lsls	r0, r5, #31
 8008918:	f100 8084 	bmi.w	8008a24 <_realloc_r+0x218>
 800891c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8008920:	eba9 0505 	sub.w	r5, r9, r5
 8008924:	6868      	ldr	r0, [r5, #4]
 8008926:	f020 0003 	bic.w	r0, r0, #3
 800892a:	4430      	add	r0, r6
 800892c:	2900      	cmp	r1, #0
 800892e:	d076      	beq.n	8008a1e <_realloc_r+0x212>
 8008930:	4571      	cmp	r1, lr
 8008932:	d150      	bne.n	80089d6 <_realloc_r+0x1ca>
 8008934:	4403      	add	r3, r0
 8008936:	f108 0110 	add.w	r1, r8, #16
 800893a:	428b      	cmp	r3, r1
 800893c:	db6f      	blt.n	8008a1e <_realloc_r+0x212>
 800893e:	462f      	mov	r7, r5
 8008940:	68ea      	ldr	r2, [r5, #12]
 8008942:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8008946:	60ca      	str	r2, [r1, #12]
 8008948:	6091      	str	r1, [r2, #8]
 800894a:	1f32      	subs	r2, r6, #4
 800894c:	2a24      	cmp	r2, #36	; 0x24
 800894e:	d83b      	bhi.n	80089c8 <_realloc_r+0x1bc>
 8008950:	2a13      	cmp	r2, #19
 8008952:	d936      	bls.n	80089c2 <_realloc_r+0x1b6>
 8008954:	6821      	ldr	r1, [r4, #0]
 8008956:	60a9      	str	r1, [r5, #8]
 8008958:	6861      	ldr	r1, [r4, #4]
 800895a:	60e9      	str	r1, [r5, #12]
 800895c:	2a1b      	cmp	r2, #27
 800895e:	d81c      	bhi.n	800899a <_realloc_r+0x18e>
 8008960:	f105 0210 	add.w	r2, r5, #16
 8008964:	f104 0108 	add.w	r1, r4, #8
 8008968:	6808      	ldr	r0, [r1, #0]
 800896a:	6010      	str	r0, [r2, #0]
 800896c:	6848      	ldr	r0, [r1, #4]
 800896e:	6050      	str	r0, [r2, #4]
 8008970:	6889      	ldr	r1, [r1, #8]
 8008972:	6091      	str	r1, [r2, #8]
 8008974:	eb05 0208 	add.w	r2, r5, r8
 8008978:	eba3 0308 	sub.w	r3, r3, r8
 800897c:	f043 0301 	orr.w	r3, r3, #1
 8008980:	f8cb 2008 	str.w	r2, [fp, #8]
 8008984:	6053      	str	r3, [r2, #4]
 8008986:	686b      	ldr	r3, [r5, #4]
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	ea43 0308 	orr.w	r3, r3, r8
 8008990:	606b      	str	r3, [r5, #4]
 8008992:	4650      	mov	r0, sl
 8008994:	f7ff fc64 	bl	8008260 <__malloc_unlock>
 8008998:	e759      	b.n	800884e <_realloc_r+0x42>
 800899a:	68a1      	ldr	r1, [r4, #8]
 800899c:	6129      	str	r1, [r5, #16]
 800899e:	68e1      	ldr	r1, [r4, #12]
 80089a0:	6169      	str	r1, [r5, #20]
 80089a2:	2a24      	cmp	r2, #36	; 0x24
 80089a4:	bf01      	itttt	eq
 80089a6:	6922      	ldreq	r2, [r4, #16]
 80089a8:	61aa      	streq	r2, [r5, #24]
 80089aa:	6960      	ldreq	r0, [r4, #20]
 80089ac:	61e8      	streq	r0, [r5, #28]
 80089ae:	bf19      	ittee	ne
 80089b0:	f105 0218 	addne.w	r2, r5, #24
 80089b4:	f104 0110 	addne.w	r1, r4, #16
 80089b8:	f105 0220 	addeq.w	r2, r5, #32
 80089bc:	f104 0118 	addeq.w	r1, r4, #24
 80089c0:	e7d2      	b.n	8008968 <_realloc_r+0x15c>
 80089c2:	463a      	mov	r2, r7
 80089c4:	4621      	mov	r1, r4
 80089c6:	e7cf      	b.n	8008968 <_realloc_r+0x15c>
 80089c8:	4621      	mov	r1, r4
 80089ca:	4638      	mov	r0, r7
 80089cc:	9301      	str	r3, [sp, #4]
 80089ce:	f7ff fc27 	bl	8008220 <memmove>
 80089d2:	9b01      	ldr	r3, [sp, #4]
 80089d4:	e7ce      	b.n	8008974 <_realloc_r+0x168>
 80089d6:	18c7      	adds	r7, r0, r3
 80089d8:	45b8      	cmp	r8, r7
 80089da:	dc20      	bgt.n	8008a1e <_realloc_r+0x212>
 80089dc:	68cb      	ldr	r3, [r1, #12]
 80089de:	688a      	ldr	r2, [r1, #8]
 80089e0:	60d3      	str	r3, [r2, #12]
 80089e2:	609a      	str	r2, [r3, #8]
 80089e4:	4628      	mov	r0, r5
 80089e6:	68eb      	ldr	r3, [r5, #12]
 80089e8:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80089ec:	60d3      	str	r3, [r2, #12]
 80089ee:	609a      	str	r2, [r3, #8]
 80089f0:	1f32      	subs	r2, r6, #4
 80089f2:	2a24      	cmp	r2, #36	; 0x24
 80089f4:	d842      	bhi.n	8008a7c <_realloc_r+0x270>
 80089f6:	2a13      	cmp	r2, #19
 80089f8:	d93e      	bls.n	8008a78 <_realloc_r+0x26c>
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	60ab      	str	r3, [r5, #8]
 80089fe:	6863      	ldr	r3, [r4, #4]
 8008a00:	60eb      	str	r3, [r5, #12]
 8008a02:	2a1b      	cmp	r2, #27
 8008a04:	d824      	bhi.n	8008a50 <_realloc_r+0x244>
 8008a06:	f105 0010 	add.w	r0, r5, #16
 8008a0a:	f104 0308 	add.w	r3, r4, #8
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	6002      	str	r2, [r0, #0]
 8008a12:	685a      	ldr	r2, [r3, #4]
 8008a14:	6042      	str	r2, [r0, #4]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	6083      	str	r3, [r0, #8]
 8008a1a:	46a9      	mov	r9, r5
 8008a1c:	e757      	b.n	80088ce <_realloc_r+0xc2>
 8008a1e:	4580      	cmp	r8, r0
 8008a20:	4607      	mov	r7, r0
 8008a22:	dddf      	ble.n	80089e4 <_realloc_r+0x1d8>
 8008a24:	4611      	mov	r1, r2
 8008a26:	4650      	mov	r0, sl
 8008a28:	f7ff f9da 	bl	8007de0 <_malloc_r>
 8008a2c:	4607      	mov	r7, r0
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	d0af      	beq.n	8008992 <_realloc_r+0x186>
 8008a32:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008a36:	f023 0301 	bic.w	r3, r3, #1
 8008a3a:	f1a0 0208 	sub.w	r2, r0, #8
 8008a3e:	444b      	add	r3, r9
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d11f      	bne.n	8008a84 <_realloc_r+0x278>
 8008a44:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8008a48:	f027 0703 	bic.w	r7, r7, #3
 8008a4c:	4437      	add	r7, r6
 8008a4e:	e73e      	b.n	80088ce <_realloc_r+0xc2>
 8008a50:	68a3      	ldr	r3, [r4, #8]
 8008a52:	612b      	str	r3, [r5, #16]
 8008a54:	68e3      	ldr	r3, [r4, #12]
 8008a56:	616b      	str	r3, [r5, #20]
 8008a58:	2a24      	cmp	r2, #36	; 0x24
 8008a5a:	bf01      	itttt	eq
 8008a5c:	6923      	ldreq	r3, [r4, #16]
 8008a5e:	61ab      	streq	r3, [r5, #24]
 8008a60:	6962      	ldreq	r2, [r4, #20]
 8008a62:	61ea      	streq	r2, [r5, #28]
 8008a64:	bf19      	ittee	ne
 8008a66:	f105 0018 	addne.w	r0, r5, #24
 8008a6a:	f104 0310 	addne.w	r3, r4, #16
 8008a6e:	f105 0020 	addeq.w	r0, r5, #32
 8008a72:	f104 0318 	addeq.w	r3, r4, #24
 8008a76:	e7ca      	b.n	8008a0e <_realloc_r+0x202>
 8008a78:	4623      	mov	r3, r4
 8008a7a:	e7c8      	b.n	8008a0e <_realloc_r+0x202>
 8008a7c:	4621      	mov	r1, r4
 8008a7e:	f7ff fbcf 	bl	8008220 <memmove>
 8008a82:	e7ca      	b.n	8008a1a <_realloc_r+0x20e>
 8008a84:	1f32      	subs	r2, r6, #4
 8008a86:	2a24      	cmp	r2, #36	; 0x24
 8008a88:	d82d      	bhi.n	8008ae6 <_realloc_r+0x2da>
 8008a8a:	2a13      	cmp	r2, #19
 8008a8c:	d928      	bls.n	8008ae0 <_realloc_r+0x2d4>
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	6003      	str	r3, [r0, #0]
 8008a92:	6863      	ldr	r3, [r4, #4]
 8008a94:	6043      	str	r3, [r0, #4]
 8008a96:	2a1b      	cmp	r2, #27
 8008a98:	d80e      	bhi.n	8008ab8 <_realloc_r+0x2ac>
 8008a9a:	f100 0308 	add.w	r3, r0, #8
 8008a9e:	f104 0208 	add.w	r2, r4, #8
 8008aa2:	6811      	ldr	r1, [r2, #0]
 8008aa4:	6019      	str	r1, [r3, #0]
 8008aa6:	6851      	ldr	r1, [r2, #4]
 8008aa8:	6059      	str	r1, [r3, #4]
 8008aaa:	6892      	ldr	r2, [r2, #8]
 8008aac:	609a      	str	r2, [r3, #8]
 8008aae:	4621      	mov	r1, r4
 8008ab0:	4650      	mov	r0, sl
 8008ab2:	f7fe fed9 	bl	8007868 <_free_r>
 8008ab6:	e76c      	b.n	8008992 <_realloc_r+0x186>
 8008ab8:	68a3      	ldr	r3, [r4, #8]
 8008aba:	6083      	str	r3, [r0, #8]
 8008abc:	68e3      	ldr	r3, [r4, #12]
 8008abe:	60c3      	str	r3, [r0, #12]
 8008ac0:	2a24      	cmp	r2, #36	; 0x24
 8008ac2:	bf01      	itttt	eq
 8008ac4:	6923      	ldreq	r3, [r4, #16]
 8008ac6:	6103      	streq	r3, [r0, #16]
 8008ac8:	6961      	ldreq	r1, [r4, #20]
 8008aca:	6141      	streq	r1, [r0, #20]
 8008acc:	bf19      	ittee	ne
 8008ace:	f100 0310 	addne.w	r3, r0, #16
 8008ad2:	f104 0210 	addne.w	r2, r4, #16
 8008ad6:	f100 0318 	addeq.w	r3, r0, #24
 8008ada:	f104 0218 	addeq.w	r2, r4, #24
 8008ade:	e7e0      	b.n	8008aa2 <_realloc_r+0x296>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	4622      	mov	r2, r4
 8008ae4:	e7dd      	b.n	8008aa2 <_realloc_r+0x296>
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	f7ff fb9a 	bl	8008220 <memmove>
 8008aec:	e7df      	b.n	8008aae <_realloc_r+0x2a2>
 8008aee:	4637      	mov	r7, r6
 8008af0:	e6ed      	b.n	80088ce <_realloc_r+0xc2>
 8008af2:	f003 0301 	and.w	r3, r3, #1
 8008af6:	431f      	orrs	r7, r3
 8008af8:	f8c9 7004 	str.w	r7, [r9, #4]
 8008afc:	6853      	ldr	r3, [r2, #4]
 8008afe:	f043 0301 	orr.w	r3, r3, #1
 8008b02:	6053      	str	r3, [r2, #4]
 8008b04:	e6ff      	b.n	8008906 <_realloc_r+0xfa>
 8008b06:	bf00      	nop
 8008b08:	20000370 	.word	0x20000370

08008b0c <_sbrk_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	4c06      	ldr	r4, [pc, #24]	; (8008b28 <_sbrk_r+0x1c>)
 8008b10:	2300      	movs	r3, #0
 8008b12:	4605      	mov	r5, r0
 8008b14:	4608      	mov	r0, r1
 8008b16:	6023      	str	r3, [r4, #0]
 8008b18:	f7fb ffde 	bl	8004ad8 <_sbrk>
 8008b1c:	1c43      	adds	r3, r0, #1
 8008b1e:	d102      	bne.n	8008b26 <_sbrk_r+0x1a>
 8008b20:	6823      	ldr	r3, [r4, #0]
 8008b22:	b103      	cbz	r3, 8008b26 <_sbrk_r+0x1a>
 8008b24:	602b      	str	r3, [r5, #0]
 8008b26:	bd38      	pop	{r3, r4, r5, pc}
 8008b28:	20000fec 	.word	0x20000fec

08008b2c <_raise_r>:
 8008b2c:	291f      	cmp	r1, #31
 8008b2e:	b538      	push	{r3, r4, r5, lr}
 8008b30:	4604      	mov	r4, r0
 8008b32:	460d      	mov	r5, r1
 8008b34:	d904      	bls.n	8008b40 <_raise_r+0x14>
 8008b36:	2316      	movs	r3, #22
 8008b38:	6003      	str	r3, [r0, #0]
 8008b3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b3e:	bd38      	pop	{r3, r4, r5, pc}
 8008b40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008b42:	b112      	cbz	r2, 8008b4a <_raise_r+0x1e>
 8008b44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b48:	b94b      	cbnz	r3, 8008b5e <_raise_r+0x32>
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	f000 f830 	bl	8008bb0 <_getpid_r>
 8008b50:	462a      	mov	r2, r5
 8008b52:	4601      	mov	r1, r0
 8008b54:	4620      	mov	r0, r4
 8008b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b5a:	f000 b817 	b.w	8008b8c <_kill_r>
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d00a      	beq.n	8008b78 <_raise_r+0x4c>
 8008b62:	1c59      	adds	r1, r3, #1
 8008b64:	d103      	bne.n	8008b6e <_raise_r+0x42>
 8008b66:	2316      	movs	r3, #22
 8008b68:	6003      	str	r3, [r0, #0]
 8008b6a:	2001      	movs	r0, #1
 8008b6c:	bd38      	pop	{r3, r4, r5, pc}
 8008b6e:	2400      	movs	r4, #0
 8008b70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008b74:	4628      	mov	r0, r5
 8008b76:	4798      	blx	r3
 8008b78:	2000      	movs	r0, #0
 8008b7a:	bd38      	pop	{r3, r4, r5, pc}

08008b7c <raise>:
 8008b7c:	4b02      	ldr	r3, [pc, #8]	; (8008b88 <raise+0xc>)
 8008b7e:	4601      	mov	r1, r0
 8008b80:	6818      	ldr	r0, [r3, #0]
 8008b82:	f7ff bfd3 	b.w	8008b2c <_raise_r>
 8008b86:	bf00      	nop
 8008b88:	20000110 	.word	0x20000110

08008b8c <_kill_r>:
 8008b8c:	b538      	push	{r3, r4, r5, lr}
 8008b8e:	4c07      	ldr	r4, [pc, #28]	; (8008bac <_kill_r+0x20>)
 8008b90:	2300      	movs	r3, #0
 8008b92:	4605      	mov	r5, r0
 8008b94:	4608      	mov	r0, r1
 8008b96:	4611      	mov	r1, r2
 8008b98:	6023      	str	r3, [r4, #0]
 8008b9a:	f7fb ff73 	bl	8004a84 <_kill>
 8008b9e:	1c43      	adds	r3, r0, #1
 8008ba0:	d102      	bne.n	8008ba8 <_kill_r+0x1c>
 8008ba2:	6823      	ldr	r3, [r4, #0]
 8008ba4:	b103      	cbz	r3, 8008ba8 <_kill_r+0x1c>
 8008ba6:	602b      	str	r3, [r5, #0]
 8008ba8:	bd38      	pop	{r3, r4, r5, pc}
 8008baa:	bf00      	nop
 8008bac:	20000fec 	.word	0x20000fec

08008bb0 <_getpid_r>:
 8008bb0:	f7fb bf66 	b.w	8004a80 <_getpid>

08008bb4 <__sread>:
 8008bb4:	b510      	push	{r4, lr}
 8008bb6:	460c      	mov	r4, r1
 8008bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bbc:	f000 fa3c 	bl	8009038 <_read_r>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	bfab      	itete	ge
 8008bc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008bc6:	89a3      	ldrhlt	r3, [r4, #12]
 8008bc8:	181b      	addge	r3, r3, r0
 8008bca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008bce:	bfac      	ite	ge
 8008bd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008bd2:	81a3      	strhlt	r3, [r4, #12]
 8008bd4:	bd10      	pop	{r4, pc}

08008bd6 <__swrite>:
 8008bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bda:	461f      	mov	r7, r3
 8008bdc:	898b      	ldrh	r3, [r1, #12]
 8008bde:	05db      	lsls	r3, r3, #23
 8008be0:	4605      	mov	r5, r0
 8008be2:	460c      	mov	r4, r1
 8008be4:	4616      	mov	r6, r2
 8008be6:	d505      	bpl.n	8008bf4 <__swrite+0x1e>
 8008be8:	2302      	movs	r3, #2
 8008bea:	2200      	movs	r2, #0
 8008bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bf0:	f000 fa10 	bl	8009014 <_lseek_r>
 8008bf4:	89a3      	ldrh	r3, [r4, #12]
 8008bf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bfe:	81a3      	strh	r3, [r4, #12]
 8008c00:	4632      	mov	r2, r6
 8008c02:	463b      	mov	r3, r7
 8008c04:	4628      	mov	r0, r5
 8008c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c0a:	f000 b925 	b.w	8008e58 <_write_r>

08008c0e <__sseek>:
 8008c0e:	b510      	push	{r4, lr}
 8008c10:	460c      	mov	r4, r1
 8008c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c16:	f000 f9fd 	bl	8009014 <_lseek_r>
 8008c1a:	1c43      	adds	r3, r0, #1
 8008c1c:	89a3      	ldrh	r3, [r4, #12]
 8008c1e:	bf15      	itete	ne
 8008c20:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c2a:	81a3      	strheq	r3, [r4, #12]
 8008c2c:	bf18      	it	ne
 8008c2e:	81a3      	strhne	r3, [r4, #12]
 8008c30:	bd10      	pop	{r4, pc}

08008c32 <__sclose>:
 8008c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c36:	f000 b94f 	b.w	8008ed8 <_close_r>

08008c3a <__ssprint_r>:
 8008c3a:	6893      	ldr	r3, [r2, #8]
 8008c3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c40:	4681      	mov	r9, r0
 8008c42:	460c      	mov	r4, r1
 8008c44:	4617      	mov	r7, r2
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d060      	beq.n	8008d0c <__ssprint_r+0xd2>
 8008c4a:	f04f 0b00 	mov.w	fp, #0
 8008c4e:	f8d2 a000 	ldr.w	sl, [r2]
 8008c52:	465e      	mov	r6, fp
 8008c54:	b356      	cbz	r6, 8008cac <__ssprint_r+0x72>
 8008c56:	68a3      	ldr	r3, [r4, #8]
 8008c58:	429e      	cmp	r6, r3
 8008c5a:	d344      	bcc.n	8008ce6 <__ssprint_r+0xac>
 8008c5c:	89a2      	ldrh	r2, [r4, #12]
 8008c5e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c62:	d03e      	beq.n	8008ce2 <__ssprint_r+0xa8>
 8008c64:	6825      	ldr	r5, [r4, #0]
 8008c66:	6921      	ldr	r1, [r4, #16]
 8008c68:	eba5 0801 	sub.w	r8, r5, r1
 8008c6c:	6965      	ldr	r5, [r4, #20]
 8008c6e:	2302      	movs	r3, #2
 8008c70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c74:	fb95 f5f3 	sdiv	r5, r5, r3
 8008c78:	f108 0301 	add.w	r3, r8, #1
 8008c7c:	4433      	add	r3, r6
 8008c7e:	429d      	cmp	r5, r3
 8008c80:	bf38      	it	cc
 8008c82:	461d      	movcc	r5, r3
 8008c84:	0553      	lsls	r3, r2, #21
 8008c86:	d546      	bpl.n	8008d16 <__ssprint_r+0xdc>
 8008c88:	4629      	mov	r1, r5
 8008c8a:	4648      	mov	r0, r9
 8008c8c:	f7ff f8a8 	bl	8007de0 <_malloc_r>
 8008c90:	b998      	cbnz	r0, 8008cba <__ssprint_r+0x80>
 8008c92:	230c      	movs	r3, #12
 8008c94:	f8c9 3000 	str.w	r3, [r9]
 8008c98:	89a3      	ldrh	r3, [r4, #12]
 8008c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c9e:	81a3      	strh	r3, [r4, #12]
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	60bb      	str	r3, [r7, #8]
 8008ca4:	607b      	str	r3, [r7, #4]
 8008ca6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008caa:	e031      	b.n	8008d10 <__ssprint_r+0xd6>
 8008cac:	f8da b000 	ldr.w	fp, [sl]
 8008cb0:	f8da 6004 	ldr.w	r6, [sl, #4]
 8008cb4:	f10a 0a08 	add.w	sl, sl, #8
 8008cb8:	e7cc      	b.n	8008c54 <__ssprint_r+0x1a>
 8008cba:	4642      	mov	r2, r8
 8008cbc:	6921      	ldr	r1, [r4, #16]
 8008cbe:	9001      	str	r0, [sp, #4]
 8008cc0:	f7fb ffc2 	bl	8004c48 <memcpy>
 8008cc4:	89a2      	ldrh	r2, [r4, #12]
 8008cc6:	9b01      	ldr	r3, [sp, #4]
 8008cc8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8008ccc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008cd0:	81a2      	strh	r2, [r4, #12]
 8008cd2:	6123      	str	r3, [r4, #16]
 8008cd4:	6165      	str	r5, [r4, #20]
 8008cd6:	4443      	add	r3, r8
 8008cd8:	eba5 0508 	sub.w	r5, r5, r8
 8008cdc:	6023      	str	r3, [r4, #0]
 8008cde:	60a5      	str	r5, [r4, #8]
 8008ce0:	4633      	mov	r3, r6
 8008ce2:	429e      	cmp	r6, r3
 8008ce4:	d200      	bcs.n	8008ce8 <__ssprint_r+0xae>
 8008ce6:	4633      	mov	r3, r6
 8008ce8:	461a      	mov	r2, r3
 8008cea:	4659      	mov	r1, fp
 8008cec:	6820      	ldr	r0, [r4, #0]
 8008cee:	9301      	str	r3, [sp, #4]
 8008cf0:	f7ff fa96 	bl	8008220 <memmove>
 8008cf4:	68a2      	ldr	r2, [r4, #8]
 8008cf6:	9b01      	ldr	r3, [sp, #4]
 8008cf8:	1ad2      	subs	r2, r2, r3
 8008cfa:	60a2      	str	r2, [r4, #8]
 8008cfc:	6822      	ldr	r2, [r4, #0]
 8008cfe:	4413      	add	r3, r2
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	1b9e      	subs	r6, r3, r6
 8008d06:	60be      	str	r6, [r7, #8]
 8008d08:	2e00      	cmp	r6, #0
 8008d0a:	d1cf      	bne.n	8008cac <__ssprint_r+0x72>
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	b003      	add	sp, #12
 8008d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d16:	462a      	mov	r2, r5
 8008d18:	4648      	mov	r0, r9
 8008d1a:	f7ff fd77 	bl	800880c <_realloc_r>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d1d6      	bne.n	8008cd2 <__ssprint_r+0x98>
 8008d24:	6921      	ldr	r1, [r4, #16]
 8008d26:	4648      	mov	r0, r9
 8008d28:	f7fe fd9e 	bl	8007868 <_free_r>
 8008d2c:	e7b1      	b.n	8008c92 <__ssprint_r+0x58>
	...

08008d30 <__swbuf_r>:
 8008d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d32:	460e      	mov	r6, r1
 8008d34:	4614      	mov	r4, r2
 8008d36:	4605      	mov	r5, r0
 8008d38:	b118      	cbz	r0, 8008d42 <__swbuf_r+0x12>
 8008d3a:	6983      	ldr	r3, [r0, #24]
 8008d3c:	b90b      	cbnz	r3, 8008d42 <__swbuf_r+0x12>
 8008d3e:	f7fe fc53 	bl	80075e8 <__sinit>
 8008d42:	4b27      	ldr	r3, [pc, #156]	; (8008de0 <__swbuf_r+0xb0>)
 8008d44:	429c      	cmp	r4, r3
 8008d46:	d12f      	bne.n	8008da8 <__swbuf_r+0x78>
 8008d48:	686c      	ldr	r4, [r5, #4]
 8008d4a:	69a3      	ldr	r3, [r4, #24]
 8008d4c:	60a3      	str	r3, [r4, #8]
 8008d4e:	89a3      	ldrh	r3, [r4, #12]
 8008d50:	0719      	lsls	r1, r3, #28
 8008d52:	d533      	bpl.n	8008dbc <__swbuf_r+0x8c>
 8008d54:	6923      	ldr	r3, [r4, #16]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d030      	beq.n	8008dbc <__swbuf_r+0x8c>
 8008d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d5e:	b2f6      	uxtb	r6, r6
 8008d60:	049a      	lsls	r2, r3, #18
 8008d62:	4637      	mov	r7, r6
 8008d64:	d534      	bpl.n	8008dd0 <__swbuf_r+0xa0>
 8008d66:	6923      	ldr	r3, [r4, #16]
 8008d68:	6820      	ldr	r0, [r4, #0]
 8008d6a:	1ac0      	subs	r0, r0, r3
 8008d6c:	6963      	ldr	r3, [r4, #20]
 8008d6e:	4298      	cmp	r0, r3
 8008d70:	db04      	blt.n	8008d7c <__swbuf_r+0x4c>
 8008d72:	4621      	mov	r1, r4
 8008d74:	4628      	mov	r0, r5
 8008d76:	f7fe fba3 	bl	80074c0 <_fflush_r>
 8008d7a:	bb28      	cbnz	r0, 8008dc8 <__swbuf_r+0x98>
 8008d7c:	68a3      	ldr	r3, [r4, #8]
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	60a3      	str	r3, [r4, #8]
 8008d82:	6823      	ldr	r3, [r4, #0]
 8008d84:	1c5a      	adds	r2, r3, #1
 8008d86:	6022      	str	r2, [r4, #0]
 8008d88:	701e      	strb	r6, [r3, #0]
 8008d8a:	6963      	ldr	r3, [r4, #20]
 8008d8c:	3001      	adds	r0, #1
 8008d8e:	4298      	cmp	r0, r3
 8008d90:	d004      	beq.n	8008d9c <__swbuf_r+0x6c>
 8008d92:	89a3      	ldrh	r3, [r4, #12]
 8008d94:	07db      	lsls	r3, r3, #31
 8008d96:	d519      	bpl.n	8008dcc <__swbuf_r+0x9c>
 8008d98:	2e0a      	cmp	r6, #10
 8008d9a:	d117      	bne.n	8008dcc <__swbuf_r+0x9c>
 8008d9c:	4621      	mov	r1, r4
 8008d9e:	4628      	mov	r0, r5
 8008da0:	f7fe fb8e 	bl	80074c0 <_fflush_r>
 8008da4:	b190      	cbz	r0, 8008dcc <__swbuf_r+0x9c>
 8008da6:	e00f      	b.n	8008dc8 <__swbuf_r+0x98>
 8008da8:	4b0e      	ldr	r3, [pc, #56]	; (8008de4 <__swbuf_r+0xb4>)
 8008daa:	429c      	cmp	r4, r3
 8008dac:	d101      	bne.n	8008db2 <__swbuf_r+0x82>
 8008dae:	68ac      	ldr	r4, [r5, #8]
 8008db0:	e7cb      	b.n	8008d4a <__swbuf_r+0x1a>
 8008db2:	4b0d      	ldr	r3, [pc, #52]	; (8008de8 <__swbuf_r+0xb8>)
 8008db4:	429c      	cmp	r4, r3
 8008db6:	bf08      	it	eq
 8008db8:	68ec      	ldreq	r4, [r5, #12]
 8008dba:	e7c6      	b.n	8008d4a <__swbuf_r+0x1a>
 8008dbc:	4621      	mov	r1, r4
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	f7fd fc1a 	bl	80065f8 <__swsetup_r>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	d0c8      	beq.n	8008d5a <__swbuf_r+0x2a>
 8008dc8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008dcc:	4638      	mov	r0, r7
 8008dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008dd4:	81a3      	strh	r3, [r4, #12]
 8008dd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ddc:	6663      	str	r3, [r4, #100]	; 0x64
 8008dde:	e7c2      	b.n	8008d66 <__swbuf_r+0x36>
 8008de0:	08009c80 	.word	0x08009c80
 8008de4:	08009ca0 	.word	0x08009ca0
 8008de8:	08009c60 	.word	0x08009c60

08008dec <_wcrtomb_r>:
 8008dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dee:	4605      	mov	r5, r0
 8008df0:	b085      	sub	sp, #20
 8008df2:	461e      	mov	r6, r3
 8008df4:	460f      	mov	r7, r1
 8008df6:	4c0f      	ldr	r4, [pc, #60]	; (8008e34 <_wcrtomb_r+0x48>)
 8008df8:	b991      	cbnz	r1, 8008e20 <_wcrtomb_r+0x34>
 8008dfa:	6822      	ldr	r2, [r4, #0]
 8008dfc:	490e      	ldr	r1, [pc, #56]	; (8008e38 <_wcrtomb_r+0x4c>)
 8008dfe:	6a12      	ldr	r2, [r2, #32]
 8008e00:	2a00      	cmp	r2, #0
 8008e02:	bf08      	it	eq
 8008e04:	460a      	moveq	r2, r1
 8008e06:	a901      	add	r1, sp, #4
 8008e08:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8008e0c:	463a      	mov	r2, r7
 8008e0e:	47a0      	blx	r4
 8008e10:	1c43      	adds	r3, r0, #1
 8008e12:	bf01      	itttt	eq
 8008e14:	2300      	moveq	r3, #0
 8008e16:	6033      	streq	r3, [r6, #0]
 8008e18:	238a      	moveq	r3, #138	; 0x8a
 8008e1a:	602b      	streq	r3, [r5, #0]
 8008e1c:	b005      	add	sp, #20
 8008e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e20:	6824      	ldr	r4, [r4, #0]
 8008e22:	4f05      	ldr	r7, [pc, #20]	; (8008e38 <_wcrtomb_r+0x4c>)
 8008e24:	6a24      	ldr	r4, [r4, #32]
 8008e26:	2c00      	cmp	r4, #0
 8008e28:	bf08      	it	eq
 8008e2a:	463c      	moveq	r4, r7
 8008e2c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8008e30:	e7ed      	b.n	8008e0e <_wcrtomb_r+0x22>
 8008e32:	bf00      	nop
 8008e34:	20000110 	.word	0x20000110
 8008e38:	20000204 	.word	0x20000204

08008e3c <__ascii_wctomb>:
 8008e3c:	b149      	cbz	r1, 8008e52 <__ascii_wctomb+0x16>
 8008e3e:	2aff      	cmp	r2, #255	; 0xff
 8008e40:	bf85      	ittet	hi
 8008e42:	238a      	movhi	r3, #138	; 0x8a
 8008e44:	6003      	strhi	r3, [r0, #0]
 8008e46:	700a      	strbls	r2, [r1, #0]
 8008e48:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008e4c:	bf98      	it	ls
 8008e4e:	2001      	movls	r0, #1
 8008e50:	4770      	bx	lr
 8008e52:	4608      	mov	r0, r1
 8008e54:	4770      	bx	lr
	...

08008e58 <_write_r>:
 8008e58:	b538      	push	{r3, r4, r5, lr}
 8008e5a:	4c07      	ldr	r4, [pc, #28]	; (8008e78 <_write_r+0x20>)
 8008e5c:	4605      	mov	r5, r0
 8008e5e:	4608      	mov	r0, r1
 8008e60:	4611      	mov	r1, r2
 8008e62:	2200      	movs	r2, #0
 8008e64:	6022      	str	r2, [r4, #0]
 8008e66:	461a      	mov	r2, r3
 8008e68:	f7fb fe28 	bl	8004abc <_write>
 8008e6c:	1c43      	adds	r3, r0, #1
 8008e6e:	d102      	bne.n	8008e76 <_write_r+0x1e>
 8008e70:	6823      	ldr	r3, [r4, #0]
 8008e72:	b103      	cbz	r3, 8008e76 <_write_r+0x1e>
 8008e74:	602b      	str	r3, [r5, #0]
 8008e76:	bd38      	pop	{r3, r4, r5, pc}
 8008e78:	20000fec 	.word	0x20000fec

08008e7c <_calloc_r>:
 8008e7c:	b510      	push	{r4, lr}
 8008e7e:	4351      	muls	r1, r2
 8008e80:	f7fe ffae 	bl	8007de0 <_malloc_r>
 8008e84:	4604      	mov	r4, r0
 8008e86:	b198      	cbz	r0, 8008eb0 <_calloc_r+0x34>
 8008e88:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008e8c:	f022 0203 	bic.w	r2, r2, #3
 8008e90:	3a04      	subs	r2, #4
 8008e92:	2a24      	cmp	r2, #36	; 0x24
 8008e94:	d81b      	bhi.n	8008ece <_calloc_r+0x52>
 8008e96:	2a13      	cmp	r2, #19
 8008e98:	d917      	bls.n	8008eca <_calloc_r+0x4e>
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	2a1b      	cmp	r2, #27
 8008e9e:	6001      	str	r1, [r0, #0]
 8008ea0:	6041      	str	r1, [r0, #4]
 8008ea2:	d807      	bhi.n	8008eb4 <_calloc_r+0x38>
 8008ea4:	f100 0308 	add.w	r3, r0, #8
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	601a      	str	r2, [r3, #0]
 8008eac:	605a      	str	r2, [r3, #4]
 8008eae:	609a      	str	r2, [r3, #8]
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	bd10      	pop	{r4, pc}
 8008eb4:	2a24      	cmp	r2, #36	; 0x24
 8008eb6:	6081      	str	r1, [r0, #8]
 8008eb8:	60c1      	str	r1, [r0, #12]
 8008eba:	bf11      	iteee	ne
 8008ebc:	f100 0310 	addne.w	r3, r0, #16
 8008ec0:	6101      	streq	r1, [r0, #16]
 8008ec2:	f100 0318 	addeq.w	r3, r0, #24
 8008ec6:	6141      	streq	r1, [r0, #20]
 8008ec8:	e7ee      	b.n	8008ea8 <_calloc_r+0x2c>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	e7ec      	b.n	8008ea8 <_calloc_r+0x2c>
 8008ece:	2100      	movs	r1, #0
 8008ed0:	f7fb fec5 	bl	8004c5e <memset>
 8008ed4:	e7ec      	b.n	8008eb0 <_calloc_r+0x34>
	...

08008ed8 <_close_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	4c06      	ldr	r4, [pc, #24]	; (8008ef4 <_close_r+0x1c>)
 8008edc:	2300      	movs	r3, #0
 8008ede:	4605      	mov	r5, r0
 8008ee0:	4608      	mov	r0, r1
 8008ee2:	6023      	str	r3, [r4, #0]
 8008ee4:	f7fb fe12 	bl	8004b0c <_close>
 8008ee8:	1c43      	adds	r3, r0, #1
 8008eea:	d102      	bne.n	8008ef2 <_close_r+0x1a>
 8008eec:	6823      	ldr	r3, [r4, #0]
 8008eee:	b103      	cbz	r3, 8008ef2 <_close_r+0x1a>
 8008ef0:	602b      	str	r3, [r5, #0]
 8008ef2:	bd38      	pop	{r3, r4, r5, pc}
 8008ef4:	20000fec 	.word	0x20000fec

08008ef8 <_fclose_r>:
 8008ef8:	b570      	push	{r4, r5, r6, lr}
 8008efa:	4605      	mov	r5, r0
 8008efc:	460c      	mov	r4, r1
 8008efe:	b911      	cbnz	r1, 8008f06 <_fclose_r+0xe>
 8008f00:	2600      	movs	r6, #0
 8008f02:	4630      	mov	r0, r6
 8008f04:	bd70      	pop	{r4, r5, r6, pc}
 8008f06:	b118      	cbz	r0, 8008f10 <_fclose_r+0x18>
 8008f08:	6983      	ldr	r3, [r0, #24]
 8008f0a:	b90b      	cbnz	r3, 8008f10 <_fclose_r+0x18>
 8008f0c:	f7fe fb6c 	bl	80075e8 <__sinit>
 8008f10:	4b2c      	ldr	r3, [pc, #176]	; (8008fc4 <_fclose_r+0xcc>)
 8008f12:	429c      	cmp	r4, r3
 8008f14:	d114      	bne.n	8008f40 <_fclose_r+0x48>
 8008f16:	686c      	ldr	r4, [r5, #4]
 8008f18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f1a:	07d8      	lsls	r0, r3, #31
 8008f1c:	d405      	bmi.n	8008f2a <_fclose_r+0x32>
 8008f1e:	89a3      	ldrh	r3, [r4, #12]
 8008f20:	0599      	lsls	r1, r3, #22
 8008f22:	d402      	bmi.n	8008f2a <_fclose_r+0x32>
 8008f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f26:	f7fe fee5 	bl	8007cf4 <__retarget_lock_acquire_recursive>
 8008f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f2e:	b98b      	cbnz	r3, 8008f54 <_fclose_r+0x5c>
 8008f30:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8008f32:	f016 0601 	ands.w	r6, r6, #1
 8008f36:	d1e3      	bne.n	8008f00 <_fclose_r+0x8>
 8008f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f3a:	f7fe fedc 	bl	8007cf6 <__retarget_lock_release_recursive>
 8008f3e:	e7e0      	b.n	8008f02 <_fclose_r+0xa>
 8008f40:	4b21      	ldr	r3, [pc, #132]	; (8008fc8 <_fclose_r+0xd0>)
 8008f42:	429c      	cmp	r4, r3
 8008f44:	d101      	bne.n	8008f4a <_fclose_r+0x52>
 8008f46:	68ac      	ldr	r4, [r5, #8]
 8008f48:	e7e6      	b.n	8008f18 <_fclose_r+0x20>
 8008f4a:	4b20      	ldr	r3, [pc, #128]	; (8008fcc <_fclose_r+0xd4>)
 8008f4c:	429c      	cmp	r4, r3
 8008f4e:	bf08      	it	eq
 8008f50:	68ec      	ldreq	r4, [r5, #12]
 8008f52:	e7e1      	b.n	8008f18 <_fclose_r+0x20>
 8008f54:	4621      	mov	r1, r4
 8008f56:	4628      	mov	r0, r5
 8008f58:	f7fe fa20 	bl	800739c <__sflush_r>
 8008f5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008f5e:	4606      	mov	r6, r0
 8008f60:	b133      	cbz	r3, 8008f70 <_fclose_r+0x78>
 8008f62:	6a21      	ldr	r1, [r4, #32]
 8008f64:	4628      	mov	r0, r5
 8008f66:	4798      	blx	r3
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	bfb8      	it	lt
 8008f6c:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 8008f70:	89a3      	ldrh	r3, [r4, #12]
 8008f72:	061a      	lsls	r2, r3, #24
 8008f74:	d503      	bpl.n	8008f7e <_fclose_r+0x86>
 8008f76:	6921      	ldr	r1, [r4, #16]
 8008f78:	4628      	mov	r0, r5
 8008f7a:	f7fe fc75 	bl	8007868 <_free_r>
 8008f7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f80:	b141      	cbz	r1, 8008f94 <_fclose_r+0x9c>
 8008f82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f86:	4299      	cmp	r1, r3
 8008f88:	d002      	beq.n	8008f90 <_fclose_r+0x98>
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	f7fe fc6c 	bl	8007868 <_free_r>
 8008f90:	2300      	movs	r3, #0
 8008f92:	6363      	str	r3, [r4, #52]	; 0x34
 8008f94:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008f96:	b121      	cbz	r1, 8008fa2 <_fclose_r+0xaa>
 8008f98:	4628      	mov	r0, r5
 8008f9a:	f7fe fc65 	bl	8007868 <_free_r>
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	64a3      	str	r3, [r4, #72]	; 0x48
 8008fa2:	f7fe fb09 	bl	80075b8 <__sfp_lock_acquire>
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	81a3      	strh	r3, [r4, #12]
 8008faa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fac:	07db      	lsls	r3, r3, #31
 8008fae:	d402      	bmi.n	8008fb6 <_fclose_r+0xbe>
 8008fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fb2:	f7fe fea0 	bl	8007cf6 <__retarget_lock_release_recursive>
 8008fb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fb8:	f7fe fe9b 	bl	8007cf2 <__retarget_lock_close_recursive>
 8008fbc:	f7fe fb02 	bl	80075c4 <__sfp_lock_release>
 8008fc0:	e79f      	b.n	8008f02 <_fclose_r+0xa>
 8008fc2:	bf00      	nop
 8008fc4:	08009c80 	.word	0x08009c80
 8008fc8:	08009ca0 	.word	0x08009ca0
 8008fcc:	08009c60 	.word	0x08009c60

08008fd0 <_fstat_r>:
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	4c07      	ldr	r4, [pc, #28]	; (8008ff0 <_fstat_r+0x20>)
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	4605      	mov	r5, r0
 8008fd8:	4608      	mov	r0, r1
 8008fda:	4611      	mov	r1, r2
 8008fdc:	6023      	str	r3, [r4, #0]
 8008fde:	f7fb fd98 	bl	8004b12 <_fstat>
 8008fe2:	1c43      	adds	r3, r0, #1
 8008fe4:	d102      	bne.n	8008fec <_fstat_r+0x1c>
 8008fe6:	6823      	ldr	r3, [r4, #0]
 8008fe8:	b103      	cbz	r3, 8008fec <_fstat_r+0x1c>
 8008fea:	602b      	str	r3, [r5, #0]
 8008fec:	bd38      	pop	{r3, r4, r5, pc}
 8008fee:	bf00      	nop
 8008ff0:	20000fec 	.word	0x20000fec

08008ff4 <_isatty_r>:
 8008ff4:	b538      	push	{r3, r4, r5, lr}
 8008ff6:	4c06      	ldr	r4, [pc, #24]	; (8009010 <_isatty_r+0x1c>)
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	4605      	mov	r5, r0
 8008ffc:	4608      	mov	r0, r1
 8008ffe:	6023      	str	r3, [r4, #0]
 8009000:	f7fb fd8c 	bl	8004b1c <_isatty>
 8009004:	1c43      	adds	r3, r0, #1
 8009006:	d102      	bne.n	800900e <_isatty_r+0x1a>
 8009008:	6823      	ldr	r3, [r4, #0]
 800900a:	b103      	cbz	r3, 800900e <_isatty_r+0x1a>
 800900c:	602b      	str	r3, [r5, #0]
 800900e:	bd38      	pop	{r3, r4, r5, pc}
 8009010:	20000fec 	.word	0x20000fec

08009014 <_lseek_r>:
 8009014:	b538      	push	{r3, r4, r5, lr}
 8009016:	4c07      	ldr	r4, [pc, #28]	; (8009034 <_lseek_r+0x20>)
 8009018:	4605      	mov	r5, r0
 800901a:	4608      	mov	r0, r1
 800901c:	4611      	mov	r1, r2
 800901e:	2200      	movs	r2, #0
 8009020:	6022      	str	r2, [r4, #0]
 8009022:	461a      	mov	r2, r3
 8009024:	f7fb fd7c 	bl	8004b20 <_lseek>
 8009028:	1c43      	adds	r3, r0, #1
 800902a:	d102      	bne.n	8009032 <_lseek_r+0x1e>
 800902c:	6823      	ldr	r3, [r4, #0]
 800902e:	b103      	cbz	r3, 8009032 <_lseek_r+0x1e>
 8009030:	602b      	str	r3, [r5, #0]
 8009032:	bd38      	pop	{r3, r4, r5, pc}
 8009034:	20000fec 	.word	0x20000fec

08009038 <_read_r>:
 8009038:	b538      	push	{r3, r4, r5, lr}
 800903a:	4c07      	ldr	r4, [pc, #28]	; (8009058 <_read_r+0x20>)
 800903c:	4605      	mov	r5, r0
 800903e:	4608      	mov	r0, r1
 8009040:	4611      	mov	r1, r2
 8009042:	2200      	movs	r2, #0
 8009044:	6022      	str	r2, [r4, #0]
 8009046:	461a      	mov	r2, r3
 8009048:	f7fb fd2a 	bl	8004aa0 <_read>
 800904c:	1c43      	adds	r3, r0, #1
 800904e:	d102      	bne.n	8009056 <_read_r+0x1e>
 8009050:	6823      	ldr	r3, [r4, #0]
 8009052:	b103      	cbz	r3, 8009056 <_read_r+0x1e>
 8009054:	602b      	str	r3, [r5, #0]
 8009056:	bd38      	pop	{r3, r4, r5, pc}
 8009058:	20000fec 	.word	0x20000fec

0800905c <_init>:
 800905c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905e:	bf00      	nop
 8009060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009062:	bc08      	pop	{r3}
 8009064:	469e      	mov	lr, r3
 8009066:	4770      	bx	lr

08009068 <_fini>:
 8009068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906a:	bf00      	nop
 800906c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800906e:	bc08      	pop	{r3}
 8009070:	469e      	mov	lr, r3
 8009072:	4770      	bx	lr
