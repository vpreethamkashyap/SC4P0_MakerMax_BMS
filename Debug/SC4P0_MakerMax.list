
SC4P0_MakerMax.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000999c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e80  08009b40  08009b40  00019b40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a9c0  0800a9c0  0001a9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a9c8  0800a9c8  0001a9c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a9cc  0800a9cc  0001a9cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000784  20000000  0800a9d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020784  2**0
                  CONTENTS
  8 .bss          00002a7c  20000784  20000784  00020784  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20003200  20003200  00020784  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020784  2**0
                  CONTENTS, READONLY
 11 .debug_info   000281ff  00000000  00000000  000207b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005d2c  00000000  00000000  000489b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000111a5  00000000  00000000  0004e6df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001668  00000000  00000000  0005f888  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b08  00000000  00000000  00060ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000d7d7  00000000  00000000  000629f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00008232  00000000  00000000  000701cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00078401  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005370  00000000  00000000  00078480  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000784 	.word	0x20000784
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009b24 	.word	0x08009b24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000788 	.word	0x20000788
 80001dc:	08009b24 	.word	0x08009b24

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca4:	f000 b97a 	b.w	8000f9c <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f806 	bl	8000cc0 <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__udivmoddi4>:
 8000cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc4:	468c      	mov	ip, r1
 8000cc6:	460d      	mov	r5, r1
 8000cc8:	4604      	mov	r4, r0
 8000cca:	9e08      	ldr	r6, [sp, #32]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d151      	bne.n	8000d74 <__udivmoddi4+0xb4>
 8000cd0:	428a      	cmp	r2, r1
 8000cd2:	4617      	mov	r7, r2
 8000cd4:	d96d      	bls.n	8000db2 <__udivmoddi4+0xf2>
 8000cd6:	fab2 fe82 	clz	lr, r2
 8000cda:	f1be 0f00 	cmp.w	lr, #0
 8000cde:	d00b      	beq.n	8000cf8 <__udivmoddi4+0x38>
 8000ce0:	f1ce 0c20 	rsb	ip, lr, #32
 8000ce4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000ce8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cec:	fa02 f70e 	lsl.w	r7, r2, lr
 8000cf0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000cf4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cf8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cfc:	0c25      	lsrs	r5, r4, #16
 8000cfe:	fbbc f8fa 	udiv	r8, ip, sl
 8000d02:	fa1f f987 	uxth.w	r9, r7
 8000d06:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d0a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d0e:	fb08 f309 	mul.w	r3, r8, r9
 8000d12:	42ab      	cmp	r3, r5
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x6c>
 8000d16:	19ed      	adds	r5, r5, r7
 8000d18:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000d1c:	f080 8123 	bcs.w	8000f66 <__udivmoddi4+0x2a6>
 8000d20:	42ab      	cmp	r3, r5
 8000d22:	f240 8120 	bls.w	8000f66 <__udivmoddi4+0x2a6>
 8000d26:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2a:	443d      	add	r5, r7
 8000d2c:	1aed      	subs	r5, r5, r3
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d34:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d38:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d3c:	fb00 f909 	mul.w	r9, r0, r9
 8000d40:	45a1      	cmp	r9, r4
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x98>
 8000d44:	19e4      	adds	r4, r4, r7
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d4a:	f080 810a 	bcs.w	8000f62 <__udivmoddi4+0x2a2>
 8000d4e:	45a1      	cmp	r9, r4
 8000d50:	f240 8107 	bls.w	8000f62 <__udivmoddi4+0x2a2>
 8000d54:	3802      	subs	r0, #2
 8000d56:	443c      	add	r4, r7
 8000d58:	eba4 0409 	sub.w	r4, r4, r9
 8000d5c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d60:	2100      	movs	r1, #0
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d061      	beq.n	8000e2a <__udivmoddi4+0x16a>
 8000d66:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	6034      	str	r4, [r6, #0]
 8000d6e:	6073      	str	r3, [r6, #4]
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0xc8>
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d054      	beq.n	8000e26 <__udivmoddi4+0x166>
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d82:	4608      	mov	r0, r1
 8000d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d88:	fab3 f183 	clz	r1, r3
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	f040 808e 	bne.w	8000eae <__udivmoddi4+0x1ee>
 8000d92:	42ab      	cmp	r3, r5
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xdc>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80fa 	bhi.w	8000f90 <__udivmoddi4+0x2d0>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb65 0503 	sbc.w	r5, r5, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	46ac      	mov	ip, r5
 8000da6:	2e00      	cmp	r6, #0
 8000da8:	d03f      	beq.n	8000e2a <__udivmoddi4+0x16a>
 8000daa:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	b912      	cbnz	r2, 8000dba <__udivmoddi4+0xfa>
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000dba:	fab7 fe87 	clz	lr, r7
 8000dbe:	f1be 0f00 	cmp.w	lr, #0
 8000dc2:	d134      	bne.n	8000e2e <__udivmoddi4+0x16e>
 8000dc4:	1beb      	subs	r3, r5, r7
 8000dc6:	0c3a      	lsrs	r2, r7, #16
 8000dc8:	fa1f fc87 	uxth.w	ip, r7
 8000dcc:	2101      	movs	r1, #1
 8000dce:	fbb3 f8f2 	udiv	r8, r3, r2
 8000dd2:	0c25      	lsrs	r5, r4, #16
 8000dd4:	fb02 3318 	mls	r3, r2, r8, r3
 8000dd8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ddc:	fb0c f308 	mul.w	r3, ip, r8
 8000de0:	42ab      	cmp	r3, r5
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x134>
 8000de4:	19ed      	adds	r5, r5, r7
 8000de6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x132>
 8000dec:	42ab      	cmp	r3, r5
 8000dee:	f200 80d1 	bhi.w	8000f94 <__udivmoddi4+0x2d4>
 8000df2:	4680      	mov	r8, r0
 8000df4:	1aed      	subs	r5, r5, r3
 8000df6:	b2a3      	uxth	r3, r4
 8000df8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dfc:	fb02 5510 	mls	r5, r2, r0, r5
 8000e00:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e04:	fb0c fc00 	mul.w	ip, ip, r0
 8000e08:	45a4      	cmp	ip, r4
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x15c>
 8000e0c:	19e4      	adds	r4, r4, r7
 8000e0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x15a>
 8000e14:	45a4      	cmp	ip, r4
 8000e16:	f200 80b8 	bhi.w	8000f8a <__udivmoddi4+0x2ca>
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	eba4 040c 	sub.w	r4, r4, ip
 8000e20:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e24:	e79d      	b.n	8000d62 <__udivmoddi4+0xa2>
 8000e26:	4631      	mov	r1, r6
 8000e28:	4630      	mov	r0, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	f1ce 0420 	rsb	r4, lr, #32
 8000e32:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e36:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e3a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e3e:	0c3a      	lsrs	r2, r7, #16
 8000e40:	fa25 f404 	lsr.w	r4, r5, r4
 8000e44:	ea48 0803 	orr.w	r8, r8, r3
 8000e48:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e4c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e50:	fb02 4411 	mls	r4, r2, r1, r4
 8000e54:	fa1f fc87 	uxth.w	ip, r7
 8000e58:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e5c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e60:	42ab      	cmp	r3, r5
 8000e62:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e66:	d909      	bls.n	8000e7c <__udivmoddi4+0x1bc>
 8000e68:	19ed      	adds	r5, r5, r7
 8000e6a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000e6e:	f080 808a 	bcs.w	8000f86 <__udivmoddi4+0x2c6>
 8000e72:	42ab      	cmp	r3, r5
 8000e74:	f240 8087 	bls.w	8000f86 <__udivmoddi4+0x2c6>
 8000e78:	3902      	subs	r1, #2
 8000e7a:	443d      	add	r5, r7
 8000e7c:	1aeb      	subs	r3, r5, r3
 8000e7e:	fa1f f588 	uxth.w	r5, r8
 8000e82:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e86:	fb02 3310 	mls	r3, r2, r0, r3
 8000e8a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e8e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e92:	42ab      	cmp	r3, r5
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1e6>
 8000e96:	19ed      	adds	r5, r5, r7
 8000e98:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e9c:	d26f      	bcs.n	8000f7e <__udivmoddi4+0x2be>
 8000e9e:	42ab      	cmp	r3, r5
 8000ea0:	d96d      	bls.n	8000f7e <__udivmoddi4+0x2be>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	443d      	add	r5, r7
 8000ea6:	1aeb      	subs	r3, r5, r3
 8000ea8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eac:	e78f      	b.n	8000dce <__udivmoddi4+0x10e>
 8000eae:	f1c1 0720 	rsb	r7, r1, #32
 8000eb2:	fa22 f807 	lsr.w	r8, r2, r7
 8000eb6:	408b      	lsls	r3, r1
 8000eb8:	fa05 f401 	lsl.w	r4, r5, r1
 8000ebc:	ea48 0303 	orr.w	r3, r8, r3
 8000ec0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ec4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ece:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ed2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ed6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eda:	fa1f f883 	uxth.w	r8, r3
 8000ede:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ee2:	fb09 f408 	mul.w	r4, r9, r8
 8000ee6:	42ac      	cmp	r4, r5
 8000ee8:	fa02 f201 	lsl.w	r2, r2, r1
 8000eec:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x244>
 8000ef2:	18ed      	adds	r5, r5, r3
 8000ef4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ef8:	d243      	bcs.n	8000f82 <__udivmoddi4+0x2c2>
 8000efa:	42ac      	cmp	r4, r5
 8000efc:	d941      	bls.n	8000f82 <__udivmoddi4+0x2c2>
 8000efe:	f1a9 0902 	sub.w	r9, r9, #2
 8000f02:	441d      	add	r5, r3
 8000f04:	1b2d      	subs	r5, r5, r4
 8000f06:	fa1f fe8e 	uxth.w	lr, lr
 8000f0a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f0e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f12:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f16:	fb00 f808 	mul.w	r8, r0, r8
 8000f1a:	45a0      	cmp	r8, r4
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x26e>
 8000f1e:	18e4      	adds	r4, r4, r3
 8000f20:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000f24:	d229      	bcs.n	8000f7a <__udivmoddi4+0x2ba>
 8000f26:	45a0      	cmp	r8, r4
 8000f28:	d927      	bls.n	8000f7a <__udivmoddi4+0x2ba>
 8000f2a:	3802      	subs	r0, #2
 8000f2c:	441c      	add	r4, r3
 8000f2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f32:	eba4 0408 	sub.w	r4, r4, r8
 8000f36:	fba0 8902 	umull	r8, r9, r0, r2
 8000f3a:	454c      	cmp	r4, r9
 8000f3c:	46c6      	mov	lr, r8
 8000f3e:	464d      	mov	r5, r9
 8000f40:	d315      	bcc.n	8000f6e <__udivmoddi4+0x2ae>
 8000f42:	d012      	beq.n	8000f6a <__udivmoddi4+0x2aa>
 8000f44:	b156      	cbz	r6, 8000f5c <__udivmoddi4+0x29c>
 8000f46:	ebba 030e 	subs.w	r3, sl, lr
 8000f4a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f52:	40cb      	lsrs	r3, r1
 8000f54:	431f      	orrs	r7, r3
 8000f56:	40cc      	lsrs	r4, r1
 8000f58:	6037      	str	r7, [r6, #0]
 8000f5a:	6074      	str	r4, [r6, #4]
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f62:	4618      	mov	r0, r3
 8000f64:	e6f8      	b.n	8000d58 <__udivmoddi4+0x98>
 8000f66:	4690      	mov	r8, r2
 8000f68:	e6e0      	b.n	8000d2c <__udivmoddi4+0x6c>
 8000f6a:	45c2      	cmp	sl, r8
 8000f6c:	d2ea      	bcs.n	8000f44 <__udivmoddi4+0x284>
 8000f6e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f72:	eb69 0503 	sbc.w	r5, r9, r3
 8000f76:	3801      	subs	r0, #1
 8000f78:	e7e4      	b.n	8000f44 <__udivmoddi4+0x284>
 8000f7a:	4628      	mov	r0, r5
 8000f7c:	e7d7      	b.n	8000f2e <__udivmoddi4+0x26e>
 8000f7e:	4640      	mov	r0, r8
 8000f80:	e791      	b.n	8000ea6 <__udivmoddi4+0x1e6>
 8000f82:	4681      	mov	r9, r0
 8000f84:	e7be      	b.n	8000f04 <__udivmoddi4+0x244>
 8000f86:	4601      	mov	r1, r0
 8000f88:	e778      	b.n	8000e7c <__udivmoddi4+0x1bc>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	443c      	add	r4, r7
 8000f8e:	e745      	b.n	8000e1c <__udivmoddi4+0x15c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e708      	b.n	8000da6 <__udivmoddi4+0xe6>
 8000f94:	f1a8 0802 	sub.w	r8, r8, #2
 8000f98:	443d      	add	r5, r7
 8000f9a:	e72b      	b.n	8000df4 <__udivmoddi4+0x134>

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <HAL_InitTick+0x3c>)
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_InitTick+0x40>)
{
 8000fa6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa8:	7818      	ldrb	r0, [r3, #0]
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fb2:	6810      	ldr	r0, [r2, #0]
 8000fb4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fb8:	f000 f8a2 	bl	8001100 <HAL_SYSTICK_Config>
 8000fbc:	4604      	mov	r4, r0
 8000fbe:	b958      	cbnz	r0, 8000fd8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc0:	2d0f      	cmp	r5, #15
 8000fc2:	d809      	bhi.n	8000fd8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fcc:	f000 f856 	bl	800107c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <HAL_InitTick+0x44>)
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	601d      	str	r5, [r3, #0]
 8000fd6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000fd8:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000fda:	bd38      	pop	{r3, r4, r5, pc}
 8000fdc:	20000110 	.word	0x20000110
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	20000004 	.word	0x20000004

08000fe8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe8:	4a07      	ldr	r2, [pc, #28]	; (8001008 <HAL_Init+0x20>)
{
 8000fea:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fec:	6813      	ldr	r3, [r2, #0]
 8000fee:	f043 0310 	orr.w	r3, r3, #16
 8000ff2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	f000 f82f 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffa:	200f      	movs	r0, #15
 8000ffc:	f7ff ffd0 	bl	8000fa0 <HAL_InitTick>
  HAL_MspInit();
 8001000:	f004 f8b8 	bl	8005174 <HAL_MspInit>
}
 8001004:	2000      	movs	r0, #0
 8001006:	bd08      	pop	{r3, pc}
 8001008:	40022000 	.word	0x40022000

0800100c <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800100c:	4a03      	ldr	r2, [pc, #12]	; (800101c <HAL_IncTick+0x10>)
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <HAL_IncTick+0x14>)
 8001010:	6811      	ldr	r1, [r2, #0]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	440b      	add	r3, r1
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20001df0 	.word	0x20001df0
 8001020:	20000000 	.word	0x20000000

08001024 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001024:	4b01      	ldr	r3, [pc, #4]	; (800102c <HAL_GetTick+0x8>)
 8001026:	6818      	ldr	r0, [r3, #0]
}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20001df0 	.word	0x20001df0

08001030 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001030:	b538      	push	{r3, r4, r5, lr}
 8001032:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff fff6 	bl	8001024 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001038:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800103a:	bf1c      	itt	ne
 800103c:	4b05      	ldrne	r3, [pc, #20]	; (8001054 <HAL_Delay+0x24>)
 800103e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001040:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001042:	bf18      	it	ne
 8001044:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001046:	f7ff ffed 	bl	8001024 <HAL_GetTick>
 800104a:	1b40      	subs	r0, r0, r5
 800104c:	4284      	cmp	r4, r0
 800104e:	d8fa      	bhi.n	8001046 <HAL_Delay+0x16>
  {
  }
}
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop
 8001054:	20000000 	.word	0x20000000

08001058 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4a07      	ldr	r2, [pc, #28]	; (8001078 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800105a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001060:	041b      	lsls	r3, r3, #16
 8001062:	0c1b      	lsrs	r3, r3, #16
 8001064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001068:	0200      	lsls	r0, r0, #8
 800106a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800106e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001072:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001074:	60d3      	str	r3, [r2, #12]
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107e:	b530      	push	{r4, r5, lr}
 8001080:	68dc      	ldr	r4, [r3, #12]
 8001082:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001086:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800108c:	2b04      	cmp	r3, #4
 800108e:	bf28      	it	cs
 8001090:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	f04f 0501 	mov.w	r5, #1
 8001098:	fa05 f303 	lsl.w	r3, r5, r3
 800109c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a0:	bf8c      	ite	hi
 80010a2:	3c03      	subhi	r4, #3
 80010a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a6:	4019      	ands	r1, r3
 80010a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010aa:	fa05 f404 	lsl.w	r4, r5, r4
 80010ae:	3c01      	subs	r4, #1
 80010b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80010b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	ea42 0201 	orr.w	r2, r2, r1
 80010b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	bfad      	iteet	ge
 80010be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	f000 000f 	andlt.w	r0, r0, #15
 80010c6:	4b06      	ldrlt	r3, [pc, #24]	; (80010e0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010cc:	bfb5      	itete	lt
 80010ce:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80010d8:	bd30      	pop	{r4, r5, pc}
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00
 80010e0:	e000ed14 	.word	0xe000ed14

080010e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80010e4:	2800      	cmp	r0, #0
 80010e6:	db08      	blt.n	80010fa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e8:	0942      	lsrs	r2, r0, #5
 80010ea:	2301      	movs	r3, #1
 80010ec:	f000 001f 	and.w	r0, r0, #31
 80010f0:	fa03 f000 	lsl.w	r0, r3, r0
 80010f4:	4b01      	ldr	r3, [pc, #4]	; (80010fc <HAL_NVIC_EnableIRQ+0x18>)
 80010f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80010fa:	4770      	bx	lr
 80010fc:	e000e100 	.word	0xe000e100

08001100 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001100:	3801      	subs	r0, #1
 8001102:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001106:	d20a      	bcs.n	800111e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110e:	21f0      	movs	r1, #240	; 0xf0
 8001110:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001114:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001116:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001118:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800111e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000e010 	.word	0xe000e010
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800112c:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 800112e:	4604      	mov	r4, r0
 8001130:	b168      	cbz	r0, 800114e <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001132:	7903      	ldrb	r3, [r0, #4]
 8001134:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001138:	b913      	cbnz	r3, 8001140 <HAL_DAC_Init+0x14>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800113a:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800113c:	f004 f83a 	bl	80051b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001140:	2302      	movs	r3, #2
 8001142:	7123      	strb	r3, [r4, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001144:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001146:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001148:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800114a:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 800114c:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 800114e:	2001      	movs	r0, #1
}
 8001150:	bd10      	pop	{r4, pc}

08001152 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001152:	4770      	bx	lr

08001154 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8001154:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmp = 0U;
 8001156:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8001158:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0U;
 800115a:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t) (hdac->Instance);
 800115c:	9001      	str	r0, [sp, #4]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 800115e:	b941      	cbnz	r1, 8001172 <HAL_DAC_SetValue+0x1e>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001160:	9901      	ldr	r1, [sp, #4]
 8001162:	3108      	adds	r1, #8
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001164:	440a      	add	r2, r1
 8001166:	9201      	str	r2, [sp, #4]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001168:	9a01      	ldr	r2, [sp, #4]
  
  /* Return function status */
  return HAL_OK;
}
 800116a:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 800116c:	6013      	str	r3, [r2, #0]
}
 800116e:	b002      	add	sp, #8
 8001170:	bd10      	pop	{r4, pc}
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001172:	9901      	ldr	r1, [sp, #4]
 8001174:	3114      	adds	r1, #20
 8001176:	e7f5      	b.n	8001164 <HAL_DAC_SetValue+0x10>

08001178 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001178:	7943      	ldrb	r3, [r0, #5]
 800117a:	2b01      	cmp	r3, #1
{
 800117c:	b510      	push	{r4, lr}
 800117e:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 8001182:	d015      	beq.n	80011b0 <HAL_DAC_Start+0x38>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001184:	7103      	strb	r3, [r0, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001186:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdac);
 8001188:	2201      	movs	r2, #1
  __HAL_DAC_ENABLE(hdac, Channel);
 800118a:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hdac);
 800118c:	7142      	strb	r2, [r0, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 800118e:	408a      	lsls	r2, r1
 8001190:	4322      	orrs	r2, r4
 8001192:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001194:	681a      	ldr	r2, [r3, #0]
  if(Channel == DAC_CHANNEL_1)
 8001196:	b969      	cbnz	r1, 80011b4 <HAL_DAC_Start+0x3c>
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001198:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 800119c:	2a3c      	cmp	r2, #60	; 0x3c
 800119e:	d103      	bne.n	80011a8 <HAL_DAC_Start+0x30>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	f042 0201 	orr.w	r2, r2, #1
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80011a6:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80011a8:	2301      	movs	r3, #1
 80011aa:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80011ac:	2300      	movs	r3, #0
 80011ae:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 80011b0:	4618      	mov	r0, r3
    
  /* Return function status */
  return HAL_OK;
}
 80011b2:	bd10      	pop	{r4, pc}
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 80011b4:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 80011b8:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 80011bc:	d1f4      	bne.n	80011a8 <HAL_DAC_Start+0x30>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	f042 0202 	orr.w	r2, r2, #2
 80011c4:	e7ef      	b.n	80011a6 <HAL_DAC_Start+0x2e>

080011c6 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80011c6:	7943      	ldrb	r3, [r0, #5]
 80011c8:	2b01      	cmp	r3, #1
{
 80011ca:	b530      	push	{r4, r5, lr}
 80011cc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 80011d0:	d017      	beq.n	8001202 <HAL_DAC_ConfigChannel+0x3c>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80011d2:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 80011d4:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 80011d6:	6823      	ldr	r3, [r4, #0]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80011d8:	f640 75fe 	movw	r5, #4094	; 0xffe
 80011dc:	4095      	lsls	r5, r2
 80011de:	ea23 0505 	bic.w	r5, r3, r5
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80011e2:	c90a      	ldmia	r1, {r1, r3}
 80011e4:	430b      	orrs	r3, r1
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80011e6:	4093      	lsls	r3, r2
 80011e8:	432b      	orrs	r3, r5
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80011ea:	6023      	str	r3, [r4, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	21c0      	movs	r1, #192	; 0xc0
 80011f0:	fa01 f202 	lsl.w	r2, r1, r2
 80011f4:	ea23 0202 	bic.w	r2, r3, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80011f8:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80011fa:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80011fc:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80011fe:	2300      	movs	r3, #0
 8001200:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8001202:	4618      	mov	r0, r3
  
  /* Return function status */
  return HAL_OK;
}
 8001204:	bd30      	pop	{r4, r5, pc}

08001206 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001206:	4770      	bx	lr

08001208 <HAL_DAC_IRQHandler>:
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001208:	6803      	ldr	r3, [r0, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	0491      	lsls	r1, r2, #18
{
 800120e:	b510      	push	{r4, lr}
 8001210:	4604      	mov	r4, r0
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001212:	d511      	bpl.n	8001238 <HAL_DAC_IRQHandler+0x30>
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001216:	0492      	lsls	r2, r2, #18
 8001218:	d50e      	bpl.n	8001238 <HAL_DAC_IRQHandler+0x30>
      hdac->State = HAL_DAC_STATE_ERROR;
 800121a:	2204      	movs	r2, #4
 800121c:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800121e:	6902      	ldr	r2, [r0, #16]
 8001220:	f042 0201 	orr.w	r2, r2, #1
 8001224:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8001226:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800122a:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001232:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001234:	f7ff ff8d 	bl	8001152 <HAL_DAC_DMAUnderrunCallbackCh1>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001238:	6823      	ldr	r3, [r4, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	0091      	lsls	r1, r2, #2
 800123e:	d512      	bpl.n	8001266 <HAL_DAC_IRQHandler+0x5e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	d50f      	bpl.n	8001266 <HAL_DAC_IRQHandler+0x5e>
      hdac->State = HAL_DAC_STATE_ERROR;
 8001246:	2204      	movs	r2, #4
 8001248:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800124a:	6922      	ldr	r2, [r4, #16]
 800124c:	f042 0202 	orr.w	r2, r2, #2
 8001250:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8001252:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001256:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800125e:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001260:	4620      	mov	r0, r4
 8001262:	f7ff ffd0 	bl	8001206 <HAL_DACEx_DMAUnderrunCallbackCh2>
 8001266:	bd10      	pop	{r4, pc}

08001268 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001268:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 800126c:	2a02      	cmp	r2, #2
{  
 800126e:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001270:	d003      	beq.n	800127a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001272:	2204      	movs	r2, #4
 8001274:	6382      	str	r2, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001276:	2001      	movs	r0, #1
 8001278:	bd10      	pop	{r4, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800127a:	6802      	ldr	r2, [r0, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800127c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800127e:	6811      	ldr	r1, [r2, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001280:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001282:	f021 010e 	bic.w	r1, r1, #14
 8001286:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001288:	6811      	ldr	r1, [r2, #0]
 800128a:	f021 0101 	bic.w	r1, r1, #1
 800128e:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001290:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001292:	2101      	movs	r1, #1
 8001294:	fa01 f202 	lsl.w	r2, r1, r2
 8001298:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800129a:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800129c:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80012a0:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80012a4:	b113      	cbz	r3, 80012ac <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 80012a6:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80012a8:	4620      	mov	r0, r4
 80012aa:	bd10      	pop	{r4, pc}
 80012ac:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 80012ae:	bd10      	pop	{r4, pc}

080012b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b4:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b8:	f8df 9190 	ldr.w	r9, [pc, #400]	; 800144c <HAL_GPIO_Init+0x19c>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012bc:	4a61      	ldr	r2, [pc, #388]	; (8001444 <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00u;
 80012be:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c0:	fa38 f403 	lsrs.w	r4, r8, r3
 80012c4:	d102      	bne.n	80012cc <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 80012c6:	b003      	add	sp, #12
 80012c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012cc:	f04f 0e01 	mov.w	lr, #1
 80012d0:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 80012d4:	ea18 060e 	ands.w	r6, r8, lr
 80012d8:	f000 80a6 	beq.w	8001428 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012dc:	684c      	ldr	r4, [r1, #4]
 80012de:	f024 0710 	bic.w	r7, r4, #16
 80012e2:	2f02      	cmp	r7, #2
 80012e4:	d116      	bne.n	8001314 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 80012e6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80012ea:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012ee:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80012f2:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012f6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80012fa:	f04f 0c0f 	mov.w	ip, #15
 80012fe:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001302:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001306:	690d      	ldr	r5, [r1, #16]
 8001308:	fa05 f50b 	lsl.w	r5, r5, fp
 800130c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001310:	f8ca 5020 	str.w	r5, [sl, #32]
 8001314:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001318:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800131a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800131e:	fa05 f50a 	lsl.w	r5, r5, sl
 8001322:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001324:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001328:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800132c:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001330:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001332:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001336:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001338:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800133c:	d811      	bhi.n	8001362 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800133e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001340:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001344:	68cf      	ldr	r7, [r1, #12]
 8001346:	fa07 fc0a 	lsl.w	ip, r7, sl
 800134a:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800134e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001350:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001352:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001356:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800135a:	409f      	lsls	r7, r3
 800135c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001360:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001362:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001364:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001366:	688f      	ldr	r7, [r1, #8]
 8001368:	fa07 f70a 	lsl.w	r7, r7, sl
 800136c:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800136e:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001370:	00e5      	lsls	r5, r4, #3
 8001372:	d559      	bpl.n	8001428 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001374:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8001378:	f045 0501 	orr.w	r5, r5, #1
 800137c:	f8c9 5018 	str.w	r5, [r9, #24]
 8001380:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8001384:	f023 0703 	bic.w	r7, r3, #3
 8001388:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800138c:	f005 0501 	and.w	r5, r5, #1
 8001390:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001394:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001396:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800139c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800139e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80013a2:	f04f 0e0f 	mov.w	lr, #15
 80013a6:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013aa:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ae:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013b2:	d03b      	beq.n	800142c <HAL_GPIO_Init+0x17c>
 80013b4:	4d24      	ldr	r5, [pc, #144]	; (8001448 <HAL_GPIO_Init+0x198>)
 80013b6:	42a8      	cmp	r0, r5
 80013b8:	d03a      	beq.n	8001430 <HAL_GPIO_Init+0x180>
 80013ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013be:	42a8      	cmp	r0, r5
 80013c0:	d038      	beq.n	8001434 <HAL_GPIO_Init+0x184>
 80013c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013c6:	42a8      	cmp	r0, r5
 80013c8:	d036      	beq.n	8001438 <HAL_GPIO_Init+0x188>
 80013ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013ce:	42a8      	cmp	r0, r5
 80013d0:	d034      	beq.n	800143c <HAL_GPIO_Init+0x18c>
 80013d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013d6:	42a8      	cmp	r0, r5
 80013d8:	d032      	beq.n	8001440 <HAL_GPIO_Init+0x190>
 80013da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013de:	42a8      	cmp	r0, r5
 80013e0:	bf14      	ite	ne
 80013e2:	2507      	movne	r5, #7
 80013e4:	2506      	moveq	r5, #6
 80013e6:	fa05 f50c 	lsl.w	r5, r5, ip
 80013ea:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013ee:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80013f0:	6815      	ldr	r5, [r2, #0]
        temp &= ~(iocurrent);
 80013f2:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013f4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 80013f8:	bf0c      	ite	eq
 80013fa:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80013fc:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 80013fe:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001400:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001402:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001406:	bf0c      	ite	eq
 8001408:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800140a:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 800140c:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800140e:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001410:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001414:	bf0c      	ite	eq
 8001416:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001418:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 800141a:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800141c:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800141e:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8001420:	bf54      	ite	pl
 8001422:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8001424:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8001426:	60d5      	str	r5, [r2, #12]
    position++;
 8001428:	3301      	adds	r3, #1
 800142a:	e749      	b.n	80012c0 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800142c:	2500      	movs	r5, #0
 800142e:	e7da      	b.n	80013e6 <HAL_GPIO_Init+0x136>
 8001430:	2501      	movs	r5, #1
 8001432:	e7d8      	b.n	80013e6 <HAL_GPIO_Init+0x136>
 8001434:	2502      	movs	r5, #2
 8001436:	e7d6      	b.n	80013e6 <HAL_GPIO_Init+0x136>
 8001438:	2503      	movs	r5, #3
 800143a:	e7d4      	b.n	80013e6 <HAL_GPIO_Init+0x136>
 800143c:	2504      	movs	r5, #4
 800143e:	e7d2      	b.n	80013e6 <HAL_GPIO_Init+0x136>
 8001440:	2505      	movs	r5, #5
 8001442:	e7d0      	b.n	80013e6 <HAL_GPIO_Init+0x136>
 8001444:	40010400 	.word	0x40010400
 8001448:	48000400 	.word	0x48000400
 800144c:	40021000 	.word	0x40021000

08001450 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001450:	6903      	ldr	r3, [r0, #16]
 8001452:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001454:	bf14      	ite	ne
 8001456:	2001      	movne	r0, #1
 8001458:	2000      	moveq	r0, #0
 800145a:	4770      	bx	lr

0800145c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800145c:	b10a      	cbz	r2, 8001462 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800145e:	6181      	str	r1, [r0, #24]
 8001460:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001462:	6281      	str	r1, [r0, #40]	; 0x28
 8001464:	4770      	bx	lr

08001466 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001466:	6943      	ldr	r3, [r0, #20]
 8001468:	420b      	tst	r3, r1
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800146a:	bf18      	it	ne
 800146c:	0409      	lslne	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800146e:	6181      	str	r1, [r0, #24]
 8001470:	4770      	bx	lr
	...

08001474 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001474:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001478:	6959      	ldr	r1, [r3, #20]
 800147a:	4201      	tst	r1, r0
 800147c:	d002      	beq.n	8001484 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800147e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001480:	f003 fb6c 	bl	8004b5c <HAL_GPIO_EXTI_Callback>
 8001484:	bd08      	pop	{r3, pc}
 8001486:	bf00      	nop
 8001488:	40010400 	.word	0x40010400

0800148c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800148c:	6803      	ldr	r3, [r0, #0]
 800148e:	699a      	ldr	r2, [r3, #24]
 8001490:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8001492:	bf44      	itt	mi
 8001494:	2200      	movmi	r2, #0
 8001496:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001498:	699a      	ldr	r2, [r3, #24]
 800149a:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800149c:	bf5e      	ittt	pl
 800149e:	699a      	ldrpl	r2, [r3, #24]
 80014a0:	f042 0201 	orrpl.w	r2, r2, #1
 80014a4:	619a      	strpl	r2, [r3, #24]
 80014a6:	4770      	bx	lr

080014a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80014a8:	b530      	push	{r4, r5, lr}
 80014aa:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80014ac:	6805      	ldr	r5, [r0, #0]
 80014ae:	4323      	orrs	r3, r4
 80014b0:	0d64      	lsrs	r4, r4, #21
 80014b2:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80014b6:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80014ba:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80014be:	6868      	ldr	r0, [r5, #4]
 80014c0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80014c4:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80014c8:	4319      	orrs	r1, r3
 80014ca:	f044 0403 	orr.w	r4, r4, #3
 80014ce:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80014d2:	ea20 0404 	bic.w	r4, r0, r4
 80014d6:	4321      	orrs	r1, r4
 80014d8:	6069      	str	r1, [r5, #4]
 80014da:	bd30      	pop	{r4, r5, pc}

080014dc <I2C_WaitOnFlagUntilTimeout>:
{
 80014dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014e0:	9f06      	ldr	r7, [sp, #24]
 80014e2:	4604      	mov	r4, r0
 80014e4:	4688      	mov	r8, r1
 80014e6:	4616      	mov	r6, r2
 80014e8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014ea:	6822      	ldr	r2, [r4, #0]
 80014ec:	6993      	ldr	r3, [r2, #24]
 80014ee:	ea38 0303 	bics.w	r3, r8, r3
 80014f2:	bf0c      	ite	eq
 80014f4:	2301      	moveq	r3, #1
 80014f6:	2300      	movne	r3, #0
 80014f8:	42b3      	cmp	r3, r6
 80014fa:	d002      	beq.n	8001502 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80014fc:	2000      	movs	r0, #0
}
 80014fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001502:	1c6b      	adds	r3, r5, #1
 8001504:	d0f2      	beq.n	80014ec <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001506:	f7ff fd8d 	bl	8001024 <HAL_GetTick>
 800150a:	1bc0      	subs	r0, r0, r7
 800150c:	4285      	cmp	r5, r0
 800150e:	d301      	bcc.n	8001514 <I2C_WaitOnFlagUntilTimeout+0x38>
 8001510:	2d00      	cmp	r5, #0
 8001512:	d1ea      	bne.n	80014ea <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001514:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001516:	f043 0320 	orr.w	r3, r3, #32
 800151a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800151c:	2320      	movs	r3, #32
 800151e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001522:	2300      	movs	r3, #0
 8001524:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001528:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800152c:	2001      	movs	r0, #1
 800152e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001532 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001532:	6803      	ldr	r3, [r0, #0]
{
 8001534:	b570      	push	{r4, r5, r6, lr}
 8001536:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001538:	6998      	ldr	r0, [r3, #24]
 800153a:	f010 0010 	ands.w	r0, r0, #16
{
 800153e:	460d      	mov	r5, r1
 8001540:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001542:	d116      	bne.n	8001572 <I2C_IsAcknowledgeFailed+0x40>
 8001544:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8001546:	1c69      	adds	r1, r5, #1
 8001548:	d014      	beq.n	8001574 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800154a:	f7ff fd6b 	bl	8001024 <HAL_GetTick>
 800154e:	1b80      	subs	r0, r0, r6
 8001550:	4285      	cmp	r5, r0
 8001552:	d300      	bcc.n	8001556 <I2C_IsAcknowledgeFailed+0x24>
 8001554:	b96d      	cbnz	r5, 8001572 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001556:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001558:	f043 0320 	orr.w	r3, r3, #32
 800155c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800155e:	2320      	movs	r3, #32
 8001560:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001564:	2300      	movs	r3, #0
 8001566:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800156a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 800156e:	2001      	movs	r0, #1
}
 8001570:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001572:	6823      	ldr	r3, [r4, #0]
 8001574:	6999      	ldr	r1, [r3, #24]
 8001576:	068a      	lsls	r2, r1, #26
 8001578:	d5e5      	bpl.n	8001546 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800157a:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800157c:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800157e:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001580:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001582:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001584:	f7ff ff82 	bl	800148c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001588:	6822      	ldr	r2, [r4, #0]
 800158a:	6853      	ldr	r3, [r2, #4]
 800158c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001590:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001594:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001598:	f023 0301 	bic.w	r3, r3, #1
 800159c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800159e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80015a6:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 80015aa:	e7db      	b.n	8001564 <I2C_IsAcknowledgeFailed+0x32>

080015ac <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80015ac:	b570      	push	{r4, r5, r6, lr}
 80015ae:	4604      	mov	r4, r0
 80015b0:	460d      	mov	r5, r1
 80015b2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015b4:	6823      	ldr	r3, [r4, #0]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	079b      	lsls	r3, r3, #30
 80015ba:	d501      	bpl.n	80015c0 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80015bc:	2000      	movs	r0, #0
 80015be:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80015c0:	4632      	mov	r2, r6
 80015c2:	4629      	mov	r1, r5
 80015c4:	4620      	mov	r0, r4
 80015c6:	f7ff ffb4 	bl	8001532 <I2C_IsAcknowledgeFailed>
 80015ca:	b9a0      	cbnz	r0, 80015f6 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80015cc:	1c6a      	adds	r2, r5, #1
 80015ce:	d0f1      	beq.n	80015b4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015d0:	f7ff fd28 	bl	8001024 <HAL_GetTick>
 80015d4:	1b80      	subs	r0, r0, r6
 80015d6:	4285      	cmp	r5, r0
 80015d8:	d301      	bcc.n	80015de <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80015da:	2d00      	cmp	r5, #0
 80015dc:	d1ea      	bne.n	80015b4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015e0:	f043 0320 	orr.w	r3, r3, #32
 80015e4:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80015e6:	2320      	movs	r3, #32
 80015e8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80015f2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80015f6:	2001      	movs	r0, #1
}
 80015f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080015fc <I2C_RequestMemoryWrite>:
{
 80015fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80015fe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001600:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001602:	4b16      	ldr	r3, [pc, #88]	; (800165c <I2C_RequestMemoryWrite+0x60>)
 8001604:	9300      	str	r3, [sp, #0]
{
 8001606:	4605      	mov	r5, r0
 8001608:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800160a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800160e:	b2fa      	uxtb	r2, r7
 8001610:	f7ff ff4a 	bl	80014a8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001614:	4632      	mov	r2, r6
 8001616:	9908      	ldr	r1, [sp, #32]
 8001618:	4628      	mov	r0, r5
 800161a:	f7ff ffc7 	bl	80015ac <I2C_WaitOnTXISFlagUntilTimeout>
 800161e:	b110      	cbz	r0, 8001626 <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 8001620:	2001      	movs	r0, #1
}
 8001622:	b003      	add	sp, #12
 8001624:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001626:	2f01      	cmp	r7, #1
 8001628:	682b      	ldr	r3, [r5, #0]
 800162a:	d10c      	bne.n	8001646 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800162c:	b2e4      	uxtb	r4, r4
 800162e:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001630:	9b08      	ldr	r3, [sp, #32]
 8001632:	9600      	str	r6, [sp, #0]
 8001634:	2200      	movs	r2, #0
 8001636:	2180      	movs	r1, #128	; 0x80
 8001638:	4628      	mov	r0, r5
 800163a:	f7ff ff4f 	bl	80014dc <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 800163e:	3000      	adds	r0, #0
 8001640:	bf18      	it	ne
 8001642:	2001      	movne	r0, #1
 8001644:	e7ed      	b.n	8001622 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001646:	0a22      	lsrs	r2, r4, #8
 8001648:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800164a:	9908      	ldr	r1, [sp, #32]
 800164c:	4632      	mov	r2, r6
 800164e:	4628      	mov	r0, r5
 8001650:	f7ff ffac 	bl	80015ac <I2C_WaitOnTXISFlagUntilTimeout>
 8001654:	2800      	cmp	r0, #0
 8001656:	d1e3      	bne.n	8001620 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001658:	682b      	ldr	r3, [r5, #0]
 800165a:	e7e7      	b.n	800162c <I2C_RequestMemoryWrite+0x30>
 800165c:	80002000 	.word	0x80002000

08001660 <I2C_RequestMemoryRead>:
{
 8001660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001662:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001664:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001666:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <I2C_RequestMemoryRead+0x60>)
 8001668:	9300      	str	r3, [sp, #0]
{
 800166a:	4605      	mov	r5, r0
 800166c:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800166e:	2300      	movs	r3, #0
 8001670:	b2fa      	uxtb	r2, r7
 8001672:	f7ff ff19 	bl	80014a8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001676:	4632      	mov	r2, r6
 8001678:	9908      	ldr	r1, [sp, #32]
 800167a:	4628      	mov	r0, r5
 800167c:	f7ff ff96 	bl	80015ac <I2C_WaitOnTXISFlagUntilTimeout>
 8001680:	b110      	cbz	r0, 8001688 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8001682:	2001      	movs	r0, #1
}
 8001684:	b003      	add	sp, #12
 8001686:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001688:	2f01      	cmp	r7, #1
 800168a:	682b      	ldr	r3, [r5, #0]
 800168c:	d10c      	bne.n	80016a8 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800168e:	b2e4      	uxtb	r4, r4
 8001690:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001692:	9b08      	ldr	r3, [sp, #32]
 8001694:	9600      	str	r6, [sp, #0]
 8001696:	2200      	movs	r2, #0
 8001698:	2140      	movs	r1, #64	; 0x40
 800169a:	4628      	mov	r0, r5
 800169c:	f7ff ff1e 	bl	80014dc <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80016a0:	3000      	adds	r0, #0
 80016a2:	bf18      	it	ne
 80016a4:	2001      	movne	r0, #1
 80016a6:	e7ed      	b.n	8001684 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80016a8:	0a22      	lsrs	r2, r4, #8
 80016aa:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016ac:	9908      	ldr	r1, [sp, #32]
 80016ae:	4632      	mov	r2, r6
 80016b0:	4628      	mov	r0, r5
 80016b2:	f7ff ff7b 	bl	80015ac <I2C_WaitOnTXISFlagUntilTimeout>
 80016b6:	2800      	cmp	r0, #0
 80016b8:	d1e3      	bne.n	8001682 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016ba:	682b      	ldr	r3, [r5, #0]
 80016bc:	e7e7      	b.n	800168e <I2C_RequestMemoryRead+0x2e>
 80016be:	bf00      	nop
 80016c0:	80002000 	.word	0x80002000

080016c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80016c4:	b570      	push	{r4, r5, r6, lr}
 80016c6:	4604      	mov	r4, r0
 80016c8:	460d      	mov	r5, r1
 80016ca:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	069b      	lsls	r3, r3, #26
 80016d2:	d501      	bpl.n	80016d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80016d4:	2000      	movs	r0, #0
 80016d6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80016d8:	4632      	mov	r2, r6
 80016da:	4629      	mov	r1, r5
 80016dc:	4620      	mov	r0, r4
 80016de:	f7ff ff28 	bl	8001532 <I2C_IsAcknowledgeFailed>
 80016e2:	b990      	cbnz	r0, 800170a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016e4:	f7ff fc9e 	bl	8001024 <HAL_GetTick>
 80016e8:	1b80      	subs	r0, r0, r6
 80016ea:	4285      	cmp	r5, r0
 80016ec:	d301      	bcc.n	80016f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80016ee:	2d00      	cmp	r5, #0
 80016f0:	d1ec      	bne.n	80016cc <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016f4:	f043 0320 	orr.w	r3, r3, #32
 80016f8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80016fa:	2320      	movs	r3, #32
 80016fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001700:	2300      	movs	r3, #0
 8001702:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001706:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800170a:	2001      	movs	r0, #1
}
 800170c:	bd70      	pop	{r4, r5, r6, pc}

0800170e <HAL_I2C_Init>:
{
 800170e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001710:	4604      	mov	r4, r0
 8001712:	2800      	cmp	r0, #0
 8001714:	d04a      	beq.n	80017ac <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001716:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800171a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800171e:	b91b      	cbnz	r3, 8001728 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001720:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001724:	f003 fd7c 	bl	8005220 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001728:	2324      	movs	r3, #36	; 0x24
 800172a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800172e:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001730:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	f022 0201 	bic.w	r2, r2, #1
 8001738:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800173a:	6862      	ldr	r2, [r4, #4]
 800173c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001740:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001742:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001744:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001746:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800174e:	d124      	bne.n	800179a <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001750:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001754:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001756:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001758:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800175a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800175e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001762:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001764:	68da      	ldr	r2, [r3, #12]
 8001766:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800176a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800176c:	6922      	ldr	r2, [r4, #16]
 800176e:	430a      	orrs	r2, r1
 8001770:	69a1      	ldr	r1, [r4, #24]
 8001772:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001776:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001778:	6a21      	ldr	r1, [r4, #32]
 800177a:	69e2      	ldr	r2, [r4, #28]
 800177c:	430a      	orrs	r2, r1
 800177e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	f042 0201 	orr.w	r2, r2, #1
 8001786:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001788:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800178a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800178c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800178e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001792:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001794:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8001798:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800179a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800179e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017a0:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017a2:	bf04      	itt	eq
 80017a4:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80017a8:	605a      	streq	r2, [r3, #4]
 80017aa:	e7d4      	b.n	8001756 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80017ac:	2001      	movs	r0, #1
}
 80017ae:	bd10      	pop	{r4, pc}

080017b0 <HAL_I2C_Mem_Write>:
{
 80017b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017b4:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80017b6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80017ba:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 80017bc:	2b20      	cmp	r3, #32
{
 80017be:	4604      	mov	r4, r0
 80017c0:	460f      	mov	r7, r1
 80017c2:	9203      	str	r2, [sp, #12]
 80017c4:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80017c8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80017cc:	f040 80a5 	bne.w	800191a <HAL_I2C_Mem_Write+0x16a>
    if ((pData == NULL) || (Size == 0U))
 80017d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80017d2:	b113      	cbz	r3, 80017da <HAL_I2C_Mem_Write+0x2a>
 80017d4:	f1ba 0f00 	cmp.w	sl, #0
 80017d8:	d106      	bne.n	80017e8 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80017da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017de:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80017e0:	2001      	movs	r0, #1
}
 80017e2:	b005      	add	sp, #20
 80017e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80017e8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	f000 8094 	beq.w	800191a <HAL_I2C_Mem_Write+0x16a>
 80017f2:	2501      	movs	r5, #1
 80017f4:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80017f8:	f7ff fc14 	bl	8001024 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017fc:	2319      	movs	r3, #25
 80017fe:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001800:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001802:	462a      	mov	r2, r5
 8001804:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001808:	4620      	mov	r0, r4
 800180a:	f7ff fe67 	bl	80014dc <I2C_WaitOnFlagUntilTimeout>
 800180e:	4681      	mov	r9, r0
 8001810:	2800      	cmp	r0, #0
 8001812:	d1e5      	bne.n	80017e0 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001814:	2321      	movs	r3, #33	; 0x21
 8001816:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800181a:	2340      	movs	r3, #64	; 0x40
 800181c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001822:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001824:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8001826:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001828:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800182c:	9601      	str	r6, [sp, #4]
 800182e:	f8cd 8000 	str.w	r8, [sp]
 8001832:	465b      	mov	r3, fp
 8001834:	9a03      	ldr	r2, [sp, #12]
 8001836:	4639      	mov	r1, r7
 8001838:	4620      	mov	r0, r4
 800183a:	f7ff fedf 	bl	80015fc <I2C_RequestMemoryWrite>
 800183e:	b110      	cbz	r0, 8001846 <HAL_I2C_Mem_Write+0x96>
      __HAL_UNLOCK(hi2c);
 8001840:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8001844:	e7cc      	b.n	80017e0 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001846:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001848:	b29b      	uxth	r3, r3
 800184a:	2bff      	cmp	r3, #255	; 0xff
 800184c:	d955      	bls.n	80018fa <HAL_I2C_Mem_Write+0x14a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800184e:	22ff      	movs	r2, #255	; 0xff
 8001850:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001852:	9000      	str	r0, [sp, #0]
 8001854:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001858:	4639      	mov	r1, r7
 800185a:	4620      	mov	r0, r4
 800185c:	f7ff fe24 	bl	80014a8 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001860:	4632      	mov	r2, r6
 8001862:	4641      	mov	r1, r8
 8001864:	4620      	mov	r0, r4
 8001866:	f7ff fea1 	bl	80015ac <I2C_WaitOnTXISFlagUntilTimeout>
 800186a:	2800      	cmp	r0, #0
 800186c:	d1b8      	bne.n	80017e0 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800186e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001870:	6822      	ldr	r2, [r4, #0]
 8001872:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001876:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001878:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800187a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800187c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800187e:	3b01      	subs	r3, #1
 8001880:	b29b      	uxth	r3, r3
 8001882:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001884:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001886:	3a01      	subs	r2, #1
 8001888:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800188a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800188c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800188e:	b1ab      	cbz	r3, 80018bc <HAL_I2C_Mem_Write+0x10c>
 8001890:	b9a2      	cbnz	r2, 80018bc <HAL_I2C_Mem_Write+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001892:	9600      	str	r6, [sp, #0]
 8001894:	4643      	mov	r3, r8
 8001896:	2180      	movs	r1, #128	; 0x80
 8001898:	4620      	mov	r0, r4
 800189a:	f7ff fe1f 	bl	80014dc <I2C_WaitOnFlagUntilTimeout>
 800189e:	2800      	cmp	r0, #0
 80018a0:	d19e      	bne.n	80017e0 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	2bff      	cmp	r3, #255	; 0xff
 80018a8:	d92f      	bls.n	800190a <HAL_I2C_Mem_Write+0x15a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018aa:	22ff      	movs	r2, #255	; 0xff
 80018ac:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80018ae:	9000      	str	r0, [sp, #0]
 80018b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018b4:	4639      	mov	r1, r7
 80018b6:	4620      	mov	r0, r4
 80018b8:	f7ff fdf6 	bl	80014a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80018bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018be:	b29b      	uxth	r3, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1cd      	bne.n	8001860 <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018c4:	4632      	mov	r2, r6
 80018c6:	4641      	mov	r1, r8
 80018c8:	4620      	mov	r0, r4
 80018ca:	f7ff fefb 	bl	80016c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018ce:	2800      	cmp	r0, #0
 80018d0:	d186      	bne.n	80017e0 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	2120      	movs	r1, #32
 80018d6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80018de:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80018e2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80018e6:	f022 0201 	bic.w	r2, r2, #1
 80018ea:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80018ec:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80018f0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018f4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80018f8:	e773      	b.n	80017e2 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80018fa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018fc:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80018fe:	b292      	uxth	r2, r2
 8001900:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001902:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	e7a6      	b.n	8001858 <HAL_I2C_Mem_Write+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 800190a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800190c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800190e:	b292      	uxth	r2, r2
 8001910:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001912:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	e7cc      	b.n	80018b4 <HAL_I2C_Mem_Write+0x104>
    return HAL_BUSY;
 800191a:	2002      	movs	r0, #2
 800191c:	e761      	b.n	80017e2 <HAL_I2C_Mem_Write+0x32>
	...

08001920 <HAL_I2C_Mem_Read>:
{
 8001920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001924:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001926:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800192a:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 800192c:	2b20      	cmp	r3, #32
{
 800192e:	4604      	mov	r4, r0
 8001930:	460f      	mov	r7, r1
 8001932:	9203      	str	r2, [sp, #12]
 8001934:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8001938:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 800193c:	f040 80a9 	bne.w	8001a92 <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8001940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001942:	b113      	cbz	r3, 800194a <HAL_I2C_Mem_Read+0x2a>
 8001944:	f1ba 0f00 	cmp.w	sl, #0
 8001948:	d106      	bne.n	8001958 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800194a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800194e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001950:	2001      	movs	r0, #1
}
 8001952:	b005      	add	sp, #20
 8001954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001958:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800195c:	2b01      	cmp	r3, #1
 800195e:	f000 8098 	beq.w	8001a92 <HAL_I2C_Mem_Read+0x172>
 8001962:	2501      	movs	r5, #1
 8001964:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001968:	f7ff fb5c 	bl	8001024 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800196c:	2319      	movs	r3, #25
 800196e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001970:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001972:	462a      	mov	r2, r5
 8001974:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001978:	4620      	mov	r0, r4
 800197a:	f7ff fdaf 	bl	80014dc <I2C_WaitOnFlagUntilTimeout>
 800197e:	4681      	mov	r9, r0
 8001980:	2800      	cmp	r0, #0
 8001982:	d1e5      	bne.n	8001950 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001984:	2322      	movs	r3, #34	; 0x22
 8001986:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800198a:	2340      	movs	r3, #64	; 0x40
 800198c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001992:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001994:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8001996:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001998:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800199c:	9601      	str	r6, [sp, #4]
 800199e:	f8cd 8000 	str.w	r8, [sp]
 80019a2:	465b      	mov	r3, fp
 80019a4:	9a03      	ldr	r2, [sp, #12]
 80019a6:	4639      	mov	r1, r7
 80019a8:	4620      	mov	r0, r4
 80019aa:	f7ff fe59 	bl	8001660 <I2C_RequestMemoryRead>
 80019ae:	b110      	cbz	r0, 80019b6 <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 80019b0:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 80019b4:	e7cc      	b.n	8001950 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	2bff      	cmp	r3, #255	; 0xff
 80019bc:	4b36      	ldr	r3, [pc, #216]	; (8001a98 <HAL_I2C_Mem_Read+0x178>)
 80019be:	d958      	bls.n	8001a72 <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019c0:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80019c2:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019c4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80019c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80019ca:	4639      	mov	r1, r7
 80019cc:	4620      	mov	r0, r4
 80019ce:	f7ff fd6b 	bl	80014a8 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80019d2:	9600      	str	r6, [sp, #0]
 80019d4:	4643      	mov	r3, r8
 80019d6:	2200      	movs	r2, #0
 80019d8:	2104      	movs	r1, #4
 80019da:	4620      	mov	r0, r4
 80019dc:	f7ff fd7e 	bl	80014dc <I2C_WaitOnFlagUntilTimeout>
 80019e0:	2800      	cmp	r0, #0
 80019e2:	d1b5      	bne.n	8001950 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019e4:	6822      	ldr	r2, [r4, #0]
 80019e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019ea:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80019ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80019ee:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80019f0:	3301      	adds	r3, #1
 80019f2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80019f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019f6:	3b01      	subs	r3, #1
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80019fe:	3a01      	subs	r2, #1
 8001a00:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a02:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001a04:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a06:	b1ab      	cbz	r3, 8001a34 <HAL_I2C_Mem_Read+0x114>
 8001a08:	b9a2      	cbnz	r2, 8001a34 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a0a:	9600      	str	r6, [sp, #0]
 8001a0c:	4643      	mov	r3, r8
 8001a0e:	2180      	movs	r1, #128	; 0x80
 8001a10:	4620      	mov	r0, r4
 8001a12:	f7ff fd63 	bl	80014dc <I2C_WaitOnFlagUntilTimeout>
 8001a16:	2800      	cmp	r0, #0
 8001a18:	d19a      	bne.n	8001950 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	2bff      	cmp	r3, #255	; 0xff
 8001a20:	d92f      	bls.n	8001a82 <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a22:	22ff      	movs	r2, #255	; 0xff
 8001a24:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a26:	9000      	str	r0, [sp, #0]
 8001a28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a2c:	4639      	mov	r1, r7
 8001a2e:	4620      	mov	r0, r4
 8001a30:	f7ff fd3a 	bl	80014a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8001a34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1ca      	bne.n	80019d2 <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a3c:	4632      	mov	r2, r6
 8001a3e:	4641      	mov	r1, r8
 8001a40:	4620      	mov	r0, r4
 8001a42:	f7ff fe3f 	bl	80016c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a46:	2800      	cmp	r0, #0
 8001a48:	d182      	bne.n	8001950 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	2120      	movs	r1, #32
 8001a4e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001a56:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001a5a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001a5e:	f022 0201 	bic.w	r2, r2, #1
 8001a62:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001a64:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001a68:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a6c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001a70:	e76f      	b.n	8001952 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8001a72:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001a74:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001a76:	b292      	uxth	r2, r2
 8001a78:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001a7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	e7a3      	b.n	80019ca <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8001a82:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a84:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001a86:	b292      	uxth	r2, r2
 8001a88:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	e7cc      	b.n	8001a2c <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 8001a92:	2002      	movs	r0, #2
 8001a94:	e75d      	b.n	8001952 <HAL_I2C_Mem_Read+0x32>
 8001a96:	bf00      	nop
 8001a98:	80002400 	.word	0x80002400

08001a9c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a9c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	2a20      	cmp	r2, #32
{
 8001aa4:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa6:	d11d      	bne.n	8001ae4 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aa8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d019      	beq.n	8001ae4 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab0:	2324      	movs	r3, #36	; 0x24
 8001ab2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ab6:	6803      	ldr	r3, [r0, #0]
 8001ab8:	681c      	ldr	r4, [r3, #0]
 8001aba:	f024 0401 	bic.w	r4, r4, #1
 8001abe:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ac0:	681c      	ldr	r4, [r3, #0]
 8001ac2:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001ac6:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ac8:	681c      	ldr	r4, [r3, #0]
 8001aca:	4321      	orrs	r1, r4
 8001acc:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ace:	6819      	ldr	r1, [r3, #0]
 8001ad0:	f041 0101 	orr.w	r1, r1, #1
 8001ad4:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ad6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001ad8:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001adc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001ae4:	2002      	movs	r0, #2
  }
}
 8001ae6:	bd10      	pop	{r4, pc}

08001ae8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ae8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aea:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8001aee:	b2e4      	uxtb	r4, r4
 8001af0:	2c20      	cmp	r4, #32
 8001af2:	d11c      	bne.n	8001b2e <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001af4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d018      	beq.n	8001b2e <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001afc:	2324      	movs	r3, #36	; 0x24
 8001afe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b02:	6803      	ldr	r3, [r0, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	f022 0201 	bic.w	r2, r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b0c:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b0e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b12:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b16:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	f042 0201 	orr.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b20:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001b22:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001b26:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001b2e:	2002      	movs	r0, #2
  }
}
 8001b30:	bd10      	pop	{r4, pc}
	...

08001b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b34:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b38:	4605      	mov	r5, r0
 8001b3a:	b908      	cbnz	r0, 8001b40 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	e05b      	b.n	8001bf8 <HAL_RCC_OscConfig+0xc4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b40:	6803      	ldr	r3, [r0, #0]
 8001b42:	07df      	lsls	r7, r3, #31
 8001b44:	d411      	bmi.n	8001b6a <HAL_RCC_OscConfig+0x36>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b46:	682b      	ldr	r3, [r5, #0]
 8001b48:	079e      	lsls	r6, r3, #30
 8001b4a:	f100 808a 	bmi.w	8001c62 <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	682b      	ldr	r3, [r5, #0]
 8001b50:	071c      	lsls	r4, r3, #28
 8001b52:	f100 80fe 	bmi.w	8001d52 <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b56:	682b      	ldr	r3, [r5, #0]
 8001b58:	0758      	lsls	r0, r3, #29
 8001b5a:	f100 8147 	bmi.w	8001dec <HAL_RCC_OscConfig+0x2b8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b5e:	69a8      	ldr	r0, [r5, #24]
 8001b60:	2800      	cmp	r0, #0
 8001b62:	f040 81de 	bne.w	8001f22 <HAL_RCC_OscConfig+0x3ee>
        }
      }
    }
  }

  return HAL_OK;
 8001b66:	2000      	movs	r0, #0
 8001b68:	e046      	b.n	8001bf8 <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b6a:	4cbe      	ldr	r4, [pc, #760]	; (8001e64 <HAL_RCC_OscConfig+0x330>)
 8001b6c:	6863      	ldr	r3, [r4, #4]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d00a      	beq.n	8001b8c <HAL_RCC_OscConfig+0x58>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b76:	6863      	ldr	r3, [r4, #4]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d119      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x80>
 8001b80:	6863      	ldr	r3, [r4, #4]
 8001b82:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b8a:	d113      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x80>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b90:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b94:	6821      	ldr	r1, [r4, #0]
 8001b96:	fa93 f3a3 	rbit	r3, r3
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	420b      	tst	r3, r1
 8001baa:	d0cc      	beq.n	8001b46 <HAL_RCC_OscConfig+0x12>
 8001bac:	686b      	ldr	r3, [r5, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1c9      	bne.n	8001b46 <HAL_RCC_OscConfig+0x12>
 8001bb2:	e7c3      	b.n	8001b3c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb4:	686b      	ldr	r3, [r5, #4]
 8001bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bba:	d120      	bne.n	8001bfe <HAL_RCC_OscConfig+0xca>
 8001bbc:	6823      	ldr	r3, [r4, #0]
 8001bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fa2e 	bl	8001024 <HAL_GetTick>
 8001bc8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001bcc:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	2701      	movs	r7, #1
 8001bd0:	fa96 f3a6 	rbit	r3, r6
 8001bd4:	6822      	ldr	r2, [r4, #0]
 8001bd6:	fa96 f3a6 	rbit	r3, r6
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	f003 031f 	and.w	r3, r3, #31
 8001be2:	fa07 f303 	lsl.w	r3, r7, r3
 8001be6:	4213      	tst	r3, r2
 8001be8:	d1ad      	bne.n	8001b46 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bea:	f7ff fa1b 	bl	8001024 <HAL_GetTick>
 8001bee:	eba0 0008 	sub.w	r0, r0, r8
 8001bf2:	2864      	cmp	r0, #100	; 0x64
 8001bf4:	d9ec      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x9c>
            return HAL_TIMEOUT;
 8001bf6:	2003      	movs	r0, #3
}
 8001bf8:	b002      	add	sp, #8
 8001bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfe:	bb0b      	cbnz	r3, 8001c44 <HAL_RCC_OscConfig+0x110>
 8001c00:	6823      	ldr	r3, [r4, #0]
 8001c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c06:	6023      	str	r3, [r4, #0]
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c0e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c10:	f7ff fa08 	bl	8001024 <HAL_GetTick>
 8001c14:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001c18:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1a:	2701      	movs	r7, #1
 8001c1c:	fa96 f3a6 	rbit	r3, r6
 8001c20:	6822      	ldr	r2, [r4, #0]
 8001c22:	fa96 f3a6 	rbit	r3, r6
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	f003 031f 	and.w	r3, r3, #31
 8001c2e:	fa07 f303 	lsl.w	r3, r7, r3
 8001c32:	4213      	tst	r3, r2
 8001c34:	d087      	beq.n	8001b46 <HAL_RCC_OscConfig+0x12>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c36:	f7ff f9f5 	bl	8001024 <HAL_GetTick>
 8001c3a:	eba0 0008 	sub.w	r0, r0, r8
 8001c3e:	2864      	cmp	r0, #100	; 0x64
 8001c40:	d9ec      	bls.n	8001c1c <HAL_RCC_OscConfig+0xe8>
 8001c42:	e7d8      	b.n	8001bf6 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c48:	6823      	ldr	r3, [r4, #0]
 8001c4a:	d103      	bne.n	8001c54 <HAL_RCC_OscConfig+0x120>
 8001c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c50:	6023      	str	r3, [r4, #0]
 8001c52:	e7b3      	b.n	8001bbc <HAL_RCC_OscConfig+0x88>
 8001c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c58:	6023      	str	r3, [r4, #0]
 8001c5a:	6823      	ldr	r3, [r4, #0]
 8001c5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c60:	e7af      	b.n	8001bc2 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c62:	4c80      	ldr	r4, [pc, #512]	; (8001e64 <HAL_RCC_OscConfig+0x330>)
 8001c64:	6863      	ldr	r3, [r4, #4]
 8001c66:	f013 0f0c 	tst.w	r3, #12
 8001c6a:	d00a      	beq.n	8001c82 <HAL_RCC_OscConfig+0x14e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c6c:	6863      	ldr	r3, [r4, #4]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d125      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x18e>
 8001c76:	6863      	ldr	r3, [r4, #4]
 8001c78:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c80:	d11f      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x18e>
 8001c82:	2302      	movs	r3, #2
 8001c84:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c88:	6821      	ldr	r1, [r4, #0]
 8001c8a:	fa93 f3a3 	rbit	r3, r3
 8001c8e:	fab3 f383 	clz	r3, r3
 8001c92:	f003 031f 	and.w	r3, r3, #31
 8001c96:	2201      	movs	r2, #1
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	420b      	tst	r3, r1
 8001c9e:	d003      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x174>
 8001ca0:	68eb      	ldr	r3, [r5, #12]
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	f47f af4a 	bne.w	8001b3c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca8:	6821      	ldr	r1, [r4, #0]
 8001caa:	23f8      	movs	r3, #248	; 0xf8
 8001cac:	fa93 f3a3 	rbit	r3, r3
 8001cb0:	fab3 f283 	clz	r2, r3
 8001cb4:	692b      	ldr	r3, [r5, #16]
 8001cb6:	4093      	lsls	r3, r2
 8001cb8:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	6023      	str	r3, [r4, #0]
 8001cc0:	e745      	b.n	8001b4e <HAL_RCC_OscConfig+0x1a>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc2:	68ea      	ldr	r2, [r5, #12]
 8001cc4:	2601      	movs	r6, #1
 8001cc6:	b30a      	cbz	r2, 8001d0c <HAL_RCC_OscConfig+0x1d8>
 8001cc8:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8001ccc:	fab3 f383 	clz	r3, r3
 8001cd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	2702      	movs	r7, #2
 8001cdc:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001cde:	f7ff f9a1 	bl	8001024 <HAL_GetTick>
 8001ce2:	4680      	mov	r8, r0
 8001ce4:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce8:	6822      	ldr	r2, [r4, #0]
 8001cea:	fa97 f3a7 	rbit	r3, r7
 8001cee:	fab3 f383 	clz	r3, r3
 8001cf2:	f003 031f 	and.w	r3, r3, #31
 8001cf6:	fa06 f303 	lsl.w	r3, r6, r3
 8001cfa:	4213      	tst	r3, r2
 8001cfc:	d1d4      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x174>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cfe:	f7ff f991 	bl	8001024 <HAL_GetTick>
 8001d02:	eba0 0008 	sub.w	r0, r0, r8
 8001d06:	2802      	cmp	r0, #2
 8001d08:	d9ec      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x1b0>
 8001d0a:	e774      	b.n	8001bf6 <HAL_RCC_OscConfig+0xc2>
 8001d0c:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8001d10:	fab3 f383 	clz	r3, r3
 8001d14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	2702      	movs	r7, #2
 8001d20:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d22:	f7ff f97f 	bl	8001024 <HAL_GetTick>
 8001d26:	4680      	mov	r8, r0
 8001d28:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2c:	6822      	ldr	r2, [r4, #0]
 8001d2e:	fa97 f3a7 	rbit	r3, r7
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	f003 031f 	and.w	r3, r3, #31
 8001d3a:	fa06 f303 	lsl.w	r3, r6, r3
 8001d3e:	4213      	tst	r3, r2
 8001d40:	f43f af05 	beq.w	8001b4e <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d44:	f7ff f96e 	bl	8001024 <HAL_GetTick>
 8001d48:	eba0 0008 	sub.w	r0, r0, r8
 8001d4c:	2802      	cmp	r0, #2
 8001d4e:	d9eb      	bls.n	8001d28 <HAL_RCC_OscConfig+0x1f4>
 8001d50:	e751      	b.n	8001bf6 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d52:	696a      	ldr	r2, [r5, #20]
 8001d54:	4e43      	ldr	r6, [pc, #268]	; (8001e64 <HAL_RCC_OscConfig+0x330>)
 8001d56:	4944      	ldr	r1, [pc, #272]	; (8001e68 <HAL_RCC_OscConfig+0x334>)
 8001d58:	2401      	movs	r4, #1
 8001d5a:	b31a      	cbz	r2, 8001da4 <HAL_RCC_OscConfig+0x270>
 8001d5c:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8001d60:	fab3 f383 	clz	r3, r3
 8001d64:	440b      	add	r3, r1
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	2702      	movs	r7, #2
 8001d6a:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8001d6c:	f7ff f95a 	bl	8001024 <HAL_GetTick>
 8001d70:	4680      	mov	r8, r0
 8001d72:	fa97 f3a7 	rbit	r3, r7
 8001d76:	fa97 f3a7 	rbit	r3, r7
 8001d7a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001d80:	fa97 f3a7 	rbit	r3, r7
 8001d84:	fab3 f383 	clz	r3, r3
 8001d88:	f003 031f 	and.w	r3, r3, #31
 8001d8c:	fa04 f303 	lsl.w	r3, r4, r3
 8001d90:	4213      	tst	r3, r2
 8001d92:	f47f aee0 	bne.w	8001b56 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d96:	f7ff f945 	bl	8001024 <HAL_GetTick>
 8001d9a:	eba0 0008 	sub.w	r0, r0, r8
 8001d9e:	2802      	cmp	r0, #2
 8001da0:	d9e7      	bls.n	8001d72 <HAL_RCC_OscConfig+0x23e>
 8001da2:	e728      	b.n	8001bf6 <HAL_RCC_OscConfig+0xc2>
 8001da4:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001da8:	fab3 f383 	clz	r3, r3
 8001dac:	440b      	add	r3, r1
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	2702      	movs	r7, #2
 8001db2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001db4:	f7ff f936 	bl	8001024 <HAL_GetTick>
 8001db8:	4680      	mov	r8, r0
 8001dba:	fa97 f3a7 	rbit	r3, r7
 8001dbe:	fa97 f3a7 	rbit	r3, r7
 8001dc2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc6:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001dc8:	fa97 f3a7 	rbit	r3, r7
 8001dcc:	fab3 f383 	clz	r3, r3
 8001dd0:	f003 031f 	and.w	r3, r3, #31
 8001dd4:	fa04 f303 	lsl.w	r3, r4, r3
 8001dd8:	4213      	tst	r3, r2
 8001dda:	f43f aebc 	beq.w	8001b56 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dde:	f7ff f921 	bl	8001024 <HAL_GetTick>
 8001de2:	eba0 0008 	sub.w	r0, r0, r8
 8001de6:	2802      	cmp	r0, #2
 8001de8:	d9e7      	bls.n	8001dba <HAL_RCC_OscConfig+0x286>
 8001dea:	e704      	b.n	8001bf6 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dec:	4c1d      	ldr	r4, [pc, #116]	; (8001e64 <HAL_RCC_OscConfig+0x330>)
 8001dee:	69e3      	ldr	r3, [r4, #28]
 8001df0:	00d9      	lsls	r1, r3, #3
 8001df2:	d434      	bmi.n	8001e5e <HAL_RCC_OscConfig+0x32a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df4:	69e3      	ldr	r3, [r4, #28]
 8001df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	61e3      	str	r3, [r4, #28]
 8001dfc:	69e3      	ldr	r3, [r4, #28]
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	9301      	str	r3, [sp, #4]
 8001e04:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001e06:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e08:	4f18      	ldr	r7, [pc, #96]	; (8001e6c <HAL_RCC_OscConfig+0x338>)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	05da      	lsls	r2, r3, #23
 8001e0e:	d52f      	bpl.n	8001e70 <HAL_RCC_OscConfig+0x33c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e10:	68ab      	ldr	r3, [r5, #8]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d13d      	bne.n	8001e92 <HAL_RCC_OscConfig+0x35e>
 8001e16:	6a23      	ldr	r3, [r4, #32]
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001e1e:	f7ff f901 	bl	8001024 <HAL_GetTick>
 8001e22:	2702      	movs	r7, #2
 8001e24:	4682      	mov	sl, r0
 8001e26:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e28:	f04f 0801 	mov.w	r8, #1
 8001e2c:	fa97 f3a7 	rbit	r3, r7
 8001e30:	fa97 f3a7 	rbit	r3, r7
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d06c      	beq.n	8001f12 <HAL_RCC_OscConfig+0x3de>
 8001e38:	6a22      	ldr	r2, [r4, #32]
 8001e3a:	fa99 f3a9 	rbit	r3, r9
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	fa08 f303 	lsl.w	r3, r8, r3
 8001e4a:	4213      	tst	r3, r2
 8001e4c:	d058      	beq.n	8001f00 <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 8001e4e:	2e00      	cmp	r6, #0
 8001e50:	f43f ae85 	beq.w	8001b5e <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e54:	69e3      	ldr	r3, [r4, #28]
 8001e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	61e3      	str	r3, [r4, #28]
 8001e5c:	e67f      	b.n	8001b5e <HAL_RCC_OscConfig+0x2a>
    FlagStatus       pwrclkchanged = RESET;
 8001e5e:	2600      	movs	r6, #0
 8001e60:	e7d2      	b.n	8001e08 <HAL_RCC_OscConfig+0x2d4>
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000
 8001e68:	10908120 	.word	0x10908120
 8001e6c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e76:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001e78:	f7ff f8d4 	bl	8001024 <HAL_GetTick>
 8001e7c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	05db      	lsls	r3, r3, #23
 8001e82:	d4c5      	bmi.n	8001e10 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e84:	f7ff f8ce 	bl	8001024 <HAL_GetTick>
 8001e88:	eba0 0008 	sub.w	r0, r0, r8
 8001e8c:	2864      	cmp	r0, #100	; 0x64
 8001e8e:	d9f6      	bls.n	8001e7e <HAL_RCC_OscConfig+0x34a>
 8001e90:	e6b1      	b.n	8001bf6 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e92:	bb3b      	cbnz	r3, 8001ee4 <HAL_RCC_OscConfig+0x3b0>
 8001e94:	6a23      	ldr	r3, [r4, #32]
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	6223      	str	r3, [r4, #32]
 8001e9c:	6a23      	ldr	r3, [r4, #32]
 8001e9e:	f023 0304 	bic.w	r3, r3, #4
 8001ea2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001ea4:	f7ff f8be 	bl	8001024 <HAL_GetTick>
 8001ea8:	2702      	movs	r7, #2
 8001eaa:	4682      	mov	sl, r0
 8001eac:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eae:	f04f 0801 	mov.w	r8, #1
 8001eb2:	fa97 f3a7 	rbit	r3, r7
 8001eb6:	fa97 f3a7 	rbit	r3, r7
 8001eba:	b373      	cbz	r3, 8001f1a <HAL_RCC_OscConfig+0x3e6>
 8001ebc:	6a22      	ldr	r2, [r4, #32]
 8001ebe:	fa99 f3a9 	rbit	r3, r9
 8001ec2:	fab3 f383 	clz	r3, r3
 8001ec6:	f003 031f 	and.w	r3, r3, #31
 8001eca:	fa08 f303 	lsl.w	r3, r8, r3
 8001ece:	4213      	tst	r3, r2
 8001ed0:	d0bd      	beq.n	8001e4e <HAL_RCC_OscConfig+0x31a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed2:	f7ff f8a7 	bl	8001024 <HAL_GetTick>
 8001ed6:	f241 3388 	movw	r3, #5000	; 0x1388
 8001eda:	eba0 000a 	sub.w	r0, r0, sl
 8001ede:	4298      	cmp	r0, r3
 8001ee0:	d9e7      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x37e>
 8001ee2:	e688      	b.n	8001bf6 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee4:	2b05      	cmp	r3, #5
 8001ee6:	6a23      	ldr	r3, [r4, #32]
 8001ee8:	d103      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x3be>
 8001eea:	f043 0304 	orr.w	r3, r3, #4
 8001eee:	6223      	str	r3, [r4, #32]
 8001ef0:	e791      	b.n	8001e16 <HAL_RCC_OscConfig+0x2e2>
 8001ef2:	f023 0301 	bic.w	r3, r3, #1
 8001ef6:	6223      	str	r3, [r4, #32]
 8001ef8:	6a23      	ldr	r3, [r4, #32]
 8001efa:	f023 0304 	bic.w	r3, r3, #4
 8001efe:	e78d      	b.n	8001e1c <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f00:	f7ff f890 	bl	8001024 <HAL_GetTick>
 8001f04:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f08:	eba0 000a 	sub.w	r0, r0, sl
 8001f0c:	4298      	cmp	r0, r3
 8001f0e:	d98d      	bls.n	8001e2c <HAL_RCC_OscConfig+0x2f8>
 8001f10:	e671      	b.n	8001bf6 <HAL_RCC_OscConfig+0xc2>
 8001f12:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f18:	e78f      	b.n	8001e3a <HAL_RCC_OscConfig+0x306>
 8001f1a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f20:	e7cd      	b.n	8001ebe <HAL_RCC_OscConfig+0x38a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f22:	4a51      	ldr	r2, [pc, #324]	; (8002068 <HAL_RCC_OscConfig+0x534>)
 8001f24:	6853      	ldr	r3, [r2, #4]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	4614      	mov	r4, r2
 8001f2e:	f000 8082 	beq.w	8002036 <HAL_RCC_OscConfig+0x502>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f32:	2802      	cmp	r0, #2
 8001f34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f38:	d158      	bne.n	8001fec <HAL_RCC_OscConfig+0x4b8>
 8001f3a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001f3e:	fab3 f383 	clz	r3, r3
 8001f42:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f46:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f50:	f7ff f868 	bl	8001024 <HAL_GetTick>
 8001f54:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8001f58:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5a:	2601      	movs	r6, #1
 8001f5c:	fa97 f3a7 	rbit	r3, r7
 8001f60:	6822      	ldr	r2, [r4, #0]
 8001f62:	fa97 f3a7 	rbit	r3, r7
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	fa06 f303 	lsl.w	r3, r6, r3
 8001f72:	4213      	tst	r3, r2
 8001f74:	d133      	bne.n	8001fde <HAL_RCC_OscConfig+0x4aa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f78:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001f7a:	f023 030f 	bic.w	r3, r3, #15
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f82:	6862      	ldr	r2, [r4, #4]
 8001f84:	6a2b      	ldr	r3, [r5, #32]
 8001f86:	69e9      	ldr	r1, [r5, #28]
 8001f88:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	6063      	str	r3, [r4, #4]
 8001f92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f96:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fa2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001fac:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001fae:	f7ff f839 	bl	8001024 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fb2:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8001fb4:	4607      	mov	r7, r0
 8001fb6:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fba:	6822      	ldr	r2, [r4, #0]
 8001fbc:	fa95 f3a5 	rbit	r3, r5
 8001fc0:	fab3 f383 	clz	r3, r3
 8001fc4:	f003 031f 	and.w	r3, r3, #31
 8001fc8:	fa06 f303 	lsl.w	r3, r6, r3
 8001fcc:	4213      	tst	r3, r2
 8001fce:	f47f adca 	bne.w	8001b66 <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd2:	f7ff f827 	bl	8001024 <HAL_GetTick>
 8001fd6:	1bc0      	subs	r0, r0, r7
 8001fd8:	2802      	cmp	r0, #2
 8001fda:	d9ec      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x482>
 8001fdc:	e60b      	b.n	8001bf6 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fde:	f7ff f821 	bl	8001024 <HAL_GetTick>
 8001fe2:	eba0 0008 	sub.w	r0, r0, r8
 8001fe6:	2802      	cmp	r0, #2
 8001fe8:	d9b8      	bls.n	8001f5c <HAL_RCC_OscConfig+0x428>
 8001fea:	e604      	b.n	8001bf6 <HAL_RCC_OscConfig+0xc2>
 8001fec:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001ff0:	fab3 f383 	clz	r3, r3
 8001ff4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ff8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002002:	f7ff f80f 	bl	8001024 <HAL_GetTick>
 8002006:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800200a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200c:	2601      	movs	r6, #1
 800200e:	fa95 f3a5 	rbit	r3, r5
 8002012:	6822      	ldr	r2, [r4, #0]
 8002014:	fa95 f3a5 	rbit	r3, r5
 8002018:	fab3 f383 	clz	r3, r3
 800201c:	f003 031f 	and.w	r3, r3, #31
 8002020:	fa06 f303 	lsl.w	r3, r6, r3
 8002024:	4213      	tst	r3, r2
 8002026:	f43f ad9e 	beq.w	8001b66 <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800202a:	f7fe fffb 	bl	8001024 <HAL_GetTick>
 800202e:	1bc0      	subs	r0, r0, r7
 8002030:	2802      	cmp	r0, #2
 8002032:	d9ec      	bls.n	800200e <HAL_RCC_OscConfig+0x4da>
 8002034:	e5df      	b.n	8001bf6 <HAL_RCC_OscConfig+0xc2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002036:	2801      	cmp	r0, #1
 8002038:	f43f adde 	beq.w	8001bf8 <HAL_RCC_OscConfig+0xc4>
        pll_config = RCC->CFGR;
 800203c:	6853      	ldr	r3, [r2, #4]
        pll_config2 = RCC->CFGR2;
 800203e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002040:	69ea      	ldr	r2, [r5, #28]
 8002042:	f403 31c0 	and.w	r1, r3, #98304	; 0x18000
 8002046:	4291      	cmp	r1, r2
 8002048:	f47f ad78 	bne.w	8001b3c <HAL_RCC_OscConfig+0x8>
 800204c:	6a2a      	ldr	r2, [r5, #32]
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800204e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002052:	4293      	cmp	r3, r2
 8002054:	f47f ad72 	bne.w	8001b3c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002058:	6a6b      	ldr	r3, [r5, #36]	; 0x24
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800205a:	f000 000f 	and.w	r0, r0, #15
    return HAL_ERROR;
 800205e:	1ac0      	subs	r0, r0, r3
 8002060:	bf18      	it	ne
 8002062:	2001      	movne	r0, #1
 8002064:	e5c8      	b.n	8001bf8 <HAL_RCC_OscConfig+0xc4>
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000

0800206c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800206c:	4911      	ldr	r1, [pc, #68]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x48>)
 800206e:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002070:	f003 020c 	and.w	r2, r3, #12
 8002074:	2a08      	cmp	r2, #8
 8002076:	d11a      	bne.n	80020ae <HAL_RCC_GetSysClockFreq+0x42>
 8002078:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800207c:	fa92 f2a2 	rbit	r2, r2
 8002080:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002082:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002086:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002088:	fa90 f0a0 	rbit	r0, r0
 800208c:	fab0 f080 	clz	r0, r0
 8002090:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002094:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002098:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800209a:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800209c:	4a06      	ldr	r2, [pc, #24]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800209e:	4807      	ldr	r0, [pc, #28]	; (80020bc <HAL_RCC_GetSysClockFreq+0x50>)
 80020a0:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020a2:	4807      	ldr	r0, [pc, #28]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x54>)
 80020a4:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020a8:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020aa:	4348      	muls	r0, r1
 80020ac:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80020ae:	4804      	ldr	r0, [pc, #16]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000
 80020b8:	08009b5c 	.word	0x08009b5c
 80020bc:	08009b6c 	.word	0x08009b6c
 80020c0:	007a1200 	.word	0x007a1200

080020c4 <HAL_RCC_ClockConfig>:
{
 80020c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020c8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80020ca:	4604      	mov	r4, r0
 80020cc:	b910      	cbnz	r0, 80020d4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80020ce:	2001      	movs	r0, #1
 80020d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020d4:	4a4d      	ldr	r2, [pc, #308]	; (800220c <HAL_RCC_ClockConfig+0x148>)
 80020d6:	6813      	ldr	r3, [r2, #0]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	428b      	cmp	r3, r1
 80020de:	d32f      	bcc.n	8002140 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e0:	6822      	ldr	r2, [r4, #0]
 80020e2:	0791      	lsls	r1, r2, #30
 80020e4:	d437      	bmi.n	8002156 <HAL_RCC_ClockConfig+0x92>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e6:	07d2      	lsls	r2, r2, #31
 80020e8:	d43d      	bmi.n	8002166 <HAL_RCC_ClockConfig+0xa2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020ea:	4a48      	ldr	r2, [pc, #288]	; (800220c <HAL_RCC_ClockConfig+0x148>)
 80020ec:	6813      	ldr	r3, [r2, #0]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	429d      	cmp	r5, r3
 80020f4:	d376      	bcc.n	80021e4 <HAL_RCC_ClockConfig+0x120>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f6:	6822      	ldr	r2, [r4, #0]
 80020f8:	4d45      	ldr	r5, [pc, #276]	; (8002210 <HAL_RCC_ClockConfig+0x14c>)
 80020fa:	f012 0f04 	tst.w	r2, #4
 80020fe:	d17d      	bne.n	80021fc <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002100:	0713      	lsls	r3, r2, #28
 8002102:	d506      	bpl.n	8002112 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002104:	686b      	ldr	r3, [r5, #4]
 8002106:	6922      	ldr	r2, [r4, #16]
 8002108:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800210c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002110:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002112:	f7ff ffab 	bl	800206c <HAL_RCC_GetSysClockFreq>
 8002116:	686b      	ldr	r3, [r5, #4]
 8002118:	22f0      	movs	r2, #240	; 0xf0
 800211a:	fa92 f2a2 	rbit	r2, r2
 800211e:	fab2 f282 	clz	r2, r2
 8002122:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002126:	40d3      	lsrs	r3, r2
 8002128:	4a3a      	ldr	r2, [pc, #232]	; (8002214 <HAL_RCC_ClockConfig+0x150>)
 800212a:	5cd3      	ldrb	r3, [r2, r3]
 800212c:	40d8      	lsrs	r0, r3
 800212e:	4b3a      	ldr	r3, [pc, #232]	; (8002218 <HAL_RCC_ClockConfig+0x154>)
 8002130:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002132:	4b3a      	ldr	r3, [pc, #232]	; (800221c <HAL_RCC_ClockConfig+0x158>)
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	f7fe ff33 	bl	8000fa0 <HAL_InitTick>
  return HAL_OK;
 800213a:	2000      	movs	r0, #0
 800213c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002140:	6813      	ldr	r3, [r2, #0]
 8002142:	f023 0307 	bic.w	r3, r3, #7
 8002146:	430b      	orrs	r3, r1
 8002148:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800214a:	6813      	ldr	r3, [r2, #0]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	4299      	cmp	r1, r3
 8002152:	d1bc      	bne.n	80020ce <HAL_RCC_ClockConfig+0xa>
 8002154:	e7c4      	b.n	80020e0 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002156:	492e      	ldr	r1, [pc, #184]	; (8002210 <HAL_RCC_ClockConfig+0x14c>)
 8002158:	68a0      	ldr	r0, [r4, #8]
 800215a:	684b      	ldr	r3, [r1, #4]
 800215c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002160:	4303      	orrs	r3, r0
 8002162:	604b      	str	r3, [r1, #4]
 8002164:	e7bf      	b.n	80020e6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002166:	6862      	ldr	r2, [r4, #4]
 8002168:	4e29      	ldr	r6, [pc, #164]	; (8002210 <HAL_RCC_ClockConfig+0x14c>)
 800216a:	2a01      	cmp	r2, #1
 800216c:	d127      	bne.n	80021be <HAL_RCC_ClockConfig+0xfa>
 800216e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002172:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	6831      	ldr	r1, [r6, #0]
 8002178:	fa93 f3a3 	rbit	r3, r3
 800217c:	fab3 f383 	clz	r3, r3
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218a:	d0a0      	beq.n	80020ce <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800218c:	6873      	ldr	r3, [r6, #4]
 800218e:	f023 0303 	bic.w	r3, r3, #3
 8002192:	431a      	orrs	r2, r3
 8002194:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8002196:	f7fe ff45 	bl	8001024 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800219a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800219e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a0:	6873      	ldr	r3, [r6, #4]
 80021a2:	6862      	ldr	r2, [r4, #4]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80021ac:	d09d      	beq.n	80020ea <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ae:	f7fe ff39 	bl	8001024 <HAL_GetTick>
 80021b2:	1bc0      	subs	r0, r0, r7
 80021b4:	4540      	cmp	r0, r8
 80021b6:	d9f3      	bls.n	80021a0 <HAL_RCC_ClockConfig+0xdc>
        return HAL_TIMEOUT;
 80021b8:	2003      	movs	r0, #3
}
 80021ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021be:	2a02      	cmp	r2, #2
 80021c0:	bf0c      	ite	eq
 80021c2:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80021c6:	2302      	movne	r3, #2
 80021c8:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021cc:	6830      	ldr	r0, [r6, #0]
 80021ce:	fa93 f3a3 	rbit	r3, r3
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	f003 031f 	and.w	r3, r3, #31
 80021da:	2101      	movs	r1, #1
 80021dc:	fa01 f303 	lsl.w	r3, r1, r3
 80021e0:	4203      	tst	r3, r0
 80021e2:	e7d2      	b.n	800218a <HAL_RCC_ClockConfig+0xc6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e4:	6813      	ldr	r3, [r2, #0]
 80021e6:	f023 0307 	bic.w	r3, r3, #7
 80021ea:	432b      	orrs	r3, r5
 80021ec:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ee:	6813      	ldr	r3, [r2, #0]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	429d      	cmp	r5, r3
 80021f6:	f47f af6a 	bne.w	80020ce <HAL_RCC_ClockConfig+0xa>
 80021fa:	e77c      	b.n	80020f6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021fc:	686b      	ldr	r3, [r5, #4]
 80021fe:	68e1      	ldr	r1, [r4, #12]
 8002200:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002204:	430b      	orrs	r3, r1
 8002206:	606b      	str	r3, [r5, #4]
 8002208:	e77a      	b.n	8002100 <HAL_RCC_ClockConfig+0x3c>
 800220a:	bf00      	nop
 800220c:	40022000 	.word	0x40022000
 8002210:	40021000 	.word	0x40021000
 8002214:	0800a674 	.word	0x0800a674
 8002218:	20000110 	.word	0x20000110
 800221c:	20000004 	.word	0x20000004

08002220 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002220:	4b08      	ldr	r3, [pc, #32]	; (8002244 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002222:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	fa92 f2a2 	rbit	r2, r2
 800222c:	fab2 f282 	clz	r2, r2
 8002230:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002234:	40d3      	lsrs	r3, r2
 8002236:	4a04      	ldr	r2, [pc, #16]	; (8002248 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002238:	5cd3      	ldrb	r3, [r2, r3]
 800223a:	4a04      	ldr	r2, [pc, #16]	; (800224c <HAL_RCC_GetPCLK1Freq+0x2c>)
 800223c:	6810      	ldr	r0, [r2, #0]
}    
 800223e:	40d8      	lsrs	r0, r3
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000
 8002248:	0800a684 	.word	0x0800a684
 800224c:	20000110 	.word	0x20000110

08002250 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002252:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	fa92 f2a2 	rbit	r2, r2
 800225c:	fab2 f282 	clz	r2, r2
 8002260:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002264:	40d3      	lsrs	r3, r2
 8002266:	4a04      	ldr	r2, [pc, #16]	; (8002278 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002268:	5cd3      	ldrb	r3, [r2, r3]
 800226a:	4a04      	ldr	r2, [pc, #16]	; (800227c <HAL_RCC_GetPCLK2Freq+0x2c>)
 800226c:	6810      	ldr	r0, [r2, #0]
} 
 800226e:	40d8      	lsrs	r0, r3
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000
 8002278:	0800a684 	.word	0x0800a684
 800227c:	20000110 	.word	0x20000110

08002280 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002280:	6803      	ldr	r3, [r0, #0]
{
 8002282:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002286:	03df      	lsls	r7, r3, #15
{
 8002288:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800228a:	d523      	bpl.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228c:	4d9b      	ldr	r5, [pc, #620]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800228e:	69eb      	ldr	r3, [r5, #28]
 8002290:	00de      	lsls	r6, r3, #3
 8002292:	f100 80d7 	bmi.w	8002444 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002296:	69eb      	ldr	r3, [r5, #28]
 8002298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229c:	61eb      	str	r3, [r5, #28]
 800229e:	69eb      	ldr	r3, [r5, #28]
 80022a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a4:	9301      	str	r3, [sp, #4]
 80022a6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80022a8:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022aa:	4f95      	ldr	r7, [pc, #596]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	05d8      	lsls	r0, r3, #23
 80022b0:	f140 80ca 	bpl.w	8002448 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022b4:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022b6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80022ba:	f040 80da 	bne.w	8002472 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80022be:	6a2b      	ldr	r3, [r5, #32]
 80022c0:	6862      	ldr	r2, [r4, #4]
 80022c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c6:	4313      	orrs	r3, r2
 80022c8:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022ca:	b11e      	cbz	r6, 80022d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022cc:	69eb      	ldr	r3, [r5, #28]
 80022ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d2:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022d4:	6820      	ldr	r0, [r4, #0]
 80022d6:	07c3      	lsls	r3, r0, #31
 80022d8:	d506      	bpl.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022da:	4a88      	ldr	r2, [pc, #544]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80022dc:	68a1      	ldr	r1, [r4, #8]
 80022de:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022e0:	f023 0303 	bic.w	r3, r3, #3
 80022e4:	430b      	orrs	r3, r1
 80022e6:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022e8:	0787      	lsls	r7, r0, #30
 80022ea:	d506      	bpl.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022ec:	4a83      	ldr	r2, [pc, #524]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80022ee:	68e1      	ldr	r1, [r4, #12]
 80022f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022f2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80022f6:	430b      	orrs	r3, r1
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022fa:	0746      	lsls	r6, r0, #29
 80022fc:	d506      	bpl.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022fe:	4a7f      	ldr	r2, [pc, #508]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002300:	6921      	ldr	r1, [r4, #16]
 8002302:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002304:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002308:	430b      	orrs	r3, r1
 800230a:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800230c:	0685      	lsls	r5, r0, #26
 800230e:	d506      	bpl.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002310:	4a7a      	ldr	r2, [pc, #488]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002312:	69e1      	ldr	r1, [r4, #28]
 8002314:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002316:	f023 0310 	bic.w	r3, r3, #16
 800231a:	430b      	orrs	r3, r1
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800231e:	0381      	lsls	r1, r0, #14
 8002320:	d506      	bpl.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002322:	4a76      	ldr	r2, [pc, #472]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002324:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002326:	6853      	ldr	r3, [r2, #4]
 8002328:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800232c:	430b      	orrs	r3, r1
 800232e:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002330:	0642      	lsls	r2, r0, #25
 8002332:	d506      	bpl.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002334:	4a71      	ldr	r2, [pc, #452]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002336:	6a21      	ldr	r1, [r4, #32]
 8002338:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800233a:	f023 0320 	bic.w	r3, r3, #32
 800233e:	430b      	orrs	r3, r1
 8002340:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002342:	0343      	lsls	r3, r0, #13
 8002344:	d506      	bpl.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002346:	4a6d      	ldr	r2, [pc, #436]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002348:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800234a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800234c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002350:	430b      	orrs	r3, r1
 8002352:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002354:	0707      	lsls	r7, r0, #28
 8002356:	d506      	bpl.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002358:	4a68      	ldr	r2, [pc, #416]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800235a:	6961      	ldr	r1, [r4, #20]
 800235c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800235e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002362:	430b      	orrs	r3, r1
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002366:	06c6      	lsls	r6, r0, #27
 8002368:	d506      	bpl.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800236a:	4a64      	ldr	r2, [pc, #400]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800236c:	69a1      	ldr	r1, [r4, #24]
 800236e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002370:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002374:	430b      	orrs	r3, r1
 8002376:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002378:	0585      	lsls	r5, r0, #22
 800237a:	d506      	bpl.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800237c:	4a5f      	ldr	r2, [pc, #380]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800237e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002380:	6853      	ldr	r3, [r2, #4]
 8002382:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002386:	430b      	orrs	r3, r1
 8002388:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800238a:	0601      	lsls	r1, r0, #24
 800238c:	d506      	bpl.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800238e:	4a5b      	ldr	r2, [pc, #364]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002390:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002392:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002394:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002398:	430b      	orrs	r3, r1
 800239a:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800239c:	05c2      	lsls	r2, r0, #23
 800239e:	d506      	bpl.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80023a0:	4a56      	ldr	r2, [pc, #344]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80023a2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80023a4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80023a6:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 80023aa:	430b      	orrs	r3, r1
 80023ac:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80023ae:	04c3      	lsls	r3, r0, #19
 80023b0:	d506      	bpl.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80023b2:	4a52      	ldr	r2, [pc, #328]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80023b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80023b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023bc:	430b      	orrs	r3, r1
 80023be:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80023c0:	0487      	lsls	r7, r0, #18
 80023c2:	d506      	bpl.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80023c4:	4a4d      	ldr	r2, [pc, #308]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80023c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80023c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023ce:	430b      	orrs	r3, r1
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80023d2:	02c6      	lsls	r6, r0, #11
 80023d4:	d506      	bpl.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80023d6:	4a49      	ldr	r2, [pc, #292]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80023d8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80023da:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023e0:	430b      	orrs	r3, r1
 80023e2:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80023e4:	0285      	lsls	r5, r0, #10
 80023e6:	d506      	bpl.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80023e8:	4a44      	ldr	r2, [pc, #272]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80023ea:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80023ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023ee:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80023f2:	430b      	orrs	r3, r1
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80023f6:	0241      	lsls	r1, r0, #9
 80023f8:	d506      	bpl.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80023fa:	4a40      	ldr	r2, [pc, #256]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80023fc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80023fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002400:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002404:	430b      	orrs	r3, r1
 8002406:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002408:	0202      	lsls	r2, r0, #8
 800240a:	d506      	bpl.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800240c:	4a3b      	ldr	r2, [pc, #236]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800240e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002410:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002412:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002416:	430b      	orrs	r3, r1
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800241a:	01c3      	lsls	r3, r0, #7
 800241c:	d506      	bpl.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800241e:	4a37      	ldr	r2, [pc, #220]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002420:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002422:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002424:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002428:	430b      	orrs	r3, r1
 800242a:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800242c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8002430:	d01c      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002432:	4a32      	ldr	r2, [pc, #200]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002434:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002436:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002438:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800243c:	430b      	orrs	r3, r1
 800243e:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002440:	2000      	movs	r0, #0
 8002442:	e013      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 8002444:	2600      	movs	r6, #0
 8002446:	e730      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002450:	f7fe fde8 	bl	8001024 <HAL_GetTick>
 8002454:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	05d9      	lsls	r1, r3, #23
 800245a:	f53f af2b 	bmi.w	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245e:	f7fe fde1 	bl	8001024 <HAL_GetTick>
 8002462:	eba0 0008 	sub.w	r0, r0, r8
 8002466:	2864      	cmp	r0, #100	; 0x64
 8002468:	d9f5      	bls.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 800246a:	2003      	movs	r0, #3
}
 800246c:	b002      	add	sp, #8
 800246e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002472:	6862      	ldr	r2, [r4, #4]
 8002474:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002478:	4293      	cmp	r3, r2
 800247a:	f43f af20 	beq.w	80022be <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800247e:	6a29      	ldr	r1, [r5, #32]
 8002480:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002484:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8002488:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 800248c:	f8df e074 	ldr.w	lr, [pc, #116]	; 8002504 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8002490:	fab2 f282 	clz	r2, r2
 8002494:	4472      	add	r2, lr
 8002496:	0092      	lsls	r2, r2, #2
 8002498:	2701      	movs	r7, #1
 800249a:	6017      	str	r7, [r2, #0]
 800249c:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024a0:	fab3 f383 	clz	r3, r3
 80024a4:	4473      	add	r3, lr
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024ac:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 80024ae:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024b0:	f57f af05 	bpl.w	80022be <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 80024b4:	f7fe fdb6 	bl	8001024 <HAL_GetTick>
 80024b8:	f04f 0802 	mov.w	r8, #2
 80024bc:	4682      	mov	sl, r0
 80024be:	46c1      	mov	r9, r8
 80024c0:	fa98 f3a8 	rbit	r3, r8
 80024c4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c8:	b1a3      	cbz	r3, 80024f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80024ca:	6a2a      	ldr	r2, [r5, #32]
 80024cc:	fa99 f3a9 	rbit	r3, r9
 80024d0:	fab3 f383 	clz	r3, r3
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	fa07 f303 	lsl.w	r3, r7, r3
 80024dc:	4213      	tst	r3, r2
 80024de:	f47f aeee 	bne.w	80022be <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e2:	f7fe fd9f 	bl	8001024 <HAL_GetTick>
 80024e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80024ea:	eba0 000a 	sub.w	r0, r0, sl
 80024ee:	4298      	cmp	r0, r3
 80024f0:	d9e6      	bls.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80024f2:	e7ba      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80024f4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80024fa:	e7e7      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x24c>
 80024fc:	40021000 	.word	0x40021000
 8002500:	40007000 	.word	0x40007000
 8002504:	10908100 	.word	0x10908100

08002508 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002508:	6803      	ldr	r3, [r0, #0]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	f042 0201 	orr.w	r2, r2, #1
 8002510:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002512:	6899      	ldr	r1, [r3, #8]
 8002514:	4a06      	ldr	r2, [pc, #24]	; (8002530 <HAL_TIM_Base_Start_IT+0x28>)
 8002516:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002518:	2a06      	cmp	r2, #6
 800251a:	d006      	beq.n	800252a <HAL_TIM_Base_Start_IT+0x22>
 800251c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 8002520:	bf1e      	ittt	ne
 8002522:	681a      	ldrne	r2, [r3, #0]
 8002524:	f042 0201 	orrne.w	r2, r2, #1
 8002528:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800252a:	2000      	movs	r0, #0
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	00010007 	.word	0x00010007

08002534 <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002534:	6803      	ldr	r3, [r0, #0]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	f022 0201 	bic.w	r2, r2, #1
 800253c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800253e:	6a19      	ldr	r1, [r3, #32]
 8002540:	f241 1211 	movw	r2, #4369	; 0x1111
 8002544:	4211      	tst	r1, r2
 8002546:	d108      	bne.n	800255a <HAL_TIM_Base_Stop_IT+0x26>
 8002548:	6a19      	ldr	r1, [r3, #32]
 800254a:	f240 4244 	movw	r2, #1092	; 0x444
 800254e:	4211      	tst	r1, r2
 8002550:	bf02      	ittt	eq
 8002552:	681a      	ldreq	r2, [r3, #0]
 8002554:	f022 0201 	biceq.w	r2, r2, #1
 8002558:	601a      	streq	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 800255a:	2000      	movs	r0, #0
 800255c:	4770      	bx	lr

0800255e <HAL_TIM_OC_DelayElapsedCallback>:
 800255e:	4770      	bx	lr

08002560 <HAL_TIM_IC_CaptureCallback>:
 8002560:	4770      	bx	lr

08002562 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002562:	4770      	bx	lr

08002564 <HAL_TIM_TriggerCallback>:
 8002564:	4770      	bx	lr

08002566 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002566:	6803      	ldr	r3, [r0, #0]
 8002568:	691a      	ldr	r2, [r3, #16]
 800256a:	0791      	lsls	r1, r2, #30
{
 800256c:	b510      	push	{r4, lr}
 800256e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002570:	d50f      	bpl.n	8002592 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	0792      	lsls	r2, r2, #30
 8002576:	d50c      	bpl.n	8002592 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002578:	f06f 0202 	mvn.w	r2, #2
 800257c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800257e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002580:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002582:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002584:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002586:	f000 8085 	beq.w	8002694 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800258a:	f7ff ffe9 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258e:	2300      	movs	r3, #0
 8002590:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	691a      	ldr	r2, [r3, #16]
 8002596:	0752      	lsls	r2, r2, #29
 8002598:	d510      	bpl.n	80025bc <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	0750      	lsls	r0, r2, #29
 800259e:	d50d      	bpl.n	80025bc <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025a0:	f06f 0204 	mvn.w	r2, #4
 80025a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025a6:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025a8:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025aa:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ae:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025b0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025b2:	d075      	beq.n	80026a0 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80025b4:	f7ff ffd4 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b8:	2300      	movs	r3, #0
 80025ba:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	0711      	lsls	r1, r2, #28
 80025c2:	d50f      	bpl.n	80025e4 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	0712      	lsls	r2, r2, #28
 80025c8:	d50c      	bpl.n	80025e4 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025ca:	f06f 0208 	mvn.w	r2, #8
 80025ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025d0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025d2:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025d4:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025d6:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025d8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025da:	d067      	beq.n	80026ac <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80025dc:	f7ff ffc0 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e0:	2300      	movs	r3, #0
 80025e2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025e4:	6823      	ldr	r3, [r4, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	06d0      	lsls	r0, r2, #27
 80025ea:	d510      	bpl.n	800260e <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	06d1      	lsls	r1, r2, #27
 80025f0:	d50d      	bpl.n	800260e <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025f2:	f06f 0210 	mvn.w	r2, #16
 80025f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025f8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025fa:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025fc:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002600:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002602:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002604:	d058      	beq.n	80026b8 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8002606:	f7ff ffab 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260a:	2300      	movs	r3, #0
 800260c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	691a      	ldr	r2, [r3, #16]
 8002612:	07d2      	lsls	r2, r2, #31
 8002614:	d508      	bpl.n	8002628 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	07d0      	lsls	r0, r2, #31
 800261a:	d505      	bpl.n	8002628 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800261c:	f06f 0201 	mvn.w	r2, #1
 8002620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002622:	4620      	mov	r0, r4
 8002624:	f002 fb0c 	bl	8004c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002628:	6823      	ldr	r3, [r4, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	0611      	lsls	r1, r2, #24
 800262e:	d508      	bpl.n	8002642 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	0612      	lsls	r2, r2, #24
 8002634:	d505      	bpl.n	8002642 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002636:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800263a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800263c:	4620      	mov	r0, r4
 800263e:	f000 f914 	bl	800286a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002642:	6823      	ldr	r3, [r4, #0]
 8002644:	691a      	ldr	r2, [r3, #16]
 8002646:	05d0      	lsls	r0, r2, #23
 8002648:	d508      	bpl.n	800265c <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	0611      	lsls	r1, r2, #24
 800264e:	d505      	bpl.n	800265c <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002650:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002656:	4620      	mov	r0, r4
 8002658:	f000 f908 	bl	800286c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800265c:	6823      	ldr	r3, [r4, #0]
 800265e:	691a      	ldr	r2, [r3, #16]
 8002660:	0652      	lsls	r2, r2, #25
 8002662:	d508      	bpl.n	8002676 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	0650      	lsls	r0, r2, #25
 8002668:	d505      	bpl.n	8002676 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800266a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800266e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002670:	4620      	mov	r0, r4
 8002672:	f7ff ff77 	bl	8002564 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	0691      	lsls	r1, r2, #26
 800267c:	d522      	bpl.n	80026c4 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	0692      	lsls	r2, r2, #26
 8002682:	d51f      	bpl.n	80026c4 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002684:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002688:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800268a:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800268c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002690:	f000 b8ea 	b.w	8002868 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002694:	f7ff ff63 	bl	800255e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002698:	4620      	mov	r0, r4
 800269a:	f7ff ff62 	bl	8002562 <HAL_TIM_PWM_PulseFinishedCallback>
 800269e:	e776      	b.n	800258e <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a0:	f7ff ff5d 	bl	800255e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a4:	4620      	mov	r0, r4
 80026a6:	f7ff ff5c 	bl	8002562 <HAL_TIM_PWM_PulseFinishedCallback>
 80026aa:	e785      	b.n	80025b8 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ac:	f7ff ff57 	bl	800255e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b0:	4620      	mov	r0, r4
 80026b2:	f7ff ff56 	bl	8002562 <HAL_TIM_PWM_PulseFinishedCallback>
 80026b6:	e793      	b.n	80025e0 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b8:	f7ff ff51 	bl	800255e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026bc:	4620      	mov	r0, r4
 80026be:	f7ff ff50 	bl	8002562 <HAL_TIM_PWM_PulseFinishedCallback>
 80026c2:	e7a2      	b.n	800260a <HAL_TIM_IRQHandler+0xa4>
 80026c4:	bd10      	pop	{r4, pc}
	...

080026c8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026c8:	4a32      	ldr	r2, [pc, #200]	; (8002794 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 80026ca:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026cc:	4290      	cmp	r0, r2
 80026ce:	d012      	beq.n	80026f6 <TIM_Base_SetConfig+0x2e>
 80026d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80026d4:	d00f      	beq.n	80026f6 <TIM_Base_SetConfig+0x2e>
 80026d6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80026da:	4290      	cmp	r0, r2
 80026dc:	d00b      	beq.n	80026f6 <TIM_Base_SetConfig+0x2e>
 80026de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026e2:	4290      	cmp	r0, r2
 80026e4:	d007      	beq.n	80026f6 <TIM_Base_SetConfig+0x2e>
 80026e6:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80026ea:	4290      	cmp	r0, r2
 80026ec:	d003      	beq.n	80026f6 <TIM_Base_SetConfig+0x2e>
 80026ee:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80026f2:	4290      	cmp	r0, r2
 80026f4:	d115      	bne.n	8002722 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80026f6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80026fc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026fe:	4a25      	ldr	r2, [pc, #148]	; (8002794 <TIM_Base_SetConfig+0xcc>)
 8002700:	4290      	cmp	r0, r2
 8002702:	d01d      	beq.n	8002740 <TIM_Base_SetConfig+0x78>
 8002704:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002708:	d01a      	beq.n	8002740 <TIM_Base_SetConfig+0x78>
 800270a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800270e:	4290      	cmp	r0, r2
 8002710:	d016      	beq.n	8002740 <TIM_Base_SetConfig+0x78>
 8002712:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002716:	4290      	cmp	r0, r2
 8002718:	d012      	beq.n	8002740 <TIM_Base_SetConfig+0x78>
 800271a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800271e:	4290      	cmp	r0, r2
 8002720:	d00e      	beq.n	8002740 <TIM_Base_SetConfig+0x78>
 8002722:	4a1d      	ldr	r2, [pc, #116]	; (8002798 <TIM_Base_SetConfig+0xd0>)
 8002724:	4290      	cmp	r0, r2
 8002726:	d00b      	beq.n	8002740 <TIM_Base_SetConfig+0x78>
 8002728:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800272c:	4290      	cmp	r0, r2
 800272e:	d007      	beq.n	8002740 <TIM_Base_SetConfig+0x78>
 8002730:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002734:	4290      	cmp	r0, r2
 8002736:	d003      	beq.n	8002740 <TIM_Base_SetConfig+0x78>
 8002738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800273c:	4290      	cmp	r0, r2
 800273e:	d103      	bne.n	8002748 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002740:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002746:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002748:	694a      	ldr	r2, [r1, #20]
 800274a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800274e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002750:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002752:	688b      	ldr	r3, [r1, #8]
 8002754:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002756:	680b      	ldr	r3, [r1, #0]
 8002758:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800275a:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <TIM_Base_SetConfig+0xcc>)
 800275c:	4298      	cmp	r0, r3
 800275e:	d013      	beq.n	8002788 <TIM_Base_SetConfig+0xc0>
 8002760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002764:	4298      	cmp	r0, r3
 8002766:	d00f      	beq.n	8002788 <TIM_Base_SetConfig+0xc0>
 8002768:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800276c:	4298      	cmp	r0, r3
 800276e:	d00b      	beq.n	8002788 <TIM_Base_SetConfig+0xc0>
 8002770:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002774:	4298      	cmp	r0, r3
 8002776:	d007      	beq.n	8002788 <TIM_Base_SetConfig+0xc0>
 8002778:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800277c:	4298      	cmp	r0, r3
 800277e:	d003      	beq.n	8002788 <TIM_Base_SetConfig+0xc0>
 8002780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002784:	4298      	cmp	r0, r3
 8002786:	d101      	bne.n	800278c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002788:	690b      	ldr	r3, [r1, #16]
 800278a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800278c:	2301      	movs	r3, #1
 800278e:	6143      	str	r3, [r0, #20]
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40012c00 	.word	0x40012c00
 8002798:	40014000 	.word	0x40014000

0800279c <HAL_TIM_Base_Init>:
{
 800279c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800279e:	4604      	mov	r4, r0
 80027a0:	b1a0      	cbz	r0, 80027cc <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80027a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80027a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027aa:	b91b      	cbnz	r3, 80027b4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80027ac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80027b0:	f002 fd6a 	bl	8005288 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80027b4:	2302      	movs	r3, #2
 80027b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ba:	6820      	ldr	r0, [r4, #0]
 80027bc:	1d21      	adds	r1, r4, #4
 80027be:	f7ff ff83 	bl	80026c8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80027c2:	2301      	movs	r3, #1
 80027c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80027c8:	2000      	movs	r0, #0
 80027ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80027cc:	2001      	movs	r0, #1
}
 80027ce:	bd10      	pop	{r4, pc}

080027d0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80027d4:	2b01      	cmp	r3, #1
{
 80027d6:	b530      	push	{r4, r5, lr}
 80027d8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80027dc:	d040      	beq.n	8002860 <HAL_TIMEx_MasterConfigSynchronization+0x90>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027de:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80027e2:	4d20      	ldr	r5, [pc, #128]	; (8002864 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
  tmpcr2 = htim->Instance->CR2;
 80027e4:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80027e6:	2201      	movs	r2, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80027e8:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 80027ea:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 = htim->Instance->CR2;
 80027ee:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80027f0:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80027f2:	d007      	beq.n	8002804 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80027f4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80027f8:	42ab      	cmp	r3, r5
 80027fa:	d003      	beq.n	8002804 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80027fc:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8002800:	42ab      	cmp	r3, r5
 8002802:	d103      	bne.n	800280c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002804:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002806:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800280a:	432a      	orrs	r2, r5
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800280c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800280e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002812:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002814:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002816:	4a13      	ldr	r2, [pc, #76]	; (8002864 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d016      	beq.n	800284a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800281c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002820:	d013      	beq.n	800284a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002822:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002826:	4293      	cmp	r3, r2
 8002828:	d00f      	beq.n	800284a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800282a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800282e:	4293      	cmp	r3, r2
 8002830:	d00b      	beq.n	800284a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002832:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8002836:	4293      	cmp	r3, r2
 8002838:	d007      	beq.n	800284a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800283a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800283e:	4293      	cmp	r3, r2
 8002840:	d003      	beq.n	800284a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002842:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002846:	4293      	cmp	r3, r2
 8002848:	d104      	bne.n	8002854 <HAL_TIMEx_MasterConfigSynchronization+0x84>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800284a:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800284c:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002850:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002852:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002854:	2301      	movs	r3, #1
 8002856:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800285a:	2300      	movs	r3, #0
 800285c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002860:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002862:	bd30      	pop	{r4, r5, pc}
 8002864:	40012c00 	.word	0x40012c00

08002868 <HAL_TIMEx_CommutCallback>:
 8002868:	4770      	bx	lr

0800286a <HAL_TIMEx_BreakCallback>:
 800286a:	4770      	bx	lr

0800286c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800286c:	4770      	bx	lr

0800286e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800286e:	6803      	ldr	r3, [r0, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002876:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	f022 0201 	bic.w	r2, r2, #1
 800287e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002880:	2320      	movs	r3, #32
 8002882:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002884:	2300      	movs	r3, #0
 8002886:	6603      	str	r3, [r0, #96]	; 0x60
 8002888:	4770      	bx	lr

0800288a <HAL_UART_TxCpltCallback>:
 800288a:	4770      	bx	lr

0800288c <HAL_UART_ErrorCallback>:
 800288c:	4770      	bx	lr
	...

08002890 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002890:	6803      	ldr	r3, [r0, #0]
 8002892:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002894:	6819      	ldr	r1, [r3, #0]
{
 8002896:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 8002898:	f640 060f 	movw	r6, #2063	; 0x80f
 800289c:	4232      	tst	r2, r6
{
 800289e:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028a0:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 80028a2:	d10a      	bne.n	80028ba <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80028a4:	0696      	lsls	r6, r2, #26
 80028a6:	d570      	bpl.n	800298a <HAL_UART_IRQHandler+0xfa>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80028a8:	068e      	lsls	r6, r1, #26
 80028aa:	d56e      	bpl.n	800298a <HAL_UART_IRQHandler+0xfa>
      if (huart->RxISR != NULL)
 80028ac:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 808e 	beq.w	80029d0 <HAL_UART_IRQHandler+0x140>
}
 80028b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 80028b8:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != 0U)
 80028ba:	f015 0001 	ands.w	r0, r5, #1
 80028be:	d102      	bne.n	80028c6 <HAL_UART_IRQHandler+0x36>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80028c0:	f411 7f90 	tst.w	r1, #288	; 0x120
 80028c4:	d061      	beq.n	800298a <HAL_UART_IRQHandler+0xfa>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80028c6:	07d6      	lsls	r6, r2, #31
 80028c8:	d507      	bpl.n	80028da <HAL_UART_IRQHandler+0x4a>
 80028ca:	05cd      	lsls	r5, r1, #23
 80028cc:	d505      	bpl.n	80028da <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80028ce:	2501      	movs	r5, #1
 80028d0:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028d2:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 80028d4:	f045 0501 	orr.w	r5, r5, #1
 80028d8:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028da:	0796      	lsls	r6, r2, #30
 80028dc:	d506      	bpl.n	80028ec <HAL_UART_IRQHandler+0x5c>
 80028de:	b128      	cbz	r0, 80028ec <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80028e0:	2502      	movs	r5, #2
 80028e2:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028e4:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 80028e6:	f045 0504 	orr.w	r5, r5, #4
 80028ea:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028ec:	0755      	lsls	r5, r2, #29
 80028ee:	d506      	bpl.n	80028fe <HAL_UART_IRQHandler+0x6e>
 80028f0:	b128      	cbz	r0, 80028fe <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80028f2:	2504      	movs	r5, #4
 80028f4:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028f6:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 80028f8:	f045 0502 	orr.w	r5, r5, #2
 80028fc:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80028fe:	0716      	lsls	r6, r2, #28
 8002900:	d508      	bpl.n	8002914 <HAL_UART_IRQHandler+0x84>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002902:	068d      	lsls	r5, r1, #26
 8002904:	d400      	bmi.n	8002908 <HAL_UART_IRQHandler+0x78>
 8002906:	b128      	cbz	r0, 8002914 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002908:	2008      	movs	r0, #8
 800290a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800290c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800290e:	f040 0008 	orr.w	r0, r0, #8
 8002912:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002914:	0510      	lsls	r0, r2, #20
 8002916:	d508      	bpl.n	800292a <HAL_UART_IRQHandler+0x9a>
 8002918:	014e      	lsls	r6, r1, #5
 800291a:	d506      	bpl.n	800292a <HAL_UART_IRQHandler+0x9a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800291c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002920:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002922:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002924:	f043 0320 	orr.w	r3, r3, #32
 8002928:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800292a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800292c:	2b00      	cmp	r3, #0
 800292e:	d04f      	beq.n	80029d0 <HAL_UART_IRQHandler+0x140>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002930:	0695      	lsls	r5, r2, #26
 8002932:	d505      	bpl.n	8002940 <HAL_UART_IRQHandler+0xb0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002934:	0688      	lsls	r0, r1, #26
 8002936:	d503      	bpl.n	8002940 <HAL_UART_IRQHandler+0xb0>
        if (huart->RxISR != NULL)
 8002938:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800293a:	b10b      	cbz	r3, 8002940 <HAL_UART_IRQHandler+0xb0>
          huart->RxISR(huart);
 800293c:	4620      	mov	r0, r4
 800293e:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002940:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8002942:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002944:	6892      	ldr	r2, [r2, #8]
 8002946:	0651      	lsls	r1, r2, #25
        UART_EndRxTransfer(huart);
 8002948:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800294a:	d402      	bmi.n	8002952 <HAL_UART_IRQHandler+0xc2>
 800294c:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 8002950:	d017      	beq.n	8002982 <HAL_UART_IRQHandler+0xf2>
        UART_EndRxTransfer(huart);
 8002952:	f7ff ff8c 	bl	800286e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002956:	6823      	ldr	r3, [r4, #0]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	0652      	lsls	r2, r2, #25
 800295c:	d50d      	bpl.n	800297a <HAL_UART_IRQHandler+0xea>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800295e:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002960:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002966:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002968:	b138      	cbz	r0, 800297a <HAL_UART_IRQHandler+0xea>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800296a:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <HAL_UART_IRQHandler+0x144>)
 800296c:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800296e:	f7fe fc7b 	bl	8001268 <HAL_DMA_Abort_IT>
 8002972:	b368      	cbz	r0, 80029d0 <HAL_UART_IRQHandler+0x140>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002974:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002976:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002978:	e79c      	b.n	80028b4 <HAL_UART_IRQHandler+0x24>
            HAL_UART_ErrorCallback(huart);
 800297a:	4620      	mov	r0, r4
 800297c:	f7ff ff86 	bl	800288c <HAL_UART_ErrorCallback>
 8002980:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002982:	f7ff ff83 	bl	800288c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002986:	67e5      	str	r5, [r4, #124]	; 0x7c
 8002988:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800298a:	02d6      	lsls	r6, r2, #11
 800298c:	d509      	bpl.n	80029a2 <HAL_UART_IRQHandler+0x112>
 800298e:	0268      	lsls	r0, r5, #9
 8002990:	d507      	bpl.n	80029a2 <HAL_UART_IRQHandler+0x112>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002992:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8002996:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002998:	621a      	str	r2, [r3, #32]
}
 800299a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800299e:	f000 ba81 	b.w	8002ea4 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80029a2:	0616      	lsls	r6, r2, #24
 80029a4:	d505      	bpl.n	80029b2 <HAL_UART_IRQHandler+0x122>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80029a6:	060d      	lsls	r5, r1, #24
 80029a8:	d503      	bpl.n	80029b2 <HAL_UART_IRQHandler+0x122>
    if (huart->TxISR != NULL)
 80029aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029ac:	b183      	cbz	r3, 80029d0 <HAL_UART_IRQHandler+0x140>
      huart->TxISR(huart);
 80029ae:	4620      	mov	r0, r4
 80029b0:	e780      	b.n	80028b4 <HAL_UART_IRQHandler+0x24>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80029b2:	0650      	lsls	r0, r2, #25
 80029b4:	d50c      	bpl.n	80029d0 <HAL_UART_IRQHandler+0x140>
 80029b6:	064a      	lsls	r2, r1, #25
 80029b8:	d50a      	bpl.n	80029d0 <HAL_UART_IRQHandler+0x140>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029c2:	2320      	movs	r3, #32
 80029c4:	6763      	str	r3, [r4, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	6663      	str	r3, [r4, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029ca:	4620      	mov	r0, r4
 80029cc:	f7ff ff5d 	bl	800288a <HAL_UART_TxCpltCallback>
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	bf00      	nop
 80029d4:	080029d9 	.word	0x080029d9

080029d8 <UART_DMAAbortOnError>:
{
 80029d8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80029da:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80029e2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 80029e6:	f7ff ff51 	bl	800288c <HAL_UART_ErrorCallback>
 80029ea:	bd08      	pop	{r3, pc}

080029ec <UART_SetConfig>:
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029ec:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029ee:	6881      	ldr	r1, [r0, #8]
{
 80029f0:	b538      	push	{r3, r4, r5, lr}
 80029f2:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029f4:	69c3      	ldr	r3, [r0, #28]
 80029f6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029f8:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029fa:	4301      	orrs	r1, r0
 80029fc:	6960      	ldr	r0, [r4, #20]
 80029fe:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a00:	487a      	ldr	r0, [pc, #488]	; (8002bec <UART_SetConfig+0x200>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a02:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a04:	4028      	ands	r0, r5
 8002a06:	4301      	orrs	r1, r0
 8002a08:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a0a:	6851      	ldr	r1, [r2, #4]
 8002a0c:	68e0      	ldr	r0, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8002a0e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a10:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002a14:	4301      	orrs	r1, r0
 8002a16:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a18:	6890      	ldr	r0, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a1a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a1c:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8002a20:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a22:	4301      	orrs	r1, r0
 8002a24:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a26:	4972      	ldr	r1, [pc, #456]	; (8002bf0 <UART_SetConfig+0x204>)
 8002a28:	428a      	cmp	r2, r1
 8002a2a:	d111      	bne.n	8002a50 <UART_SetConfig+0x64>
 8002a2c:	4a71      	ldr	r2, [pc, #452]	; (8002bf4 <UART_SetConfig+0x208>)
 8002a2e:	4972      	ldr	r1, [pc, #456]	; (8002bf8 <UART_SetConfig+0x20c>)
 8002a30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a32:	f002 0203 	and.w	r2, r2, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a3a:	5c8a      	ldrb	r2, [r1, r2]
 8002a3c:	d05a      	beq.n	8002af4 <UART_SetConfig+0x108>
    switch (clocksource)
 8002a3e:	2a08      	cmp	r2, #8
 8002a40:	d826      	bhi.n	8002a90 <UART_SetConfig+0xa4>
 8002a42:	e8df f002 	tbb	[pc, r2]
 8002a46:	a7a1      	.short	0xa7a1
 8002a48:	25bd25aa 	.word	0x25bd25aa
 8002a4c:	2525      	.short	0x2525
 8002a4e:	c0          	.byte	0xc0
 8002a4f:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a50:	496a      	ldr	r1, [pc, #424]	; (8002bfc <UART_SetConfig+0x210>)
 8002a52:	428a      	cmp	r2, r1
 8002a54:	d12a      	bne.n	8002aac <UART_SetConfig+0xc0>
 8002a56:	4a67      	ldr	r2, [pc, #412]	; (8002bf4 <UART_SetConfig+0x208>)
 8002a58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a5a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002a5e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002a62:	f000 80b5 	beq.w	8002bd0 <UART_SetConfig+0x1e4>
 8002a66:	d815      	bhi.n	8002a94 <UART_SetConfig+0xa8>
 8002a68:	b9da      	cbnz	r2, 8002aa2 <UART_SetConfig+0xb6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a6e:	f040 808b 	bne.w	8002b88 <UART_SetConfig+0x19c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a72:	f7ff fbd5 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a76:	6862      	ldr	r2, [r4, #4]
 8002a78:	0853      	lsrs	r3, r2, #1
 8002a7a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002a7e:	fbb0 f0f2 	udiv	r0, r0, r2
 8002a82:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a84:	f1a0 0210 	sub.w	r2, r0, #16
 8002a88:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d96f      	bls.n	8002b70 <UART_SetConfig+0x184>
      ret = HAL_ERROR;
 8002a90:	2001      	movs	r0, #1
 8002a92:	e075      	b.n	8002b80 <UART_SetConfig+0x194>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a94:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8002a98:	f000 80a0 	beq.w	8002bdc <UART_SetConfig+0x1f0>
 8002a9c:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8002aa0:	d046      	beq.n	8002b30 <UART_SetConfig+0x144>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa6:	d0f3      	beq.n	8002a90 <UART_SetConfig+0xa4>
 8002aa8:	2210      	movs	r2, #16
 8002aaa:	e7c8      	b.n	8002a3e <UART_SetConfig+0x52>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002aac:	4954      	ldr	r1, [pc, #336]	; (8002c00 <UART_SetConfig+0x214>)
 8002aae:	428a      	cmp	r2, r1
 8002ab0:	d10f      	bne.n	8002ad2 <UART_SetConfig+0xe6>
 8002ab2:	4a50      	ldr	r2, [pc, #320]	; (8002bf4 <UART_SetConfig+0x208>)
 8002ab4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ab6:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8002aba:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8002abe:	f000 8087 	beq.w	8002bd0 <UART_SetConfig+0x1e4>
 8002ac2:	d9d1      	bls.n	8002a68 <UART_SetConfig+0x7c>
 8002ac4:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8002ac8:	f000 8088 	beq.w	8002bdc <UART_SetConfig+0x1f0>
 8002acc:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8002ad0:	e7e6      	b.n	8002aa0 <UART_SetConfig+0xb4>
 8002ad2:	494c      	ldr	r1, [pc, #304]	; (8002c04 <UART_SetConfig+0x218>)
 8002ad4:	428a      	cmp	r2, r1
 8002ad6:	d137      	bne.n	8002b48 <UART_SetConfig+0x15c>
 8002ad8:	4a46      	ldr	r2, [pc, #280]	; (8002bf4 <UART_SetConfig+0x208>)
 8002ada:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002adc:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8002ae0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002ae4:	d074      	beq.n	8002bd0 <UART_SetConfig+0x1e4>
 8002ae6:	d81d      	bhi.n	8002b24 <UART_SetConfig+0x138>
 8002ae8:	2a00      	cmp	r2, #0
 8002aea:	d0be      	beq.n	8002a6a <UART_SetConfig+0x7e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002af0:	d1ce      	bne.n	8002a90 <UART_SetConfig+0xa4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002af2:	2210      	movs	r2, #16
    switch (clocksource)
 8002af4:	2a08      	cmp	r2, #8
 8002af6:	d8cb      	bhi.n	8002a90 <UART_SetConfig+0xa4>
 8002af8:	a301      	add	r3, pc, #4	; (adr r3, 8002b00 <UART_SetConfig+0x114>)
 8002afa:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8002afe:	bf00      	nop
 8002b00:	08002a73 	.word	0x08002a73
 8002b04:	08002b6b 	.word	0x08002b6b
 8002b08:	08002b37 	.word	0x08002b37
 8002b0c:	08002a91 	.word	0x08002a91
 8002b10:	08002bd7 	.word	0x08002bd7
 8002b14:	08002a91 	.word	0x08002a91
 8002b18:	08002a91 	.word	0x08002a91
 8002b1c:	08002a91 	.word	0x08002a91
 8002b20:	08002be3 	.word	0x08002be3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b24:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002b28:	d058      	beq.n	8002bdc <UART_SetConfig+0x1f0>
 8002b2a:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8002b2e:	d1dd      	bne.n	8002aec <UART_SetConfig+0x100>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b34:	d131      	bne.n	8002b9a <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002b36:	6863      	ldr	r3, [r4, #4]
 8002b38:	0858      	lsrs	r0, r3, #1
 8002b3a:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 8002b3e:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002b42:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b46:	e79c      	b.n	8002a82 <UART_SetConfig+0x96>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b48:	492f      	ldr	r1, [pc, #188]	; (8002c08 <UART_SetConfig+0x21c>)
 8002b4a:	428a      	cmp	r2, r1
 8002b4c:	d1a0      	bne.n	8002a90 <UART_SetConfig+0xa4>
 8002b4e:	4a29      	ldr	r2, [pc, #164]	; (8002bf4 <UART_SetConfig+0x208>)
 8002b50:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b52:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8002b56:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002b5a:	d039      	beq.n	8002bd0 <UART_SetConfig+0x1e4>
 8002b5c:	d984      	bls.n	8002a68 <UART_SetConfig+0x7c>
 8002b5e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8002b62:	d03b      	beq.n	8002bdc <UART_SetConfig+0x1f0>
 8002b64:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8002b68:	e79a      	b.n	8002aa0 <UART_SetConfig+0xb4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b6a:	f7ff fb71 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 8002b6e:	e782      	b.n	8002a76 <UART_SetConfig+0x8a>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b70:	f020 030f 	bic.w	r3, r0, #15
      huart->Instance->BRR = brrtemp;
 8002b74:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b76:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 8002b7a:	4318      	orrs	r0, r3
 8002b7c:	60d0      	str	r0, [r2, #12]
 8002b7e:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002b84:	6663      	str	r3, [r4, #100]	; 0x64
}
 8002b86:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b88:	f7ff fb4a 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b8c:	6863      	ldr	r3, [r4, #4]
 8002b8e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002b92:	e008      	b.n	8002ba6 <UART_SetConfig+0x1ba>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b94:	f7ff fb5c 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 8002b98:	e7f8      	b.n	8002b8c <UART_SetConfig+0x1a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002b9a:	6863      	ldr	r3, [r4, #4]
 8002b9c:	0858      	lsrs	r0, r3, #1
 8002b9e:	f500 00f4 	add.w	r0, r0, #7995392	; 0x7a0000
 8002ba2:	f500 5090 	add.w	r0, r0, #4608	; 0x1200
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002ba6:	fbb0 f0f3 	udiv	r0, r0, r3
 8002baa:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bac:	f1a0 0210 	sub.w	r2, r0, #16
 8002bb0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	f63f af6b 	bhi.w	8002a90 <UART_SetConfig+0xa4>
      huart->Instance->BRR = usartdiv;
 8002bba:	6823      	ldr	r3, [r4, #0]
 8002bbc:	60d8      	str	r0, [r3, #12]
 8002bbe:	e7de      	b.n	8002b7e <UART_SetConfig+0x192>
        pclk = HAL_RCC_GetSysClockFreq();
 8002bc0:	f7ff fa54 	bl	800206c <HAL_RCC_GetSysClockFreq>
 8002bc4:	e7e2      	b.n	8002b8c <UART_SetConfig+0x1a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002bc6:	6863      	ldr	r3, [r4, #4]
 8002bc8:	0858      	lsrs	r0, r3, #1
 8002bca:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8002bce:	e7ea      	b.n	8002ba6 <UART_SetConfig+0x1ba>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bd4:	d1f4      	bne.n	8002bc0 <UART_SetConfig+0x1d4>
        pclk = HAL_RCC_GetSysClockFreq();
 8002bd6:	f7ff fa49 	bl	800206c <HAL_RCC_GetSysClockFreq>
 8002bda:	e74c      	b.n	8002a76 <UART_SetConfig+0x8a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002be0:	d1f1      	bne.n	8002bc6 <UART_SetConfig+0x1da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002be2:	6863      	ldr	r3, [r4, #4]
 8002be4:	0858      	lsrs	r0, r3, #1
 8002be6:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8002bea:	e7aa      	b.n	8002b42 <UART_SetConfig+0x156>
 8002bec:	efff69f3 	.word	0xefff69f3
 8002bf0:	40013800 	.word	0x40013800
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	08009b7c 	.word	0x08009b7c
 8002bfc:	40004400 	.word	0x40004400
 8002c00:	40004800 	.word	0x40004800
 8002c04:	40004c00 	.word	0x40004c00
 8002c08:	40005000 	.word	0x40005000

08002c0c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c0e:	07da      	lsls	r2, r3, #31
{
 8002c10:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c12:	d506      	bpl.n	8002c22 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c14:	6801      	ldr	r1, [r0, #0]
 8002c16:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002c18:	684a      	ldr	r2, [r1, #4]
 8002c1a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002c1e:	4322      	orrs	r2, r4
 8002c20:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c22:	079c      	lsls	r4, r3, #30
 8002c24:	d506      	bpl.n	8002c34 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c26:	6801      	ldr	r1, [r0, #0]
 8002c28:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002c2a:	684a      	ldr	r2, [r1, #4]
 8002c2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c30:	4322      	orrs	r2, r4
 8002c32:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c34:	0759      	lsls	r1, r3, #29
 8002c36:	d506      	bpl.n	8002c46 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c38:	6801      	ldr	r1, [r0, #0]
 8002c3a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002c3c:	684a      	ldr	r2, [r1, #4]
 8002c3e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c42:	4322      	orrs	r2, r4
 8002c44:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c46:	071a      	lsls	r2, r3, #28
 8002c48:	d506      	bpl.n	8002c58 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c4a:	6801      	ldr	r1, [r0, #0]
 8002c4c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002c4e:	684a      	ldr	r2, [r1, #4]
 8002c50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c54:	4322      	orrs	r2, r4
 8002c56:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c58:	06dc      	lsls	r4, r3, #27
 8002c5a:	d506      	bpl.n	8002c6a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c5c:	6801      	ldr	r1, [r0, #0]
 8002c5e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002c60:	688a      	ldr	r2, [r1, #8]
 8002c62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c66:	4322      	orrs	r2, r4
 8002c68:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c6a:	0699      	lsls	r1, r3, #26
 8002c6c:	d506      	bpl.n	8002c7c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c6e:	6801      	ldr	r1, [r0, #0]
 8002c70:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002c72:	688a      	ldr	r2, [r1, #8]
 8002c74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c78:	4322      	orrs	r2, r4
 8002c7a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c7c:	065a      	lsls	r2, r3, #25
 8002c7e:	d50f      	bpl.n	8002ca0 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c80:	6801      	ldr	r1, [r0, #0]
 8002c82:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002c84:	684a      	ldr	r2, [r1, #4]
 8002c86:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002c8a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c8c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c90:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c92:	d105      	bne.n	8002ca0 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c94:	684a      	ldr	r2, [r1, #4]
 8002c96:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002c98:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002c9c:	4322      	orrs	r2, r4
 8002c9e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ca0:	061b      	lsls	r3, r3, #24
 8002ca2:	d506      	bpl.n	8002cb2 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ca4:	6802      	ldr	r2, [r0, #0]
 8002ca6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002ca8:	6853      	ldr	r3, [r2, #4]
 8002caa:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002cae:	430b      	orrs	r3, r1
 8002cb0:	6053      	str	r3, [r2, #4]
 8002cb2:	bd10      	pop	{r4, pc}

08002cb4 <UART_WaitOnFlagUntilTimeout>:
{
 8002cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cb8:	9d06      	ldr	r5, [sp, #24]
 8002cba:	4604      	mov	r4, r0
 8002cbc:	460f      	mov	r7, r1
 8002cbe:	4616      	mov	r6, r2
 8002cc0:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cc2:	6821      	ldr	r1, [r4, #0]
 8002cc4:	69ca      	ldr	r2, [r1, #28]
 8002cc6:	ea37 0302 	bics.w	r3, r7, r2
 8002cca:	bf0c      	ite	eq
 8002ccc:	2201      	moveq	r2, #1
 8002cce:	2200      	movne	r2, #0
 8002cd0:	42b2      	cmp	r2, r6
 8002cd2:	d002      	beq.n	8002cda <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002cd4:	2000      	movs	r0, #0
}
 8002cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002cda:	1c68      	adds	r0, r5, #1
 8002cdc:	d0f2      	beq.n	8002cc4 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cde:	f7fe f9a1 	bl	8001024 <HAL_GetTick>
 8002ce2:	eba0 0008 	sub.w	r0, r0, r8
 8002ce6:	4285      	cmp	r5, r0
 8002ce8:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cea:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cec:	d300      	bcc.n	8002cf0 <UART_WaitOnFlagUntilTimeout+0x3c>
 8002cee:	b97d      	cbnz	r5, 8002d10 <UART_WaitOnFlagUntilTimeout+0x5c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cf0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002cf4:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cf6:	6883      	ldr	r3, [r0, #8]
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002cfe:	2320      	movs	r3, #32
 8002d00:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002d02:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8002d04:	2300      	movs	r3, #0
 8002d06:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 8002d0a:	2003      	movs	r0, #3
 8002d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d10:	075a      	lsls	r2, r3, #29
 8002d12:	d5d6      	bpl.n	8002cc2 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d14:	69c3      	ldr	r3, [r0, #28]
 8002d16:	051b      	lsls	r3, r3, #20
 8002d18:	d5d3      	bpl.n	8002cc2 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d1e:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d20:	6803      	ldr	r3, [r0, #0]
 8002d22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d26:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d28:	6883      	ldr	r3, [r0, #8]
 8002d2a:	f023 0301 	bic.w	r3, r3, #1
 8002d2e:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002d30:	2320      	movs	r3, #32
 8002d32:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002d34:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d36:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002d38:	e7e4      	b.n	8002d04 <UART_WaitOnFlagUntilTimeout+0x50>

08002d3a <HAL_UART_Transmit>:
{
 8002d3a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002d3e:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002d40:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002d42:	2b20      	cmp	r3, #32
{
 8002d44:	4604      	mov	r4, r0
 8002d46:	460e      	mov	r6, r1
 8002d48:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002d4a:	d14b      	bne.n	8002de4 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8002d4c:	2900      	cmp	r1, #0
 8002d4e:	d047      	beq.n	8002de0 <HAL_UART_Transmit+0xa6>
 8002d50:	2a00      	cmp	r2, #0
 8002d52:	d045      	beq.n	8002de0 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8002d54:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d043      	beq.n	8002de4 <HAL_UART_Transmit+0xaa>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d62:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d64:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d66:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d68:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8002d6a:	f7fe f95b 	bl	8001024 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d6e:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8002d70:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002d78:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 8002d7a:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d7e:	d103      	bne.n	8002d88 <HAL_UART_Transmit+0x4e>
 8002d80:	6923      	ldr	r3, [r4, #16]
 8002d82:	b90b      	cbnz	r3, 8002d88 <HAL_UART_Transmit+0x4e>
 8002d84:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002d86:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8002d88:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d8c:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8002d90:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d92:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 8002d94:	b94a      	cbnz	r2, 8002daa <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d96:	2140      	movs	r1, #64	; 0x40
 8002d98:	4620      	mov	r0, r4
 8002d9a:	f7ff ff8b 	bl	8002cb4 <UART_WaitOnFlagUntilTimeout>
 8002d9e:	b950      	cbnz	r0, 8002db6 <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 8002da0:	2320      	movs	r3, #32
 8002da2:	6763      	str	r3, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 8002da4:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8002da8:	e006      	b.n	8002db8 <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002daa:	2200      	movs	r2, #0
 8002dac:	2180      	movs	r1, #128	; 0x80
 8002dae:	4620      	mov	r0, r4
 8002db0:	f7ff ff80 	bl	8002cb4 <UART_WaitOnFlagUntilTimeout>
 8002db4:	b118      	cbz	r0, 8002dbe <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8002db6:	2003      	movs	r0, #3
}
 8002db8:	b003      	add	sp, #12
 8002dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002dbe:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002dc0:	b95e      	cbnz	r6, 8002dda <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dc2:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dca:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002dcc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8002dd8:	e7d6      	b.n	8002d88 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dda:	f816 3b01 	ldrb.w	r3, [r6], #1
 8002dde:	e7f4      	b.n	8002dca <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8002de0:	2001      	movs	r0, #1
 8002de2:	e7e9      	b.n	8002db8 <HAL_UART_Transmit+0x7e>
    return HAL_BUSY;
 8002de4:	2002      	movs	r0, #2
 8002de6:	e7e7      	b.n	8002db8 <HAL_UART_Transmit+0x7e>

08002de8 <UART_CheckIdleState>:
{
 8002de8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002dea:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dec:	2600      	movs	r6, #0
 8002dee:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002df0:	f7fe f918 	bl	8001024 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002df4:	6823      	ldr	r3, [r4, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002dfa:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dfc:	d415      	bmi.n	8002e2a <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002dfe:	6823      	ldr	r3, [r4, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	075b      	lsls	r3, r3, #29
 8002e04:	d50a      	bpl.n	8002e1c <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	462b      	mov	r3, r5
 8002e10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e14:	4620      	mov	r0, r4
 8002e16:	f7ff ff4d 	bl	8002cb4 <UART_WaitOnFlagUntilTimeout>
 8002e1a:	b990      	cbnz	r0, 8002e42 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8002e1c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002e1e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002e20:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8002e22:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8002e26:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8002e28:	e00c      	b.n	8002e44 <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	4632      	mov	r2, r6
 8002e32:	4603      	mov	r3, r0
 8002e34:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e38:	4620      	mov	r0, r4
 8002e3a:	f7ff ff3b 	bl	8002cb4 <UART_WaitOnFlagUntilTimeout>
 8002e3e:	2800      	cmp	r0, #0
 8002e40:	d0dd      	beq.n	8002dfe <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002e42:	2003      	movs	r0, #3
}
 8002e44:	b002      	add	sp, #8
 8002e46:	bd70      	pop	{r4, r5, r6, pc}

08002e48 <HAL_UART_Init>:
{
 8002e48:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002e4a:	4604      	mov	r4, r0
 8002e4c:	b340      	cbz	r0, 8002ea0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002e4e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002e50:	b91b      	cbnz	r3, 8002e5a <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8002e52:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002e56:	f002 fa77 	bl	8005348 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002e5a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002e5c:	2324      	movs	r3, #36	; 0x24
 8002e5e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002e60:	6813      	ldr	r3, [r2, #0]
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e68:	4620      	mov	r0, r4
 8002e6a:	f7ff fdbf 	bl	80029ec <UART_SetConfig>
 8002e6e:	2801      	cmp	r0, #1
 8002e70:	d016      	beq.n	8002ea0 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e74:	b113      	cbz	r3, 8002e7c <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8002e76:	4620      	mov	r0, r4
 8002e78:	f7ff fec8 	bl	8002c0c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e84:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e8c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002e94:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002e96:	601a      	str	r2, [r3, #0]
}
 8002e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002e9c:	f7ff bfa4 	b.w	8002de8 <UART_CheckIdleState>
}
 8002ea0:	2001      	movs	r0, #1
 8002ea2:	bd10      	pop	{r4, pc}

08002ea4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002ea4:	4770      	bx	lr

08002ea6 <eMBFuncReadCoils>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002ea6:	880b      	ldrh	r3, [r1, #0]
 8002ea8:	2b05      	cmp	r3, #5
{
 8002eaa:	b570      	push	{r4, r5, r6, lr}
 8002eac:	460d      	mov	r5, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002eae:	d12e      	bne.n	8002f0e <eMBFuncReadCoils+0x68>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8002eb0:	78c3      	ldrb	r3, [r0, #3]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8002eb2:	7902      	ldrb	r2, [r0, #4]
 8002eb4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8002eb8:	1e53      	subs	r3, r2, #1
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8002ec0:	428b      	cmp	r3, r1
 8002ec2:	d824      	bhi.n	8002f0e <eMBFuncReadCoils+0x68>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
 8002ec4:	2300      	movs	r3, #0
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002ec6:	7846      	ldrb	r6, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002ec8:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8002eca:	802b      	strh	r3, [r5, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8002ed0:	882b      	ldrh	r3, [r5, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 8002ed2:	f012 0f07 	tst.w	r2, #7
 8002ed6:	ea4f 04d2 	mov.w	r4, r2, lsr #3
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8002eda:	bf18      	it	ne
 8002edc:	3401      	addne	r4, #1
            *usLen += 1;
 8002ede:	3301      	adds	r3, #1
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8002ee0:	b2e4      	uxtb	r4, r4
            *usLen += 1;
 8002ee2:	802b      	strh	r3, [r5, #0]
            }
            *pucFrameCur++ = ucNBytes;
 8002ee4:	7044      	strb	r4, [r0, #1]
            *usLen += 1;
 8002ee6:	882b      	ldrh	r3, [r5, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002ee8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
            *usLen += 1;
 8002eec:	3301      	adds	r3, #1
        usRegAddress++;
 8002eee:	3101      	adds	r1, #1
            *usLen += 1;
 8002ef0:	802b      	strh	r3, [r5, #0]

            eRegStatus =
 8002ef2:	b289      	uxth	r1, r1
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	3002      	adds	r0, #2
 8002ef8:	f001 ff82 	bl	8004e00 <eMBRegCoilsCB>
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002efc:	b118      	cbz	r0, 8002f06 <eMBFuncReadCoils+0x60>
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002f02:	f000 b981 	b.w	8003208 <prveMBError2Exception>
                *usLen += ucNBytes;;
 8002f06:	882a      	ldrh	r2, [r5, #0]
 8002f08:	4414      	add	r4, r2
 8002f0a:	802c      	strh	r4, [r5, #0]
 8002f0c:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002f0e:	2003      	movs	r0, #3
}
 8002f10:	bd70      	pop	{r4, r5, r6, pc}

08002f12 <eMBFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002f12:	880b      	ldrh	r3, [r1, #0]
 8002f14:	2b05      	cmp	r3, #5
{
 8002f16:	b513      	push	{r0, r1, r4, lr}
    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002f18:	d11d      	bne.n	8002f56 <eMBFuncWriteCoil+0x44>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8002f1a:	7903      	ldrb	r3, [r0, #4]
 8002f1c:	b9db      	cbnz	r3, 8002f56 <eMBFuncWriteCoil+0x44>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8002f1e:	78c4      	ldrb	r4, [r0, #3]
 8002f20:	1e62      	subs	r2, r4, #1
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	2afd      	cmp	r2, #253	; 0xfd
 8002f26:	d916      	bls.n	8002f56 <eMBFuncWriteCoil+0x44>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8002f28:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002f2a:	7881      	ldrb	r1, [r0, #2]
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
 8002f2c:	f88d 3005 	strb.w	r3, [sp, #5]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8002f30:	2cff      	cmp	r4, #255	; 0xff
            {
                ucBuf[0] = 1;
 8002f32:	bf08      	it	eq
 8002f34:	2301      	moveq	r3, #1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002f36:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
            }
            else
            {
                ucBuf[0] = 0;
 8002f3a:	f88d 3004 	strb.w	r3, [sp, #4]
        usRegAddress++;
 8002f3e:	3101      	adds	r1, #1
            }
            eRegStatus =
 8002f40:	2301      	movs	r3, #1
 8002f42:	461a      	mov	r2, r3
 8002f44:	b289      	uxth	r1, r1
 8002f46:	a801      	add	r0, sp, #4
 8002f48:	f001 ff5a 	bl	8004e00 <eMBRegCoilsCB>
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002f4c:	b128      	cbz	r0, 8002f5a <eMBFuncWriteCoil+0x48>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002f4e:	f000 f95b 	bl	8003208 <prveMBError2Exception>
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002f52:	b002      	add	sp, #8
 8002f54:	bd10      	pop	{r4, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002f56:	2003      	movs	r0, #3
 8002f58:	e7fb      	b.n	8002f52 <eMBFuncWriteCoil+0x40>
 8002f5a:	e7fa      	b.n	8002f52 <eMBFuncWriteCoil+0x40>

08002f5c <eMBFuncWriteMultipleCoils>:
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002f5c:	880b      	ldrh	r3, [r1, #0]
 8002f5e:	2b05      	cmp	r3, #5
{
 8002f60:	b510      	push	{r4, lr}
 8002f62:	460c      	mov	r4, r1
    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002f64:	d924      	bls.n	8002fb0 <eMBFuncWriteMultipleCoils+0x54>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8002f66:	78c3      	ldrb	r3, [r0, #3]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8002f68:	7902      	ldrb	r2, [r0, #4]
 8002f6a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8002f6e:	f012 0f07 	tst.w	r2, #7
 8002f72:	ea4f 03d2 	mov.w	r3, r2, lsr #3
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) &&
 8002f76:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8002f7a:	bf18      	it	ne
 8002f7c:	3301      	addne	r3, #1
        if( ( usCoilCnt >= 1 ) &&
 8002f7e:	f5b1 6ff6 	cmp.w	r1, #1968	; 0x7b0
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8002f82:	b2db      	uxtb	r3, r3
        if( ( usCoilCnt >= 1 ) &&
 8002f84:	d214      	bcs.n	8002fb0 <eMBFuncWriteMultipleCoils+0x54>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8002f86:	7941      	ldrb	r1, [r0, #5]
 8002f88:	4299      	cmp	r1, r3
 8002f8a:	d111      	bne.n	8002fb0 <eMBFuncWriteMultipleCoils+0x54>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8002f8c:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8002f8e:	7881      	ldrb	r1, [r0, #2]
 8002f90:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8002f94:	3101      	adds	r1, #1
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
 8002f96:	2301      	movs	r3, #1
 8002f98:	b289      	uxth	r1, r1
 8002f9a:	3006      	adds	r0, #6
 8002f9c:	f001 ff30 	bl	8004e00 <eMBRegCoilsCB>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002fa0:	b118      	cbz	r0, 8002faa <eMBFuncWriteMultipleCoils+0x4e>
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002fa6:	f000 b92f 	b.w	8003208 <prveMBError2Exception>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8002faa:	2205      	movs	r2, #5
 8002fac:	8022      	strh	r2, [r4, #0]
 8002fae:	bd10      	pop	{r4, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002fb0:	2003      	movs	r0, #3
}
 8002fb2:	bd10      	pop	{r4, pc}

08002fb4 <eMBFuncReadDiscreteInputs>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002fb4:	880b      	ldrh	r3, [r1, #0]
 8002fb6:	2b05      	cmp	r3, #5
{
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	460d      	mov	r5, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002fbc:	d12d      	bne.n	800301a <eMBFuncReadDiscreteInputs+0x66>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8002fbe:	78c3      	ldrb	r3, [r0, #3]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8002fc0:	7902      	ldrb	r2, [r0, #4]
 8002fc2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8002fc6:	1e53      	subs	r3, r2, #1
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8002fce:	428b      	cmp	r3, r1
 8002fd0:	d823      	bhi.n	800301a <eMBFuncReadDiscreteInputs+0x66>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
 8002fd2:	2300      	movs	r3, #0
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002fd4:	7846      	ldrb	r6, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002fd6:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8002fd8:	802b      	strh	r3, [r5, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8002fde:	882b      	ldrh	r3, [r5, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8002fe0:	f012 0f07 	tst.w	r2, #7
 8002fe4:	ea4f 04d2 	mov.w	r4, r2, lsr #3
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8002fe8:	bf18      	it	ne
 8002fea:	3401      	addne	r4, #1
            *usLen += 1;
 8002fec:	3301      	adds	r3, #1
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8002fee:	b2e4      	uxtb	r4, r4
            *usLen += 1;
 8002ff0:	802b      	strh	r3, [r5, #0]
            }
            *pucFrameCur++ = ucNBytes;
 8002ff2:	7044      	strb	r4, [r0, #1]
            *usLen += 1;
 8002ff4:	882b      	ldrh	r3, [r5, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002ff6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
            *usLen += 1;
 8002ffa:	3301      	adds	r3, #1
        usRegAddress++;
 8002ffc:	3101      	adds	r1, #1
            *usLen += 1;
 8002ffe:	802b      	strh	r3, [r5, #0]

            eRegStatus =
 8003000:	b289      	uxth	r1, r1
 8003002:	3002      	adds	r0, #2
 8003004:	f001 fefe 	bl	8004e04 <eMBRegDiscreteCB>
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003008:	b118      	cbz	r0, 8003012 <eMBFuncReadDiscreteInputs+0x5e>
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 800300a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 800300e:	f000 b8fb 	b.w	8003208 <prveMBError2Exception>
                *usLen += ucNBytes;;
 8003012:	882a      	ldrh	r2, [r5, #0]
 8003014:	4414      	add	r4, r2
 8003016:	802c      	strh	r4, [r5, #0]
 8003018:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800301a:	2003      	movs	r0, #3
}
 800301c:	bd70      	pop	{r4, r5, r6, pc}

0800301e <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800301e:	b508      	push	{r3, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8003020:	880b      	ldrh	r3, [r1, #0]
 8003022:	2b05      	cmp	r3, #5
 8003024:	d10f      	bne.n	8003046 <eMBFuncWriteHoldingRegister+0x28>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8003026:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8003028:	7881      	ldrb	r1, [r0, #2]
 800302a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 800302e:	3101      	adds	r1, #1

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8003030:	2301      	movs	r3, #1
 8003032:	461a      	mov	r2, r3
 8003034:	b289      	uxth	r1, r1
 8003036:	3003      	adds	r0, #3
 8003038:	f001 feae 	bl	8004d98 <eMBRegHoldingCB>
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 800303c:	b128      	cbz	r0, 800304a <eMBFuncWriteHoldingRegister+0x2c>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 800303e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            eStatus = prveMBError2Exception( eRegStatus );
 8003042:	f000 b8e1 	b.w	8003208 <prveMBError2Exception>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003046:	2003      	movs	r0, #3
 8003048:	bd08      	pop	{r3, pc}
}
 800304a:	bd08      	pop	{r3, pc}

0800304c <eMBFuncWriteMultipleHoldingRegister>:
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 800304c:	880b      	ldrh	r3, [r1, #0]
 800304e:	2b05      	cmp	r3, #5
{
 8003050:	b510      	push	{r4, lr}
 8003052:	460c      	mov	r4, r1
    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8003054:	d91d      	bls.n	8003092 <eMBFuncWriteMultipleHoldingRegister+0x46>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8003056:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8003058:	7902      	ldrb	r2, [r0, #4]
 800305a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        if( ( usRegCount >= 1 ) &&
 800305e:	1e53      	subs	r3, r2, #1
 8003060:	2b77      	cmp	r3, #119	; 0x77
 8003062:	d816      	bhi.n	8003092 <eMBFuncWriteMultipleHoldingRegister+0x46>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8003064:	0053      	lsls	r3, r2, #1
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8003066:	7941      	ldrb	r1, [r0, #5]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	4299      	cmp	r1, r3
 800306c:	d111      	bne.n	8003092 <eMBFuncWriteMultipleHoldingRegister+0x46>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 800306e:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8003070:	7881      	ldrb	r1, [r0, #2]
 8003072:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8003076:	3101      	adds	r1, #1
        {
            /* Make callback to update the register values. */
            eRegStatus =
 8003078:	2301      	movs	r3, #1
 800307a:	b289      	uxth	r1, r1
 800307c:	3006      	adds	r0, #6
 800307e:	f001 fe8b 	bl	8004d98 <eMBRegHoldingCB>
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003082:	b118      	cbz	r0, 800308c <eMBFuncWriteMultipleHoldingRegister+0x40>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8003084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8003088:	f000 b8be 	b.w	8003208 <prveMBError2Exception>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 800308c:	2205      	movs	r2, #5
 800308e:	8022      	strh	r2, [r4, #0]
 8003090:	bd10      	pop	{r4, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003092:	2003      	movs	r0, #3
}
 8003094:	bd10      	pop	{r4, pc}

08003096 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003098:	880b      	ldrh	r3, [r1, #0]
 800309a:	2b05      	cmp	r3, #5
{
 800309c:	460c      	mov	r4, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800309e:	d124      	bne.n	80030ea <eMBFuncReadHoldingRegister+0x54>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80030a0:	7902      	ldrb	r2, [r0, #4]
 80030a2:	b295      	uxth	r5, r2

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80030a4:	1e6b      	subs	r3, r5, #1
 80030a6:	2b7c      	cmp	r3, #124	; 0x7c
 80030a8:	d81f      	bhi.n	80030ea <eMBFuncReadHoldingRegister+0x54>
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 80030aa:	2603      	movs	r6, #3
            *usLen = MB_PDU_FUNC_OFF;
 80030ac:	2300      	movs	r3, #0
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80030ae:	7847      	ldrb	r7, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80030b0:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 80030b2:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 80030b4:	7006      	strb	r6, [r0, #0]
            *usLen += 1;
 80030b6:	8826      	ldrh	r6, [r4, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 80030b8:	0052      	lsls	r2, r2, #1
            *usLen += 1;
 80030ba:	3601      	adds	r6, #1
 80030bc:	8026      	strh	r6, [r4, #0]
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 80030be:	7042      	strb	r2, [r0, #1]
            *usLen += 1;
 80030c0:	8822      	ldrh	r2, [r4, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80030c2:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
            *usLen += 1;
 80030c6:	3201      	adds	r2, #1
        usRegAddress++;
 80030c8:	3101      	adds	r1, #1
            *usLen += 1;
 80030ca:	8022      	strh	r2, [r4, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 80030cc:	b289      	uxth	r1, r1
 80030ce:	462a      	mov	r2, r5
 80030d0:	3002      	adds	r0, #2
 80030d2:	f001 fe61 	bl	8004d98 <eMBRegHoldingCB>
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80030d6:	b118      	cbz	r0, 80030e0 <eMBFuncReadHoldingRegister+0x4a>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80030d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 80030dc:	f000 b894 	b.w	8003208 <prveMBError2Exception>
                *usLen += usRegCount * 2;
 80030e0:	8822      	ldrh	r2, [r4, #0]
 80030e2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 80030e6:	8025      	strh	r5, [r4, #0]
 80030e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80030ea:	2003      	movs	r0, #3
}
 80030ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080030ee <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80030ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80030f2:	880b      	ldrh	r3, [r1, #0]
 80030f4:	2b09      	cmp	r3, #9
{
 80030f6:	4604      	mov	r4, r0
 80030f8:	460d      	mov	r5, r1
    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80030fa:	d93c      	bls.n	8003176 <eMBFuncReadWriteMultipleHoldingRegister+0x88>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 80030fc:	78c3      	ldrb	r3, [r0, #3]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 80030fe:	7907      	ldrb	r7, [r0, #4]
 8003100:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8003104:	1e7b      	subs	r3, r7, #1
 8003106:	2b7c      	cmp	r3, #124	; 0x7c
 8003108:	d838      	bhi.n	800317c <eMBFuncReadWriteMultipleHoldingRegister+0x8e>
        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 800310a:	79c3      	ldrb	r3, [r0, #7]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 800310c:	7a02      	ldrb	r2, [r0, #8]
 800310e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8003112:	1e53      	subs	r3, r2, #1
 8003114:	2b78      	cmp	r3, #120	; 0x78
 8003116:	d831      	bhi.n	800317c <eMBFuncReadWriteMultipleHoldingRegister+0x8e>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8003118:	7a43      	ldrb	r3, [r0, #9]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800311a:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800311e:	d12d      	bne.n	800317c <eMBFuncReadWriteMultipleHoldingRegister+0x8e>
        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8003120:	7943      	ldrb	r3, [r0, #5]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8003122:	7981      	ldrb	r1, [r0, #6]
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8003124:	f890 9001 	ldrb.w	r9, [r0, #1]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8003128:	7886      	ldrb	r6, [r0, #2]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 800312a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegWriteAddress++;
 800312e:	3101      	adds	r1, #1
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8003130:	2301      	movs	r3, #1
 8003132:	b289      	uxth	r1, r1
 8003134:	300a      	adds	r0, #10
 8003136:	f001 fe2f 	bl	8004d98 <eMBRegHoldingCB>
 800313a:	4603      	mov	r3, r0
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 800313c:	bb08      	cbnz	r0, 8003182 <eMBFuncReadWriteMultipleHoldingRegister+0x94>
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
                *usLen = MB_PDU_FUNC_OFF;

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 800313e:	2217      	movs	r2, #23
                *usLen = MB_PDU_FUNC_OFF;
 8003140:	8028      	strh	r0, [r5, #0]
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8003142:	7022      	strb	r2, [r4, #0]
                *usLen += 1;
 8003144:	882a      	ldrh	r2, [r5, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8003146:	ea4f 0847 	mov.w	r8, r7, lsl #1
                *usLen += 1;
 800314a:	3201      	adds	r2, #1
 800314c:	802a      	strh	r2, [r5, #0]
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 800314e:	f884 8001 	strb.w	r8, [r4, #1]
                *usLen += 1;
 8003152:	882a      	ldrh	r2, [r5, #0]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8003154:	ea46 2109 	orr.w	r1, r6, r9, lsl #8
                *usLen += 1;
 8003158:	3201      	adds	r2, #1
        usRegReadAddress++;
 800315a:	3101      	adds	r1, #1
                *usLen += 1;
 800315c:	802a      	strh	r2, [r5, #0]

                /* Make the read callback. */
                eRegStatus =
 800315e:	b289      	uxth	r1, r1
 8003160:	463a      	mov	r2, r7
 8003162:	1ca0      	adds	r0, r4, #2
 8003164:	f001 fe18 	bl	8004d98 <eMBRegHoldingCB>
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
                if( eRegStatus == MB_ENOERR )
 8003168:	b958      	cbnz	r0, 8003182 <eMBFuncReadWriteMultipleHoldingRegister+0x94>
                {
                    *usLen += 2 * usRegReadCount;
 800316a:	882b      	ldrh	r3, [r5, #0]
 800316c:	4498      	add	r8, r3
 800316e:	f8a5 8000 	strh.w	r8, [r5]
 8003172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    eMBException    eStatus = MB_EX_NONE;
 8003176:	2000      	movs	r0, #0
 8003178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800317c:	2003      	movs	r0, #3
        }
    }
    return eStatus;
 800317e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}
 8003182:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8003186:	f000 b83f 	b.w	8003208 <prveMBError2Exception>

0800318a <eMBFuncReadInputRegister>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800318a:	880b      	ldrh	r3, [r1, #0]
 800318c:	2b05      	cmp	r3, #5
{
 800318e:	b570      	push	{r4, r5, r6, lr}
 8003190:	460c      	mov	r4, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003192:	d124      	bne.n	80031de <eMBFuncReadInputRegister+0x54>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8003194:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8003196:	7902      	ldrb	r2, [r0, #4]
 8003198:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 800319c:	1e53      	subs	r3, r2, #1
 800319e:	2b7b      	cmp	r3, #123	; 0x7b
 80031a0:	d81d      	bhi.n	80031de <eMBFuncReadInputRegister+0x54>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
 80031a2:	2300      	movs	r3, #0
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80031a4:	7846      	ldrb	r6, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80031a6:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 80031a8:	8023      	strh	r3, [r4, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 80031aa:	2304      	movs	r3, #4
 80031ac:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 80031ae:	8823      	ldrh	r3, [r4, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 80031b0:	0055      	lsls	r5, r2, #1
            *usLen += 1;
 80031b2:	3301      	adds	r3, #1
 80031b4:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 80031b6:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 80031b8:	8823      	ldrh	r3, [r4, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80031ba:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
            *usLen += 1;
 80031be:	3301      	adds	r3, #1
        usRegAddress++;
 80031c0:	3101      	adds	r1, #1
            *usLen += 1;
 80031c2:	8023      	strh	r3, [r4, #0]

            eRegStatus =
 80031c4:	b289      	uxth	r1, r1
 80031c6:	3002      	adds	r0, #2
 80031c8:	f001 fdc6 	bl	8004d58 <eMBRegInputCB>
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80031cc:	b118      	cbz	r0, 80031d6 <eMBFuncReadInputRegister+0x4c>
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80031ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 80031d2:	f000 b819 	b.w	8003208 <prveMBError2Exception>
                *usLen += usRegCount * 2;
 80031d6:	8822      	ldrh	r2, [r4, #0]
 80031d8:	4415      	add	r5, r2
 80031da:	8025      	strh	r5, [r4, #0]
 80031dc:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80031de:	2003      	movs	r0, #3
}
 80031e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080031e4 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 80031e4:	b538      	push	{r3, r4, r5, lr}
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 80031e6:	4b06      	ldr	r3, [pc, #24]	; (8003200 <eMBFuncReportSlaveID+0x1c>)
 80031e8:	881c      	ldrh	r4, [r3, #0]
{
 80031ea:	460d      	mov	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 80031ec:	4622      	mov	r2, r4
 80031ee:	4905      	ldr	r1, [pc, #20]	; (8003204 <eMBFuncReportSlaveID+0x20>)
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 80031f0:	3401      	adds	r4, #1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 80031f2:	3001      	adds	r0, #1
 80031f4:	f002 fa8a 	bl	800570c <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 80031f8:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 80031fa:	2000      	movs	r0, #0
 80031fc:	bd38      	pop	{r3, r4, r5, pc}
 80031fe:	bf00      	nop
 8003200:	200007c0 	.word	0x200007c0
 8003204:	200007a0 	.word	0x200007a0

08003208 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8003208:	2807      	cmp	r0, #7
 800320a:	bf9a      	itte	ls
 800320c:	4b01      	ldrls	r3, [pc, #4]	; (8003214 <prveMBError2Exception+0xc>)
 800320e:	5c18      	ldrbls	r0, [r3, r0]
 8003210:	2004      	movhi	r0, #4
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
 8003212:	4770      	bx	lr
 8003214:	08009b80 	.word	0x08009b80

08003218 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8003218:	b538      	push	{r3, r4, r5, lr}
 800321a:	4604      	mov	r4, r0
 800321c:	4608      	mov	r0, r1
 800321e:	4611      	mov	r1, r2
 8003220:	461a      	mov	r2, r3
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 8003222:	1e43      	subs	r3, r0, #1
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2bf6      	cmp	r3, #246	; 0xf6
 8003228:	d827      	bhi.n	800327a <eMBInit+0x62>
    {
        eStatus = MB_EINVAL;
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 800322a:	4b16      	ldr	r3, [pc, #88]	; (8003284 <eMBInit+0x6c>)
 800322c:	7018      	strb	r0, [r3, #0]

        switch ( eMode )
 800322e:	bb24      	cbnz	r4, 800327a <eMBInit+0x62>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 8003230:	4b15      	ldr	r3, [pc, #84]	; (8003288 <eMBInit+0x70>)
 8003232:	4d16      	ldr	r5, [pc, #88]	; (800328c <eMBInit+0x74>)
 8003234:	601d      	str	r5, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 8003236:	4b16      	ldr	r3, [pc, #88]	; (8003290 <eMBInit+0x78>)
 8003238:	4d16      	ldr	r5, [pc, #88]	; (8003294 <eMBInit+0x7c>)
 800323a:	601d      	str	r5, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 800323c:	4b16      	ldr	r3, [pc, #88]	; (8003298 <eMBInit+0x80>)
 800323e:	4d17      	ldr	r5, [pc, #92]	; (800329c <eMBInit+0x84>)
 8003240:	601d      	str	r5, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 8003242:	4b17      	ldr	r3, [pc, #92]	; (80032a0 <eMBInit+0x88>)
 8003244:	4d17      	ldr	r5, [pc, #92]	; (80032a4 <eMBInit+0x8c>)
 8003246:	601d      	str	r5, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8003248:	4b17      	ldr	r3, [pc, #92]	; (80032a8 <eMBInit+0x90>)
 800324a:	601c      	str	r4, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 800324c:	4b17      	ldr	r3, [pc, #92]	; (80032ac <eMBInit+0x94>)
 800324e:	4c18      	ldr	r4, [pc, #96]	; (80032b0 <eMBInit+0x98>)
 8003250:	601c      	str	r4, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 8003252:	4b18      	ldr	r3, [pc, #96]	; (80032b4 <eMBInit+0x9c>)
 8003254:	4c18      	ldr	r4, [pc, #96]	; (80032b8 <eMBInit+0xa0>)
 8003256:	601c      	str	r4, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 8003258:	4b18      	ldr	r3, [pc, #96]	; (80032bc <eMBInit+0xa4>)
 800325a:	4c19      	ldr	r4, [pc, #100]	; (80032c0 <eMBInit+0xa8>)
 800325c:	601c      	str	r4, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 800325e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003262:	f000 f967 	bl	8003534 <eMBRTUInit>
#endif
        default:
            eStatus = MB_EINVAL;
        }

        if( eStatus == MB_ENOERR )
 8003266:	4604      	mov	r4, r0
 8003268:	b928      	cbnz	r0, 8003276 <eMBInit+0x5e>
        {
            if( !xMBPortEventInit(  ) )
 800326a:	f000 f8b5 	bl	80033d8 <xMBPortEventInit>
 800326e:	b130      	cbz	r0, 800327e <eMBInit+0x66>
                eStatus = MB_EPORTERR;
            }
            else
            {
                eMBCurrentMode = eMode;
                eMBState = STATE_DISABLED;
 8003270:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <eMBInit+0xac>)
 8003272:	2201      	movs	r2, #1
 8003274:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
}
 8003276:	4620      	mov	r0, r4
 8003278:	bd38      	pop	{r3, r4, r5, pc}
            eStatus = MB_EINVAL;
 800327a:	2402      	movs	r4, #2
 800327c:	e7fb      	b.n	8003276 <eMBInit+0x5e>
                eStatus = MB_EPORTERR;
 800327e:	2403      	movs	r4, #3
 8003280:	e7f9      	b.n	8003276 <eMBInit+0x5e>
 8003282:	bf00      	nop
 8003284:	200007d9 	.word	0x200007d9
 8003288:	200007d0 	.word	0x200007d0
 800328c:	0800356d 	.word	0x0800356d
 8003290:	200007d4 	.word	0x200007d4
 8003294:	08003589 	.word	0x08003589
 8003298:	200007c8 	.word	0x200007c8
 800329c:	08003605 	.word	0x08003605
 80032a0:	200007c4 	.word	0x200007c4
 80032a4:	0800359d 	.word	0x0800359d
 80032a8:	200007cc 	.word	0x200007cc
 80032ac:	20001dfc 	.word	0x20001dfc
 80032b0:	0800367d 	.word	0x0800367d
 80032b4:	20001df4 	.word	0x20001df4
 80032b8:	08003711 	.word	0x08003711
 80032bc:	20001df8 	.word	0x20001df8
 80032c0:	08003799 	.word	0x08003799
 80032c4:	20000008 	.word	0x20000008

080032c8 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 80032c8:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 80032ca:	4c06      	ldr	r4, [pc, #24]	; (80032e4 <eMBEnable+0x1c>)
 80032cc:	7823      	ldrb	r3, [r4, #0]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d105      	bne.n	80032de <eMBEnable+0x16>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 80032d2:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <eMBEnable+0x20>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 80032d8:	2000      	movs	r0, #0
 80032da:	7020      	strb	r0, [r4, #0]
 80032dc:	bd10      	pop	{r4, pc}
    }
    else
    {
        eStatus = MB_EILLSTATE;
 80032de:	2006      	movs	r0, #6
    }
    return eStatus;
}
 80032e0:	bd10      	pop	{r4, pc}
 80032e2:	bf00      	nop
 80032e4:	20000008 	.word	0x20000008
 80032e8:	200007d0 	.word	0x200007d0

080032ec <eMBPoll>:
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 80032ec:	4b30      	ldr	r3, [pc, #192]	; (80033b0 <eMBPoll+0xc4>)
{
 80032ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( eMBState != STATE_ENABLED )
 80032f0:	781c      	ldrb	r4, [r3, #0]
 80032f2:	2c00      	cmp	r4, #0
 80032f4:	d159      	bne.n	80033aa <eMBPoll+0xbe>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 80032f6:	f10d 0007 	add.w	r0, sp, #7
 80032fa:	f000 f881 	bl	8003400 <xMBPortEventGet>
 80032fe:	2801      	cmp	r0, #1
 8003300:	4603      	mov	r3, r0
 8003302:	d001      	beq.n	8003308 <eMBPoll+0x1c>

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
 8003304:	2400      	movs	r4, #0
 8003306:	e005      	b.n	8003314 <eMBPoll+0x28>
        switch ( eEvent )
 8003308:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800330c:	2a01      	cmp	r2, #1
 800330e:	d004      	beq.n	800331a <eMBPoll+0x2e>
 8003310:	2a02      	cmp	r2, #2
 8003312:	d017      	beq.n	8003344 <eMBPoll+0x58>
}
 8003314:	4620      	mov	r0, r4
 8003316:	b003      	add	sp, #12
 8003318:	bdf0      	pop	{r4, r5, r6, r7, pc}
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 800331a:	4d26      	ldr	r5, [pc, #152]	; (80033b4 <eMBPoll+0xc8>)
 800331c:	4b26      	ldr	r3, [pc, #152]	; (80033b8 <eMBPoll+0xcc>)
 800331e:	4a27      	ldr	r2, [pc, #156]	; (80033bc <eMBPoll+0xd0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4927      	ldr	r1, [pc, #156]	; (80033c0 <eMBPoll+0xd4>)
 8003324:	4628      	mov	r0, r5
 8003326:	4798      	blx	r3
            if( eStatus == MB_ENOERR )
 8003328:	4604      	mov	r4, r0
 800332a:	2800      	cmp	r0, #0
 800332c:	d1ea      	bne.n	8003304 <eMBPoll+0x18>
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 800332e:	4a25      	ldr	r2, [pc, #148]	; (80033c4 <eMBPoll+0xd8>)
 8003330:	782b      	ldrb	r3, [r5, #0]
 8003332:	7812      	ldrb	r2, [r2, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d001      	beq.n	800333c <eMBPoll+0x50>
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1e3      	bne.n	8003304 <eMBPoll+0x18>
                    ( void )xMBPortEventPost( EV_EXECUTE );
 800333c:	2002      	movs	r0, #2
 800333e:	f000 f853 	bl	80033e8 <xMBPortEventPost>
 8003342:	e7e7      	b.n	8003314 <eMBPoll+0x28>
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8003344:	4d1e      	ldr	r5, [pc, #120]	; (80033c0 <eMBPoll+0xd4>)
            eException = MB_EX_ILLEGAL_FUNCTION;
 8003346:	4e20      	ldr	r6, [pc, #128]	; (80033c8 <eMBPoll+0xdc>)
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8003348:	6828      	ldr	r0, [r5, #0]
 800334a:	4f20      	ldr	r7, [pc, #128]	; (80033cc <eMBPoll+0xe0>)
 800334c:	7802      	ldrb	r2, [r0, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 800334e:	7033      	strb	r3, [r6, #0]
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8003350:	4b1f      	ldr	r3, [pc, #124]	; (80033d0 <eMBPoll+0xe4>)
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8003352:	703a      	strb	r2, [r7, #0]
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8003354:	f813 1034 	ldrb.w	r1, [r3, r4, lsl #3]
 8003358:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
 800335c:	b131      	cbz	r1, 800336c <eMBPoll+0x80>
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 800335e:	428a      	cmp	r2, r1
 8003360:	d11f      	bne.n	80033a2 <eMBPoll+0xb6>
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8003362:	4473      	add	r3, lr
 8003364:	4915      	ldr	r1, [pc, #84]	; (80033bc <eMBPoll+0xd0>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4798      	blx	r3
 800336a:	7030      	strb	r0, [r6, #0]
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 800336c:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <eMBPoll+0xc8>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0c7      	beq.n	8003304 <eMBPoll+0x18>
                if( eException != MB_EX_NONE )
 8003374:	7831      	ldrb	r1, [r6, #0]
 8003376:	4b11      	ldr	r3, [pc, #68]	; (80033bc <eMBPoll+0xd0>)
 8003378:	b159      	cbz	r1, 8003392 <eMBPoll+0xa6>
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 800337a:	2201      	movs	r2, #1
 800337c:	801a      	strh	r2, [r3, #0]
 800337e:	783a      	ldrb	r2, [r7, #0]
 8003380:	6828      	ldr	r0, [r5, #0]
 8003382:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003386:	7002      	strb	r2, [r0, #0]
                    ucMBFrame[usLength++] = eException;
 8003388:	881a      	ldrh	r2, [r3, #0]
 800338a:	6828      	ldr	r0, [r5, #0]
 800338c:	1c54      	adds	r4, r2, #1
 800338e:	801c      	strh	r4, [r3, #0]
 8003390:	5481      	strb	r1, [r0, r2]
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8003392:	4a10      	ldr	r2, [pc, #64]	; (80033d4 <eMBPoll+0xe8>)
 8003394:	6829      	ldr	r1, [r5, #0]
 8003396:	6814      	ldr	r4, [r2, #0]
 8003398:	881a      	ldrh	r2, [r3, #0]
 800339a:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <eMBPoll+0xd8>)
 800339c:	7818      	ldrb	r0, [r3, #0]
 800339e:	47a0      	blx	r4
 80033a0:	e7b0      	b.n	8003304 <eMBPoll+0x18>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80033a2:	3401      	adds	r4, #1
 80033a4:	2c10      	cmp	r4, #16
 80033a6:	d1d5      	bne.n	8003354 <eMBPoll+0x68>
 80033a8:	e7e0      	b.n	800336c <eMBPoll+0x80>
        return MB_EILLSTATE;
 80033aa:	2406      	movs	r4, #6
 80033ac:	e7b2      	b.n	8003314 <eMBPoll+0x28>
 80033ae:	bf00      	nop
 80033b0:	20000008 	.word	0x20000008
 80033b4:	200007e0 	.word	0x200007e0
 80033b8:	200007c4 	.word	0x200007c4
 80033bc:	200007e2 	.word	0x200007e2
 80033c0:	200007dc 	.word	0x200007dc
 80033c4:	200007d9 	.word	0x200007d9
 80033c8:	200007c2 	.word	0x200007c2
 80033cc:	200007d8 	.word	0x200007d8
 80033d0:	2000000c 	.word	0x2000000c
 80033d4:	200007c8 	.word	0x200007c8

080033d8 <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
 80033d8:	4b02      	ldr	r3, [pc, #8]	; (80033e4 <xMBPortEventInit+0xc>)
 80033da:	2200      	movs	r2, #0
 80033dc:	701a      	strb	r2, [r3, #0]
    return TRUE;
}
 80033de:	2001      	movs	r0, #1
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	200007e5 	.word	0x200007e5

080033e8 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
 80033e8:	4a03      	ldr	r2, [pc, #12]	; (80033f8 <xMBPortEventPost+0x10>)
 80033ea:	2301      	movs	r3, #1
 80033ec:	7013      	strb	r3, [r2, #0]
    eQueuedEvent = eEvent;
 80033ee:	4a03      	ldr	r2, [pc, #12]	; (80033fc <xMBPortEventPost+0x14>)
 80033f0:	7010      	strb	r0, [r2, #0]
    return TRUE;
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	200007e5 	.word	0x200007e5
 80033fc:	200007e4 	.word	0x200007e4

08003400 <xMBPortEventGet>:
BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
 8003400:	4a05      	ldr	r2, [pc, #20]	; (8003418 <xMBPortEventGet+0x18>)
 8003402:	7813      	ldrb	r3, [r2, #0]
 8003404:	b12b      	cbz	r3, 8003412 <xMBPortEventGet+0x12>
    {
        *eEvent = eQueuedEvent;
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <xMBPortEventGet+0x1c>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	7003      	strb	r3, [r0, #0]
        xEventInQueue = FALSE;
 800340c:	2300      	movs	r3, #0
 800340e:	7013      	strb	r3, [r2, #0]
        xEventHappened = TRUE;
 8003410:	2301      	movs	r3, #1
    }
    return xEventHappened;
}
 8003412:	4618      	mov	r0, r3
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	200007e5 	.word	0x200007e5
 800341c:	200007e4 	.word	0x200007e4

08003420 <vMBPortSerialEnable>:
extern UART_HandleTypeDef huart1;

/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8003420:	4b0a      	ldr	r3, [pc, #40]	; (800344c <vMBPortSerialEnable+0x2c>)
    /* If xRXEnable enable serial receive interrupts. If xTxENable enable
     * transmitter empty interrupts.
     */
	if (xRxEnable) {
 8003422:	b158      	cbz	r0, 800343c <vMBPortSerialEnable+0x1c>
	  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	6802      	ldr	r2, [r0, #0]
 8003428:	f042 0220 	orr.w	r2, r2, #32
	} else {
	  __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 800342c:	6002      	str	r2, [r0, #0]
	}

	if (xTxEnable) {
	  __HAL_UART_ENABLE_IT(&huart1, UART_IT_TXE);
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	6813      	ldr	r3, [r2, #0]
	if (xTxEnable) {
 8003432:	b141      	cbz	r1, 8003446 <vMBPortSerialEnable+0x26>
	  __HAL_UART_ENABLE_IT(&huart1, UART_IT_TXE);
 8003434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	} else {
	  __HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE);
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	4770      	bx	lr
	  __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 800343c:	6818      	ldr	r0, [r3, #0]
 800343e:	6802      	ldr	r2, [r0, #0]
 8003440:	f022 0220 	bic.w	r2, r2, #32
 8003444:	e7f2      	b.n	800342c <vMBPortSerialEnable+0xc>
	  __HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE);
 8003446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800344a:	e7f5      	b.n	8003438 <vMBPortSerialEnable+0x18>
 800344c:	20001fc4 	.word	0x20001fc4

08003450 <xMBPortSerialInit>:
	/*
	  Do nothing, Initialization is handled by MX_USART1_UART_Init()
	  Fixed port, baudrate, databit and parity
	  */
	return TRUE;
}
 8003450:	2001      	movs	r0, #1
 8003452:	4770      	bx	lr

08003454 <xMBPortSerialPutByte>:

BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 8003454:	b507      	push	{r0, r1, r2, lr}
 8003456:	a902      	add	r1, sp, #8
    /* Put a byte in the UARTs transmit buffer. This function is called
     * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
     * called. */
	return (HAL_OK == HAL_UART_Transmit(&huart1, (uint8_t*)&ucByte, 1, 10));
 8003458:	230a      	movs	r3, #10
{
 800345a:	f801 0d01 	strb.w	r0, [r1, #-1]!
	return (HAL_OK == HAL_UART_Transmit(&huart1, (uint8_t*)&ucByte, 1, 10));
 800345e:	2201      	movs	r2, #1
 8003460:	4804      	ldr	r0, [pc, #16]	; (8003474 <xMBPortSerialPutByte+0x20>)
 8003462:	f7ff fc6a 	bl	8002d3a <HAL_UART_Transmit>
}
 8003466:	fab0 f080 	clz	r0, r0
 800346a:	0940      	lsrs	r0, r0, #5
 800346c:	b003      	add	sp, #12
 800346e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003472:	bf00      	nop
 8003474:	20001fc4 	.word	0x20001fc4

08003478 <xMBPortSerialGetByte>:
xMBPortSerialGetByte( CHAR * pucByte )
{
    /* Return the byte in the UARTs receive buffer. This function is called
     * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
     */
	*pucByte = (uint8_t)(huart1.Instance->RDR & (uint8_t)0x00FF);
 8003478:	4b02      	ldr	r3, [pc, #8]	; (8003484 <xMBPortSerialGetByte+0xc>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800347e:	7003      	strb	r3, [r0, #0]
    return TRUE;
}
 8003480:	2001      	movs	r0, #1
 8003482:	4770      	bx	lr
 8003484:	20001fc4 	.word	0x20001fc4

08003488 <xMBPortTimersInit>:
uint16_t downcounter = 0;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 8003488:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	TIM_MasterConfigTypeDef sMasterConfig;

	htim7.Instance = TIM7;
 800348a:	4d11      	ldr	r5, [pc, #68]	; (80034d0 <xMBPortTimersInit+0x48>)
 800348c:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <xMBPortTimersInit+0x4c>)
 800348e:	602b      	str	r3, [r5, #0]
{
 8003490:	4606      	mov	r6, r0
	htim7.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / 1000000) - 1;
 8003492:	f7fe fec5 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
 8003496:	4b10      	ldr	r3, [pc, #64]	; (80034d8 <xMBPortTimersInit+0x50>)
 8003498:	fbb0 f0f3 	udiv	r0, r0, r3
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim7.Init.Period = 50 - 1;
 800349c:	2331      	movs	r3, #49	; 0x31
	htim7.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / 1000000) - 1;
 800349e:	3801      	subs	r0, #1
	htim7.Init.Period = 50 - 1;
 80034a0:	60eb      	str	r3, [r5, #12]

	timeout = usTim1Timerout50us;
 80034a2:	4b0e      	ldr	r3, [pc, #56]	; (80034dc <xMBPortTimersInit+0x54>)
	htim7.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / 1000000) - 1;
 80034a4:	6068      	str	r0, [r5, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034a6:	2400      	movs	r4, #0

	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80034a8:	4628      	mov	r0, r5
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034aa:	60ac      	str	r4, [r5, #8]
	timeout = usTim1Timerout50us;
 80034ac:	801e      	strh	r6, [r3, #0]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80034ae:	f7ff f975 	bl	800279c <HAL_TIM_Base_Init>
 80034b2:	b958      	cbnz	r0, 80034cc <xMBPortTimersInit+0x44>
	{
	  return FALSE;
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80034b4:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034b6:	9003      	str	r0, [sp, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80034b8:	a901      	add	r1, sp, #4
 80034ba:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80034bc:	9301      	str	r3, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80034be:	f7ff f987 	bl	80027d0 <HAL_TIMEx_MasterConfigSynchronization>
	  return FALSE;
 80034c2:	fab0 f080 	clz	r0, r0
 80034c6:	0940      	lsrs	r0, r0, #5
	{
	  return FALSE;
	}

	return TRUE;
}
 80034c8:	b004      	add	sp, #16
 80034ca:	bd70      	pop	{r4, r5, r6, pc}
	  return FALSE;
 80034cc:	4620      	mov	r0, r4
 80034ce:	e7fb      	b.n	80034c8 <xMBPortTimersInit+0x40>
 80034d0:	200031b0 	.word	0x200031b0
 80034d4:	40001400 	.word	0x40001400
 80034d8:	000f4240 	.word	0x000f4240
 80034dc:	200007e8 	.word	0x200007e8

080034e0 <vMBPortTimersEnable>:

inline void
vMBPortTimersEnable(  )
{
	/* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
	downcounter = timeout;
 80034e0:	4b03      	ldr	r3, [pc, #12]	; (80034f0 <vMBPortTimersEnable+0x10>)
	HAL_TIM_Base_Start_IT(&htim7);
 80034e2:	4804      	ldr	r0, [pc, #16]	; (80034f4 <vMBPortTimersEnable+0x14>)
	downcounter = timeout;
 80034e4:	881a      	ldrh	r2, [r3, #0]
 80034e6:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <vMBPortTimersEnable+0x18>)
 80034e8:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7);
 80034ea:	f7ff b80d 	b.w	8002508 <HAL_TIM_Base_Start_IT>
 80034ee:	bf00      	nop
 80034f0:	200007e8 	.word	0x200007e8
 80034f4:	200031b0 	.word	0x200031b0
 80034f8:	200007e6 	.word	0x200007e6

080034fc <vMBPortTimersDisable>:

inline void
vMBPortTimersDisable(  )
{
    /* Disable any pending timers. */
	HAL_TIM_Base_Stop_IT(&htim7);
 80034fc:	4801      	ldr	r0, [pc, #4]	; (8003504 <vMBPortTimersDisable+0x8>)
 80034fe:	f7ff b819 	b.w	8002534 <HAL_TIM_Base_Stop_IT>
 8003502:	bf00      	nop
 8003504:	200031b0 	.word	0x200031b0

08003508 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8003508:	b570      	push	{r4, r5, r6, lr}
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
 800350a:	23ff      	movs	r3, #255	; 0xff
    int             iIndex;

    while( usLen-- )
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 800350c:	4d07      	ldr	r5, [pc, #28]	; (800352c <usMBCRC16+0x24>)
        ucCRCHi = aucCRCLo[iIndex];
 800350e:	4e08      	ldr	r6, [pc, #32]	; (8003530 <usMBCRC16+0x28>)
 8003510:	4401      	add	r1, r0
    UCHAR           ucCRCHi = 0xFF;
 8003512:	461c      	mov	r4, r3
    while( usLen-- )
 8003514:	4288      	cmp	r0, r1
 8003516:	d102      	bne.n	800351e <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
}
 8003518:	ea43 2004 	orr.w	r0, r3, r4, lsl #8
 800351c:	bd70      	pop	{r4, r5, r6, pc}
        iIndex = ucCRCLo ^ *( pucFrame++ );
 800351e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003522:	405a      	eors	r2, r3
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8003524:	5cab      	ldrb	r3, [r5, r2]
 8003526:	4063      	eors	r3, r4
        ucCRCHi = aucCRCLo[iIndex];
 8003528:	5cb4      	ldrb	r4, [r6, r2]
 800352a:	e7f3      	b.n	8003514 <usMBCRC16+0xc>
 800352c:	08009b88 	.word	0x08009b88
 8003530:	08009c88 	.word	0x08009c88

08003534 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8003534:	b510      	push	{r4, lr}
 8003536:	4614      	mov	r4, r2
 8003538:	4608      	mov	r0, r1

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 800353a:	2208      	movs	r2, #8
 800353c:	4621      	mov	r1, r4
 800353e:	f7ff ff87 	bl	8003450 <xMBPortSerialInit>
 8003542:	2801      	cmp	r0, #1
 8003544:	d10c      	bne.n	8003560 <eMBRTUInit+0x2c>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 8003546:	f5b4 4f96 	cmp.w	r4, #19200	; 0x4b00
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 800354a:	bf97      	itett	ls
 800354c:	4806      	ldrls	r0, [pc, #24]	; (8003568 <eMBRTUInit+0x34>)
            usTimerT35_50us = 35;       /* 1800us. */
 800354e:	2023      	movhi	r0, #35	; 0x23
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8003550:	0064      	lslls	r4, r4, #1
 8003552:	fbb0 f0f4 	udivls	r0, r0, r4
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8003556:	b280      	uxth	r0, r0
 8003558:	f7ff ff96 	bl	8003488 <xMBPortTimersInit>
 800355c:	2801      	cmp	r0, #1
 800355e:	d001      	beq.n	8003564 <eMBRTUInit+0x30>
        {
            eStatus = MB_EPORTERR;
 8003560:	2003      	movs	r0, #3
 8003562:	bd10      	pop	{r4, pc}
    eMBErrorCode    eStatus = MB_ENOERR;
 8003564:	2000      	movs	r0, #0
        }
    }
    EXIT_CRITICAL_SECTION(  );

    return eStatus;
}
 8003566:	bd10      	pop	{r4, pc}
 8003568:	00177fa0 	.word	0x00177fa0

0800356c <eMBRTUStart>:

void
eMBRTUStart( void )
{
 800356c:	b508      	push	{r3, lr}
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 800356e:	4b05      	ldr	r3, [pc, #20]	; (8003584 <eMBRTUStart+0x18>)
 8003570:	2100      	movs	r1, #0
    vMBPortSerialEnable( TRUE, FALSE );
 8003572:	2001      	movs	r0, #1
    eRcvState = STATE_RX_INIT;
 8003574:	7019      	strb	r1, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 8003576:	f7ff ff53 	bl	8003420 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );

    EXIT_CRITICAL_SECTION(  );
}
 800357a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    vMBPortTimersEnable(  );
 800357e:	f7ff bfaf 	b.w	80034e0 <vMBPortTimersEnable>
 8003582:	bf00      	nop
 8003584:	200007ea 	.word	0x200007ea

08003588 <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8003588:	b508      	push	{r3, lr}
    ENTER_CRITICAL_SECTION(  );
    vMBPortSerialEnable( FALSE, FALSE );
 800358a:	2100      	movs	r1, #0
 800358c:	4608      	mov	r0, r1
 800358e:	f7ff ff47 	bl	8003420 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
    EXIT_CRITICAL_SECTION(  );
}
 8003592:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    vMBPortTimersDisable(  );
 8003596:	f7ff bfb1 	b.w	80034fc <vMBPortTimersDisable>
	...

0800359c <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 800359c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 80035a0:	4d13      	ldr	r5, [pc, #76]	; (80035f0 <eMBRTUReceive+0x54>)
 80035a2:	882b      	ldrh	r3, [r5, #0]
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2bff      	cmp	r3, #255	; 0xff
{
 80035a8:	4680      	mov	r8, r0
 80035aa:	460e      	mov	r6, r1
 80035ac:	4617      	mov	r7, r2
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 80035ae:	d905      	bls.n	80035bc <eMBRTUReceive+0x20>
 80035b0:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <eMBRTUReceive+0x58>)
 80035b2:	4a11      	ldr	r2, [pc, #68]	; (80035f8 <eMBRTUReceive+0x5c>)
 80035b4:	4811      	ldr	r0, [pc, #68]	; (80035fc <eMBRTUReceive+0x60>)
 80035b6:	219c      	movs	r1, #156	; 0x9c
 80035b8:	f002 f84e 	bl	8005658 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 80035bc:	882b      	ldrh	r3, [r5, #0]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2b03      	cmp	r3, #3
 80035c2:	d802      	bhi.n	80035ca <eMBRTUReceive+0x2e>
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
        xFrameReceived = TRUE;
    }
    else
    {
        eStatus = MB_EIO;
 80035c4:	2005      	movs	r0, #5
 80035c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 80035ca:	8829      	ldrh	r1, [r5, #0]
 80035cc:	4c0c      	ldr	r4, [pc, #48]	; (8003600 <eMBRTUReceive+0x64>)
 80035ce:	b289      	uxth	r1, r1
 80035d0:	4620      	mov	r0, r4
 80035d2:	f7ff ff99 	bl	8003508 <usMBCRC16>
 80035d6:	2800      	cmp	r0, #0
 80035d8:	d1f4      	bne.n	80035c4 <eMBRTUReceive+0x28>
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 80035da:	f814 2b01 	ldrb.w	r2, [r4], #1
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 80035de:	8829      	ldrh	r1, [r5, #0]
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 80035e0:	f888 2000 	strb.w	r2, [r8]
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 80035e4:	3903      	subs	r1, #3
 80035e6:	8039      	strh	r1, [r7, #0]
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 80035e8:	6034      	str	r4, [r6, #0]
    }

    EXIT_CRITICAL_SECTION(  );
    return eStatus;
}
 80035ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035ee:	bf00      	nop
 80035f0:	200007f0 	.word	0x200007f0
 80035f4:	08009dcf 	.word	0x08009dcf
 80035f8:	08009d88 	.word	0x08009d88
 80035fc:	08009df4 	.word	0x08009df4
 8003600:	20001e08 	.word	0x20001e08

08003604 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8003604:	b538      	push	{r3, r4, r5, lr}
 8003606:	4603      	mov	r3, r0

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 8003608:	4817      	ldr	r0, [pc, #92]	; (8003668 <eMBRTUSend+0x64>)
 800360a:	7805      	ldrb	r5, [r0, #0]
 800360c:	b2ed      	uxtb	r5, r5
 800360e:	2d01      	cmp	r5, #1
 8003610:	d127      	bne.n	8003662 <eMBRTUSend+0x5e>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8003612:	4c16      	ldr	r4, [pc, #88]	; (800366c <eMBRTUSend+0x68>)
 8003614:	1e48      	subs	r0, r1, #1
 8003616:	6020      	str	r0, [r4, #0]
        usSndBufferCount = 1;
 8003618:	4c15      	ldr	r4, [pc, #84]	; (8003670 <eMBRTUSend+0x6c>)
 800361a:	8025      	strh	r5, [r4, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 800361c:	f801 3c01 	strb.w	r3, [r1, #-1]
        usSndBufferCount += usLength;
 8003620:	8823      	ldrh	r3, [r4, #0]
 8003622:	fa12 f283 	uxtah	r2, r2, r3
 8003626:	b292      	uxth	r2, r2
 8003628:	8022      	strh	r2, [r4, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 800362a:	8821      	ldrh	r1, [r4, #0]
 800362c:	b289      	uxth	r1, r1
 800362e:	f7ff ff6b 	bl	8003508 <usMBCRC16>
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8003632:	8823      	ldrh	r3, [r4, #0]
 8003634:	490f      	ldr	r1, [pc, #60]	; (8003674 <eMBRTUSend+0x70>)
 8003636:	b29b      	uxth	r3, r3
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	b292      	uxth	r2, r2
 800363c:	8022      	strh	r2, [r4, #0]
 800363e:	b2c2      	uxtb	r2, r0
 8003640:	54ca      	strb	r2, [r1, r3]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8003642:	8823      	ldrh	r3, [r4, #0]
 8003644:	b29b      	uxth	r3, r3
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	b292      	uxth	r2, r2
 800364a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800364e:	8022      	strh	r2, [r4, #0]
 8003650:	54c8      	strb	r0, [r1, r3]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 8003652:	4b09      	ldr	r3, [pc, #36]	; (8003678 <eMBRTUSend+0x74>)
        vMBPortSerialEnable( FALSE, TRUE );
 8003654:	4629      	mov	r1, r5
 8003656:	2000      	movs	r0, #0
        eSndState = STATE_TX_XMIT;
 8003658:	701d      	strb	r5, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 800365a:	f7ff fee1 	bl	8003420 <vMBPortSerialEnable>
    eMBErrorCode    eStatus = MB_ENOERR;
 800365e:	2000      	movs	r0, #0
 8003660:	bd38      	pop	{r3, r4, r5, pc}
    }
    else
    {
        eStatus = MB_EIO;
 8003662:	2005      	movs	r0, #5
    }
    EXIT_CRITICAL_SECTION(  );
    return eStatus;
}
 8003664:	bd38      	pop	{r3, r4, r5, pc}
 8003666:	bf00      	nop
 8003668:	200007ea 	.word	0x200007ea
 800366c:	200007ec 	.word	0x200007ec
 8003670:	200007f2 	.word	0x200007f2
 8003674:	20001e08 	.word	0x20001e08
 8003678:	200007eb 	.word	0x200007eb

0800367c <xMBRTUReceiveFSM>:
xMBRTUReceiveFSM( void )
{
    BOOL            xTaskNeedSwitch = FALSE;
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 800367c:	4b1d      	ldr	r3, [pc, #116]	; (80036f4 <xMBRTUReceiveFSM+0x78>)
 800367e:	781b      	ldrb	r3, [r3, #0]
{
 8003680:	b507      	push	{r0, r1, r2, lr}
    assert( eSndState == STATE_TX_IDLE );
 8003682:	b12b      	cbz	r3, 8003690 <xMBRTUReceiveFSM+0x14>
 8003684:	4b1c      	ldr	r3, [pc, #112]	; (80036f8 <xMBRTUReceiveFSM+0x7c>)
 8003686:	4a1d      	ldr	r2, [pc, #116]	; (80036fc <xMBRTUReceiveFSM+0x80>)
 8003688:	481d      	ldr	r0, [pc, #116]	; (8003700 <xMBRTUReceiveFSM+0x84>)
 800368a:	21e6      	movs	r1, #230	; 0xe6
 800368c:	f001 ffe4 	bl	8005658 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 8003690:	f10d 0007 	add.w	r0, sp, #7
 8003694:	f7ff fef0 	bl	8003478 <xMBPortSerialGetByte>

    switch ( eRcvState )
 8003698:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <xMBRTUReceiveFSM+0x88>)
 800369a:	781a      	ldrb	r2, [r3, #0]
 800369c:	2a03      	cmp	r2, #3
 800369e:	d822      	bhi.n	80036e6 <xMBRTUReceiveFSM+0x6a>
 80036a0:	e8df f002 	tbb	[pc, r2]
 80036a4:	1f11021f 	.word	0x1f11021f
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 80036a8:	4917      	ldr	r1, [pc, #92]	; (8003708 <xMBRTUReceiveFSM+0x8c>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	800a      	strh	r2, [r1, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 80036ae:	880a      	ldrh	r2, [r1, #0]
 80036b0:	b292      	uxth	r2, r2
 80036b2:	1c50      	adds	r0, r2, #1
 80036b4:	b280      	uxth	r0, r0
 80036b6:	8008      	strh	r0, [r1, #0]
 80036b8:	4914      	ldr	r1, [pc, #80]	; (800370c <xMBRTUReceiveFSM+0x90>)
 80036ba:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80036be:	5488      	strb	r0, [r1, r2]
        eRcvState = STATE_RX_RCV;
 80036c0:	2202      	movs	r2, #2
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 80036c2:	701a      	strb	r2, [r3, #0]
 80036c4:	e00d      	b.n	80036e2 <xMBRTUReceiveFSM+0x66>
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 80036c6:	4a10      	ldr	r2, [pc, #64]	; (8003708 <xMBRTUReceiveFSM+0x8c>)
 80036c8:	8811      	ldrh	r1, [r2, #0]
 80036ca:	b289      	uxth	r1, r1
 80036cc:	29ff      	cmp	r1, #255	; 0xff
 80036ce:	d80e      	bhi.n	80036ee <xMBRTUReceiveFSM+0x72>
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 80036d0:	8813      	ldrh	r3, [r2, #0]
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	1c59      	adds	r1, r3, #1
 80036d6:	b289      	uxth	r1, r1
 80036d8:	8011      	strh	r1, [r2, #0]
 80036da:	4a0c      	ldr	r2, [pc, #48]	; (800370c <xMBRTUReceiveFSM+0x90>)
 80036dc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80036e0:	54d1      	strb	r1, [r2, r3]
        }
        vMBPortTimersEnable(  );
 80036e2:	f7ff fefd 	bl	80034e0 <vMBPortTimersEnable>
        break;
    }
    return xTaskNeedSwitch;
}
 80036e6:	2000      	movs	r0, #0
 80036e8:	b003      	add	sp, #12
 80036ea:	f85d fb04 	ldr.w	pc, [sp], #4
            eRcvState = STATE_RX_ERROR;
 80036ee:	2203      	movs	r2, #3
 80036f0:	e7e7      	b.n	80036c2 <xMBRTUReceiveFSM+0x46>
 80036f2:	bf00      	nop
 80036f4:	200007eb 	.word	0x200007eb
 80036f8:	08009e15 	.word	0x08009e15
 80036fc:	08009d96 	.word	0x08009d96
 8003700:	08009df4 	.word	0x08009df4
 8003704:	200007ea 	.word	0x200007ea
 8003708:	200007f0 	.word	0x200007f0
 800370c:	20001e08 	.word	0x20001e08

08003710 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8003710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BOOL            xNeedPoll = FALSE;

    assert( eRcvState == STATE_RX_IDLE );
 8003712:	4b1a      	ldr	r3, [pc, #104]	; (800377c <xMBRTUTransmitFSM+0x6c>)
 8003714:	7818      	ldrb	r0, [r3, #0]
 8003716:	b2c0      	uxtb	r0, r0
 8003718:	2801      	cmp	r0, #1
 800371a:	d006      	beq.n	800372a <xMBRTUTransmitFSM+0x1a>
 800371c:	4b18      	ldr	r3, [pc, #96]	; (8003780 <xMBRTUTransmitFSM+0x70>)
 800371e:	4a19      	ldr	r2, [pc, #100]	; (8003784 <xMBRTUTransmitFSM+0x74>)
 8003720:	4819      	ldr	r0, [pc, #100]	; (8003788 <xMBRTUTransmitFSM+0x78>)
 8003722:	f240 1121 	movw	r1, #289	; 0x121
 8003726:	f001 ff97 	bl	8005658 <__assert_func>

    switch ( eSndState )
 800372a:	4f18      	ldr	r7, [pc, #96]	; (800378c <xMBRTUTransmitFSM+0x7c>)
 800372c:	783b      	ldrb	r3, [r7, #0]
 800372e:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8003732:	b11b      	cbz	r3, 800373c <xMBRTUTransmitFSM+0x2c>
 8003734:	2e01      	cmp	r6, #1
 8003736:	d005      	beq.n	8003744 <xMBRTUTransmitFSM+0x34>
    BOOL            xNeedPoll = FALSE;
 8003738:	2500      	movs	r5, #0
 800373a:	e01d      	b.n	8003778 <xMBRTUTransmitFSM+0x68>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 800373c:	4631      	mov	r1, r6
 800373e:	f7ff fe6f 	bl	8003420 <vMBPortSerialEnable>
 8003742:	e7f9      	b.n	8003738 <xMBRTUTransmitFSM+0x28>
        break;

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 8003744:	4d12      	ldr	r5, [pc, #72]	; (8003790 <xMBRTUTransmitFSM+0x80>)
 8003746:	882c      	ldrh	r4, [r5, #0]
 8003748:	b2a4      	uxth	r4, r4
 800374a:	b164      	cbz	r4, 8003766 <xMBRTUTransmitFSM+0x56>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 800374c:	4c11      	ldr	r4, [pc, #68]	; (8003794 <xMBRTUTransmitFSM+0x84>)
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	7818      	ldrb	r0, [r3, #0]
 8003752:	f7ff fe7f 	bl	8003454 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 8003756:	6823      	ldr	r3, [r4, #0]
 8003758:	3301      	adds	r3, #1
 800375a:	6023      	str	r3, [r4, #0]
            usSndBufferCount--;
 800375c:	882b      	ldrh	r3, [r5, #0]
 800375e:	3b01      	subs	r3, #1
 8003760:	b29b      	uxth	r3, r3
 8003762:	802b      	strh	r3, [r5, #0]
 8003764:	e7e8      	b.n	8003738 <xMBRTUTransmitFSM+0x28>
        }
        else
        {
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 8003766:	2003      	movs	r0, #3
 8003768:	f7ff fe3e 	bl	80033e8 <xMBPortEventPost>
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
 800376c:	4621      	mov	r1, r4
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 800376e:	4605      	mov	r5, r0
            vMBPortSerialEnable( TRUE, FALSE );
 8003770:	4630      	mov	r0, r6
 8003772:	f7ff fe55 	bl	8003420 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 8003776:	703c      	strb	r4, [r7, #0]
        }
        break;
    }

    return xNeedPoll;
}
 8003778:	4628      	mov	r0, r5
 800377a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800377c:	200007ea 	.word	0x200007ea
 8003780:	08009e93 	.word	0x08009e93
 8003784:	08009da7 	.word	0x08009da7
 8003788:	08009df4 	.word	0x08009df4
 800378c:	200007eb 	.word	0x200007eb
 8003790:	200007f2 	.word	0x200007f2
 8003794:	200007ec 	.word	0x200007ec

08003798 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8003798:	b538      	push	{r3, r4, r5, lr}
    BOOL            xNeedPoll = FALSE;

    switch ( eRcvState )
 800379a:	4b14      	ldr	r3, [pc, #80]	; (80037ec <xMBRTUTimerT35Expired+0x54>)
 800379c:	7818      	ldrb	r0, [r3, #0]
 800379e:	b2c0      	uxtb	r0, r0
 80037a0:	2802      	cmp	r0, #2
 80037a2:	461d      	mov	r5, r3
 80037a4:	d00b      	beq.n	80037be <xMBRTUTimerT35Expired+0x26>
 80037a6:	2803      	cmp	r0, #3
 80037a8:	d01d      	beq.n	80037e6 <xMBRTUTimerT35Expired+0x4e>
 80037aa:	b950      	cbnz	r0, 80037c2 <xMBRTUTimerT35Expired+0x2a>
        break;

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 80037ac:	f7ff fe1c 	bl	80033e8 <xMBPortEventPost>
 80037b0:	4604      	mov	r4, r0
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 80037b2:	f7ff fea3 	bl	80034fc <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 80037b6:	2301      	movs	r3, #1
 80037b8:	702b      	strb	r3, [r5, #0]

    return xNeedPoll;
}
 80037ba:	4620      	mov	r0, r4
 80037bc:	bd38      	pop	{r3, r4, r5, pc}
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 80037be:	2001      	movs	r0, #1
 80037c0:	e7f4      	b.n	80037ac <xMBRTUTimerT35Expired+0x14>
        assert( ( eRcvState == STATE_RX_INIT ) ||
 80037c2:	781a      	ldrb	r2, [r3, #0]
 80037c4:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 80037c8:	2a00      	cmp	r2, #0
 80037ca:	d0f2      	beq.n	80037b2 <xMBRTUTimerT35Expired+0x1a>
 80037cc:	781a      	ldrb	r2, [r3, #0]
 80037ce:	2a02      	cmp	r2, #2
 80037d0:	d009      	beq.n	80037e6 <xMBRTUTimerT35Expired+0x4e>
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	d006      	beq.n	80037e6 <xMBRTUTimerT35Expired+0x4e>
 80037d8:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <xMBRTUTimerT35Expired+0x58>)
 80037da:	4a06      	ldr	r2, [pc, #24]	; (80037f4 <xMBRTUTimerT35Expired+0x5c>)
 80037dc:	4806      	ldr	r0, [pc, #24]	; (80037f8 <xMBRTUTimerT35Expired+0x60>)
 80037de:	f240 115b 	movw	r1, #347	; 0x15b
 80037e2:	f001 ff39 	bl	8005658 <__assert_func>
    BOOL            xNeedPoll = FALSE;
 80037e6:	2400      	movs	r4, #0
 80037e8:	e7e3      	b.n	80037b2 <xMBRTUTimerT35Expired+0x1a>
 80037ea:	bf00      	nop
 80037ec:	200007ea 	.word	0x200007ea
 80037f0:	08009e30 	.word	0x08009e30
 80037f4:	08009db9 	.word	0x08009db9
 80037f8:	08009df4 	.word	0x08009df4

080037fc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80037fc:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80037fe:	f000 fb49 	bl	8003e94 <vTaskStartScheduler>
  
  return osOK;
}
 8003802:	2000      	movs	r0, #0
 8003804:	bd08      	pop	{r3, pc}

08003806 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003806:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003808:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 800380c:	6986      	ldr	r6, [r0, #24]
 800380e:	6902      	ldr	r2, [r0, #16]
{
 8003810:	460b      	mov	r3, r1
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003812:	e890 0022 	ldmia.w	r0, {r1, r5}
  if (priority != osPriorityError) {
 8003816:	2c84      	cmp	r4, #132	; 0x84
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003818:	9602      	str	r6, [sp, #8]
 800381a:	6940      	ldr	r0, [r0, #20]
 800381c:	9001      	str	r0, [sp, #4]
    fpriority += (priority - osPriorityIdle);
 800381e:	bf14      	ite	ne
 8003820:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003822:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003824:	9400      	str	r4, [sp, #0]
 8003826:	4628      	mov	r0, r5
 8003828:	f000 fa58 	bl	8003cdc <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 800382c:	b004      	add	sp, #16
 800382e:	bd70      	pop	{r4, r5, r6, pc}

08003830 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003830:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003832:	2800      	cmp	r0, #0
 8003834:	bf08      	it	eq
 8003836:	2001      	moveq	r0, #1
 8003838:	f000 fc74 	bl	8004124 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800383c:	2000      	movs	r0, #0
 800383e:	bd08      	pop	{r3, pc}

08003840 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003840:	f100 0308 	add.w	r3, r0, #8
 8003844:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800384a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800384c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800384e:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003850:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003852:	6003      	str	r3, [r0, #0]
 8003854:	4770      	bx	lr

08003856 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003856:	2300      	movs	r3, #0
 8003858:	6103      	str	r3, [r0, #16]
 800385a:	4770      	bx	lr

0800385c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800385c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800385e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003868:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800386a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800386c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800386e:	3301      	adds	r3, #1
 8003870:	6003      	str	r3, [r0, #0]
 8003872:	4770      	bx	lr

08003874 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003874:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003876:	1c53      	adds	r3, r2, #1
{
 8003878:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 800387a:	d10a      	bne.n	8003892 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800387c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003882:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003884:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003886:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003888:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800388a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800388c:	3301      	adds	r3, #1
 800388e:	6003      	str	r3, [r0, #0]
 8003890:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003892:	f100 0308 	add.w	r3, r0, #8
 8003896:	685c      	ldr	r4, [r3, #4]
 8003898:	6825      	ldr	r5, [r4, #0]
 800389a:	42aa      	cmp	r2, r5
 800389c:	d3ef      	bcc.n	800387e <vListInsert+0xa>
 800389e:	4623      	mov	r3, r4
 80038a0:	e7f9      	b.n	8003896 <vListInsert+0x22>

080038a2 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038a2:	6841      	ldr	r1, [r0, #4]
 80038a4:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80038a6:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038a8:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038aa:	6882      	ldr	r2, [r0, #8]
 80038ac:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038ae:	6859      	ldr	r1, [r3, #4]
 80038b0:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038b2:	bf08      	it	eq
 80038b4:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80038b6:	2200      	movs	r2, #0
 80038b8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	3a01      	subs	r2, #1
 80038be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038c0:	6818      	ldr	r0, [r3, #0]
}
 80038c2:	4770      	bx	lr

080038c4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80038c4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80038c6:	2300      	movs	r3, #0
 80038c8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80038ca:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <prvTaskExitError+0x3c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3301      	adds	r3, #1
 80038d0:	d008      	beq.n	80038e4 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d6:	f383 8811 	msr	BASEPRI, r3
 80038da:	f3bf 8f6f 	isb	sy
 80038de:	f3bf 8f4f 	dsb	sy
 80038e2:	e7fe      	b.n	80038e2 <prvTaskExitError+0x1e>
 80038e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e8:	f383 8811 	msr	BASEPRI, r3
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80038f4:	9b01      	ldr	r3, [sp, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0fc      	beq.n	80038f4 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80038fa:	b002      	add	sp, #8
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	2000008c 	.word	0x2000008c

08003904 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003904:	4808      	ldr	r0, [pc, #32]	; (8003928 <prvPortStartFirstTask+0x24>)
 8003906:	6800      	ldr	r0, [r0, #0]
 8003908:	6800      	ldr	r0, [r0, #0]
 800390a:	f380 8808 	msr	MSP, r0
 800390e:	f04f 0000 	mov.w	r0, #0
 8003912:	f380 8814 	msr	CONTROL, r0
 8003916:	b662      	cpsie	i
 8003918:	b661      	cpsie	f
 800391a:	f3bf 8f4f 	dsb	sy
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	df00      	svc	0
 8003924:	bf00      	nop
 8003926:	0000      	.short	0x0000
 8003928:	e000ed08 	.word	0xe000ed08

0800392c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800392c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800393c <vPortEnableVFP+0x10>
 8003930:	6801      	ldr	r1, [r0, #0]
 8003932:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003936:	6001      	str	r1, [r0, #0]
 8003938:	4770      	bx	lr
 800393a:	0000      	.short	0x0000
 800393c:	e000ed88 	.word	0xe000ed88

08003940 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003940:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003944:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003948:	4b07      	ldr	r3, [pc, #28]	; (8003968 <pxPortInitialiseStack+0x28>)
 800394a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800394e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003952:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003956:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800395a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800395e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8003962:	3844      	subs	r0, #68	; 0x44
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	080038c5 	.word	0x080038c5
 800396c:	00000000 	.word	0x00000000

08003970 <SVC_Handler>:
	__asm volatile (
 8003970:	4b07      	ldr	r3, [pc, #28]	; (8003990 <pxCurrentTCBConst2>)
 8003972:	6819      	ldr	r1, [r3, #0]
 8003974:	6808      	ldr	r0, [r1, #0]
 8003976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800397a:	f380 8809 	msr	PSP, r0
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f04f 0000 	mov.w	r0, #0
 8003986:	f380 8811 	msr	BASEPRI, r0
 800398a:	4770      	bx	lr
 800398c:	f3af 8000 	nop.w

08003990 <pxCurrentTCBConst2>:
 8003990:	200007fc 	.word	0x200007fc

08003994 <vPortEnterCritical>:
 8003994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80039a4:	4a0a      	ldr	r2, [pc, #40]	; (80039d0 <vPortEnterCritical+0x3c>)
 80039a6:	6813      	ldr	r3, [r2, #0]
 80039a8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80039aa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80039ac:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80039ae:	d10d      	bne.n	80039cc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80039b0:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <vPortEnterCritical+0x40>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80039b8:	d008      	beq.n	80039cc <vPortEnterCritical+0x38>
 80039ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	e7fe      	b.n	80039ca <vPortEnterCritical+0x36>
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	2000008c 	.word	0x2000008c
 80039d4:	e000ed04 	.word	0xe000ed04

080039d8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80039d8:	4a08      	ldr	r2, [pc, #32]	; (80039fc <vPortExitCritical+0x24>)
 80039da:	6813      	ldr	r3, [r2, #0]
 80039dc:	b943      	cbnz	r3, 80039f0 <vPortExitCritical+0x18>
 80039de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e2:	f383 8811 	msr	BASEPRI, r3
 80039e6:	f3bf 8f6f 	isb	sy
 80039ea:	f3bf 8f4f 	dsb	sy
 80039ee:	e7fe      	b.n	80039ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80039f0:	3b01      	subs	r3, #1
 80039f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80039f4:	b90b      	cbnz	r3, 80039fa <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80039f6:	f383 8811 	msr	BASEPRI, r3
 80039fa:	4770      	bx	lr
 80039fc:	2000008c 	.word	0x2000008c

08003a00 <PendSV_Handler>:
	__asm volatile
 8003a00:	f3ef 8009 	mrs	r0, PSP
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	4b15      	ldr	r3, [pc, #84]	; (8003a60 <pxCurrentTCBConst>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	f01e 0f10 	tst.w	lr, #16
 8003a10:	bf08      	it	eq
 8003a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a1a:	6010      	str	r0, [r2, #0]
 8003a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003a20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003a24:	f380 8811 	msr	BASEPRI, r0
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f000 fb9c 	bl	800416c <vTaskSwitchContext>
 8003a34:	f04f 0000 	mov.w	r0, #0
 8003a38:	f380 8811 	msr	BASEPRI, r0
 8003a3c:	bc09      	pop	{r0, r3}
 8003a3e:	6819      	ldr	r1, [r3, #0]
 8003a40:	6808      	ldr	r0, [r1, #0]
 8003a42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a46:	f01e 0f10 	tst.w	lr, #16
 8003a4a:	bf08      	it	eq
 8003a4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003a50:	f380 8809 	msr	PSP, r0
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	f3af 8000 	nop.w

08003a60 <pxCurrentTCBConst>:
 8003a60:	200007fc 	.word	0x200007fc

08003a64 <xPortSysTickHandler>:
{
 8003a64:	b508      	push	{r3, lr}
	__asm volatile
 8003a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6a:	f383 8811 	msr	BASEPRI, r3
 8003a6e:	f3bf 8f6f 	isb	sy
 8003a72:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8003a76:	f000 fa4b 	bl	8003f10 <xTaskIncrementTick>
 8003a7a:	b118      	cbz	r0, 8003a84 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003a7c:	4b03      	ldr	r3, [pc, #12]	; (8003a8c <xPortSysTickHandler+0x28>)
 8003a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a82:	601a      	str	r2, [r3, #0]
	__asm volatile
 8003a84:	2300      	movs	r3, #0
 8003a86:	f383 8811 	msr	BASEPRI, r3
 8003a8a:	bd08      	pop	{r3, pc}
 8003a8c:	e000ed04 	.word	0xe000ed04

08003a90 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003a90:	4a08      	ldr	r2, [pc, #32]	; (8003ab4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003a92:	4909      	ldr	r1, [pc, #36]	; (8003ab8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003a98:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003a9a:	4b08      	ldr	r3, [pc, #32]	; (8003abc <vPortSetupTimerInterrupt+0x2c>)
 8003a9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aa6:	4906      	ldr	r1, [pc, #24]	; (8003ac0 <vPortSetupTimerInterrupt+0x30>)
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003aac:	2307      	movs	r3, #7
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	e000e010 	.word	0xe000e010
 8003ab8:	e000e018 	.word	0xe000e018
 8003abc:	20000110 	.word	0x20000110
 8003ac0:	e000e014 	.word	0xe000e014

08003ac4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003ac4:	4b39      	ldr	r3, [pc, #228]	; (8003bac <xPortStartScheduler+0xe8>)
 8003ac6:	4a3a      	ldr	r2, [pc, #232]	; (8003bb0 <xPortStartScheduler+0xec>)
{
 8003ac8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003aca:	6819      	ldr	r1, [r3, #0]
 8003acc:	4291      	cmp	r1, r2
 8003ace:	d108      	bne.n	8003ae2 <xPortStartScheduler+0x1e>
	__asm volatile
 8003ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad4:	f383 8811 	msr	BASEPRI, r3
 8003ad8:	f3bf 8f6f 	isb	sy
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	e7fe      	b.n	8003ae0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	4b33      	ldr	r3, [pc, #204]	; (8003bb4 <xPortStartScheduler+0xf0>)
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d108      	bne.n	8003afc <xPortStartScheduler+0x38>
 8003aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	e7fe      	b.n	8003afa <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003afc:	4b2e      	ldr	r3, [pc, #184]	; (8003bb8 <xPortStartScheduler+0xf4>)
 8003afe:	781a      	ldrb	r2, [r3, #0]
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b04:	22ff      	movs	r2, #255	; 0xff
 8003b06:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b08:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b0a:	4a2c      	ldr	r2, [pc, #176]	; (8003bbc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b12:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003b16:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b1a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b1c:	4b28      	ldr	r3, [pc, #160]	; (8003bc0 <xPortStartScheduler+0xfc>)
 8003b1e:	2207      	movs	r2, #7
 8003b20:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b22:	2100      	movs	r1, #0
 8003b24:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003b28:	0600      	lsls	r0, r0, #24
 8003b2a:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 8003b2e:	d40d      	bmi.n	8003b4c <xPortStartScheduler+0x88>
 8003b30:	b101      	cbz	r1, 8003b34 <xPortStartScheduler+0x70>
 8003b32:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	2a03      	cmp	r2, #3
 8003b38:	d011      	beq.n	8003b5e <xPortStartScheduler+0x9a>
 8003b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3e:	f383 8811 	msr	BASEPRI, r3
 8003b42:	f3bf 8f6f 	isb	sy
 8003b46:	f3bf 8f4f 	dsb	sy
 8003b4a:	e7fe      	b.n	8003b4a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003b4c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003b50:	0052      	lsls	r2, r2, #1
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	f88d 2003 	strb.w	r2, [sp, #3]
 8003b58:	2101      	movs	r1, #1
 8003b5a:	4622      	mov	r2, r4
 8003b5c:	e7e2      	b.n	8003b24 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003b5e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003b60:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003b64:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003b66:	9b01      	ldr	r3, [sp, #4]
 8003b68:	4a13      	ldr	r2, [pc, #76]	; (8003bb8 <xPortStartScheduler+0xf4>)
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003b6e:	4b15      	ldr	r3, [pc, #84]	; (8003bc4 <xPortStartScheduler+0x100>)
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003b76:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8003b7e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8003b80:	f7ff ff86 	bl	8003a90 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003b84:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <xPortStartScheduler+0x104>)
 8003b86:	2400      	movs	r4, #0
 8003b88:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8003b8a:	f7ff fecf 	bl	800392c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003b8e:	4a0f      	ldr	r2, [pc, #60]	; (8003bcc <xPortStartScheduler+0x108>)
 8003b90:	6813      	ldr	r3, [r2, #0]
 8003b92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003b96:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8003b98:	f7ff feb4 	bl	8003904 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8003b9c:	f000 fae6 	bl	800416c <vTaskSwitchContext>
	prvTaskExitError();
 8003ba0:	f7ff fe90 	bl	80038c4 <prvTaskExitError>
}
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	b002      	add	sp, #8
 8003ba8:	bd10      	pop	{r4, pc}
 8003baa:	bf00      	nop
 8003bac:	e000ed00 	.word	0xe000ed00
 8003bb0:	410fc271 	.word	0x410fc271
 8003bb4:	410fc270 	.word	0x410fc270
 8003bb8:	e000e400 	.word	0xe000e400
 8003bbc:	200007f4 	.word	0x200007f4
 8003bc0:	200007f8 	.word	0x200007f8
 8003bc4:	e000ed20 	.word	0xe000ed20
 8003bc8:	2000008c 	.word	0x2000008c
 8003bcc:	e000ef34 	.word	0xe000ef34

08003bd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003bd0:	b580      	push	{r7, lr}
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 8003bd2:	4e11      	ldr	r6, [pc, #68]	; (8003c18 <prvIdleTask+0x48>)
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003bd4:	4f11      	ldr	r7, [pc, #68]	; (8003c1c <prvIdleTask+0x4c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bd6:	4c12      	ldr	r4, [pc, #72]	; (8003c20 <prvIdleTask+0x50>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
				--uxCurrentNumberOfTasks;
 8003bd8:	4d12      	ldr	r5, [pc, #72]	; (8003c24 <prvIdleTask+0x54>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	b95b      	cbnz	r3, 8003bf6 <prvIdleTask+0x26>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003bde:	4b12      	ldr	r3, [pc, #72]	; (8003c28 <prvIdleTask+0x58>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d9f8      	bls.n	8003bd8 <prvIdleTask+0x8>
				taskYIELD();
 8003be6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003bea:	6033      	str	r3, [r6, #0]
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	f3bf 8f6f 	isb	sy
 8003bf4:	e7ef      	b.n	8003bd6 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8003bf6:	f7ff fecd 	bl	8003994 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003bfa:	68fb      	ldr	r3, [r7, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bfc:	68d8      	ldr	r0, [r3, #12]
 8003bfe:	3004      	adds	r0, #4
 8003c00:	f7ff fe4f 	bl	80038a2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c04:	682b      	ldr	r3, [r5, #0]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
 8003c10:	f7ff fee2 	bl	80039d8 <vPortExitCritical>
 8003c14:	e7e1      	b.n	8003bda <prvIdleTask+0xa>
 8003c16:	bf00      	nop
 8003c18:	e000ed04 	.word	0xe000ed04
 8003c1c:	20000908 	.word	0x20000908
 8003c20:	20000898 	.word	0x20000898
 8003c24:	20000894 	.word	0x20000894
 8003c28:	20000808 	.word	0x20000808

08003c2c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c2c:	4a06      	ldr	r2, [pc, #24]	; (8003c48 <prvResetNextTaskUnblockTime+0x1c>)
 8003c2e:	6813      	ldr	r3, [r2, #0]
 8003c30:	6819      	ldr	r1, [r3, #0]
 8003c32:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <prvResetNextTaskUnblockTime+0x20>)
 8003c34:	b919      	cbnz	r1, 8003c3e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c3e:	6812      	ldr	r2, [r2, #0]
 8003c40:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c42:	68d2      	ldr	r2, [r2, #12]
 8003c44:	6852      	ldr	r2, [r2, #4]
 8003c46:	e7f8      	b.n	8003c3a <prvResetNextTaskUnblockTime+0xe>
 8003c48:	20000800 	.word	0x20000800
 8003c4c:	200008d4 	.word	0x200008d4

08003c50 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c52:	4b1b      	ldr	r3, [pc, #108]	; (8003cc0 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c54:	4e1b      	ldr	r6, [pc, #108]	; (8003cc4 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8003c56:	681d      	ldr	r5, [r3, #0]
{
 8003c58:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c5a:	6830      	ldr	r0, [r6, #0]
 8003c5c:	3004      	adds	r0, #4
{
 8003c5e:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c60:	f7ff fe1f 	bl	80038a2 <uxListRemove>
 8003c64:	4633      	mov	r3, r6
 8003c66:	b940      	cbnz	r0, 8003c7a <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003c68:	6831      	ldr	r1, [r6, #0]
 8003c6a:	4e17      	ldr	r6, [pc, #92]	; (8003cc8 <prvAddCurrentTaskToDelayedList+0x78>)
 8003c6c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003c6e:	6832      	ldr	r2, [r6, #0]
 8003c70:	2001      	movs	r0, #1
 8003c72:	4088      	lsls	r0, r1
 8003c74:	ea22 0200 	bic.w	r2, r2, r0
 8003c78:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c7a:	1c62      	adds	r2, r4, #1
 8003c7c:	d107      	bne.n	8003c8e <prvAddCurrentTaskToDelayedList+0x3e>
 8003c7e:	b137      	cbz	r7, 8003c8e <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c80:	6819      	ldr	r1, [r3, #0]
 8003c82:	4812      	ldr	r0, [pc, #72]	; (8003ccc <prvAddCurrentTaskToDelayedList+0x7c>)
 8003c84:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003c86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c8a:	f7ff bde7 	b.w	800385c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003c8e:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c90:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8003c92:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c94:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8003c96:	d907      	bls.n	8003ca8 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c98:	4a0d      	ldr	r2, [pc, #52]	; (8003cd0 <prvAddCurrentTaskToDelayedList+0x80>)
 8003c9a:	6810      	ldr	r0, [r2, #0]
 8003c9c:	6819      	ldr	r1, [r3, #0]
}
 8003c9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ca2:	3104      	adds	r1, #4
 8003ca4:	f7ff bde6 	b.w	8003874 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ca8:	4a0a      	ldr	r2, [pc, #40]	; (8003cd4 <prvAddCurrentTaskToDelayedList+0x84>)
 8003caa:	6810      	ldr	r0, [r2, #0]
 8003cac:	6819      	ldr	r1, [r3, #0]
 8003cae:	3104      	adds	r1, #4
 8003cb0:	f7ff fde0 	bl	8003874 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003cb4:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <prvAddCurrentTaskToDelayedList+0x88>)
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8003cba:	bf38      	it	cc
 8003cbc:	601c      	strcc	r4, [r3, #0]
 8003cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cc0:	2000091c 	.word	0x2000091c
 8003cc4:	200007fc 	.word	0x200007fc
 8003cc8:	200008a8 	.word	0x200008a8
 8003ccc:	200008f4 	.word	0x200008f4
 8003cd0:	20000804 	.word	0x20000804
 8003cd4:	20000800 	.word	0x20000800
 8003cd8:	200008d4 	.word	0x200008d4

08003cdc <xTaskCreateStatic>:
	{
 8003cdc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce0:	4680      	mov	r8, r0
 8003ce2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003ce4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003ce6:	4699      	mov	r9, r3
		configASSERT( puxStackBuffer != NULL );
 8003ce8:	b940      	cbnz	r0, 8003cfc <xTaskCreateStatic+0x20>
 8003cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	e7fe      	b.n	8003cfa <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 8003cfc:	b944      	cbnz	r4, 8003d10 <xTaskCreateStatic+0x34>
 8003cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	e7fe      	b.n	8003d0e <xTaskCreateStatic+0x32>
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d10:	2354      	movs	r3, #84	; 0x54
 8003d12:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d14:	9b01      	ldr	r3, [sp, #4]
 8003d16:	2b54      	cmp	r3, #84	; 0x54
 8003d18:	d008      	beq.n	8003d2c <xTaskCreateStatic+0x50>
 8003d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1e:	f383 8811 	msr	BASEPRI, r3
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	f3bf 8f4f 	dsb	sy
 8003d2a:	e7fe      	b.n	8003d2a <xTaskCreateStatic+0x4e>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003d2c:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
 8003d30:	3e01      	subs	r6, #1
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d32:	6320      	str	r0, [r4, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003d34:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8003d38:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003d3a:	f020 0607 	bic.w	r6, r0, #7
 8003d3e:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8003d42:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d44:	7858      	ldrb	r0, [r3, #1]
 8003d46:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8003d4a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8003d4e:	b108      	cbz	r0, 8003d54 <xTaskCreateStatic+0x78>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d50:	428b      	cmp	r3, r1
 8003d52:	d1f7      	bne.n	8003d44 <xTaskCreateStatic+0x68>
 8003d54:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003d56:	2d06      	cmp	r5, #6
 8003d58:	bf28      	it	cs
 8003d5a:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d5c:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d60:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8003d62:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003d64:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d66:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d68:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8003d6c:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d70:	f7ff fd71 	bl	8003856 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d74:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d78:	f104 0018 	add.w	r0, r4, #24
 8003d7c:	f7ff fd6b 	bl	8003856 <vListInitialiseItem>
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d80:	464a      	mov	r2, r9
 8003d82:	4641      	mov	r1, r8
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d84:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 8003d86:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d8a:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d8c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d8e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d90:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d94:	f7ff fdd4 	bl	8003940 <pxPortInitialiseStack>
 8003d98:	6020      	str	r0, [r4, #0]
	taskENTER_CRITICAL();
 8003d9a:	f7ff fdfb 	bl	8003994 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003d9e:	4b2f      	ldr	r3, [pc, #188]	; (8003e5c <xTaskCreateStatic+0x180>)
		if( pxCurrentTCB == NULL )
 8003da0:	4d2f      	ldr	r5, [pc, #188]	; (8003e60 <xTaskCreateStatic+0x184>)
		uxCurrentNumberOfTasks++;
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8003e8c <xTaskCreateStatic+0x1b0>
 8003da8:	3201      	adds	r2, #1
 8003daa:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003dac:	682e      	ldr	r6, [r5, #0]
 8003dae:	2e00      	cmp	r6, #0
 8003db0:	d148      	bne.n	8003e44 <xTaskCreateStatic+0x168>
			pxCurrentTCB = pxNewTCB;
 8003db2:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d11d      	bne.n	8003df6 <xTaskCreateStatic+0x11a>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003dba:	eb08 0006 	add.w	r0, r8, r6
 8003dbe:	3614      	adds	r6, #20
 8003dc0:	f7ff fd3e 	bl	8003840 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dc4:	2e8c      	cmp	r6, #140	; 0x8c
 8003dc6:	d1f8      	bne.n	8003dba <xTaskCreateStatic+0xde>
	vListInitialise( &xDelayedTaskList1 );
 8003dc8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003e90 <xTaskCreateStatic+0x1b4>
	vListInitialise( &xDelayedTaskList2 );
 8003dcc:	4e25      	ldr	r6, [pc, #148]	; (8003e64 <xTaskCreateStatic+0x188>)
	vListInitialise( &xDelayedTaskList1 );
 8003dce:	4648      	mov	r0, r9
 8003dd0:	f7ff fd36 	bl	8003840 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003dd4:	4630      	mov	r0, r6
 8003dd6:	f7ff fd33 	bl	8003840 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003dda:	4823      	ldr	r0, [pc, #140]	; (8003e68 <xTaskCreateStatic+0x18c>)
 8003ddc:	f7ff fd30 	bl	8003840 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003de0:	4822      	ldr	r0, [pc, #136]	; (8003e6c <xTaskCreateStatic+0x190>)
 8003de2:	f7ff fd2d 	bl	8003840 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8003de6:	4822      	ldr	r0, [pc, #136]	; (8003e70 <xTaskCreateStatic+0x194>)
 8003de8:	f7ff fd2a 	bl	8003840 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003dec:	4b21      	ldr	r3, [pc, #132]	; (8003e74 <xTaskCreateStatic+0x198>)
 8003dee:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003df2:	4b21      	ldr	r3, [pc, #132]	; (8003e78 <xTaskCreateStatic+0x19c>)
 8003df4:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 8003df6:	4a21      	ldr	r2, [pc, #132]	; (8003e7c <xTaskCreateStatic+0x1a0>)
		prvAddTaskToReadyList( pxNewTCB );
 8003df8:	4921      	ldr	r1, [pc, #132]	; (8003e80 <xTaskCreateStatic+0x1a4>)
		uxTaskNumber++;
 8003dfa:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003dfc:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8003dfe:	3301      	adds	r3, #1
 8003e00:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003e02:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003e04:	2301      	movs	r3, #1
 8003e06:	4093      	lsls	r3, r2
 8003e08:	4303      	orrs	r3, r0
 8003e0a:	2014      	movs	r0, #20
 8003e0c:	600b      	str	r3, [r1, #0]
 8003e0e:	fb00 8002 	mla	r0, r0, r2, r8
 8003e12:	4639      	mov	r1, r7
 8003e14:	f7ff fd22 	bl	800385c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003e18:	f7ff fdde 	bl	80039d8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003e1c:	4b19      	ldr	r3, [pc, #100]	; (8003e84 <xTaskCreateStatic+0x1a8>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	b163      	cbz	r3, 8003e3c <xTaskCreateStatic+0x160>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e22:	682b      	ldr	r3, [r5, #0]
 8003e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d207      	bcs.n	8003e3c <xTaskCreateStatic+0x160>
			taskYIELD_IF_USING_PREEMPTION();
 8003e2c:	4b16      	ldr	r3, [pc, #88]	; (8003e88 <xTaskCreateStatic+0x1ac>)
 8003e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	f3bf 8f6f 	isb	sy
	}
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	b002      	add	sp, #8
 8003e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if( xSchedulerRunning == pdFALSE )
 8003e44:	4b0f      	ldr	r3, [pc, #60]	; (8003e84 <xTaskCreateStatic+0x1a8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1d4      	bne.n	8003df6 <xTaskCreateStatic+0x11a>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e4c:	682b      	ldr	r3, [r5, #0]
 8003e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003e52:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8003e54:	bf98      	it	ls
 8003e56:	602c      	strls	r4, [r5, #0]
 8003e58:	e7cd      	b.n	8003df6 <xTaskCreateStatic+0x11a>
 8003e5a:	bf00      	nop
 8003e5c:	20000894 	.word	0x20000894
 8003e60:	200007fc 	.word	0x200007fc
 8003e64:	200008c0 	.word	0x200008c0
 8003e68:	200008dc 	.word	0x200008dc
 8003e6c:	20000908 	.word	0x20000908
 8003e70:	200008f4 	.word	0x200008f4
 8003e74:	20000800 	.word	0x20000800
 8003e78:	20000804 	.word	0x20000804
 8003e7c:	200008a4 	.word	0x200008a4
 8003e80:	200008a8 	.word	0x200008a8
 8003e84:	200008f0 	.word	0x200008f0
 8003e88:	e000ed04 	.word	0xe000ed04
 8003e8c:	20000808 	.word	0x20000808
 8003e90:	200008ac 	.word	0x200008ac

08003e94 <vTaskStartScheduler>:
{
 8003e94:	b510      	push	{r4, lr}
 8003e96:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e98:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e9a:	aa07      	add	r2, sp, #28
 8003e9c:	a906      	add	r1, sp, #24
 8003e9e:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ea0:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ea2:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ea4:	f000 fb08 	bl	80044b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ea8:	9b05      	ldr	r3, [sp, #20]
 8003eaa:	9302      	str	r3, [sp, #8]
 8003eac:	9b06      	ldr	r3, [sp, #24]
 8003eae:	9301      	str	r3, [sp, #4]
 8003eb0:	9400      	str	r4, [sp, #0]
 8003eb2:	4623      	mov	r3, r4
 8003eb4:	9a07      	ldr	r2, [sp, #28]
 8003eb6:	490d      	ldr	r1, [pc, #52]	; (8003eec <vTaskStartScheduler+0x58>)
 8003eb8:	480d      	ldr	r0, [pc, #52]	; (8003ef0 <vTaskStartScheduler+0x5c>)
 8003eba:	f7ff ff0f 	bl	8003cdc <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8003ebe:	b190      	cbz	r0, 8003ee6 <vTaskStartScheduler+0x52>
 8003ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec4:	f383 8811 	msr	BASEPRI, r3
 8003ec8:	f3bf 8f6f 	isb	sy
 8003ecc:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ed0:	4b08      	ldr	r3, [pc, #32]	; (8003ef4 <vTaskStartScheduler+0x60>)
 8003ed2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ed6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ed8:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <vTaskStartScheduler+0x64>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003ede:	4b07      	ldr	r3, [pc, #28]	; (8003efc <vTaskStartScheduler+0x68>)
 8003ee0:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003ee2:	f7ff fdef 	bl	8003ac4 <xPortStartScheduler>
}
 8003ee6:	b008      	add	sp, #32
 8003ee8:	bd10      	pop	{r4, pc}
 8003eea:	bf00      	nop
 8003eec:	08009ea9 	.word	0x08009ea9
 8003ef0:	08003bd1 	.word	0x08003bd1
 8003ef4:	200008d4 	.word	0x200008d4
 8003ef8:	200008f0 	.word	0x200008f0
 8003efc:	2000091c 	.word	0x2000091c

08003f00 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003f00:	4a02      	ldr	r2, [pc, #8]	; (8003f0c <vTaskSuspendAll+0xc>)
 8003f02:	6813      	ldr	r3, [r2, #0]
 8003f04:	3301      	adds	r3, #1
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	200008a0 	.word	0x200008a0

08003f10 <xTaskIncrementTick>:
{
 8003f10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f14:	4b3c      	ldr	r3, [pc, #240]	; (8004008 <xTaskIncrementTick+0xf8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d153      	bne.n	8003fc4 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f1c:	4b3b      	ldr	r3, [pc, #236]	; (800400c <xTaskIncrementTick+0xfc>)
 8003f1e:	681c      	ldr	r4, [r3, #0]
 8003f20:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003f22:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f24:	b9bc      	cbnz	r4, 8003f56 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003f26:	4b3a      	ldr	r3, [pc, #232]	; (8004010 <xTaskIncrementTick+0x100>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	6812      	ldr	r2, [r2, #0]
 8003f2c:	b142      	cbz	r2, 8003f40 <xTaskIncrementTick+0x30>
 8003f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f32:	f383 8811 	msr	BASEPRI, r3
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	e7fe      	b.n	8003f3e <xTaskIncrementTick+0x2e>
 8003f40:	4a34      	ldr	r2, [pc, #208]	; (8004014 <xTaskIncrementTick+0x104>)
 8003f42:	6819      	ldr	r1, [r3, #0]
 8003f44:	6810      	ldr	r0, [r2, #0]
 8003f46:	6018      	str	r0, [r3, #0]
 8003f48:	6011      	str	r1, [r2, #0]
 8003f4a:	4a33      	ldr	r2, [pc, #204]	; (8004018 <xTaskIncrementTick+0x108>)
 8003f4c:	6813      	ldr	r3, [r2, #0]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	f7ff fe6b 	bl	8003c2c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f56:	4d31      	ldr	r5, [pc, #196]	; (800401c <xTaskIncrementTick+0x10c>)
 8003f58:	4f31      	ldr	r7, [pc, #196]	; (8004020 <xTaskIncrementTick+0x110>)
 8003f5a:	682b      	ldr	r3, [r5, #0]
 8003f5c:	429c      	cmp	r4, r3
 8003f5e:	f04f 0b00 	mov.w	fp, #0
 8003f62:	d33e      	bcc.n	8003fe2 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f64:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004010 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8003f68:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8004030 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f6c:	f8d8 2000 	ldr.w	r2, [r8]
 8003f70:	6812      	ldr	r2, [r2, #0]
 8003f72:	bb72      	cbnz	r2, 8003fd2 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f78:	602a      	str	r2, [r5, #0]
					break;
 8003f7a:	e032      	b.n	8003fe2 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f7c:	f106 0a04 	add.w	sl, r6, #4
 8003f80:	4650      	mov	r0, sl
 8003f82:	f7ff fc8e 	bl	80038a2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f86:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003f88:	b119      	cbz	r1, 8003f92 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f8a:	f106 0018 	add.w	r0, r6, #24
 8003f8e:	f7ff fc88 	bl	80038a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f92:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003f94:	f8d9 3000 	ldr.w	r3, [r9]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	fa02 f100 	lsl.w	r1, r2, r0
 8003f9e:	4319      	orrs	r1, r3
 8003fa0:	4b20      	ldr	r3, [pc, #128]	; (8004024 <xTaskIncrementTick+0x114>)
 8003fa2:	f8c9 1000 	str.w	r1, [r9]
 8003fa6:	f04f 0e14 	mov.w	lr, #20
 8003faa:	4651      	mov	r1, sl
 8003fac:	fb0e 3000 	mla	r0, lr, r0, r3
 8003fb0:	f7ff fc54 	bl	800385c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fb4:	6838      	ldr	r0, [r7, #0]
 8003fb6:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8003fb8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8003fba:	4291      	cmp	r1, r2
 8003fbc:	bf28      	it	cs
 8003fbe:	f04f 0b01 	movcs.w	fp, #1
 8003fc2:	e7d3      	b.n	8003f6c <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8003fc4:	4a18      	ldr	r2, [pc, #96]	; (8004028 <xTaskIncrementTick+0x118>)
 8003fc6:	6813      	ldr	r3, [r2, #0]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8003fcc:	f04f 0b00 	mov.w	fp, #0
 8003fd0:	e011      	b.n	8003ff6 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fd2:	f8d8 2000 	ldr.w	r2, [r8]
 8003fd6:	68d2      	ldr	r2, [r2, #12]
 8003fd8:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fda:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003fdc:	428c      	cmp	r4, r1
 8003fde:	d2cd      	bcs.n	8003f7c <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8003fe0:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	4b0f      	ldr	r3, [pc, #60]	; (8004024 <xTaskIncrementTick+0x114>)
 8003fe6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003fe8:	2214      	movs	r2, #20
 8003fea:	434a      	muls	r2, r1
 8003fec:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8003fee:	2a02      	cmp	r2, #2
 8003ff0:	bf28      	it	cs
 8003ff2:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8003ff6:	4a0d      	ldr	r2, [pc, #52]	; (800402c <xTaskIncrementTick+0x11c>)
 8003ff8:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8003ffa:	2a00      	cmp	r2, #0
 8003ffc:	bf18      	it	ne
 8003ffe:	f04f 0b01 	movne.w	fp, #1
}
 8004002:	4658      	mov	r0, fp
 8004004:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004008:	200008a0 	.word	0x200008a0
 800400c:	2000091c 	.word	0x2000091c
 8004010:	20000800 	.word	0x20000800
 8004014:	20000804 	.word	0x20000804
 8004018:	200008d8 	.word	0x200008d8
 800401c:	200008d4 	.word	0x200008d4
 8004020:	200007fc 	.word	0x200007fc
 8004024:	20000808 	.word	0x20000808
 8004028:	2000089c 	.word	0x2000089c
 800402c:	20000920 	.word	0x20000920
 8004030:	200008a8 	.word	0x200008a8

08004034 <xTaskResumeAll>:
{
 8004034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8004038:	4c31      	ldr	r4, [pc, #196]	; (8004100 <xTaskResumeAll+0xcc>)
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	b943      	cbnz	r3, 8004050 <xTaskResumeAll+0x1c>
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	e7fe      	b.n	800404e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8004050:	f7ff fca0 	bl	8003994 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	3b01      	subs	r3, #1
 8004058:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800405a:	6824      	ldr	r4, [r4, #0]
 800405c:	b12c      	cbz	r4, 800406a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800405e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004060:	f7ff fcba 	bl	80039d8 <vPortExitCritical>
}
 8004064:	4620      	mov	r0, r4
 8004066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800406a:	4b26      	ldr	r3, [pc, #152]	; (8004104 <xTaskResumeAll+0xd0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f5      	beq.n	800405e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004072:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800411c <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8004076:	4f24      	ldr	r7, [pc, #144]	; (8004108 <xTaskResumeAll+0xd4>)
 8004078:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8004120 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800407c:	f8d9 3000 	ldr.w	r3, [r9]
 8004080:	b9e3      	cbnz	r3, 80040bc <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8004082:	b10c      	cbz	r4, 8004088 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8004084:	f7ff fdd2 	bl	8003c2c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004088:	4d20      	ldr	r5, [pc, #128]	; (800410c <xTaskResumeAll+0xd8>)
 800408a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800408c:	b144      	cbz	r4, 80040a0 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 800408e:	4e20      	ldr	r6, [pc, #128]	; (8004110 <xTaskResumeAll+0xdc>)
 8004090:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8004092:	f7ff ff3d 	bl	8003f10 <xTaskIncrementTick>
 8004096:	b100      	cbz	r0, 800409a <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8004098:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800409a:	3c01      	subs	r4, #1
 800409c:	d1f9      	bne.n	8004092 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 800409e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80040a0:	4b1b      	ldr	r3, [pc, #108]	; (8004110 <xTaskResumeAll+0xdc>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0da      	beq.n	800405e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80040a8:	4b1a      	ldr	r3, [pc, #104]	; (8004114 <xTaskResumeAll+0xe0>)
 80040aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80040b8:	2401      	movs	r4, #1
 80040ba:	e7d1      	b.n	8004060 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80040bc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80040c0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040c2:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040c4:	f104 0018 	add.w	r0, r4, #24
 80040c8:	f7ff fbeb 	bl	80038a2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040cc:	4630      	mov	r0, r6
 80040ce:	f7ff fbe8 	bl	80038a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80040d4:	6839      	ldr	r1, [r7, #0]
 80040d6:	2501      	movs	r5, #1
 80040d8:	fa05 f302 	lsl.w	r3, r5, r2
 80040dc:	2014      	movs	r0, #20
 80040de:	430b      	orrs	r3, r1
 80040e0:	fb00 8002 	mla	r0, r0, r2, r8
 80040e4:	4631      	mov	r1, r6
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	f7ff fbb8 	bl	800385c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040ec:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <xTaskResumeAll+0xe4>)
 80040ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80040f6:	bf24      	itt	cs
 80040f8:	4b05      	ldrcs	r3, [pc, #20]	; (8004110 <xTaskResumeAll+0xdc>)
 80040fa:	601d      	strcs	r5, [r3, #0]
 80040fc:	e7be      	b.n	800407c <xTaskResumeAll+0x48>
 80040fe:	bf00      	nop
 8004100:	200008a0 	.word	0x200008a0
 8004104:	20000894 	.word	0x20000894
 8004108:	200008a8 	.word	0x200008a8
 800410c:	2000089c 	.word	0x2000089c
 8004110:	20000920 	.word	0x20000920
 8004114:	e000ed04 	.word	0xe000ed04
 8004118:	200007fc 	.word	0x200007fc
 800411c:	200008dc 	.word	0x200008dc
 8004120:	20000808 	.word	0x20000808

08004124 <vTaskDelay>:
	{
 8004124:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004126:	b940      	cbnz	r0, 800413a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8004128:	4b0e      	ldr	r3, [pc, #56]	; (8004164 <vTaskDelay+0x40>)
 800412a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800413a:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <vTaskDelay+0x44>)
 800413c:	6819      	ldr	r1, [r3, #0]
 800413e:	b141      	cbz	r1, 8004152 <vTaskDelay+0x2e>
 8004140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	e7fe      	b.n	8004150 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004152:	f7ff fed5 	bl	8003f00 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004156:	f7ff fd7b 	bl	8003c50 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800415a:	f7ff ff6b 	bl	8004034 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800415e:	2800      	cmp	r0, #0
 8004160:	d0e2      	beq.n	8004128 <vTaskDelay+0x4>
 8004162:	bd08      	pop	{r3, pc}
 8004164:	e000ed04 	.word	0xe000ed04
 8004168:	200008a0 	.word	0x200008a0

0800416c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800416c:	4b17      	ldr	r3, [pc, #92]	; (80041cc <vTaskSwitchContext+0x60>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4b17      	ldr	r3, [pc, #92]	; (80041d0 <vTaskSwitchContext+0x64>)
{
 8004172:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004174:	b112      	cbz	r2, 800417c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8004176:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800417c:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800417e:	4b15      	ldr	r3, [pc, #84]	; (80041d4 <vTaskSwitchContext+0x68>)
 8004180:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004182:	fab3 f383 	clz	r3, r3
 8004186:	b2db      	uxtb	r3, r3
 8004188:	f1c3 031f 	rsb	r3, r3, #31
 800418c:	2214      	movs	r2, #20
 800418e:	4912      	ldr	r1, [pc, #72]	; (80041d8 <vTaskSwitchContext+0x6c>)
 8004190:	435a      	muls	r2, r3
 8004192:	1888      	adds	r0, r1, r2
 8004194:	588c      	ldr	r4, [r1, r2]
 8004196:	b944      	cbnz	r4, 80041aa <vTaskSwitchContext+0x3e>
	__asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	e7fe      	b.n	80041a8 <vTaskSwitchContext+0x3c>
 80041aa:	6844      	ldr	r4, [r0, #4]
 80041ac:	3208      	adds	r2, #8
 80041ae:	6864      	ldr	r4, [r4, #4]
 80041b0:	6044      	str	r4, [r0, #4]
 80041b2:	440a      	add	r2, r1
 80041b4:	4294      	cmp	r4, r2
 80041b6:	bf04      	itt	eq
 80041b8:	6862      	ldreq	r2, [r4, #4]
 80041ba:	6042      	streq	r2, [r0, #4]
 80041bc:	2214      	movs	r2, #20
 80041be:	fb02 1303 	mla	r3, r2, r3, r1
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	4b05      	ldr	r3, [pc, #20]	; (80041dc <vTaskSwitchContext+0x70>)
 80041c8:	e7d6      	b.n	8004178 <vTaskSwitchContext+0xc>
 80041ca:	bf00      	nop
 80041cc:	200008a0 	.word	0x200008a0
 80041d0:	20000920 	.word	0x20000920
 80041d4:	200008a8 	.word	0x200008a8
 80041d8:	20000808 	.word	0x20000808
 80041dc:	200007fc 	.word	0x200007fc

080041e0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80041e0:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <xTaskGetSchedulerState+0x18>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	b133      	cbz	r3, 80041f4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041e6:	4b05      	ldr	r3, [pc, #20]	; (80041fc <xTaskGetSchedulerState+0x1c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80041ec:	bf0c      	ite	eq
 80041ee:	2002      	moveq	r0, #2
 80041f0:	2000      	movne	r0, #0
 80041f2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80041f4:	2001      	movs	r0, #1
	}
 80041f6:	4770      	bx	lr
 80041f8:	200008f0 	.word	0x200008f0
 80041fc:	200008a0 	.word	0x200008a0

08004200 <LTC2990_ConfigureControlReg>:
#include "adc.h"

/*
 *	Configure control register
 */
HAL_StatusTypeDef LTC2990_ConfigureControlReg(I2C_HandleTypeDef *hi2c) {
 8004200:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_StatusTypeDef retStatus;

	uint8_t controlBuffer[1];
	controlBuffer[0] = 0x1F; //All modes per measurement, V1-V2 (measures current in and out of battery), V3 measures battery voltage (currently disconnected in schematic), V4 measures battery temperature (currently disconnected in schematic)
 8004202:	aa06      	add	r2, sp, #24
 8004204:	231f      	movs	r3, #31
 8004206:	f802 3d04 	strb.w	r3, [r2, #-4]!

	retStatus = HAL_I2C_Mem_Write(hi2c, 0b10011000, 0x1, I2C_MEMADD_SIZE_8BIT,
 800420a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800420e:	9302      	str	r3, [sp, #8]
 8004210:	2301      	movs	r3, #1
 8004212:	e88d 000c 	stmia.w	sp, {r2, r3}
 8004216:	2198      	movs	r1, #152	; 0x98
 8004218:	461a      	mov	r2, r3
 800421a:	f7fd fac9 	bl	80017b0 <HAL_I2C_Mem_Write>
			controlBuffer, I2C_MEMADD_SIZE_8BIT, 500);

	return retStatus;
}
 800421e:	b007      	add	sp, #28
 8004220:	f85d fb04 	ldr.w	pc, [sp], #4

08004224 <LTC2990_Trigger>:

/*
 * Trigger new ADC conversion
 */
HAL_StatusTypeDef LTC2990_Trigger(I2C_HandleTypeDef *hi2c) {
 8004224:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_StatusTypeDef retStatus;
	uint8_t triggerVal = 0x0;
 8004226:	aa06      	add	r2, sp, #24
 8004228:	2300      	movs	r3, #0
 800422a:	f802 3d01 	strb.w	r3, [r2, #-1]!

	retStatus = HAL_I2C_Mem_Write(hi2c, 0b10011000, 0x02,
 800422e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004232:	9302      	str	r3, [sp, #8]
 8004234:	2301      	movs	r3, #1
 8004236:	e88d 000c 	stmia.w	sp, {r2, r3}
 800423a:	2198      	movs	r1, #152	; 0x98
 800423c:	2202      	movs	r2, #2
 800423e:	f7fd fab7 	bl	80017b0 <HAL_I2C_Mem_Write>
			I2C_MEMADD_SIZE_8BIT, &triggerVal, I2C_MEMADD_SIZE_8BIT, 1500);

	return retStatus;
}
 8004242:	b007      	add	sp, #28
 8004244:	f85d fb04 	ldr.w	pc, [sp], #4

08004248 <LTC2990_WaitForConversion>:

/*
 * Wait for new ADC conversion
 */
HAL_StatusTypeDef LTC2990_WaitForConversion(I2C_HandleTypeDef *hi2c,
		uint16_t timeout_ms) {
 8004248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800424c:	b086      	sub	sp, #24
	HAL_StatusTypeDef retStatus;

	uint8_t statusBuffer = 0;
 800424e:	ae06      	add	r6, sp, #24
 8004250:	2400      	movs	r4, #0
 8004252:	f806 4d01 	strb.w	r4, [r6, #-1]!
		uint16_t timeout_ms) {
 8004256:	4680      	mov	r8, r0
 8004258:	460d      	mov	r5, r1
	uint8_t vccReady = 0;

	while ((timeout_ms != 0) && (vccReady == 0)) {
 800425a:	4627      	mov	r7, r4
		retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x00,
 800425c:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
 8004260:	f04f 0a01 	mov.w	sl, #1
	while ((timeout_ms != 0) && (vccReady == 0)) {
 8004264:	b105      	cbz	r5, 8004268 <LTC2990_WaitForConversion+0x20>
 8004266:	b11c      	cbz	r4, 8004270 <LTC2990_WaitForConversion+0x28>
		HAL_Delay(10);
		timeout_ms -= 10;
	}

	return retStatus;
}
 8004268:	4638      	mov	r0, r7
 800426a:	b006      	add	sp, #24
 800426c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x00,
 8004270:	4622      	mov	r2, r4
 8004272:	2301      	movs	r3, #1
 8004274:	2198      	movs	r1, #152	; 0x98
 8004276:	f8cd 9008 	str.w	r9, [sp, #8]
 800427a:	e88d 0440 	stmia.w	sp, {r6, sl}
 800427e:	4640      	mov	r0, r8
 8004280:	f7fd fb4e 	bl	8001920 <HAL_I2C_Mem_Read>
		vccReady = (statusBuffer & 0b00000100);
 8004284:	f89d 4017 	ldrb.w	r4, [sp, #23]
		retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x00,
 8004288:	4607      	mov	r7, r0
		timeout_ms -= 10;
 800428a:	3d0a      	subs	r5, #10
		HAL_Delay(10);
 800428c:	200a      	movs	r0, #10
		vccReady = (statusBuffer & 0b00000100);
 800428e:	f004 0404 	and.w	r4, r4, #4
		HAL_Delay(10);
 8004292:	f7fc fecd 	bl	8001030 <HAL_Delay>
		timeout_ms -= 10;
 8004296:	b2ad      	uxth	r5, r5
 8004298:	e7e4      	b.n	8004264 <LTC2990_WaitForConversion+0x1c>
 800429a:	0000      	movs	r0, r0
 800429c:	0000      	movs	r0, r0
	...

080042a0 <LTC2990_ReadVcc>:


/*
 * Read Vcc voltage
 */
HAL_StatusTypeDef LTC2990_ReadVcc(I2C_HandleTypeDef *hi2c, float* Vcc_V) {
 80042a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042a4:	b086      	sub	sp, #24
	HAL_StatusTypeDef retStatus;
	uint16_t Vcc_regData;
	uint8_t VccReadBuffer[2];

	//Read MSB of Vcc ()
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x0E, I2C_MEMADD_SIZE_8BIT,
 80042a6:	2501      	movs	r5, #1
 80042a8:	ab05      	add	r3, sp, #20
 80042aa:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80042ae:	9300      	str	r3, [sp, #0]
HAL_StatusTypeDef LTC2990_ReadVcc(I2C_HandleTypeDef *hi2c, float* Vcc_V) {
 80042b0:	460f      	mov	r7, r1
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x0E, I2C_MEMADD_SIZE_8BIT,
 80042b2:	9602      	str	r6, [sp, #8]
 80042b4:	9501      	str	r5, [sp, #4]
 80042b6:	462b      	mov	r3, r5
 80042b8:	220e      	movs	r2, #14
 80042ba:	2198      	movs	r1, #152	; 0x98
HAL_StatusTypeDef LTC2990_ReadVcc(I2C_HandleTypeDef *hi2c, float* Vcc_V) {
 80042bc:	4680      	mov	r8, r0
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x0E, I2C_MEMADD_SIZE_8BIT,
 80042be:	f7fd fb2f 	bl	8001920 <HAL_I2C_Mem_Read>
			&VccReadBuffer[0], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 80042c2:	4604      	mov	r4, r0
 80042c4:	bb38      	cbnz	r0, 8004316 <LTC2990_ReadVcc+0x76>
		return retStatus;
	}

	//Read LSB of Vcc ()
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x0F, I2C_MEMADD_SIZE_8BIT,
 80042c6:	f10d 0315 	add.w	r3, sp, #21
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	9602      	str	r6, [sp, #8]
 80042ce:	9501      	str	r5, [sp, #4]
 80042d0:	462b      	mov	r3, r5
 80042d2:	220f      	movs	r2, #15
 80042d4:	2198      	movs	r1, #152	; 0x98
 80042d6:	4640      	mov	r0, r8
 80042d8:	f7fd fb22 	bl	8001920 <HAL_I2C_Mem_Read>
			&VccReadBuffer[1], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 80042dc:	4604      	mov	r4, r0
 80042de:	b9d0      	cbnz	r0, 8004316 <LTC2990_ReadVcc+0x76>
		return retStatus;
	}

	//Convert register contents to Vcc
	Vcc_regData = ((VccReadBuffer[0] << 8) | VccReadBuffer[1]) & ~0xC000; //D[13:0]
 80042e0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80042e4:	f89d 0015 	ldrb.w	r0, [sp, #21]
 80042e8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	*Vcc_V = 2.5 + ((Vcc_regData * 305.18) / 1000000);
 80042ec:	f3c0 000d 	ubfx	r0, r0, #0, #14
 80042f0:	f7fc f920 	bl	8000534 <__aeabi_i2d>
 80042f4:	a30b      	add	r3, pc, #44	; (adr r3, 8004324 <LTC2990_ReadVcc+0x84>)
 80042f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fa:	f7fc f981 	bl	8000600 <__aeabi_dmul>
 80042fe:	a30b      	add	r3, pc, #44	; (adr r3, 800432c <LTC2990_ReadVcc+0x8c>)
 8004300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004304:	f7fc faa6 	bl	8000854 <__aeabi_ddiv>
 8004308:	2200      	movs	r2, #0
 800430a:	4b05      	ldr	r3, [pc, #20]	; (8004320 <LTC2990_ReadVcc+0x80>)
 800430c:	f7fb ffc6 	bl	800029c <__adddf3>
 8004310:	f7fc fc6e 	bl	8000bf0 <__aeabi_d2f>
 8004314:	6038      	str	r0, [r7, #0]

	return retStatus;
}
 8004316:	4620      	mov	r0, r4
 8004318:	b006      	add	sp, #24
 800431a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800431e:	bf00      	nop
 8004320:	40040000 	.word	0x40040000
 8004324:	47ae147b 	.word	0x47ae147b
 8004328:	407312e1 	.word	0x407312e1
 800432c:	00000000 	.word	0x00000000
 8004330:	412e8480 	.word	0x412e8480
 8004334:	00000000 	.word	0x00000000

08004338 <LTC2990_ReadV2>:
}

/*
 * Read V2 voltage
 */
HAL_StatusTypeDef LTC2990_ReadV2(I2C_HandleTypeDef *hi2c, float* V2_V) {
 8004338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800433c:	b086      	sub	sp, #24
	HAL_StatusTypeDef retStatus;
	uint16_t V2_regData;
	uint8_t V2ReadBuffer[2];

	//Read MSB of V2
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x08, I2C_MEMADD_SIZE_8BIT,
 800433e:	2501      	movs	r5, #1
 8004340:	ab05      	add	r3, sp, #20
 8004342:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8004346:	9300      	str	r3, [sp, #0]
HAL_StatusTypeDef LTC2990_ReadV2(I2C_HandleTypeDef *hi2c, float* V2_V) {
 8004348:	460f      	mov	r7, r1
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x08, I2C_MEMADD_SIZE_8BIT,
 800434a:	9602      	str	r6, [sp, #8]
 800434c:	9501      	str	r5, [sp, #4]
 800434e:	462b      	mov	r3, r5
 8004350:	2208      	movs	r2, #8
 8004352:	2198      	movs	r1, #152	; 0x98
HAL_StatusTypeDef LTC2990_ReadV2(I2C_HandleTypeDef *hi2c, float* V2_V) {
 8004354:	4680      	mov	r8, r0
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x08, I2C_MEMADD_SIZE_8BIT,
 8004356:	f7fd fae3 	bl	8001920 <HAL_I2C_Mem_Read>
			&V2ReadBuffer[0], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 800435a:	4604      	mov	r4, r0
 800435c:	bb38      	cbnz	r0, 80043ae <LTC2990_ReadV2+0x76>
		return retStatus;
	}

	//Read LSB of V2
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x09, I2C_MEMADD_SIZE_8BIT,
 800435e:	f10d 0315 	add.w	r3, sp, #21
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	9602      	str	r6, [sp, #8]
 8004366:	9501      	str	r5, [sp, #4]
 8004368:	462b      	mov	r3, r5
 800436a:	2209      	movs	r2, #9
 800436c:	2198      	movs	r1, #152	; 0x98
 800436e:	4640      	mov	r0, r8
 8004370:	f7fd fad6 	bl	8001920 <HAL_I2C_Mem_Read>
			&V2ReadBuffer[1], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 8004374:	4604      	mov	r4, r0
 8004376:	b9d0      	cbnz	r0, 80043ae <LTC2990_ReadV2+0x76>
		return retStatus;
	}

	//Convert register contents to V4
	V2_regData = ((V2ReadBuffer[0] << 8) | V2ReadBuffer[1]) & ~0xC000; //D[13:0]
 8004378:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800437c:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8004380:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	*V2_V = (((V2_regData * 305.18) / 1000000)* vdividerFactor);
 8004384:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8004388:	f7fc f8d4 	bl	8000534 <__aeabi_i2d>
 800438c:	a30a      	add	r3, pc, #40	; (adr r3, 80043b8 <LTC2990_ReadV2+0x80>)
 800438e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004392:	f7fc f935 	bl	8000600 <__aeabi_dmul>
 8004396:	a30a      	add	r3, pc, #40	; (adr r3, 80043c0 <LTC2990_ReadV2+0x88>)
 8004398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439c:	f7fc fa5a 	bl	8000854 <__aeabi_ddiv>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	f7fb ff7a 	bl	800029c <__adddf3>
 80043a8:	f7fc fc22 	bl	8000bf0 <__aeabi_d2f>
 80043ac:	6038      	str	r0, [r7, #0]

	return retStatus;
}
 80043ae:	4620      	mov	r0, r4
 80043b0:	b006      	add	sp, #24
 80043b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043b6:	bf00      	nop
 80043b8:	47ae147b 	.word	0x47ae147b
 80043bc:	407312e1 	.word	0x407312e1
 80043c0:	00000000 	.word	0x00000000
 80043c4:	412e8480 	.word	0x412e8480

080043c8 <LTC2990_ReadV1>:

/*
 * Read V1 voltage
 */
HAL_StatusTypeDef LTC2990_ReadV1(I2C_HandleTypeDef *hi2c, float* V1_V) {
 80043c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043cc:	b086      	sub	sp, #24
	HAL_StatusTypeDef retStatus;
	uint16_t V1_regData;
	uint8_t V1ReadBuffer[2];

	//Read MSB of V1
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x06, I2C_MEMADD_SIZE_8BIT,
 80043ce:	2501      	movs	r5, #1
 80043d0:	ab05      	add	r3, sp, #20
 80043d2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80043d6:	9300      	str	r3, [sp, #0]
HAL_StatusTypeDef LTC2990_ReadV1(I2C_HandleTypeDef *hi2c, float* V1_V) {
 80043d8:	460f      	mov	r7, r1
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x06, I2C_MEMADD_SIZE_8BIT,
 80043da:	9602      	str	r6, [sp, #8]
 80043dc:	9501      	str	r5, [sp, #4]
 80043de:	462b      	mov	r3, r5
 80043e0:	2206      	movs	r2, #6
 80043e2:	2198      	movs	r1, #152	; 0x98
HAL_StatusTypeDef LTC2990_ReadV1(I2C_HandleTypeDef *hi2c, float* V1_V) {
 80043e4:	4680      	mov	r8, r0
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x06, I2C_MEMADD_SIZE_8BIT,
 80043e6:	f7fd fa9b 	bl	8001920 <HAL_I2C_Mem_Read>
			&V1ReadBuffer[0], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 80043ea:	4604      	mov	r4, r0
 80043ec:	bb38      	cbnz	r0, 800443e <LTC2990_ReadV1+0x76>
		return retStatus;
	}

	//Read LSB of V1
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x07, I2C_MEMADD_SIZE_8BIT,
 80043ee:	f10d 0315 	add.w	r3, sp, #21
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	9602      	str	r6, [sp, #8]
 80043f6:	9501      	str	r5, [sp, #4]
 80043f8:	462b      	mov	r3, r5
 80043fa:	2207      	movs	r2, #7
 80043fc:	2198      	movs	r1, #152	; 0x98
 80043fe:	4640      	mov	r0, r8
 8004400:	f7fd fa8e 	bl	8001920 <HAL_I2C_Mem_Read>
			&V1ReadBuffer[1], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 8004404:	4604      	mov	r4, r0
 8004406:	b9d0      	cbnz	r0, 800443e <LTC2990_ReadV1+0x76>
		return retStatus;
	}

	//Convert register contents to V4
	V1_regData = ((V1ReadBuffer[0] << 8) | V1ReadBuffer[1]) & ~0xC000; //D[13:0]
 8004408:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800440c:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8004410:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	*V1_V = (((V1_regData * 305.18) / 1000000) * vdividerFactor);
 8004414:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8004418:	f7fc f88c 	bl	8000534 <__aeabi_i2d>
 800441c:	a30a      	add	r3, pc, #40	; (adr r3, 8004448 <LTC2990_ReadV1+0x80>)
 800441e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004422:	f7fc f8ed 	bl	8000600 <__aeabi_dmul>
 8004426:	a30a      	add	r3, pc, #40	; (adr r3, 8004450 <LTC2990_ReadV1+0x88>)
 8004428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442c:	f7fc fa12 	bl	8000854 <__aeabi_ddiv>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	f7fb ff32 	bl	800029c <__adddf3>
 8004438:	f7fc fbda 	bl	8000bf0 <__aeabi_d2f>
 800443c:	6038      	str	r0, [r7, #0]

	return retStatus;
}
 800443e:	4620      	mov	r0, r4
 8004440:	b006      	add	sp, #24
 8004442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004446:	bf00      	nop
 8004448:	47ae147b 	.word	0x47ae147b
 800444c:	407312e1 	.word	0x407312e1
 8004450:	00000000 	.word	0x00000000
 8004454:	412e8480 	.word	0x412e8480

08004458 <LTC2990_ReadCurrent>:
 * Charging gives negative current value when V1_V < V4_V
 * Discharging gives positive current value when V1_V > V4_V
 */
HAL_StatusTypeDef LTC2990_ReadCurrent(I2C_HandleTypeDef *hi2c, float V1_V, float V4_V, float* current_value)
{
	*current_value = (V1_V - V4_V)*1000.0/shuntR;
 8004458:	ee70 7a60 	vsub.f32	s15, s0, s1
{
 800445c:	b510      	push	{r4, lr}
	*current_value = (V1_V - V4_V)*1000.0/shuntR;
 800445e:	ee17 0a90 	vmov	r0, s15
{
 8004462:	460c      	mov	r4, r1
	*current_value = (V1_V - V4_V)*1000.0/shuntR;
 8004464:	f7fc f878 	bl	8000558 <__aeabi_f2d>
 8004468:	2200      	movs	r2, #0
 800446a:	4b09      	ldr	r3, [pc, #36]	; (8004490 <LTC2990_ReadCurrent+0x38>)
 800446c:	f7fc f8c8 	bl	8000600 <__aeabi_dmul>
 8004470:	a305      	add	r3, pc, #20	; (adr r3, 8004488 <LTC2990_ReadCurrent+0x30>)
 8004472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004476:	f7fc f9ed 	bl	8000854 <__aeabi_ddiv>
 800447a:	f7fc fbb9 	bl	8000bf0 <__aeabi_d2f>
 800447e:	6020      	str	r0, [r4, #0]
}
 8004480:	bd10      	pop	{r4, pc}
 8004482:	bf00      	nop
 8004484:	f3af 8000 	nop.w
 8004488:	40000000 	.word	0x40000000
 800448c:	3fc3d70a 	.word	0x3fc3d70a
 8004490:	408f4000 	.word	0x408f4000

08004494 <LTC2990_ReadVoltage>:
 */
HAL_StatusTypeDef LTC2990_ReadVoltage(I2C_HandleTypeDef *hi2c, ADC_CHANNEL ch, float* voltage_value)
{
	HAL_StatusTypeDef retStatus;

	if(ch == VCC)
 8004494:	b911      	cbnz	r1, 800449c <LTC2990_ReadVoltage+0x8>
	{
		//Vcc
		retStatus = LTC2990_ReadVcc(hi2c, voltage_value);
 8004496:	4611      	mov	r1, r2
 8004498:	f7ff bf02 	b.w	80042a0 <LTC2990_ReadVcc>
	}
	else if(ch == BATTV)
 800449c:	2901      	cmp	r1, #1
 800449e:	d102      	bne.n	80044a6 <LTC2990_ReadVoltage+0x12>
	{
		//Vbatt
		retStatus = LTC2990_ReadV1(hi2c, voltage_value);
 80044a0:	4611      	mov	r1, r2
 80044a2:	f7ff bf91 	b.w	80043c8 <LTC2990_ReadV1>
	}
	else if(ch == BATTV_2)
 80044a6:	2904      	cmp	r1, #4
 80044a8:	d102      	bne.n	80044b0 <LTC2990_ReadVoltage+0x1c>
	{
		//Vbatt2
		retStatus = LTC2990_ReadV2(hi2c, voltage_value);
 80044aa:	4611      	mov	r1, r2
 80044ac:	f7ff bf44 	b.w	8004338 <LTC2990_ReadV2>
	}
	else
	{
		//default case
		*voltage_value = 0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	6013      	str	r3, [r2, #0]
		retStatus = HAL_OK;
	}

	return retStatus;
}
 80044b4:	2000      	movs	r0, #0
 80044b6:	4770      	bx	lr

080044b8 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80044b8:	4b03      	ldr	r3, [pc, #12]	; (80044c8 <vApplicationGetIdleTaskMemory+0x10>)
 80044ba:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80044bc:	4b03      	ldr	r3, [pc, #12]	; (80044cc <vApplicationGetIdleTaskMemory+0x14>)
 80044be:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80044c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	4770      	bx	lr
 80044c8:	20001924 	.word	0x20001924
 80044cc:	20000924 	.word	0x20000924

080044d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80044d0:	b530      	push	{r4, r5, lr}
 80044d2:	b0a7      	sub	sp, #156	; 0x9c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80044d4:	2228      	movs	r2, #40	; 0x28
 80044d6:	2100      	movs	r1, #0
 80044d8:	a806      	add	r0, sp, #24
 80044da:	f001 f922 	bl	8005722 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80044de:	2214      	movs	r2, #20
 80044e0:	2100      	movs	r1, #0
 80044e2:	a801      	add	r0, sp, #4
 80044e4:	f001 f91d 	bl	8005722 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044e8:	2258      	movs	r2, #88	; 0x58
 80044ea:	2100      	movs	r1, #0
 80044ec:	a810      	add	r0, sp, #64	; 0x40
 80044ee:	f001 f918 	bl	8005722 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80044f2:	2301      	movs	r3, #1
 80044f4:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80044f6:	2310      	movs	r3, #16
 80044f8:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80044fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80044fe:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004500:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004502:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004504:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004508:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800450a:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800450c:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800450e:	f7fd fb11 	bl	8001b34 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004512:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004514:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004516:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004518:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800451a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800451e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004520:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004522:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004524:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004526:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004528:	f7fd fdcc 	bl	80020c4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800452c:	4b05      	ldr	r3, [pc, #20]	; (8004544 <SystemClock_Config+0x74>)
 800452e:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004530:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004532:	9412      	str	r4, [sp, #72]	; 0x48
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004534:	9413      	str	r4, [sp, #76]	; 0x4c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8004536:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8004538:	9422      	str	r4, [sp, #136]	; 0x88
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 800453a:	9423      	str	r4, [sp, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800453c:	f7fd fea0 	bl	8002280 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8004540:	b027      	add	sp, #156	; 0x9c
 8004542:	bd30      	pop	{r4, r5, pc}
 8004544:	01800023 	.word	0x01800023

08004548 <main>:
{
 8004548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800454c:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 800454e:	f7fc fd4b 	bl	8000fe8 <HAL_Init>
  SystemClock_Config();
 8004552:	f7ff ffbd 	bl	80044d0 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004556:	2214      	movs	r2, #20
 8004558:	2100      	movs	r1, #0
 800455a:	a807      	add	r0, sp, #28
 800455c:	f001 f8e1 	bl	8005722 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004560:	4b94      	ldr	r3, [pc, #592]	; (80047b4 <main+0x26c>)
  hdac1.Instance = DAC1;
 8004562:	4d95      	ldr	r5, [pc, #596]	; (80047b8 <main+0x270>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004564:	695a      	ldr	r2, [r3, #20]
 8004566:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800456a:	615a      	str	r2, [r3, #20]
 800456c:	695a      	ldr	r2, [r3, #20]
 800456e:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8004572:	9203      	str	r2, [sp, #12]
 8004574:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004576:	695a      	ldr	r2, [r3, #20]
 8004578:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800457c:	615a      	str	r2, [r3, #20]
 800457e:	695a      	ldr	r2, [r3, #20]
 8004580:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8004584:	9204      	str	r2, [sp, #16]
 8004586:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004588:	695a      	ldr	r2, [r3, #20]
 800458a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800458e:	615a      	str	r2, [r3, #20]
 8004590:	695a      	ldr	r2, [r3, #20]
 8004592:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004596:	9205      	str	r2, [sp, #20]
 8004598:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800459a:	695a      	ldr	r2, [r3, #20]
 800459c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80045a0:	615a      	str	r2, [r3, #20]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045a8:	9306      	str	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_USR2_Pin, GPIO_PIN_RESET);
 80045aa:	2200      	movs	r2, #0
 80045ac:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80045b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045b4:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_USR2_Pin, GPIO_PIN_RESET);
 80045b6:	f7fc ff51 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CHG_EN_Pin|LED_USR1_Pin, GPIO_PIN_RESET);
 80045ba:	2200      	movs	r2, #0
 80045bc:	f44f 6181 	mov.w	r1, #1032	; 0x408
 80045c0:	487e      	ldr	r0, [pc, #504]	; (80047bc <main+0x274>)
 80045c2:	f7fc ff4b 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80045c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ca:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 80045cc:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80045ce:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80045d0:	4b7b      	ldr	r3, [pc, #492]	; (80047c0 <main+0x278>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80045d2:	487c      	ldr	r0, [pc, #496]	; (80047c4 <main+0x27c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80045d4:	9308      	str	r3, [sp, #32]

  /*Configure GPIO pins : LD2_Pin LED_USR2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_USR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045d6:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d8:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80045da:	f7fc fe69 	bl	80012b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|LED_USR2_Pin;
 80045de:	f44f 6384 	mov.w	r3, #1056	; 0x420
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e2:	a907      	add	r1, sp, #28
 80045e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LD2_Pin|LED_USR2_Pin;
 80045e8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045ea:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ec:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ee:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045f0:	f7fc fe5e 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHG_EN_Pin LED_USR1_Pin */
  GPIO_InitStruct.Pin = CHG_EN_Pin|LED_USR1_Pin;
 80045f4:	f44f 6381 	mov.w	r3, #1032	; 0x408
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045f8:	a907      	add	r1, sp, #28
 80045fa:	4870      	ldr	r0, [pc, #448]	; (80047bc <main+0x274>)
  GPIO_InitStruct.Pin = CHG_EN_Pin|LED_USR1_Pin;
 80045fc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045fe:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004600:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004602:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004604:	f7fc fe54 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_INTERRUPT_Pin S1_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = S2_INTERRUPT_Pin|S1_INTERRUPT_Pin;
 8004608:	f44f 7340 	mov.w	r3, #768	; 0x300
 800460c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800460e:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004610:	4b6d      	ldr	r3, [pc, #436]	; (80047c8 <main+0x280>)
 8004612:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004618:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800461a:	f7fc fe49 	bl	80012b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800461e:	4622      	mov	r2, r4
 8004620:	2105      	movs	r1, #5
 8004622:	2017      	movs	r0, #23
 8004624:	f7fc fd2a 	bl	800107c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004628:	2017      	movs	r0, #23
 800462a:	f7fc fd5b 	bl	80010e4 <HAL_NVIC_EnableIRQ>
  hdac1.Instance = DAC1;
 800462e:	4b67      	ldr	r3, [pc, #412]	; (80047cc <main+0x284>)
 8004630:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004632:	4628      	mov	r0, r5
  DAC_ChannelConfTypeDef sConfig = {0};
 8004634:	9407      	str	r4, [sp, #28]
 8004636:	9408      	str	r4, [sp, #32]
 8004638:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800463a:	f7fc fd77 	bl	800112c <HAL_DAC_Init>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800463e:	a907      	add	r1, sp, #28
 8004640:	4622      	mov	r2, r4
 8004642:	4628      	mov	r0, r5
  hi2c1.Instance = I2C1;
 8004644:	4d62      	ldr	r5, [pc, #392]	; (80047d0 <main+0x288>)
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004646:	9407      	str	r4, [sp, #28]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004648:	9408      	str	r4, [sp, #32]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800464a:	f7fc fdbc 	bl	80011c6 <HAL_DAC_ConfigChannel>
  hi2c1.Init.Timing = 0x2000090E;
 800464e:	4a61      	ldr	r2, [pc, #388]	; (80047d4 <main+0x28c>)
 8004650:	4b61      	ldr	r3, [pc, #388]	; (80047d8 <main+0x290>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004652:	60ee      	str	r6, [r5, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004654:	4628      	mov	r0, r5
  hi2c1.Init.Timing = 0x2000090E;
 8004656:	e885 000c 	stmia.w	r5, {r2, r3}
  hi2c1.Init.OwnAddress1 = 0;
 800465a:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800465c:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800465e:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004660:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004662:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004664:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004666:	f7fd f852 	bl	800170e <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800466a:	4621      	mov	r1, r4
 800466c:	4628      	mov	r0, r5
  htim6.Instance = TIM6;
 800466e:	4e5b      	ldr	r6, [pc, #364]	; (80047dc <main+0x294>)
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004670:	f7fd fa14 	bl	8001a9c <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004674:	4621      	mov	r1, r4
 8004676:	4628      	mov	r0, r5
 8004678:	f7fd fa36 	bl	8001ae8 <HAL_I2CEx_ConfigDigitalFilter>
  htim6.Init.Prescaler = 36000;
 800467c:	4b58      	ldr	r3, [pc, #352]	; (80047e0 <main+0x298>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800467e:	60b4      	str	r4, [r6, #8]
  htim6.Init.Prescaler = 36000;
 8004680:	f648 4aa0 	movw	sl, #36000	; 0x8ca0
  htim6.Init.Period = 2500;
 8004684:	f640 18c4 	movw	r8, #2500	; 0x9c4
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004688:	4630      	mov	r0, r6
  htim6.Init.Prescaler = 36000;
 800468a:	e886 0408 	stmia.w	r6, {r3, sl}
  htim6.Init.Period = 2500;
 800468e:	f8c6 800c 	str.w	r8, [r6, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004692:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004694:	9407      	str	r4, [sp, #28]
 8004696:	9408      	str	r4, [sp, #32]
 8004698:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800469a:	f7fe f87f 	bl	800279c <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800469e:	a907      	add	r1, sp, #28
 80046a0:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046a2:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046a4:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80046a6:	f7fe f893 	bl	80027d0 <HAL_TIMEx_MasterConfigSynchronization>
  huart2.Instance = USART2;
 80046aa:	484e      	ldr	r0, [pc, #312]	; (80047e4 <main+0x29c>)
  huart2.Init.BaudRate = 38400;
 80046ac:	4b4e      	ldr	r3, [pc, #312]	; (80047e8 <main+0x2a0>)
  htim7.Instance = TIM7;
 80046ae:	4e4f      	ldr	r6, [pc, #316]	; (80047ec <main+0x2a4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80046b0:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 38400;
 80046b2:	f44f 4716 	mov.w	r7, #38400	; 0x9600
  huart2.Init.Mode = UART_MODE_TX_RX;
 80046b6:	f04f 090c 	mov.w	r9, #12
  huart2.Init.BaudRate = 38400;
 80046ba:	e880 0088 	stmia.w	r0, {r3, r7}
  huart2.Init.StopBits = UART_STOPBITS_1;
 80046be:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80046c0:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80046c2:	f8c0 9014 	str.w	r9, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046c6:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80046c8:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80046ca:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80046cc:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80046ce:	f7fe fbbb 	bl	8002e48 <HAL_UART_Init>
  htim7.Instance = TIM7;
 80046d2:	4b47      	ldr	r3, [pc, #284]	; (80047f0 <main+0x2a8>)
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046d4:	60b4      	str	r4, [r6, #8]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80046d6:	4630      	mov	r0, r6
  htim7.Init.Prescaler = 0;
 80046d8:	e886 0018 	stmia.w	r6, {r3, r4}
  htim7.Init.Period = 0;
 80046dc:	60f4      	str	r4, [r6, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046de:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046e0:	9407      	str	r4, [sp, #28]
 80046e2:	9408      	str	r4, [sp, #32]
 80046e4:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80046e6:	f7fe f859 	bl	800279c <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80046ea:	a907      	add	r1, sp, #28
 80046ec:	4630      	mov	r0, r6
  htim16.Instance = TIM16;
 80046ee:	4e41      	ldr	r6, [pc, #260]	; (80047f4 <main+0x2ac>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046f0:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046f2:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80046f4:	f7fe f86c 	bl	80027d0 <HAL_TIMEx_MasterConfigSynchronization>
  htim16.Instance = TIM16;
 80046f8:	4b3f      	ldr	r3, [pc, #252]	; (80047f8 <main+0x2b0>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046fa:	60b4      	str	r4, [r6, #8]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80046fc:	4630      	mov	r0, r6
  htim16.Init.Prescaler = 36000;
 80046fe:	e886 0408 	stmia.w	r6, {r3, sl}
  htim16.Init.Period = 2500;
 8004702:	f8c6 800c 	str.w	r8, [r6, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004706:	6134      	str	r4, [r6, #16]
  htim16.Init.RepetitionCounter = 0;
 8004708:	6174      	str	r4, [r6, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800470a:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800470c:	f7fe f846 	bl	800279c <HAL_TIM_Base_Init>
  htim17.Instance = TIM17;
 8004710:	483a      	ldr	r0, [pc, #232]	; (80047fc <main+0x2b4>)
 8004712:	4b3b      	ldr	r3, [pc, #236]	; (8004800 <main+0x2b8>)
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004714:	6084      	str	r4, [r0, #8]
  htim17.Init.Prescaler = 36000;
 8004716:	e880 0408 	stmia.w	r0, {r3, sl}
  htim17.Init.Period = 2500;
 800471a:	f8c0 800c 	str.w	r8, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800471e:	6104      	str	r4, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 8004720:	6144      	str	r4, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004722:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004724:	f7fe f83a 	bl	800279c <HAL_TIM_Base_Init>
  huart1.Instance = USART1;
 8004728:	4836      	ldr	r0, [pc, #216]	; (8004804 <main+0x2bc>)
 800472a:	4b37      	ldr	r3, [pc, #220]	; (8004808 <main+0x2c0>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800472c:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 38400;
 800472e:	e880 0088 	stmia.w	r0, {r3, r7}
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004732:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004734:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004736:	f8c0 9014 	str.w	r9, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800473a:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800473c:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800473e:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004740:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004742:	f7fe fb81 	bl	8002e48 <HAL_UART_Init>
  ssd1306_Init();
 8004746:	f000 fba7 	bl	8004e98 <ssd1306_Init>
  ssd1306_Fill(Black);
 800474a:	4620      	mov	r0, r4
 800474c:	f000 fb70 	bl	8004e30 <ssd1306_Fill>
  LTC2990_ConfigureControlReg(&hi2c1);
 8004750:	4628      	mov	r0, r5
 8004752:	f7ff fd55 	bl	8004200 <LTC2990_ConfigureControlReg>
  HAL_TIM_Base_Start_IT(&htim16);
 8004756:	4630      	mov	r0, r6
 8004758:	f7fd fed6 	bl	8002508 <HAL_TIM_Base_Start_IT>
  usRegInputBuf[0] = 11;
 800475c:	4a2b      	ldr	r2, [pc, #172]	; (800480c <main+0x2c4>)
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024, defaultTaskBuffer, &defaultTaskControlBlock);
 800475e:	4e2c      	ldr	r6, [pc, #176]	; (8004810 <main+0x2c8>)
  usRegInputBuf[0] = 11;
 8004760:	230b      	movs	r3, #11
 8004762:	8013      	strh	r3, [r2, #0]
  usRegInputBuf[1] = 22;
 8004764:	2316      	movs	r3, #22
 8004766:	8053      	strh	r3, [r2, #2]
  usRegInputBuf[2] = 33;
 8004768:	2321      	movs	r3, #33	; 0x21
 800476a:	8093      	strh	r3, [r2, #4]
  usRegInputBuf[3] = 44;
 800476c:	232c      	movs	r3, #44	; 0x2c
 800476e:	80d3      	strh	r3, [r2, #6]
  usRegInputBuf[4] = 55;
 8004770:	2337      	movs	r3, #55	; 0x37
 8004772:	8113      	strh	r3, [r2, #8]
  usRegInputBuf[5] = 66;
 8004774:	2342      	movs	r3, #66	; 0x42
 8004776:	8153      	strh	r3, [r2, #10]
  usRegInputBuf[6] = 77;
 8004778:	234d      	movs	r3, #77	; 0x4d
 800477a:	8193      	strh	r3, [r2, #12]
  usRegInputBuf[7] = 88;
 800477c:	2358      	movs	r3, #88	; 0x58
 800477e:	81d3      	strh	r3, [r2, #14]
  eStatus = eMBInit( MB_RTU, 0x0A, 0, 38400, MB_PAR_NONE );
 8004780:	210a      	movs	r1, #10
 8004782:	463b      	mov	r3, r7
 8004784:	4622      	mov	r2, r4
 8004786:	9400      	str	r4, [sp, #0]
 8004788:	4620      	mov	r0, r4
 800478a:	f7fe fd45 	bl	8003218 <eMBInit>
  eStatus = eMBEnable();
 800478e:	f7fe fd9b 	bl	80032c8 <eMBEnable>
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024, defaultTaskBuffer, &defaultTaskControlBlock);
 8004792:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004794:	ad07      	add	r5, sp, #28
 8004796:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004798:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800479c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80047a0:	4621      	mov	r1, r4
 80047a2:	a807      	add	r0, sp, #28
 80047a4:	f7ff f82f 	bl	8003806 <osThreadCreate>
 80047a8:	4b1a      	ldr	r3, [pc, #104]	; (8004814 <main+0x2cc>)
 80047aa:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80047ac:	f7ff f826 	bl	80037fc <osKernelStart>
 80047b0:	e7fe      	b.n	80047b0 <main+0x268>
 80047b2:	bf00      	nop
 80047b4:	40021000 	.word	0x40021000
 80047b8:	20001f0c 	.word	0x20001f0c
 80047bc:	48000400 	.word	0x48000400
 80047c0:	10110000 	.word	0x10110000
 80047c4:	48000800 	.word	0x48000800
 80047c8:	10210000 	.word	0x10210000
 80047cc:	40007400 	.word	0x40007400
 80047d0:	20001f20 	.word	0x20001f20
 80047d4:	40005400 	.word	0x40005400
 80047d8:	2000090e 	.word	0x2000090e
 80047dc:	20002050 	.word	0x20002050
 80047e0:	40001000 	.word	0x40001000
 80047e4:	200030f0 	.word	0x200030f0
 80047e8:	40004400 	.word	0x40004400
 80047ec:	200031b0 	.word	0x200031b0
 80047f0:	40001400 	.word	0x40001400
 80047f4:	20003170 	.word	0x20003170
 80047f8:	40014400 	.word	0x40014400
 80047fc:	20001f78 	.word	0x20001f78
 8004800:	40014800 	.word	0x40014800
 8004804:	20001fc4 	.word	0x20001fc4
 8004808:	40013800 	.word	0x40013800
 800480c:	200019a0 	.word	0x200019a0
 8004810:	08009b40 	.word	0x08009b40
 8004814:	20001f08 	.word	0x20001f08

08004818 <getLatestADCValues>:
		//If state is idle
		//Start counting rest time
	}
}

void getLatestADCValues(){
 8004818:	b537      	push	{r0, r1, r2, r4, r5, lr}

	float battV_2 = 0;
	float voltageADCVcc = 0;

	//Trigger a new conversion
	LTC2990_Trigger(&hi2c1);
 800481a:	4c13      	ldr	r4, [pc, #76]	; (8004868 <getLatestADCValues+0x50>)
	float voltageADCVcc = 0;
 800481c:	ad02      	add	r5, sp, #8
	float battV_2 = 0;
 800481e:	2300      	movs	r3, #0
	float voltageADCVcc = 0;
 8004820:	f845 3d04 	str.w	r3, [r5, #-4]!
	LTC2990_Trigger(&hi2c1);
 8004824:	4620      	mov	r0, r4
	float battV_2 = 0;
 8004826:	9300      	str	r3, [sp, #0]
	LTC2990_Trigger(&hi2c1);
 8004828:	f7ff fcfc 	bl	8004224 <LTC2990_Trigger>
	LTC2990_WaitForConversion(&hi2c1, 100);
 800482c:	2164      	movs	r1, #100	; 0x64
 800482e:	4620      	mov	r0, r4
 8004830:	f7ff fd0a 	bl	8004248 <LTC2990_WaitForConversion>

	//Quick ADC test - Read Vcc
	LTC2990_ReadVoltage(&hi2c1, VCC, &voltageADCVcc);
 8004834:	462a      	mov	r2, r5

	//Current reading
	LTC2990_ReadVoltage(&hi2c1, BATTV, &lastReadBattV);
 8004836:	4d0d      	ldr	r5, [pc, #52]	; (800486c <getLatestADCValues+0x54>)
	LTC2990_ReadVoltage(&hi2c1, VCC, &voltageADCVcc);
 8004838:	2100      	movs	r1, #0
 800483a:	4620      	mov	r0, r4
 800483c:	f7ff fe2a 	bl	8004494 <LTC2990_ReadVoltage>
	LTC2990_ReadVoltage(&hi2c1, BATTV, &lastReadBattV);
 8004840:	462a      	mov	r2, r5
 8004842:	2101      	movs	r1, #1
 8004844:	4620      	mov	r0, r4
 8004846:	f7ff fe25 	bl	8004494 <LTC2990_ReadVoltage>
	LTC2990_ReadVoltage(&hi2c1, BATTV_2, &battV_2);
 800484a:	466a      	mov	r2, sp
 800484c:	2104      	movs	r1, #4
 800484e:	4620      	mov	r0, r4
 8004850:	f7ff fe20 	bl	8004494 <LTC2990_ReadVoltage>
    LTC2990_ReadCurrent(&hi2c1, lastReadBattV, battV_2, &lastReadCurr_mA);
 8004854:	4906      	ldr	r1, [pc, #24]	; (8004870 <getLatestADCValues+0x58>)
 8004856:	eddd 0a00 	vldr	s1, [sp]
 800485a:	ed95 0a00 	vldr	s0, [r5]
 800485e:	4620      	mov	r0, r4
 8004860:	f7ff fdfa 	bl	8004458 <LTC2990_ReadCurrent>
}
 8004864:	b003      	add	sp, #12
 8004866:	bd30      	pop	{r4, r5, pc}
 8004868:	20001f20 	.word	0x20001f20
 800486c:	20001988 	.word	0x20001988
 8004870:	2000198c 	.word	0x2000198c

08004874 <updateOLED>:


void updateOLED(){
 8004874:	b510      	push	{r4, lr}
	ssd1306_SetCursor(52,25);
	ssd1306_WriteString(voltageADCVccString, Font_7x10, White);*/

	//State
	ssd1306_SetCursor(15,04);
	ssd1306_WriteString("State  ", Font_7x10, White);
 8004876:	4c54      	ldr	r4, [pc, #336]	; (80049c8 <updateOLED+0x154>)
	ssd1306_SetCursor(15,04);
 8004878:	2104      	movs	r1, #4
 800487a:	200f      	movs	r0, #15
 800487c:	f000 fbfa 	bl	8005074 <ssd1306_SetCursor>
	ssd1306_WriteString("State  ", Font_7x10, White);
 8004880:	2301      	movs	r3, #1
 8004882:	e894 0006 	ldmia.w	r4, {r1, r2}
 8004886:	4851      	ldr	r0, [pc, #324]	; (80049cc <updateOLED+0x158>)
 8004888:	f000 fbde 	bl	8005048 <ssd1306_WriteString>
	ssd1306_SetCursor(52,04);
 800488c:	2104      	movs	r1, #4
 800488e:	2034      	movs	r0, #52	; 0x34
 8004890:	f000 fbf0 	bl	8005074 <ssd1306_SetCursor>
	if(currentState == IDLE){
 8004894:	4b4e      	ldr	r3, [pc, #312]	; (80049d0 <updateOLED+0x15c>)
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	f040 8086 	bne.w	80049aa <updateOLED+0x136>
		ssd1306_WriteString("IDLE", Font_7x10, White);
 800489e:	e894 0006 	ldmia.w	r4, {r1, r2}
 80048a2:	484c      	ldr	r0, [pc, #304]	; (80049d4 <updateOLED+0x160>)
 80048a4:	2301      	movs	r3, #1
	} else if(currentState == CHG){
		ssd1306_WriteString("CHG", Font_7x10, White);
	} else if(currentState == DCHG){
		ssd1306_WriteString("DCHG", Font_7x10, White);
	} else {
		ssd1306_WriteString(" ", Font_7x10, White);
 80048a6:	f000 fbcf 	bl	8005048 <ssd1306_WriteString>
	}

	//Power
	sprintf(powerString, "%.2d W", (int)lastComputedPower);
 80048aa:	4b4b      	ldr	r3, [pc, #300]	; (80049d8 <updateOLED+0x164>)
 80048ac:	494b      	ldr	r1, [pc, #300]	; (80049dc <updateOLED+0x168>)
 80048ae:	edd3 7a00 	vldr	s15, [r3]
 80048b2:	484b      	ldr	r0, [pc, #300]	; (80049e0 <updateOLED+0x16c>)
 80048b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048b8:	ee17 2a90 	vmov	r2, s15
 80048bc:	f000 ff3a 	bl	8005734 <sprintf>
	ssd1306_SetCursor(15,14);
 80048c0:	210e      	movs	r1, #14
 80048c2:	200f      	movs	r0, #15
 80048c4:	f000 fbd6 	bl	8005074 <ssd1306_SetCursor>
	ssd1306_WriteString("Pwr   ", Font_7x10, White);
 80048c8:	e894 0006 	ldmia.w	r4, {r1, r2}
 80048cc:	2301      	movs	r3, #1
 80048ce:	4845      	ldr	r0, [pc, #276]	; (80049e4 <updateOLED+0x170>)
 80048d0:	f000 fbba 	bl	8005048 <ssd1306_WriteString>
	ssd1306_SetCursor(52,14);
 80048d4:	210e      	movs	r1, #14
 80048d6:	2034      	movs	r0, #52	; 0x34
 80048d8:	f000 fbcc 	bl	8005074 <ssd1306_SetCursor>
	ssd1306_WriteString(powerString, Font_7x10, White);
 80048dc:	e894 0006 	ldmia.w	r4, {r1, r2}
 80048e0:	2301      	movs	r3, #1
 80048e2:	483f      	ldr	r0, [pc, #252]	; (80049e0 <updateOLED+0x16c>)
 80048e4:	f000 fbb0 	bl	8005048 <ssd1306_WriteString>

	//SOC
	sprintf(socString, "%.2d %", (int)currentCellSOC);
 80048e8:	4b3f      	ldr	r3, [pc, #252]	; (80049e8 <updateOLED+0x174>)
 80048ea:	4940      	ldr	r1, [pc, #256]	; (80049ec <updateOLED+0x178>)
 80048ec:	edd3 7a00 	vldr	s15, [r3]
 80048f0:	483f      	ldr	r0, [pc, #252]	; (80049f0 <updateOLED+0x17c>)
 80048f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048f6:	ee17 2a90 	vmov	r2, s15
 80048fa:	f000 ff1b 	bl	8005734 <sprintf>
	ssd1306_SetCursor(15,25);
 80048fe:	2119      	movs	r1, #25
 8004900:	200f      	movs	r0, #15
 8004902:	f000 fbb7 	bl	8005074 <ssd1306_SetCursor>
	ssd1306_WriteString("SOC  ", Font_7x10, White);
 8004906:	e894 0006 	ldmia.w	r4, {r1, r2}
 800490a:	2301      	movs	r3, #1
 800490c:	4839      	ldr	r0, [pc, #228]	; (80049f4 <updateOLED+0x180>)
 800490e:	f000 fb9b 	bl	8005048 <ssd1306_WriteString>
	ssd1306_SetCursor(52,25);
 8004912:	2119      	movs	r1, #25
 8004914:	2034      	movs	r0, #52	; 0x34
 8004916:	f000 fbad 	bl	8005074 <ssd1306_SetCursor>
	ssd1306_WriteString(socString, Font_7x10, White);
 800491a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800491e:	2301      	movs	r3, #1
 8004920:	4833      	ldr	r0, [pc, #204]	; (80049f0 <updateOLED+0x17c>)
 8004922:	f000 fb91 	bl	8005048 <ssd1306_WriteString>


	//Current
	sprintf(currentString, "%.3d mA",(int)lastReadCurr_mA);
 8004926:	4b34      	ldr	r3, [pc, #208]	; (80049f8 <updateOLED+0x184>)
 8004928:	4934      	ldr	r1, [pc, #208]	; (80049fc <updateOLED+0x188>)
 800492a:	edd3 7a00 	vldr	s15, [r3]
 800492e:	4834      	ldr	r0, [pc, #208]	; (8004a00 <updateOLED+0x18c>)
 8004930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004934:	ee17 2a90 	vmov	r2, s15
 8004938:	f000 fefc 	bl	8005734 <sprintf>
	ssd1306_SetCursor(15,37);
 800493c:	2125      	movs	r1, #37	; 0x25
 800493e:	200f      	movs	r0, #15
 8004940:	f000 fb98 	bl	8005074 <ssd1306_SetCursor>
	ssd1306_WriteString("Cur  ", Font_7x10, White);
 8004944:	e894 0006 	ldmia.w	r4, {r1, r2}
 8004948:	2301      	movs	r3, #1
 800494a:	482e      	ldr	r0, [pc, #184]	; (8004a04 <updateOLED+0x190>)
 800494c:	f000 fb7c 	bl	8005048 <ssd1306_WriteString>
	ssd1306_SetCursor(52,37);
 8004950:	2125      	movs	r1, #37	; 0x25
 8004952:	2034      	movs	r0, #52	; 0x34
 8004954:	f000 fb8e 	bl	8005074 <ssd1306_SetCursor>
	ssd1306_WriteString(currentString, Font_7x10, White);
 8004958:	e894 0006 	ldmia.w	r4, {r1, r2}
 800495c:	2301      	movs	r3, #1
 800495e:	4828      	ldr	r0, [pc, #160]	; (8004a00 <updateOLED+0x18c>)
 8004960:	f000 fb72 	bl	8005048 <ssd1306_WriteString>

	//Voltage
	sprintf(battVString, "%.3d V", (int)lastReadBattV);
 8004964:	4b28      	ldr	r3, [pc, #160]	; (8004a08 <updateOLED+0x194>)
 8004966:	4929      	ldr	r1, [pc, #164]	; (8004a0c <updateOLED+0x198>)
 8004968:	edd3 7a00 	vldr	s15, [r3]
 800496c:	4828      	ldr	r0, [pc, #160]	; (8004a10 <updateOLED+0x19c>)
 800496e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004972:	ee17 2a90 	vmov	r2, s15
 8004976:	f000 fedd 	bl	8005734 <sprintf>
	ssd1306_SetCursor(15,49);
 800497a:	2131      	movs	r1, #49	; 0x31
 800497c:	200f      	movs	r0, #15
 800497e:	f000 fb79 	bl	8005074 <ssd1306_SetCursor>
	ssd1306_WriteString("BattV   ", Font_7x10, White);
 8004982:	e894 0006 	ldmia.w	r4, {r1, r2}
 8004986:	2301      	movs	r3, #1
 8004988:	4822      	ldr	r0, [pc, #136]	; (8004a14 <updateOLED+0x1a0>)
 800498a:	f000 fb5d 	bl	8005048 <ssd1306_WriteString>
	ssd1306_SetCursor(52,49);
 800498e:	2131      	movs	r1, #49	; 0x31
 8004990:	2034      	movs	r0, #52	; 0x34
 8004992:	f000 fb6f 	bl	8005074 <ssd1306_SetCursor>
	ssd1306_WriteString(battVString, Font_7x10, White);
 8004996:	e894 0006 	ldmia.w	r4, {r1, r2}
 800499a:	2301      	movs	r3, #1
 800499c:	481c      	ldr	r0, [pc, #112]	; (8004a10 <updateOLED+0x19c>)
 800499e:	f000 fb53 	bl	8005048 <ssd1306_WriteString>

	ssd1306_UpdateScreen();

}
 80049a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ssd1306_UpdateScreen();
 80049a6:	f000 ba51 	b.w	8004e4c <ssd1306_UpdateScreen>
	} else if(currentState == CHG){
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d103      	bne.n	80049b6 <updateOLED+0x142>
		ssd1306_WriteString("CHG", Font_7x10, White);
 80049ae:	e894 0006 	ldmia.w	r4, {r1, r2}
 80049b2:	4819      	ldr	r0, [pc, #100]	; (8004a18 <updateOLED+0x1a4>)
 80049b4:	e777      	b.n	80048a6 <updateOLED+0x32>
	} else if(currentState == DCHG){
 80049b6:	2b02      	cmp	r3, #2
		ssd1306_WriteString("DCHG", Font_7x10, White);
 80049b8:	e894 0006 	ldmia.w	r4, {r1, r2}
 80049bc:	f04f 0301 	mov.w	r3, #1
 80049c0:	bf0c      	ite	eq
 80049c2:	4816      	ldreq	r0, [pc, #88]	; (8004a1c <updateOLED+0x1a8>)
		ssd1306_WriteString(" ", Font_7x10, White);
 80049c4:	4816      	ldrne	r0, [pc, #88]	; (8004a20 <updateOLED+0x1ac>)
 80049c6:	e76e      	b.n	80048a6 <updateOLED+0x32>
 80049c8:	20000090 	.word	0x20000090
 80049cc:	0800a62e 	.word	0x0800a62e
 80049d0:	20001981 	.word	0x20001981
 80049d4:	08009ea9 	.word	0x08009ea9
 80049d8:	20001984 	.word	0x20001984
 80049dc:	0800a63b 	.word	0x0800a63b
 80049e0:	20002044 	.word	0x20002044
 80049e4:	0800a642 	.word	0x0800a642
 80049e8:	2000197c 	.word	0x2000197c
 80049ec:	0800a649 	.word	0x0800a649
 80049f0:	20003090 	.word	0x20003090
 80049f4:	0800a650 	.word	0x0800a650
 80049f8:	2000198c 	.word	0x2000198c
 80049fc:	0800a656 	.word	0x0800a656
 8004a00:	20001fb8 	.word	0x20001fb8
 8004a04:	0800a65e 	.word	0x0800a65e
 8004a08:	20001988 	.word	0x20001988
 8004a0c:	0800a664 	.word	0x0800a664
 8004a10:	20001f6c 	.word	0x20001f6c
 8004a14:	0800a66b 	.word	0x0800a66b
 8004a18:	0800a637 	.word	0x0800a637
 8004a1c:	0800a636 	.word	0x0800a636
 8004a20:	0800a672 	.word	0x0800a672

08004a24 <updateModbusInputRegisters>:
}

void updateModbusInputRegisters()
{
	/* ABCDEF */
	usRegInputBuf[0] = currentState;
 8004a24:	4b22      	ldr	r3, [pc, #136]	; (8004ab0 <updateModbusInputRegisters+0x8c>)
	char powerString[10];
	memset(powerString, 0, 10);
	sprintf(powerString, "%.2d W ", (int)lastComputedPower);
 8004a26:	4923      	ldr	r1, [pc, #140]	; (8004ab4 <updateModbusInputRegisters+0x90>)
	usRegInputBuf[0] = currentState;
 8004a28:	781b      	ldrb	r3, [r3, #0]
{
 8004a2a:	b530      	push	{r4, r5, lr}
	usRegInputBuf[0] = currentState;
 8004a2c:	4c22      	ldr	r4, [pc, #136]	; (8004ab8 <updateModbusInputRegisters+0x94>)
 8004a2e:	8023      	strh	r3, [r4, #0]
	sprintf(powerString, "%.2d W ", (int)lastComputedPower);
 8004a30:	4b22      	ldr	r3, [pc, #136]	; (8004abc <updateModbusInputRegisters+0x98>)
 8004a32:	edd3 7a00 	vldr	s15, [r3]
 8004a36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
{
 8004a3a:	b085      	sub	sp, #20
	memset(powerString, 0, 10);
 8004a3c:	2500      	movs	r5, #0
	sprintf(powerString, "%.2d W ", (int)lastComputedPower);
 8004a3e:	ee17 2a90 	vmov	r2, s15
 8004a42:	a801      	add	r0, sp, #4
	memset(powerString, 0, 10);
 8004a44:	9501      	str	r5, [sp, #4]
 8004a46:	9502      	str	r5, [sp, #8]
 8004a48:	f8ad 500c 	strh.w	r5, [sp, #12]
	sprintf(powerString, "%.2d W ", (int)lastComputedPower);
 8004a4c:	f000 fe72 	bl	8005734 <sprintf>
	usRegInputBuf[1] = powerString[1] << 8  | powerString[0];
 8004a50:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004a54:	f89d 3004 	ldrb.w	r3, [sp, #4]
	usRegInputBuf[2] = powerString[3] << 8  | powerString[2];
	usRegInputBuf[3] = powerString[5] << 8  | powerString[4];
	usRegInputBuf[4] = powerString[7] << 8  | powerString[6];
	usRegInputBuf[5] = powerString[9] << 8  | powerString[8];
	usRegInputBuf[6] = (USHORT)lastReadCurr_mA << 16;
 8004a58:	81a5      	strh	r5, [r4, #12]
	usRegInputBuf[1] = powerString[1] << 8  | powerString[0];
 8004a5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a5e:	8063      	strh	r3, [r4, #2]
	usRegInputBuf[2] = powerString[3] << 8  | powerString[2];
 8004a60:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004a64:	f89d 3006 	ldrb.w	r3, [sp, #6]
	usRegInputBuf[7] = (USHORT)lastReadBattV;
	usRegInputBuf[8] = (USHORT)lastReadBattV << 16;
 8004a68:	8225      	strh	r5, [r4, #16]
	usRegInputBuf[2] = powerString[3] << 8  | powerString[2];
 8004a6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a6e:	80a3      	strh	r3, [r4, #4]
	usRegInputBuf[3] = powerString[5] << 8  | powerString[4];
 8004a70:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8004a74:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004a78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a7c:	80e3      	strh	r3, [r4, #6]
	usRegInputBuf[4] = powerString[7] << 8  | powerString[6];
 8004a7e:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8004a82:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8004a86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a8a:	8123      	strh	r3, [r4, #8]
	usRegInputBuf[5] = powerString[9] << 8  | powerString[8];
 8004a8c:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8004a90:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004a94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a98:	8163      	strh	r3, [r4, #10]
	usRegInputBuf[7] = (USHORT)lastReadBattV;
 8004a9a:	4b09      	ldr	r3, [pc, #36]	; (8004ac0 <updateModbusInputRegisters+0x9c>)
 8004a9c:	edd3 7a00 	vldr	s15, [r3]
 8004aa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aa4:	ee17 3a90 	vmov	r3, s15
 8004aa8:	81e3      	strh	r3, [r4, #14]
}
 8004aaa:	b005      	add	sp, #20
 8004aac:	bd30      	pop	{r4, r5, pc}
 8004aae:	bf00      	nop
 8004ab0:	20001981 	.word	0x20001981
 8004ab4:	0800a626 	.word	0x0800a626
 8004ab8:	200019a0 	.word	0x200019a0
 8004abc:	20001984 	.word	0x20001984
 8004ac0:	20001988 	.word	0x20001988

08004ac4 <calcSOC>:

void calcSOC(float ocv_V, float chargeRemain_Ah){
 8004ac4:	b538      	push	{r3, r4, r5, lr}
	//Simple switch to start with
	if(currentState == IDLE){
 8004ac6:	4b10      	ldr	r3, [pc, #64]	; (8004b08 <calcSOC+0x44>)
 8004ac8:	4c10      	ldr	r4, [pc, #64]	; (8004b0c <calcSOC+0x48>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	4d10      	ldr	r5, [pc, #64]	; (8004b10 <calcSOC+0x4c>)
void calcSOC(float ocv_V, float chargeRemain_Ah){
 8004ace:	ed2d 8b02 	vpush	{d8}
 8004ad2:	ed9f 8a10 	vldr	s16, [pc, #64]	; 8004b14 <calcSOC+0x50>
 8004ad6:	eef0 8a08 	vmov.f32	s17, #8	; 0x40400000  3.0
	if(currentState == IDLE){
 8004ada:	b963      	cbnz	r3, 8004af6 <calcSOC+0x32>
		//If cell is not polarized.
		currentCellSOC = socByOCV(ocv_V);
 8004adc:	f000 fafe 	bl	80050dc <socByOCV>
		currChargeRemaining = (currentCellSOC / 100) * fullChargeCapacity;
 8004ae0:	eec0 7a08 	vdiv.f32	s15, s0, s16
		currentCellSOC = socByOCV(ocv_V);
 8004ae4:	ed84 0a00 	vstr	s0, [r4]
		currChargeRemaining = (currentCellSOC / 100) * fullChargeCapacity;
 8004ae8:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8004aec:	edc5 7a00 	vstr	s15, [r5]
	} else {
		//If cell is polarized
		currentCellSOC = (currChargeRemaining/fullChargeCapacity) * 100;
	}
}
 8004af0:	ecbd 8b02 	vpop	{d8}
 8004af4:	bd38      	pop	{r3, r4, r5, pc}
		currentCellSOC = (currChargeRemaining/fullChargeCapacity) * 100;
 8004af6:	ed95 7a00 	vldr	s14, [r5]
 8004afa:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8004afe:	ee67 7a88 	vmul.f32	s15, s15, s16
 8004b02:	edc4 7a00 	vstr	s15, [r4]
}
 8004b06:	e7f3      	b.n	8004af0 <calcSOC+0x2c>
 8004b08:	20001981 	.word	0x20001981
 8004b0c:	2000197c 	.word	0x2000197c
 8004b10:	20001978 	.word	0x20001978
 8004b14:	42c80000 	.word	0x42c80000

08004b18 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004b18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  getLatestADCValues();
	  calcSOC(lastReadBattV, currChargeRemaining);
 8004b1a:	4e0d      	ldr	r6, [pc, #52]	; (8004b50 <StartDefaultTask+0x38>)
 8004b1c:	4c0d      	ldr	r4, [pc, #52]	; (8004b54 <StartDefaultTask+0x3c>)
	  lastComputedPower = computePower(lastReadBattV);
 8004b1e:	4d0e      	ldr	r5, [pc, #56]	; (8004b58 <StartDefaultTask+0x40>)
	  getLatestADCValues();
 8004b20:	f7ff fe7a 	bl	8004818 <getLatestADCValues>
	  calcSOC(lastReadBattV, currChargeRemaining);
 8004b24:	edd6 0a00 	vldr	s1, [r6]
 8004b28:	ed94 0a00 	vldr	s0, [r4]
 8004b2c:	f7ff ffca 	bl	8004ac4 <calcSOC>
	  lastComputedPower = computePower(lastReadBattV);
 8004b30:	ed94 0a00 	vldr	s0, [r4]
 8004b34:	f000 faa4 	bl	8005080 <computePower>
 8004b38:	ed85 0a00 	vstr	s0, [r5]
	  updateOLED();
 8004b3c:	f7ff fe9a 	bl	8004874 <updateOLED>
	  updateModbusInputRegisters();
 8004b40:	f7ff ff70 	bl	8004a24 <updateModbusInputRegisters>
	  //updateSerialPort();
	  //HAL_Delay(1000); //Update rate to 1s
	  //Modbus Poll routine
	  eMBPoll();
 8004b44:	f7fe fbd2 	bl	80032ec <eMBPoll>
    osDelay(1);
 8004b48:	2001      	movs	r0, #1
 8004b4a:	f7fe fe71 	bl	8003830 <osDelay>
 8004b4e:	e7e7      	b.n	8004b20 <StartDefaultTask+0x8>
 8004b50:	20001978 	.word	0x20001978
 8004b54:	20001988 	.word	0x20001988
 8004b58:	20001984 	.word	0x20001984

08004b5c <HAL_GPIO_EXTI_Callback>:
	if(GPIO_Pin == S2_INTERRUPT_Pin || GPIO_Pin == S1_INTERRUPT_Pin)
 8004b5c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8004b60:	d002      	beq.n	8004b68 <HAL_GPIO_EXTI_Callback+0xc>
 8004b62:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004b66:	d102      	bne.n	8004b6e <HAL_GPIO_EXTI_Callback+0x12>
		HAL_TIM_Base_Start_IT(&htim6);
 8004b68:	4801      	ldr	r0, [pc, #4]	; (8004b70 <HAL_GPIO_EXTI_Callback+0x14>)
 8004b6a:	f7fd bccd 	b.w	8002508 <HAL_TIM_Base_Start_IT>
 8004b6e:	4770      	bx	lr
 8004b70:	20002050 	.word	0x20002050
 8004b74:	00000000 	.word	0x00000000

08004b78 <Discharging_Set>:
{
 8004b78:	2864      	cmp	r0, #100	; 0x64
 8004b7a:	b538      	push	{r3, r4, r5, lr}
 8004b7c:	bf28      	it	cs
 8004b7e:	2064      	movcs	r0, #100	; 0x64
 8004b80:	4605      	mov	r5, r0
	uint32_t dacCode = (uint32_t)(( pct / 100.0 ) * 4095.0);
 8004b82:	f7fb fcd7 	bl	8000534 <__aeabi_i2d>
 8004b86:	2200      	movs	r2, #0
 8004b88:	4b0f      	ldr	r3, [pc, #60]	; (8004bc8 <Discharging_Set+0x50>)
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacCode);
 8004b8a:	4c10      	ldr	r4, [pc, #64]	; (8004bcc <Discharging_Set+0x54>)
	uint32_t dacCode = (uint32_t)(( pct / 100.0 ) * 4095.0);
 8004b8c:	f7fb fe62 	bl	8000854 <__aeabi_ddiv>
 8004b90:	a30b      	add	r3, pc, #44	; (adr r3, 8004bc0 <Discharging_Set+0x48>)
 8004b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b96:	f7fb fd33 	bl	8000600 <__aeabi_dmul>
 8004b9a:	f7fc f809 	bl	8000bb0 <__aeabi_d2uiz>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacCode);
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	4611      	mov	r1, r2
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	f7fc fad5 	bl	8001154 <HAL_DAC_SetValue>
	currentDchgPct = pct;
 8004baa:	4b09      	ldr	r3, [pc, #36]	; (8004bd0 <Discharging_Set+0x58>)
 8004bac:	701d      	strb	r5, [r3, #0]
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8004bae:	4620      	mov	r0, r4
 8004bb0:	2100      	movs	r1, #0
}
 8004bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8004bb6:	f7fc badf 	b.w	8001178 <HAL_DAC_Start>
 8004bba:	bf00      	nop
 8004bbc:	f3af 8000 	nop.w
 8004bc0:	00000000 	.word	0x00000000
 8004bc4:	40affe00 	.word	0x40affe00
 8004bc8:	40590000 	.word	0x40590000
 8004bcc:	20001f0c 	.word	0x20001f0c
 8004bd0:	20001980 	.word	0x20001980

08004bd4 <Change_State.part.2>:
void Change_State(STATE new_state)
 8004bd4:	b508      	push	{r3, lr}
		HAL_GPIO_WritePin(GPIOB, CHG_EN_Pin, GPIO_PIN_SET);
 8004bd6:	4805      	ldr	r0, [pc, #20]	; (8004bec <Change_State.part.2+0x18>)
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004bde:	f7fc fc3d 	bl	800145c <HAL_GPIO_WritePin>
		Discharging_Set(0); //Set discharge current to 0A
 8004be2:	2000      	movs	r0, #0
}
 8004be4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Discharging_Set(0); //Set discharge current to 0A
 8004be8:	f7ff bfc6 	b.w	8004b78 <Discharging_Set>
 8004bec:	48000400 	.word	0x48000400

08004bf0 <Charging_Enable>:
	if(chg_en == CHG_ENABLE)
 8004bf0:	2801      	cmp	r0, #1
{
 8004bf2:	4602      	mov	r2, r0
		HAL_GPIO_WritePin(GPIOB, CHG_EN_Pin, GPIO_PIN_RESET);
 8004bf4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004bf8:	bf18      	it	ne
 8004bfa:	2200      	movne	r2, #0
 8004bfc:	4801      	ldr	r0, [pc, #4]	; (8004c04 <Charging_Enable+0x14>)
 8004bfe:	f7fc bc2d 	b.w	800145c <HAL_GPIO_WritePin>
 8004c02:	bf00      	nop
 8004c04:	48000400 	.word	0x48000400

08004c08 <Change_State>:
	currentState = new_state;
 8004c08:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <Change_State+0x34>)
{
 8004c0a:	b510      	push	{r4, lr}
 8004c0c:	4604      	mov	r4, r0
	currentState = new_state;
 8004c0e:	7018      	strb	r0, [r3, #0]
	if(currentState == IDLE)
 8004c10:	b930      	cbnz	r0, 8004c20 <Change_State+0x18>
		Charging_Enable(CHG_DISABLE);
 8004c12:	f7ff ffed 	bl	8004bf0 <Charging_Enable>
		Discharging_Set(0); //Set discharge current to 0A
 8004c16:	4620      	mov	r0, r4
}
 8004c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Discharging_Set(10); //Set discharge current to 10%
 8004c1c:	f7ff bfac 	b.w	8004b78 <Discharging_Set>
	else if(currentState == CHG)
 8004c20:	2801      	cmp	r0, #1
 8004c22:	d103      	bne.n	8004c2c <Change_State+0x24>
}
 8004c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c28:	f7ff bfd4 	b.w	8004bd4 <Change_State.part.2>
	else if (currentState == DCHG)
 8004c2c:	2802      	cmp	r0, #2
 8004c2e:	d104      	bne.n	8004c3a <Change_State+0x32>
		Charging_Enable(CHG_DISABLE);
 8004c30:	2000      	movs	r0, #0
 8004c32:	f7ff ffdd 	bl	8004bf0 <Charging_Enable>
		Discharging_Set(10); //Set discharge current to 10%
 8004c36:	200a      	movs	r0, #10
 8004c38:	e7ee      	b.n	8004c18 <Change_State+0x10>
 8004c3a:	bd10      	pop	{r4, pc}
 8004c3c:	20001981 	.word	0x20001981

08004c40 <HAL_TIM_PeriodElapsedCallback>:
{
 8004c40:	b538      	push	{r3, r4, r5, lr}
	if(htim == &htim6){
 8004c42:	4b3d      	ldr	r3, [pc, #244]	; (8004d38 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8004c44:	4298      	cmp	r0, r3
 8004c46:	d15c      	bne.n	8004d02 <HAL_TIM_PeriodElapsedCallback+0xc2>
		HAL_GPIO_TogglePin(LED_USR1_GPIO_Port, LED_USR1_Pin); //LED1 toggles every 0.5 seconds
 8004c48:	2108      	movs	r1, #8
 8004c4a:	483c      	ldr	r0, [pc, #240]	; (8004d3c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004c4c:	4c3c      	ldr	r4, [pc, #240]	; (8004d40 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004c4e:	f7fc fc0a 	bl	8001466 <HAL_GPIO_TogglePin>
		if(HAL_GPIO_ReadPin(GPIOA, S1_INTERRUPT_Pin) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOA, S2_INTERRUPT_Pin) == GPIO_PIN_RESET)
 8004c52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c5a:	f7fc fbf9 	bl	8001450 <HAL_GPIO_ReadPin>
 8004c5e:	bb80      	cbnz	r0, 8004cc2 <HAL_TIM_PeriodElapsedCallback+0x82>
 8004c60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c68:	f7fc fbf2 	bl	8001450 <HAL_GPIO_ReadPin>
 8004c6c:	4605      	mov	r5, r0
 8004c6e:	bb40      	cbnz	r0, 8004cc2 <HAL_TIM_PeriodElapsedCallback+0x82>
			if(currentState == IDLE)
 8004c70:	7822      	ldrb	r2, [r4, #0]
 8004c72:	b97a      	cbnz	r2, 8004c94 <HAL_TIM_PeriodElapsedCallback+0x54>
				HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_USR2_Pin, GPIO_PIN_SET);
 8004c74:	2201      	movs	r2, #1
 8004c76:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c7e:	f7fc fbed 	bl	800145c <HAL_GPIO_WritePin>
	currentState = new_state;
 8004c82:	2301      	movs	r3, #1
 8004c84:	7023      	strb	r3, [r4, #0]
 8004c86:	f7ff ffa5 	bl	8004bd4 <Change_State.part.2>
		HAL_TIM_Base_Stop_IT(&htim6);
 8004c8a:	482b      	ldr	r0, [pc, #172]	; (8004d38 <HAL_TIM_PeriodElapsedCallback+0xf8>)
}
 8004c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_TIM_Base_Stop_IT(&htim6);
 8004c90:	f7fd bc50 	b.w	8002534 <HAL_TIM_Base_Stop_IT>
			else if(currentState == CHG)
 8004c94:	2a01      	cmp	r2, #1
 8004c96:	d109      	bne.n	8004cac <HAL_TIM_PeriodElapsedCallback+0x6c>
				HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_USR2_Pin, GPIO_PIN_SET);
 8004c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c9c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004ca0:	f7fc fbdc 	bl	800145c <HAL_GPIO_WritePin>
				Change_State(DCHG);
 8004ca4:	2002      	movs	r0, #2
				Change_State(IDLE);
 8004ca6:	f7ff ffaf 	bl	8004c08 <Change_State>
 8004caa:	e7ee      	b.n	8004c8a <HAL_TIM_PeriodElapsedCallback+0x4a>
			else if(currentState == DCHG)
 8004cac:	2a02      	cmp	r2, #2
 8004cae:	d1fa      	bne.n	8004ca6 <HAL_TIM_PeriodElapsedCallback+0x66>
				HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_USR2_Pin, GPIO_PIN_RESET);
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cba:	f7fc fbcf 	bl	800145c <HAL_GPIO_WritePin>
				Change_State(IDLE);
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	e7f1      	b.n	8004ca6 <HAL_TIM_PeriodElapsedCallback+0x66>
		else if(currentState == DCHG && HAL_GPIO_ReadPin(GPIOA, S1_INTERRUPT_Pin) == GPIO_PIN_RESET)
 8004cc2:	7823      	ldrb	r3, [r4, #0]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d10d      	bne.n	8004ce4 <HAL_TIM_PeriodElapsedCallback+0xa4>
 8004cc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cd0:	f7fc fbbe 	bl	8001450 <HAL_GPIO_ReadPin>
 8004cd4:	b930      	cbnz	r0, 8004ce4 <HAL_TIM_PeriodElapsedCallback+0xa4>
			uint8_t newDchgPct = currentDchgPct + 10;
 8004cd6:	4b1b      	ldr	r3, [pc, #108]	; (8004d44 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004cd8:	7818      	ldrb	r0, [r3, #0]
 8004cda:	300a      	adds	r0, #10
			Discharging_Set(newDchgPct);
 8004cdc:	b2c0      	uxtb	r0, r0
 8004cde:	f7ff ff4b 	bl	8004b78 <Discharging_Set>
 8004ce2:	e7d2      	b.n	8004c8a <HAL_TIM_PeriodElapsedCallback+0x4a>
		else if(currentState == DCHG && HAL_GPIO_ReadPin(GPIOA, S2_INTERRUPT_Pin) == GPIO_PIN_RESET)
 8004ce4:	7823      	ldrb	r3, [r4, #0]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d1cf      	bne.n	8004c8a <HAL_TIM_PeriodElapsedCallback+0x4a>
 8004cea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cf2:	f7fc fbad 	bl	8001450 <HAL_GPIO_ReadPin>
 8004cf6:	2800      	cmp	r0, #0
 8004cf8:	d1c7      	bne.n	8004c8a <HAL_TIM_PeriodElapsedCallback+0x4a>
			uint8_t newDchgPct = currentDchgPct - 10;
 8004cfa:	4b12      	ldr	r3, [pc, #72]	; (8004d44 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004cfc:	7818      	ldrb	r0, [r3, #0]
 8004cfe:	380a      	subs	r0, #10
 8004d00:	e7ec      	b.n	8004cdc <HAL_TIM_PeriodElapsedCallback+0x9c>
	else if(htim == &htim16){ //This timer ticks every one second and is used for charge remaning calculation
 8004d02:	4b11      	ldr	r3, [pc, #68]	; (8004d48 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8004d04:	4298      	cmp	r0, r3
 8004d06:	d116      	bne.n	8004d36 <HAL_TIM_PeriodElapsedCallback+0xf6>
		if(currentState == DCHG || currentState == CHG){
 8004d08:	4b0d      	ldr	r3, [pc, #52]	; (8004d40 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d811      	bhi.n	8004d36 <HAL_TIM_PeriodElapsedCallback+0xf6>
			currChargeRemaining += calcdeltaAh(1, lastReadCurr_mA / 1000.0);
 8004d12:	4b0e      	ldr	r3, [pc, #56]	; (8004d4c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8004d14:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8004d50 <HAL_TIM_PeriodElapsedCallback+0x110>
 8004d18:	edd3 0a00 	vldr	s1, [r3]
 8004d1c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004d20:	eec0 0aa7 	vdiv.f32	s1, s1, s15
 8004d24:	f000 f9d0 	bl	80050c8 <calcdeltaAh>
 8004d28:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8004d2a:	edd3 7a00 	vldr	s15, [r3]
 8004d2e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004d32:	ed83 0a00 	vstr	s0, [r3]
 8004d36:	bd38      	pop	{r3, r4, r5, pc}
 8004d38:	20002050 	.word	0x20002050
 8004d3c:	48000400 	.word	0x48000400
 8004d40:	20001981 	.word	0x20001981
 8004d44:	20001980 	.word	0x20001980
 8004d48:	20003170 	.word	0x20003170
 8004d4c:	2000198c 	.word	0x2000198c
 8004d50:	447a0000 	.word	0x447a0000
 8004d54:	20001978 	.word	0x20001978

08004d58 <eMBRegInputCB>:
    if( ( usAddress >= REG_INPUT_START )
 8004d58:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
{
 8004d5c:	b510      	push	{r4, lr}
    if( ( usAddress >= REG_INPUT_START )
 8004d5e:	d317      	bcc.n	8004d90 <eMBRegInputCB+0x38>
        && ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
 8004d60:	188c      	adds	r4, r1, r2
 8004d62:	f240 33f1 	movw	r3, #1009	; 0x3f1
 8004d66:	429c      	cmp	r4, r3
 8004d68:	dc12      	bgt.n	8004d90 <eMBRegInputCB+0x38>
 8004d6a:	4b0a      	ldr	r3, [pc, #40]	; (8004d94 <eMBRegInputCB+0x3c>)
 8004d6c:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8004d70:	f2a1 71d2 	subw	r1, r1, #2002	; 0x7d2
 8004d74:	3002      	adds	r0, #2
        while( usNRegs > 0 )
 8004d76:	b90a      	cbnz	r2, 8004d7c <eMBRegInputCB+0x24>
    eMBErrorCode    eStatus = MB_ENOERR;
 8004d78:	4610      	mov	r0, r2
 8004d7a:	bd10      	pop	{r4, pc}
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 8004d7c:	f831 3f02 	ldrh.w	r3, [r1, #2]!
                ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
 8004d80:	f800 3c01 	strb.w	r3, [r0, #-1]
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 8004d84:	0a1c      	lsrs	r4, r3, #8
            usNRegs--;
 8004d86:	3a01      	subs	r2, #1
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 8004d88:	f800 4c02 	strb.w	r4, [r0, #-2]
            usNRegs--;
 8004d8c:	b292      	uxth	r2, r2
 8004d8e:	e7f1      	b.n	8004d74 <eMBRegInputCB+0x1c>
        eStatus = MB_ENOREG;
 8004d90:	2001      	movs	r0, #1
}
 8004d92:	bd10      	pop	{r4, pc}
 8004d94:	200019a0 	.word	0x200019a0

08004d98 <eMBRegHoldingCB>:
    if( ( usAddress >= REG_HOLDING_START ) &&
 8004d98:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
{
 8004d9c:	b510      	push	{r4, lr}
    if( ( usAddress >= REG_HOLDING_START ) &&
 8004d9e:	d32b      	bcc.n	8004df8 <eMBRegHoldingCB+0x60>
        ( usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS ) )
 8004da0:	188c      	adds	r4, r1, r2
    if( ( usAddress >= REG_HOLDING_START ) &&
 8004da2:	f5b4 6ffb 	cmp.w	r4, #2008	; 0x7d8
 8004da6:	dc27      	bgt.n	8004df8 <eMBRegHoldingCB+0x60>
        switch ( eMode )
 8004da8:	b19b      	cbz	r3, 8004dd2 <eMBRegHoldingCB+0x3a>
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d118      	bne.n	8004de0 <eMBRegHoldingCB+0x48>
 8004dae:	4b13      	ldr	r3, [pc, #76]	; (8004dfc <eMBRegHoldingCB+0x64>)
 8004db0:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8004db4:	f6a1 71a2 	subw	r1, r1, #4002	; 0xfa2
 8004db8:	3002      	adds	r0, #2
            while( usNRegs > 0 )
 8004dba:	b18a      	cbz	r2, 8004de0 <eMBRegHoldingCB+0x48>
                usRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8004dbc:	f810 4c02 	ldrb.w	r4, [r0, #-2]
                usRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 8004dc0:	f810 3c01 	ldrb.w	r3, [r0, #-1]
                usNRegs--;
 8004dc4:	3a01      	subs	r2, #1
                usRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 8004dc6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8004dca:	f821 3f02 	strh.w	r3, [r1, #2]!
                usNRegs--;
 8004dce:	b292      	uxth	r2, r2
 8004dd0:	e7f2      	b.n	8004db8 <eMBRegHoldingCB+0x20>
 8004dd2:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <eMBRegHoldingCB+0x64>)
 8004dd4:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8004dd8:	f6a1 71a2 	subw	r1, r1, #4002	; 0xfa2
 8004ddc:	3002      	adds	r0, #2
            while( usNRegs > 0 )
 8004dde:	b90a      	cbnz	r2, 8004de4 <eMBRegHoldingCB+0x4c>
    eMBErrorCode    eStatus = MB_ENOERR;
 8004de0:	2000      	movs	r0, #0
}
 8004de2:	bd10      	pop	{r4, pc}
                *pucRegBuffer++ = ( UCHAR ) ( usRegHoldingBuf[iRegIndex] >> 8 );
 8004de4:	f831 3f02 	ldrh.w	r3, [r1, #2]!
                *pucRegBuffer++ = ( UCHAR ) ( usRegHoldingBuf[iRegIndex] & 0xFF );
 8004de8:	f800 3c01 	strb.w	r3, [r0, #-1]
                *pucRegBuffer++ = ( UCHAR ) ( usRegHoldingBuf[iRegIndex] >> 8 );
 8004dec:	0a1c      	lsrs	r4, r3, #8
                usNRegs--;
 8004dee:	3a01      	subs	r2, #1
                *pucRegBuffer++ = ( UCHAR ) ( usRegHoldingBuf[iRegIndex] >> 8 );
 8004df0:	f800 4c02 	strb.w	r4, [r0, #-2]
                usNRegs--;
 8004df4:	b292      	uxth	r2, r2
 8004df6:	e7f1      	b.n	8004ddc <eMBRegHoldingCB+0x44>
        eStatus = MB_ENOREG;
 8004df8:	2001      	movs	r0, #1
 8004dfa:	bd10      	pop	{r4, pc}
 8004dfc:	20001990 	.word	0x20001990

08004e00 <eMBRegCoilsCB>:
}
 8004e00:	2001      	movs	r0, #1
 8004e02:	4770      	bx	lr

08004e04 <eMBRegDiscreteCB>:
}
 8004e04:	2001      	movs	r0, #1
 8004e06:	4770      	bx	lr

08004e08 <ssd1306_WriteCommand>:


static SSD1306_t SSD1306;

void ssd1306_WriteCommand(uint8_t command)
{
 8004e08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004e0a:	aa06      	add	r2, sp, #24
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8004e0c:	230a      	movs	r3, #10
{
 8004e0e:	f802 0d01 	strb.w	r0, [r2, #-1]!
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8004e12:	9302      	str	r3, [sp, #8]
 8004e14:	2301      	movs	r3, #1
 8004e16:	e88d 000c 	stmia.w	sp, {r2, r3}
 8004e1a:	2178      	movs	r1, #120	; 0x78
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	4803      	ldr	r0, [pc, #12]	; (8004e2c <ssd1306_WriteCommand+0x24>)
 8004e20:	f7fc fcc6 	bl	80017b0 <HAL_I2C_Mem_Write>
}
 8004e24:	b007      	add	sp, #28
 8004e26:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e2a:	bf00      	nop
 8004e2c:	20001f20 	.word	0x20001f20

08004e30 <ssd1306_Fill>:
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004e30:	4905      	ldr	r1, [pc, #20]	; (8004e48 <ssd1306_Fill+0x18>)
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8004e32:	2300      	movs	r3, #0
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004e34:	1c02      	adds	r2, r0, #0
 8004e36:	bf18      	it	ne
 8004e38:	2201      	movne	r2, #1
 8004e3a:	4252      	negs	r2, r2
 8004e3c:	545a      	strb	r2, [r3, r1]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8004e3e:	3301      	adds	r3, #1
 8004e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e44:	d1f6      	bne.n	8004e34 <ssd1306_Fill+0x4>
	}
}
 8004e46:	4770      	bx	lr
 8004e48:	200019b8 	.word	0x200019b8

08004e4c <ssd1306_UpdateScreen>:

void ssd1306_UpdateScreen(void)
{
 8004e4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	for (i = 0; i < 8; i++) {
		ssd1306_WriteCommand(0xB0 + i);
		ssd1306_WriteCommand(0x00);
		ssd1306_WriteCommand(0x10);

		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 8004e4e:	4e10      	ldr	r6, [pc, #64]	; (8004e90 <ssd1306_UpdateScreen+0x44>)
 8004e50:	4d10      	ldr	r5, [pc, #64]	; (8004e94 <ssd1306_UpdateScreen+0x48>)
{
 8004e52:	2400      	movs	r4, #0
		ssd1306_WriteCommand(0xB0 + i);
 8004e54:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 8004e58:	b2c0      	uxtb	r0, r0
 8004e5a:	f7ff ffd5 	bl	8004e08 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8004e5e:	2000      	movs	r0, #0
 8004e60:	f7ff ffd2 	bl	8004e08 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8004e64:	2010      	movs	r0, #16
 8004e66:	f7ff ffcf 	bl	8004e08 <ssd1306_WriteCommand>
		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 8004e6a:	2364      	movs	r3, #100	; 0x64
 8004e6c:	9302      	str	r3, [sp, #8]
 8004e6e:	2380      	movs	r3, #128	; 0x80
 8004e70:	9301      	str	r3, [sp, #4]
 8004e72:	eb06 13c4 	add.w	r3, r6, r4, lsl #7
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	2240      	movs	r2, #64	; 0x40
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	2178      	movs	r1, #120	; 0x78
 8004e7e:	4628      	mov	r0, r5
 8004e80:	3401      	adds	r4, #1
 8004e82:	f7fc fc95 	bl	80017b0 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8004e86:	2c08      	cmp	r4, #8
 8004e88:	d1e4      	bne.n	8004e54 <ssd1306_UpdateScreen+0x8>
	}
}
 8004e8a:	b004      	add	sp, #16
 8004e8c:	bd70      	pop	{r4, r5, r6, pc}
 8004e8e:	bf00      	nop
 8004e90:	200019b8 	.word	0x200019b8
 8004e94:	20001f20 	.word	0x20001f20

08004e98 <ssd1306_Init>:
{
 8004e98:	b508      	push	{r3, lr}
	HAL_Delay(100);
 8004e9a:	2064      	movs	r0, #100	; 0x64
 8004e9c:	f7fc f8c8 	bl	8001030 <HAL_Delay>
	ssd1306_WriteCommand(0xAE); //display off
 8004ea0:	20ae      	movs	r0, #174	; 0xae
 8004ea2:	f7ff ffb1 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004ea6:	2020      	movs	r0, #32
 8004ea8:	f7ff ffae 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8004eac:	2010      	movs	r0, #16
 8004eae:	f7ff ffab 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004eb2:	20b0      	movs	r0, #176	; 0xb0
 8004eb4:	f7ff ffa8 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004eb8:	20c8      	movs	r0, #200	; 0xc8
 8004eba:	f7ff ffa5 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	f7ff ffa2 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8004ec4:	2010      	movs	r0, #16
 8004ec6:	f7ff ff9f 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8004eca:	2040      	movs	r0, #64	; 0x40
 8004ecc:	f7ff ff9c 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8004ed0:	2081      	movs	r0, #129	; 0x81
 8004ed2:	f7ff ff99 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8004ed6:	20ff      	movs	r0, #255	; 0xff
 8004ed8:	f7ff ff96 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8004edc:	20a1      	movs	r0, #161	; 0xa1
 8004ede:	f7ff ff93 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8004ee2:	20a6      	movs	r0, #166	; 0xa6
 8004ee4:	f7ff ff90 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8004ee8:	20a8      	movs	r0, #168	; 0xa8
 8004eea:	f7ff ff8d 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8004eee:	203f      	movs	r0, #63	; 0x3f
 8004ef0:	f7ff ff8a 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004ef4:	20a4      	movs	r0, #164	; 0xa4
 8004ef6:	f7ff ff87 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8004efa:	20d3      	movs	r0, #211	; 0xd3
 8004efc:	f7ff ff84 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8004f00:	2000      	movs	r0, #0
 8004f02:	f7ff ff81 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004f06:	20d5      	movs	r0, #213	; 0xd5
 8004f08:	f7ff ff7e 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004f0c:	20f0      	movs	r0, #240	; 0xf0
 8004f0e:	f7ff ff7b 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004f12:	20d9      	movs	r0, #217	; 0xd9
 8004f14:	f7ff ff78 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8004f18:	2022      	movs	r0, #34	; 0x22
 8004f1a:	f7ff ff75 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8004f1e:	20da      	movs	r0, #218	; 0xda
 8004f20:	f7ff ff72 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8004f24:	2012      	movs	r0, #18
 8004f26:	f7ff ff6f 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8004f2a:	20db      	movs	r0, #219	; 0xdb
 8004f2c:	f7ff ff6c 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004f30:	2020      	movs	r0, #32
 8004f32:	f7ff ff69 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004f36:	208d      	movs	r0, #141	; 0x8d
 8004f38:	f7ff ff66 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8004f3c:	2014      	movs	r0, #20
 8004f3e:	f7ff ff63 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8004f42:	20af      	movs	r0, #175	; 0xaf
 8004f44:	f7ff ff60 	bl	8004e08 <ssd1306_WriteCommand>
	ssd1306_Fill(Black);
 8004f48:	2000      	movs	r0, #0
 8004f4a:	f7ff ff71 	bl	8004e30 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8004f4e:	f7ff ff7d 	bl	8004e4c <ssd1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8004f52:	4b03      	ldr	r3, [pc, #12]	; (8004f60 <ssd1306_Init+0xc8>)
	SSD1306.Initialized = 1;
 8004f54:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 8004f56:	2200      	movs	r2, #0
	SSD1306.Initialized = 1;
 8004f58:	7158      	strb	r0, [r3, #5]
	SSD1306.CurrentX = 0;
 8004f5a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8004f5c:	805a      	strh	r2, [r3, #2]
}
 8004f5e:	bd08      	pop	{r3, pc}
 8004f60:	200019b2 	.word	0x200019b2

08004f64 <ssd1306_DrawPixel>:

void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8004f64:	0603      	lsls	r3, r0, #24
{
 8004f66:	b530      	push	{r4, r5, lr}
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8004f68:	d41b      	bmi.n	8004fa2 <ssd1306_DrawPixel+0x3e>
 8004f6a:	293f      	cmp	r1, #63	; 0x3f
 8004f6c:	d819      	bhi.n	8004fa2 <ssd1306_DrawPixel+0x3e>
	{
		return;
	}

	if (SSD1306.Inverted)
 8004f6e:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <ssd1306_DrawPixel+0x40>)
 8004f70:	791b      	ldrb	r3, [r3, #4]
 8004f72:	b113      	cbz	r3, 8004f7a <ssd1306_DrawPixel+0x16>
	{
		color = (SSD1306_COLOR)!color;
 8004f74:	fab2 f282 	clz	r2, r2
 8004f78:	0952      	lsrs	r2, r2, #5
 8004f7a:	08cb      	lsrs	r3, r1, #3
 8004f7c:	2580      	movs	r5, #128	; 0x80
	}

	if (color == White)
 8004f7e:	2a01      	cmp	r2, #1
 8004f80:	4c09      	ldr	r4, [pc, #36]	; (8004fa8 <ssd1306_DrawPixel+0x44>)
 8004f82:	f001 0107 	and.w	r1, r1, #7
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004f86:	fb05 0003 	mla	r0, r5, r3, r0
	if (color == White)
 8004f8a:	d104      	bne.n	8004f96 <ssd1306_DrawPixel+0x32>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004f8c:	408a      	lsls	r2, r1
 8004f8e:	5c21      	ldrb	r1, [r4, r0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	5422      	strb	r2, [r4, r0]
 8004f94:	bd30      	pop	{r4, r5, pc}
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004f96:	2201      	movs	r2, #1
 8004f98:	408a      	lsls	r2, r1
 8004f9a:	5c21      	ldrb	r1, [r4, r0]
 8004f9c:	ea21 0102 	bic.w	r1, r1, r2
 8004fa0:	5421      	strb	r1, [r4, r0]
 8004fa2:	bd30      	pop	{r4, r5, pc}
 8004fa4:	200019b2 	.word	0x200019b2
 8004fa8:	200019b8 	.word	0x200019b8

08004fac <ssd1306_WriteChar>:
	}
}

//	color 	=> Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8004fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb0:	b087      	sub	sp, #28
 8004fb2:	4607      	mov	r7, r0
 8004fb4:	a806      	add	r0, sp, #24
 8004fb6:	e900 0006 	stmdb	r0, {r1, r2}
 8004fba:	469b      	mov	fp, r3
	uint32_t i, b, j;

	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8004fbc:	4b21      	ldr	r3, [pc, #132]	; (8005044 <ssd1306_WriteChar+0x98>)
 8004fbe:	f89d 9010 	ldrb.w	r9, [sp, #16]
 8004fc2:	881c      	ldrh	r4, [r3, #0]
 8004fc4:	9301      	str	r3, [sp, #4]
 8004fc6:	eb04 0209 	add.w	r2, r4, r9
 8004fca:	2a7f      	cmp	r2, #127	; 0x7f
 8004fcc:	dc37      	bgt.n	800503e <ssd1306_WriteChar+0x92>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8004fce:	885b      	ldrh	r3, [r3, #2]
 8004fd0:	f89d a011 	ldrb.w	sl, [sp, #17]
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	eb03 020a 	add.w	r2, r3, sl
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8004fda:	2a3f      	cmp	r2, #63	; 0x3f
 8004fdc:	dc2f      	bgt.n	800503e <ssd1306_WriteChar+0x92>
		return 0;
	}

	for (i = 0; i < Font.FontHeight; i++)
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004fde:	f1a7 0220 	sub.w	r2, r7, #32
 8004fe2:	fb0a f302 	mul.w	r3, sl, r2
 8004fe6:	9303      	str	r3, [sp, #12]
 8004fe8:	2600      	movs	r6, #0
	for (i = 0; i < Font.FontHeight; i++)
 8004fea:	4556      	cmp	r6, sl
 8004fec:	d306      	bcc.n	8004ffc <ssd1306_WriteChar+0x50>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
			}
		}
	}

	SSD1306.CurrentX += Font.FontWidth;
 8004fee:	9b01      	ldr	r3, [sp, #4]
 8004ff0:	444c      	add	r4, r9
 8004ff2:	801c      	strh	r4, [r3, #0]


	return ch;
}
 8004ff4:	4638      	mov	r0, r7
 8004ff6:	b007      	add	sp, #28
 8004ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004ffc:	9b03      	ldr	r3, [sp, #12]
 8004ffe:	9905      	ldr	r1, [sp, #20]
 8005000:	18f2      	adds	r2, r6, r3
		for (j = 0; j < Font.FontWidth; j++)
 8005002:	2500      	movs	r5, #0
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8005004:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8005008:	9302      	str	r3, [sp, #8]
 800500a:	9b00      	ldr	r3, [sp, #0]
 800500c:	eb03 0806 	add.w	r8, r3, r6
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005010:	fa5f f888 	uxtb.w	r8, r8
		for (j = 0; j < Font.FontWidth; j++)
 8005014:	454d      	cmp	r5, r9
 8005016:	d301      	bcc.n	800501c <ssd1306_WriteChar+0x70>
	for (i = 0; i < Font.FontHeight; i++)
 8005018:	3601      	adds	r6, #1
 800501a:	e7e6      	b.n	8004fea <ssd1306_WriteChar+0x3e>
			if ((b << j) & 0x8000)
 800501c:	9b02      	ldr	r3, [sp, #8]
 800501e:	fa03 f205 	lsl.w	r2, r3, r5
 8005022:	0413      	lsls	r3, r2, #16
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005024:	eb05 0004 	add.w	r0, r5, r4
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005028:	bf56      	itet	pl
 800502a:	fabb f28b 	clzpl	r2, fp
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800502e:	465a      	movmi	r2, fp
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005030:	0952      	lsrpl	r2, r2, #5
 8005032:	4641      	mov	r1, r8
 8005034:	b2c0      	uxtb	r0, r0
 8005036:	f7ff ff95 	bl	8004f64 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 800503a:	3501      	adds	r5, #1
 800503c:	e7ea      	b.n	8005014 <ssd1306_WriteChar+0x68>
		return 0;
 800503e:	2700      	movs	r7, #0
 8005040:	e7d8      	b.n	8004ff4 <ssd1306_WriteChar+0x48>
 8005042:	bf00      	nop
 8005044:	200019b2 	.word	0x200019b2

08005048 <ssd1306_WriteString>:

char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8005048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800504a:	e88d 0006 	stmia.w	sp, {r1, r2}
 800504e:	466d      	mov	r5, sp
 8005050:	461f      	mov	r7, r3
 8005052:	1e46      	subs	r6, r0, #1

	while (*str)
 8005054:	7874      	ldrb	r4, [r6, #1]
 8005056:	b14c      	cbz	r4, 800506c <ssd1306_WriteString+0x24>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8005058:	4620      	mov	r0, r4
 800505a:	463b      	mov	r3, r7
 800505c:	e895 0006 	ldmia.w	r5, {r1, r2}
 8005060:	f7ff ffa4 	bl	8004fac <ssd1306_WriteChar>
 8005064:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 8005068:	42a0      	cmp	r0, r4
 800506a:	d0f3      	beq.n	8005054 <ssd1306_WriteString+0xc>
		str++;
	}


	return *str;
}
 800506c:	4620      	mov	r0, r4
 800506e:	b003      	add	sp, #12
 8005070:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005074 <ssd1306_SetCursor>:

void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8005074:	4b01      	ldr	r3, [pc, #4]	; (800507c <ssd1306_SetCursor+0x8>)
 8005076:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8005078:	8059      	strh	r1, [r3, #2]
 800507a:	4770      	bx	lr
 800507c:	200019b2 	.word	0x200019b2

08005080 <computePower>:

	// Need to compute the number of A cell can discharge

	// Simple ohms law V = I*R

	float voltageDiff = cellV - uv_samsung25R;
 8005080:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80050bc <computePower+0x3c>
	if(voltageDiff < 0){ //Quick check cellV should never be below UV
		voltageDiff = 0;
 8005084:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80050c0 <computePower+0x40>
	}

	float current = voltageDiff/ (ir_samsung25R / 1000);
 8005088:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80050c4 <computePower+0x44>
	float voltageDiff = cellV - uv_samsung25R;
 800508c:	ee70 7a67 	vsub.f32	s15, s0, s15
		voltageDiff = 0;
 8005090:	eef4 7a47 	vcmp.f32	s15, s14
 8005094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005098:	bf48      	it	mi
 800509a:	eef0 7a47 	vmovmi.f32	s15, s14
	float current = voltageDiff/ (ir_samsung25R / 1000);
 800509e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	//Eg: if 0.7 / 20m = 35A

	//Since our cell samsung25R can do 100A < 1s and 20A continous

	if(current > maxConstCellCurr_samsung25R)
 80050a2:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
	{
		current = maxConstCellCurr_samsung25R;
 80050a6:	eeb4 7a67 	vcmp.f32	s14, s15
 80050aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ae:	bfc8      	it	gt
 80050b0:	eeb0 7a67 	vmovgt.f32	s14, s15
	}

	return cellV * current; //Watts


}
 80050b4:	ee27 0a00 	vmul.f32	s0, s14, s0
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	40333333 	.word	0x40333333
 80050c0:	00000000 	.word	0x00000000
 80050c4:	3ca3d70a 	.word	0x3ca3d70a

080050c8 <calcdeltaAh>:
 * based on timeInterval in seconds and current in amps
 */
float calcdeltaAh(float timeInterval_s, float current_A){

	//Ah = A * hours
	float deltaAh = (-current_A * timeInterval_s / 3600.0);
 80050c8:	ee20 0ac0 	vnmul.f32	s0, s1, s0

	return deltaAh;
}
 80050cc:	eddf 7a02 	vldr	s15, [pc, #8]	; 80050d8 <calcdeltaAh+0x10>
 80050d0:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	45610000 	.word	0x45610000

080050dc <socByOCV>:

float socByOCV(float ocv){

	return lookupSOCByOCV(ocv, defaultOcvTable, defaultTableSize, defaultSocTable);
 80050dc:	4a02      	ldr	r2, [pc, #8]	; (80050e8 <socByOCV+0xc>)
 80050de:	4803      	ldr	r0, [pc, #12]	; (80050ec <socByOCV+0x10>)
 80050e0:	210f      	movs	r1, #15
 80050e2:	f000 b805 	b.w	80050f0 <lookupSOCByOCV>
 80050e6:	bf00      	nop
 80050e8:	200000d4 	.word	0x200000d4
 80050ec:	20000098 	.word	0x20000098

080050f0 <lookupSOCByOCV>:
	int count = tableSize;

	int i;
	float dx, dy;

	if (restedOcvInput < ocvTable[0]) {
 80050f0:	edd0 7a00 	vldr	s15, [r0]
 80050f4:	eef4 7ac0 	vcmpe.f32	s15, s0
 80050f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 80050fc:	b510      	push	{r4, lr}
	if (restedOcvInput < ocvTable[0]) {
 80050fe:	dd02      	ble.n	8005106 <lookupSOCByOCV+0x16>
		 * handle error here if you want */
		return socTable[0]; /* return minimum element */
	}

	if (restedOcvInput > ocvTable[count - 1]) {
		return socTable[count - 1]; /* return maximum */
 8005100:	ed92 0a00 	vldr	s0, [r2]
 8005104:	bd10      	pop	{r4, pc}
	if (restedOcvInput > ocvTable[count - 1]) {
 8005106:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
 800510a:	3c01      	subs	r4, #1
 800510c:	00a4      	lsls	r4, r4, #2
 800510e:	1903      	adds	r3, r0, r4
 8005110:	edd3 7a00 	vldr	s15, [r3]
 8005114:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511c:	dc28      	bgt.n	8005170 <lookupSOCByOCV+0x80>
 800511e:	1d04      	adds	r4, r0, #4
 8005120:	2300      	movs	r3, #0
	}

	/* find i, such that ocvTable[i] <= x < ocvTable[i+1] */
	for (i = 0; i < count - 1; i++) {
 8005122:	3901      	subs	r1, #1
 8005124:	428b      	cmp	r3, r1
 8005126:	f103 0301 	add.w	r3, r3, #1
 800512a:	da06      	bge.n	800513a <lookupSOCByOCV+0x4a>
		if (ocvTable[i + 1] > restedOcvInput) {
 800512c:	ecf4 7a01 	vldmia	r4!, {s15}
 8005130:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005138:	d5f4      	bpl.n	8005124 <lookupSOCByOCV+0x34>
			break;
		}
	}

	/* interpolate */
	dx = ocvTable[i + 1] - ocvTable[i];
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	1f19      	subs	r1, r3, #4
 800513e:	1844      	adds	r4, r0, r1
	dy = socTable[i + 1] - socTable[i];
 8005140:	4411      	add	r1, r2
 8005142:	441a      	add	r2, r3
	dx = ocvTable[i + 1] - ocvTable[i];
 8005144:	ed94 6a00 	vldr	s12, [r4]
	dy = socTable[i + 1] - socTable[i];
 8005148:	edd1 6a00 	vldr	s13, [r1]
 800514c:	edd2 7a00 	vldr	s15, [r2]
	dx = ocvTable[i + 1] - ocvTable[i];
 8005150:	4403      	add	r3, r0
	float socByOcv = socTable[i] + (restedOcvInput - ocvTable[i]) * dy / dx;
 8005152:	ee30 0a46 	vsub.f32	s0, s0, s12
	dy = socTable[i + 1] - socTable[i];
 8005156:	ee77 7ae6 	vsub.f32	s15, s15, s13
	dx = ocvTable[i + 1] - ocvTable[i];
 800515a:	ed93 7a00 	vldr	s14, [r3]
	float socByOcv = socTable[i] + (restedOcvInput - ocvTable[i]) * dy / dx;
 800515e:	ee67 7a80 	vmul.f32	s15, s15, s0
	dx = ocvTable[i + 1] - ocvTable[i];
 8005162:	ee37 7a46 	vsub.f32	s14, s14, s12
	float socByOcv = socTable[i] + (restedOcvInput - ocvTable[i]) * dy / dx;
 8005166:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800516a:	ee30 0a26 	vadd.f32	s0, s0, s13
	return socByOcv;
 800516e:	bd10      	pop	{r4, pc}
		return socTable[count - 1]; /* return maximum */
 8005170:	4422      	add	r2, r4
 8005172:	e7c5      	b.n	8005100 <lookupSOCByOCV+0x10>

08005174 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005174:	4b0e      	ldr	r3, [pc, #56]	; (80051b0 <HAL_MspInit+0x3c>)
{
 8005176:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005178:	699a      	ldr	r2, [r3, #24]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	619a      	str	r2, [r3, #24]
 8005180:	699a      	ldr	r2, [r3, #24]
 8005182:	f002 0201 	and.w	r2, r2, #1
 8005186:	9200      	str	r2, [sp, #0]
 8005188:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800518a:	69da      	ldr	r2, [r3, #28]
 800518c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005190:	61da      	str	r2, [r3, #28]
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005198:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800519a:	2200      	movs	r2, #0
 800519c:	210f      	movs	r1, #15
 800519e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 80051a2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80051a4:	f7fb ff6a 	bl	800107c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051a8:	b003      	add	sp, #12
 80051aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80051ae:	bf00      	nop
 80051b0:	40021000 	.word	0x40021000

080051b4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80051b4:	b510      	push	{r4, lr}
 80051b6:	4604      	mov	r4, r0
 80051b8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051ba:	2214      	movs	r2, #20
 80051bc:	2100      	movs	r1, #0
 80051be:	a803      	add	r0, sp, #12
 80051c0:	f000 faaf 	bl	8005722 <memset>
  if(hdac->Instance==DAC1)
 80051c4:	6822      	ldr	r2, [r4, #0]
 80051c6:	4b15      	ldr	r3, [pc, #84]	; (800521c <HAL_DAC_MspInit+0x68>)
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d124      	bne.n	8005216 <HAL_DAC_MspInit+0x62>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80051cc:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = DCHG_SET_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(DCHG_SET_GPIO_Port, &GPIO_InitStruct);
 80051d0:	a903      	add	r1, sp, #12
    __HAL_RCC_DAC1_CLK_ENABLE();
 80051d2:	69da      	ldr	r2, [r3, #28]
 80051d4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80051d8:	61da      	str	r2, [r3, #28]
 80051da:	69da      	ldr	r2, [r3, #28]
 80051dc:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80051e0:	9201      	str	r2, [sp, #4]
 80051e2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051e4:	695a      	ldr	r2, [r3, #20]
 80051e6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80051ea:	615a      	str	r2, [r3, #20]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f2:	9302      	str	r3, [sp, #8]
 80051f4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DCHG_SET_Pin;
 80051f6:	2310      	movs	r3, #16
 80051f8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(DCHG_SET_GPIO_Port, &GPIO_InitStruct);
 80051fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051fe:	2303      	movs	r3, #3
 8005200:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(DCHG_SET_GPIO_Port, &GPIO_InitStruct);
 8005202:	f7fc f855 	bl	80012b0 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8005206:	2036      	movs	r0, #54	; 0x36
 8005208:	2200      	movs	r2, #0
 800520a:	2105      	movs	r1, #5
 800520c:	f7fb ff36 	bl	800107c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005210:	2036      	movs	r0, #54	; 0x36
 8005212:	f7fb ff67 	bl	80010e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8005216:	b008      	add	sp, #32
 8005218:	bd10      	pop	{r4, pc}
 800521a:	bf00      	nop
 800521c:	40007400 	.word	0x40007400

08005220 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005220:	b510      	push	{r4, lr}
 8005222:	4604      	mov	r4, r0
 8005224:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005226:	2214      	movs	r2, #20
 8005228:	2100      	movs	r1, #0
 800522a:	a803      	add	r0, sp, #12
 800522c:	f000 fa79 	bl	8005722 <memset>
  if(hi2c->Instance==I2C1)
 8005230:	6822      	ldr	r2, [r4, #0]
 8005232:	4b12      	ldr	r3, [pc, #72]	; (800527c <HAL_I2C_MspInit+0x5c>)
 8005234:	429a      	cmp	r2, r3
 8005236:	d11f      	bne.n	8005278 <HAL_I2C_MspInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005238:	4c11      	ldr	r4, [pc, #68]	; (8005280 <HAL_I2C_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800523a:	4812      	ldr	r0, [pc, #72]	; (8005284 <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800523c:	6963      	ldr	r3, [r4, #20]
 800523e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005242:	6163      	str	r3, [r4, #20]
 8005244:	6963      	ldr	r3, [r4, #20]
 8005246:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800524a:	9301      	str	r3, [sp, #4]
 800524c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800524e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005252:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005254:	2312      	movs	r3, #18
 8005256:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005258:	2303      	movs	r3, #3
 800525a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800525c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800525e:	2304      	movs	r3, #4
 8005260:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005262:	f7fc f825 	bl	80012b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005266:	69e3      	ldr	r3, [r4, #28]
 8005268:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800526c:	61e3      	str	r3, [r4, #28]
 800526e:	69e3      	ldr	r3, [r4, #28]
 8005270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005274:	9302      	str	r3, [sp, #8]
 8005276:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005278:	b008      	add	sp, #32
 800527a:	bd10      	pop	{r4, pc}
 800527c:	40005400 	.word	0x40005400
 8005280:	40021000 	.word	0x40021000
 8005284:	48000400 	.word	0x48000400

08005288 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(htim_base->Instance==TIM6)
 800528a:	6803      	ldr	r3, [r0, #0]
 800528c:	4a29      	ldr	r2, [pc, #164]	; (8005334 <HAL_TIM_Base_MspInit+0xac>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d114      	bne.n	80052bc <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005292:	4b29      	ldr	r3, [pc, #164]	; (8005338 <HAL_TIM_Base_MspInit+0xb0>)
 8005294:	69da      	ldr	r2, [r3, #28]
 8005296:	f042 0210 	orr.w	r2, r2, #16
 800529a:	61da      	str	r2, [r3, #28]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	f003 0310 	and.w	r3, r3, #16
 80052a2:	9300      	str	r3, [sp, #0]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80052a4:	2036      	movs	r0, #54	; 0x36
 80052a6:	2200      	movs	r2, #0
 80052a8:	2105      	movs	r1, #5
    __HAL_RCC_TIM6_CLK_ENABLE();
 80052aa:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80052ac:	f7fb fee6 	bl	800107c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80052b0:	2036      	movs	r0, #54	; 0x36
  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80052b2:	f7fb ff17 	bl	80010e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80052b6:	b005      	add	sp, #20
 80052b8:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM7)
 80052bc:	4a1f      	ldr	r2, [pc, #124]	; (800533c <HAL_TIM_Base_MspInit+0xb4>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d110      	bne.n	80052e4 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80052c2:	4b1d      	ldr	r3, [pc, #116]	; (8005338 <HAL_TIM_Base_MspInit+0xb0>)
 80052c4:	69da      	ldr	r2, [r3, #28]
 80052c6:	f042 0220 	orr.w	r2, r2, #32
 80052ca:	61da      	str	r2, [r3, #28]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	f003 0320 	and.w	r3, r3, #32
 80052d2:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80052d4:	2037      	movs	r0, #55	; 0x37
 80052d6:	2200      	movs	r2, #0
 80052d8:	2105      	movs	r1, #5
    __HAL_RCC_TIM7_CLK_ENABLE();
 80052da:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80052dc:	f7fb fece 	bl	800107c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80052e0:	2037      	movs	r0, #55	; 0x37
 80052e2:	e7e6      	b.n	80052b2 <HAL_TIM_Base_MspInit+0x2a>
  else if(htim_base->Instance==TIM16)
 80052e4:	4a16      	ldr	r2, [pc, #88]	; (8005340 <HAL_TIM_Base_MspInit+0xb8>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d110      	bne.n	800530c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80052ea:	4b13      	ldr	r3, [pc, #76]	; (8005338 <HAL_TIM_Base_MspInit+0xb0>)
 80052ec:	699a      	ldr	r2, [r3, #24]
 80052ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80052f2:	619a      	str	r2, [r3, #24]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fa:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 80052fc:	2019      	movs	r0, #25
 80052fe:	2200      	movs	r2, #0
 8005300:	2105      	movs	r1, #5
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005302:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8005304:	f7fb feba 	bl	800107c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005308:	2019      	movs	r0, #25
 800530a:	e7d2      	b.n	80052b2 <HAL_TIM_Base_MspInit+0x2a>
  else if(htim_base->Instance==TIM17)
 800530c:	4a0d      	ldr	r2, [pc, #52]	; (8005344 <HAL_TIM_Base_MspInit+0xbc>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d1d1      	bne.n	80052b6 <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005312:	4b09      	ldr	r3, [pc, #36]	; (8005338 <HAL_TIM_Base_MspInit+0xb0>)
 8005314:	699a      	ldr	r2, [r3, #24]
 8005316:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800531a:	619a      	str	r2, [r3, #24]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005322:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8005324:	201a      	movs	r0, #26
 8005326:	2200      	movs	r2, #0
 8005328:	2105      	movs	r1, #5
    __HAL_RCC_TIM17_CLK_ENABLE();
 800532a:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 800532c:	f7fb fea6 	bl	800107c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8005330:	201a      	movs	r0, #26
 8005332:	e7be      	b.n	80052b2 <HAL_TIM_Base_MspInit+0x2a>
 8005334:	40001000 	.word	0x40001000
 8005338:	40021000 	.word	0x40021000
 800533c:	40001400 	.word	0x40001400
 8005340:	40014400 	.word	0x40014400
 8005344:	40014800 	.word	0x40014800

08005348 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005348:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800534a:	2214      	movs	r2, #20
{
 800534c:	b08a      	sub	sp, #40	; 0x28
 800534e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005350:	2100      	movs	r1, #0
 8005352:	eb0d 0002 	add.w	r0, sp, r2
 8005356:	f000 f9e4 	bl	8005722 <memset>
  if(huart->Instance==USART1)
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	4a27      	ldr	r2, [pc, #156]	; (80053fc <HAL_UART_MspInit+0xb4>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d128      	bne.n	80053b4 <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005362:	4b27      	ldr	r3, [pc, #156]	; (8005400 <HAL_UART_MspInit+0xb8>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005364:	4827      	ldr	r0, [pc, #156]	; (8005404 <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8005366:	699a      	ldr	r2, [r3, #24]
 8005368:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800536c:	619a      	str	r2, [r3, #24]
 800536e:	699a      	ldr	r2, [r3, #24]
 8005370:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005374:	9201      	str	r2, [sp, #4]
 8005376:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005378:	695a      	ldr	r2, [r3, #20]
 800537a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800537e:	615a      	str	r2, [r3, #20]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005386:	9302      	str	r3, [sp, #8]
 8005388:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800538a:	2330      	movs	r3, #48	; 0x30
 800538c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800538e:	2302      	movs	r3, #2
 8005390:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005392:	2303      	movs	r3, #3
 8005394:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005396:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005398:	2307      	movs	r3, #7
 800539a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800539c:	f7fb ff88 	bl	80012b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80053a0:	2025      	movs	r0, #37	; 0x25
 80053a2:	2200      	movs	r2, #0
 80053a4:	2105      	movs	r1, #5
 80053a6:	f7fb fe69 	bl	800107c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80053aa:	2025      	movs	r0, #37	; 0x25
 80053ac:	f7fb fe9a 	bl	80010e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80053b0:	b00a      	add	sp, #40	; 0x28
 80053b2:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 80053b4:	4a14      	ldr	r2, [pc, #80]	; (8005408 <HAL_UART_MspInit+0xc0>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d1fa      	bne.n	80053b0 <HAL_UART_MspInit+0x68>
    __HAL_RCC_USART2_CLK_ENABLE();
 80053ba:	4b11      	ldr	r3, [pc, #68]	; (8005400 <HAL_UART_MspInit+0xb8>)
 80053bc:	69da      	ldr	r2, [r3, #28]
 80053be:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80053c2:	61da      	str	r2, [r3, #28]
 80053c4:	69da      	ldr	r2, [r3, #28]
 80053c6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80053ca:	9203      	str	r2, [sp, #12]
 80053cc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053ce:	695a      	ldr	r2, [r3, #20]
 80053d0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80053d4:	615a      	str	r2, [r3, #20]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053dc:	9304      	str	r3, [sp, #16]
 80053de:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80053e0:	230c      	movs	r3, #12
 80053e2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053e4:	2302      	movs	r3, #2
 80053e6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053e8:	2303      	movs	r3, #3
 80053ea:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053ec:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80053ee:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80053f4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053f6:	f7fb ff5b 	bl	80012b0 <HAL_GPIO_Init>
}
 80053fa:	e7d9      	b.n	80053b0 <HAL_UART_MspInit+0x68>
 80053fc:	40013800 	.word	0x40013800
 8005400:	40021000 	.word	0x40021000
 8005404:	48000800 	.word	0x48000800
 8005408:	40004400 	.word	0x40004400

0800540c <NMI_Handler>:
 800540c:	4770      	bx	lr

0800540e <HardFault_Handler>:
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

	__asm volatile
 800540e:	f01e 0f04 	tst.w	lr, #4
 8005412:	bf0c      	ite	eq
 8005414:	f3ef 8008 	mrseq	r0, MSP
 8005418:	f3ef 8009 	mrsne	r0, PSP
 800541c:	6981      	ldr	r1, [r0, #24]
 800541e:	4a00      	ldr	r2, [pc, #0]	; (8005420 <HardFault_Handler+0x12>)
 8005420:	4710      	bx	r2

08005422 <handler2_address_const>:
 8005422:	5521      	.short	0x5521
 8005424:	0800      	.short	0x0800
 8005426:	e7fe      	b.n	8005426 <handler2_address_const+0x4>

08005428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005428:	e7fe      	b.n	8005428 <MemManage_Handler>

0800542a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800542a:	e7fe      	b.n	800542a <BusFault_Handler>

0800542c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800542c:	e7fe      	b.n	800542c <UsageFault_Handler>

0800542e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800542e:	4770      	bx	lr

08005430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005430:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005432:	f7fb fdeb 	bl	800100c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005436:	f7fe fed3 	bl	80041e0 <xTaskGetSchedulerState>
 800543a:	2801      	cmp	r0, #1
 800543c:	d003      	beq.n	8005446 <SysTick_Handler+0x16>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800543e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 8005442:	f7fe bb0f 	b.w	8003a64 <xPortSysTickHandler>
 8005446:	bd08      	pop	{r3, pc}

08005448 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005448:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800544a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800544e:	f7fc f811 	bl	8001474 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8005452:	f44f 7000 	mov.w	r0, #512	; 0x200
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005456:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800545a:	f7fc b80b 	b.w	8001474 <HAL_GPIO_EXTI_IRQHandler>
	...

08005460 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005460:	4801      	ldr	r0, [pc, #4]	; (8005468 <TIM1_UP_TIM16_IRQHandler+0x8>)
 8005462:	f7fd b880 	b.w	8002566 <HAL_TIM_IRQHandler>
 8005466:	bf00      	nop
 8005468:	20003170 	.word	0x20003170

0800546c <TIM1_TRG_COM_TIM17_IRQHandler>:
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800546c:	4801      	ldr	r0, [pc, #4]	; (8005474 <TIM1_TRG_COM_TIM17_IRQHandler+0x8>)
 800546e:	f7fd b87a 	b.w	8002566 <HAL_TIM_IRQHandler>
 8005472:	bf00      	nop
 8005474:	20001f78 	.word	0x20001f78

08005478 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8005478:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  uint32_t tmp_flag = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE);
 800547a:	4c0f      	ldr	r4, [pc, #60]	; (80054b8 <USART1_IRQHandler+0x40>)
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	69d9      	ldr	r1, [r3, #28]
  uint32_t tmp_it_source = __HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_RXNE);
 8005480:	681a      	ldr	r2, [r3, #0]

  if((tmp_flag != RESET) && (tmp_it_source != RESET)) {
 8005482:	0688      	lsls	r0, r1, #26
 8005484:	d508      	bpl.n	8005498 <USART1_IRQHandler+0x20>
 8005486:	0691      	lsls	r1, r2, #26
 8005488:	d506      	bpl.n	8005498 <USART1_IRQHandler+0x20>
    pxMBFrameCBByteReceived();
 800548a:	4b0c      	ldr	r3, [pc, #48]	; (80054bc <USART1_IRQHandler+0x44>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4798      	blx	r3
	  //xMBRTUReceiveFSM();
    __HAL_UART_CLEAR_PEFLAG(&huart1);
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	2201      	movs	r2, #1
 8005494:	621a      	str	r2, [r3, #32]
    return;
 8005496:	bd10      	pop	{r4, pc}
  }

  if((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_TXE) != RESET)) {
 8005498:	69da      	ldr	r2, [r3, #28]
 800549a:	0612      	lsls	r2, r2, #24
 800549c:	d507      	bpl.n	80054ae <USART1_IRQHandler+0x36>
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	061b      	lsls	r3, r3, #24
 80054a2:	d504      	bpl.n	80054ae <USART1_IRQHandler+0x36>
    pxMBFrameCBTransmitterEmpty();
 80054a4:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <USART1_IRQHandler+0x48>)
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80054a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    pxMBFrameCBTransmitterEmpty();
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4718      	bx	r3
  HAL_UART_IRQHandler(&huart1);
 80054ae:	4802      	ldr	r0, [pc, #8]	; (80054b8 <USART1_IRQHandler+0x40>)
}
 80054b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_IRQHandler(&huart1);
 80054b4:	f7fd b9ec 	b.w	8002890 <HAL_UART_IRQHandler>
 80054b8:	20001fc4 	.word	0x20001fc4
 80054bc:	20001dfc 	.word	0x20001dfc
 80054c0:	20001df4 	.word	0x20001df4

080054c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80054c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80054c6:	4804      	ldr	r0, [pc, #16]	; (80054d8 <TIM6_DAC_IRQHandler+0x14>)
 80054c8:	f7fd f84d 	bl	8002566 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80054cc:	4803      	ldr	r0, [pc, #12]	; (80054dc <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80054ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DAC_IRQHandler(&hdac1);
 80054d2:	f7fb be99 	b.w	8001208 <HAL_DAC_IRQHandler>
 80054d6:	bf00      	nop
 80054d8:	20002050 	.word	0x20002050
 80054dc:	20001f0c 	.word	0x20001f0c

080054e0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80054e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  if(__HAL_TIM_GET_FLAG(&htim7, TIM_FLAG_UPDATE) != RESET && __HAL_TIM_GET_IT_SOURCE(&htim7, TIM_IT_UPDATE) !=RESET)
 80054e2:	4b0c      	ldr	r3, [pc, #48]	; (8005514 <TIM7_IRQHandler+0x34>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	07d1      	lsls	r1, r2, #31
 80054ea:	d50e      	bpl.n	800550a <TIM7_IRQHandler+0x2a>
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	07d2      	lsls	r2, r2, #31
 80054f0:	d50b      	bpl.n	800550a <TIM7_IRQHandler+0x2a>
  {
	__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 80054f2:	f06f 0201 	mvn.w	r2, #1
 80054f6:	611a      	str	r2, [r3, #16]
	if (!--downcounter)
 80054f8:	4a07      	ldr	r2, [pc, #28]	; (8005518 <TIM7_IRQHandler+0x38>)
 80054fa:	8813      	ldrh	r3, [r2, #0]
 80054fc:	3b01      	subs	r3, #1
 80054fe:	b29b      	uxth	r3, r3
 8005500:	8013      	strh	r3, [r2, #0]
 8005502:	b913      	cbnz	r3, 800550a <TIM7_IRQHandler+0x2a>
	{
		pxMBPortCBTimerExpired();
 8005504:	4b05      	ldr	r3, [pc, #20]	; (800551c <TIM7_IRQHandler+0x3c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4798      	blx	r3
	}
  }

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800550a:	4802      	ldr	r0, [pc, #8]	; (8005514 <TIM7_IRQHandler+0x34>)
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800550c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim7);
 8005510:	f7fd b829 	b.w	8002566 <HAL_TIM_IRQHandler>
 8005514:	200031b0 	.word	0x200031b0
 8005518:	200007e6 	.word	0x200007e6
 800551c:	20001df8 	.word	0x20001df8

08005520 <prvGetRegistersFromStack>:

/* USER CODE BEGIN 1 */

void prvGetRegistersFromStack( uint32_t *pulFaultStackAddress )
{
 8005520:	b088      	sub	sp, #32
	volatile uint32_t r12;
	volatile uint32_t lr; /* Link register. */
	volatile uint32_t pc; /* Program counter. */
	volatile uint32_t psr;/* Program status register. */

    r0 = pulFaultStackAddress[ 0 ];
 8005522:	6803      	ldr	r3, [r0, #0]
 8005524:	9300      	str	r3, [sp, #0]
    r1 = pulFaultStackAddress[ 1 ];
 8005526:	6843      	ldr	r3, [r0, #4]
 8005528:	9301      	str	r3, [sp, #4]
    r2 = pulFaultStackAddress[ 2 ];
 800552a:	6883      	ldr	r3, [r0, #8]
 800552c:	9302      	str	r3, [sp, #8]
    r3 = pulFaultStackAddress[ 3 ];
 800552e:	68c3      	ldr	r3, [r0, #12]
 8005530:	9303      	str	r3, [sp, #12]

    r12 = pulFaultStackAddress[ 4 ];
 8005532:	6903      	ldr	r3, [r0, #16]
 8005534:	9304      	str	r3, [sp, #16]
    lr = pulFaultStackAddress[ 5 ];
 8005536:	6943      	ldr	r3, [r0, #20]
 8005538:	9305      	str	r3, [sp, #20]
    pc = pulFaultStackAddress[ 6 ];
 800553a:	6983      	ldr	r3, [r0, #24]
 800553c:	9306      	str	r3, [sp, #24]
    psr = pulFaultStackAddress[ 7 ];
 800553e:	69c3      	ldr	r3, [r0, #28]
 8005540:	9307      	str	r3, [sp, #28]
 8005542:	e7fe      	b.n	8005542 <prvGetRegistersFromStack+0x22>

08005544 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8005544:	2001      	movs	r0, #1
 8005546:	4770      	bx	lr

08005548 <_kill>:

int _kill(int pid, int sig)
{
 8005548:	b508      	push	{r3, lr}
	errno = EINVAL;
 800554a:	f000 f8a3 	bl	8005694 <__errno>
 800554e:	2316      	movs	r3, #22
 8005550:	6003      	str	r3, [r0, #0]
	return -1;
}
 8005552:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005556:	bd08      	pop	{r3, pc}

08005558 <_exit>:

void _exit (int status)
{
 8005558:	b508      	push	{r3, lr}
	errno = EINVAL;
 800555a:	f000 f89b 	bl	8005694 <__errno>
 800555e:	2316      	movs	r3, #22
 8005560:	6003      	str	r3, [r0, #0]
 8005562:	e7fe      	b.n	8005562 <_exit+0xa>

08005564 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005564:	b570      	push	{r4, r5, r6, lr}
 8005566:	460e      	mov	r6, r1
 8005568:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800556a:	460c      	mov	r4, r1
 800556c:	1ba3      	subs	r3, r4, r6
 800556e:	429d      	cmp	r5, r3
 8005570:	dc01      	bgt.n	8005576 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8005572:	4628      	mov	r0, r5
 8005574:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8005576:	f3af 8000 	nop.w
 800557a:	f804 0b01 	strb.w	r0, [r4], #1
 800557e:	e7f5      	b.n	800556c <_read+0x8>

08005580 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005580:	b570      	push	{r4, r5, r6, lr}
 8005582:	460e      	mov	r6, r1
 8005584:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005586:	460c      	mov	r4, r1
 8005588:	1ba3      	subs	r3, r4, r6
 800558a:	429d      	cmp	r5, r3
 800558c:	dc01      	bgt.n	8005592 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800558e:	4628      	mov	r0, r5
 8005590:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8005592:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005596:	f3af 8000 	nop.w
 800559a:	e7f5      	b.n	8005588 <_write+0x8>

0800559c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800559c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800559e:	4b0a      	ldr	r3, [pc, #40]	; (80055c8 <_sbrk+0x2c>)
 80055a0:	6819      	ldr	r1, [r3, #0]
{
 80055a2:	4602      	mov	r2, r0
	if (heap_end == 0)
 80055a4:	b909      	cbnz	r1, 80055aa <_sbrk+0xe>
		heap_end = &end;
 80055a6:	4909      	ldr	r1, [pc, #36]	; (80055cc <_sbrk+0x30>)
 80055a8:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80055aa:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80055ac:	4669      	mov	r1, sp
 80055ae:	4402      	add	r2, r0
 80055b0:	428a      	cmp	r2, r1
 80055b2:	d906      	bls.n	80055c2 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80055b4:	f000 f86e 	bl	8005694 <__errno>
 80055b8:	230c      	movs	r3, #12
 80055ba:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80055bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055c0:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80055c2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80055c4:	bd08      	pop	{r3, pc}
 80055c6:	bf00      	nop
 80055c8:	20001db8 	.word	0x20001db8
 80055cc:	20003200 	.word	0x20003200

080055d0 <_close>:

int _close(int file)
{
	return -1;
}
 80055d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055d4:	4770      	bx	lr

080055d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80055d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055da:	604b      	str	r3, [r1, #4]
	return 0;
}
 80055dc:	2000      	movs	r0, #0
 80055de:	4770      	bx	lr

080055e0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80055e0:	2001      	movs	r0, #1
 80055e2:	4770      	bx	lr

080055e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80055e4:	2000      	movs	r0, #0
 80055e6:	4770      	bx	lr

080055e8 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80055e8:	4b05      	ldr	r3, [pc, #20]	; (8005600 <SystemInit+0x18>)
 80055ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80055ee:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80055f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80055f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80055fa:	609a      	str	r2, [r3, #8]
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	e000ed00 	.word	0xe000ed00

08005604 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800563c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005608:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800560a:	e003      	b.n	8005614 <LoopCopyDataInit>

0800560c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800560c:	4b0c      	ldr	r3, [pc, #48]	; (8005640 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800560e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005610:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005612:	3104      	adds	r1, #4

08005614 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005614:	480b      	ldr	r0, [pc, #44]	; (8005644 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005616:	4b0c      	ldr	r3, [pc, #48]	; (8005648 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005618:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800561a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800561c:	d3f6      	bcc.n	800560c <CopyDataInit>
	ldr	r2, =_sbss
 800561e:	4a0b      	ldr	r2, [pc, #44]	; (800564c <LoopForever+0x12>)
	b	LoopFillZerobss
 8005620:	e002      	b.n	8005628 <LoopFillZerobss>

08005622 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005622:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005624:	f842 3b04 	str.w	r3, [r2], #4

08005628 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005628:	4b09      	ldr	r3, [pc, #36]	; (8005650 <LoopForever+0x16>)
	cmp	r2, r3
 800562a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800562c:	d3f9      	bcc.n	8005622 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800562e:	f7ff ffdb 	bl	80055e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005632:	f000 f847 	bl	80056c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005636:	f7fe ff87 	bl	8004548 <main>

0800563a <LoopForever>:

LoopForever:
    b LoopForever
 800563a:	e7fe      	b.n	800563a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800563c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8005640:	0800a9d0 	.word	0x0800a9d0
	ldr	r0, =_sdata
 8005644:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005648:	20000784 	.word	0x20000784
	ldr	r2, =_sbss
 800564c:	20000784 	.word	0x20000784
	ldr	r3, = _ebss
 8005650:	20003200 	.word	0x20003200

08005654 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005654:	e7fe      	b.n	8005654 <ADC1_2_IRQHandler>
	...

08005658 <__assert_func>:
 8005658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800565a:	461c      	mov	r4, r3
 800565c:	4b09      	ldr	r3, [pc, #36]	; (8005684 <__assert_func+0x2c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4605      	mov	r5, r0
 8005662:	68d8      	ldr	r0, [r3, #12]
 8005664:	b152      	cbz	r2, 800567c <__assert_func+0x24>
 8005666:	4b08      	ldr	r3, [pc, #32]	; (8005688 <__assert_func+0x30>)
 8005668:	9202      	str	r2, [sp, #8]
 800566a:	e88d 000a 	stmia.w	sp, {r1, r3}
 800566e:	4622      	mov	r2, r4
 8005670:	462b      	mov	r3, r5
 8005672:	4906      	ldr	r1, [pc, #24]	; (800568c <__assert_func+0x34>)
 8005674:	f000 f814 	bl	80056a0 <fiprintf>
 8005678:	f001 fd90 	bl	800719c <abort>
 800567c:	4b04      	ldr	r3, [pc, #16]	; (8005690 <__assert_func+0x38>)
 800567e:	461a      	mov	r2, r3
 8005680:	e7f2      	b.n	8005668 <__assert_func+0x10>
 8005682:	bf00      	nop
 8005684:	20000114 	.word	0x20000114
 8005688:	0800a68c 	.word	0x0800a68c
 800568c:	0800a699 	.word	0x0800a699
 8005690:	0800a6c7 	.word	0x0800a6c7

08005694 <__errno>:
 8005694:	4b01      	ldr	r3, [pc, #4]	; (800569c <__errno+0x8>)
 8005696:	6818      	ldr	r0, [r3, #0]
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	20000114 	.word	0x20000114

080056a0 <fiprintf>:
 80056a0:	b40e      	push	{r1, r2, r3}
 80056a2:	b503      	push	{r0, r1, lr}
 80056a4:	4601      	mov	r1, r0
 80056a6:	ab03      	add	r3, sp, #12
 80056a8:	4805      	ldr	r0, [pc, #20]	; (80056c0 <fiprintf+0x20>)
 80056aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80056ae:	6800      	ldr	r0, [r0, #0]
 80056b0:	9301      	str	r3, [sp, #4]
 80056b2:	f001 f86f 	bl	8006794 <_vfiprintf_r>
 80056b6:	b002      	add	sp, #8
 80056b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80056bc:	b003      	add	sp, #12
 80056be:	4770      	bx	lr
 80056c0:	20000114 	.word	0x20000114

080056c4 <__libc_init_array>:
 80056c4:	b570      	push	{r4, r5, r6, lr}
 80056c6:	4e0d      	ldr	r6, [pc, #52]	; (80056fc <__libc_init_array+0x38>)
 80056c8:	4c0d      	ldr	r4, [pc, #52]	; (8005700 <__libc_init_array+0x3c>)
 80056ca:	1ba4      	subs	r4, r4, r6
 80056cc:	10a4      	asrs	r4, r4, #2
 80056ce:	2500      	movs	r5, #0
 80056d0:	42a5      	cmp	r5, r4
 80056d2:	d109      	bne.n	80056e8 <__libc_init_array+0x24>
 80056d4:	4e0b      	ldr	r6, [pc, #44]	; (8005704 <__libc_init_array+0x40>)
 80056d6:	4c0c      	ldr	r4, [pc, #48]	; (8005708 <__libc_init_array+0x44>)
 80056d8:	f004 fa24 	bl	8009b24 <_init>
 80056dc:	1ba4      	subs	r4, r4, r6
 80056de:	10a4      	asrs	r4, r4, #2
 80056e0:	2500      	movs	r5, #0
 80056e2:	42a5      	cmp	r5, r4
 80056e4:	d105      	bne.n	80056f2 <__libc_init_array+0x2e>
 80056e6:	bd70      	pop	{r4, r5, r6, pc}
 80056e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056ec:	4798      	blx	r3
 80056ee:	3501      	adds	r5, #1
 80056f0:	e7ee      	b.n	80056d0 <__libc_init_array+0xc>
 80056f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056f6:	4798      	blx	r3
 80056f8:	3501      	adds	r5, #1
 80056fa:	e7f2      	b.n	80056e2 <__libc_init_array+0x1e>
 80056fc:	0800a9c8 	.word	0x0800a9c8
 8005700:	0800a9c8 	.word	0x0800a9c8
 8005704:	0800a9c8 	.word	0x0800a9c8
 8005708:	0800a9cc 	.word	0x0800a9cc

0800570c <memcpy>:
 800570c:	b510      	push	{r4, lr}
 800570e:	1e43      	subs	r3, r0, #1
 8005710:	440a      	add	r2, r1
 8005712:	4291      	cmp	r1, r2
 8005714:	d100      	bne.n	8005718 <memcpy+0xc>
 8005716:	bd10      	pop	{r4, pc}
 8005718:	f811 4b01 	ldrb.w	r4, [r1], #1
 800571c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005720:	e7f7      	b.n	8005712 <memcpy+0x6>

08005722 <memset>:
 8005722:	4402      	add	r2, r0
 8005724:	4603      	mov	r3, r0
 8005726:	4293      	cmp	r3, r2
 8005728:	d100      	bne.n	800572c <memset+0xa>
 800572a:	4770      	bx	lr
 800572c:	f803 1b01 	strb.w	r1, [r3], #1
 8005730:	e7f9      	b.n	8005726 <memset+0x4>
	...

08005734 <sprintf>:
 8005734:	b40e      	push	{r1, r2, r3}
 8005736:	b500      	push	{lr}
 8005738:	b09c      	sub	sp, #112	; 0x70
 800573a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800573e:	ab1d      	add	r3, sp, #116	; 0x74
 8005740:	f8ad 1014 	strh.w	r1, [sp, #20]
 8005744:	9002      	str	r0, [sp, #8]
 8005746:	9006      	str	r0, [sp, #24]
 8005748:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800574c:	480a      	ldr	r0, [pc, #40]	; (8005778 <sprintf+0x44>)
 800574e:	9104      	str	r1, [sp, #16]
 8005750:	9107      	str	r1, [sp, #28]
 8005752:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005756:	f853 2b04 	ldr.w	r2, [r3], #4
 800575a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800575e:	6800      	ldr	r0, [r0, #0]
 8005760:	9301      	str	r3, [sp, #4]
 8005762:	a902      	add	r1, sp, #8
 8005764:	f000 f80c 	bl	8005780 <_svfprintf_r>
 8005768:	9b02      	ldr	r3, [sp, #8]
 800576a:	2200      	movs	r2, #0
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	b01c      	add	sp, #112	; 0x70
 8005770:	f85d eb04 	ldr.w	lr, [sp], #4
 8005774:	b003      	add	sp, #12
 8005776:	4770      	bx	lr
 8005778:	20000114 	.word	0x20000114
 800577c:	00000000 	.word	0x00000000

08005780 <_svfprintf_r>:
 8005780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005784:	b0bd      	sub	sp, #244	; 0xf4
 8005786:	468a      	mov	sl, r1
 8005788:	4615      	mov	r5, r2
 800578a:	461f      	mov	r7, r3
 800578c:	4683      	mov	fp, r0
 800578e:	f003 f805 	bl	800879c <_localeconv_r>
 8005792:	6803      	ldr	r3, [r0, #0]
 8005794:	930d      	str	r3, [sp, #52]	; 0x34
 8005796:	4618      	mov	r0, r3
 8005798:	f7fa fd72 	bl	8000280 <strlen>
 800579c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80057a0:	9008      	str	r0, [sp, #32]
 80057a2:	061b      	lsls	r3, r3, #24
 80057a4:	d518      	bpl.n	80057d8 <_svfprintf_r+0x58>
 80057a6:	f8da 3010 	ldr.w	r3, [sl, #16]
 80057aa:	b9ab      	cbnz	r3, 80057d8 <_svfprintf_r+0x58>
 80057ac:	2140      	movs	r1, #64	; 0x40
 80057ae:	4658      	mov	r0, fp
 80057b0:	f003 f87a 	bl	80088a8 <_malloc_r>
 80057b4:	f8ca 0000 	str.w	r0, [sl]
 80057b8:	f8ca 0010 	str.w	r0, [sl, #16]
 80057bc:	b948      	cbnz	r0, 80057d2 <_svfprintf_r+0x52>
 80057be:	230c      	movs	r3, #12
 80057c0:	f8cb 3000 	str.w	r3, [fp]
 80057c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057c8:	9309      	str	r3, [sp, #36]	; 0x24
 80057ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057cc:	b03d      	add	sp, #244	; 0xf4
 80057ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d2:	2340      	movs	r3, #64	; 0x40
 80057d4:	f8ca 3014 	str.w	r3, [sl, #20]
 80057d8:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8005a40 <_svfprintf_r+0x2c0>
 80057dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80057e0:	2300      	movs	r3, #0
 80057e2:	ac2c      	add	r4, sp, #176	; 0xb0
 80057e4:	941f      	str	r4, [sp, #124]	; 0x7c
 80057e6:	9321      	str	r3, [sp, #132]	; 0x84
 80057e8:	9320      	str	r3, [sp, #128]	; 0x80
 80057ea:	9505      	str	r5, [sp, #20]
 80057ec:	9303      	str	r3, [sp, #12]
 80057ee:	9311      	str	r3, [sp, #68]	; 0x44
 80057f0:	9310      	str	r3, [sp, #64]	; 0x40
 80057f2:	9309      	str	r3, [sp, #36]	; 0x24
 80057f4:	9d05      	ldr	r5, [sp, #20]
 80057f6:	462b      	mov	r3, r5
 80057f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057fc:	b112      	cbz	r2, 8005804 <_svfprintf_r+0x84>
 80057fe:	2a25      	cmp	r2, #37	; 0x25
 8005800:	f040 8083 	bne.w	800590a <_svfprintf_r+0x18a>
 8005804:	9b05      	ldr	r3, [sp, #20]
 8005806:	1aee      	subs	r6, r5, r3
 8005808:	d00d      	beq.n	8005826 <_svfprintf_r+0xa6>
 800580a:	e884 0048 	stmia.w	r4, {r3, r6}
 800580e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005810:	4433      	add	r3, r6
 8005812:	9321      	str	r3, [sp, #132]	; 0x84
 8005814:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005816:	3301      	adds	r3, #1
 8005818:	2b07      	cmp	r3, #7
 800581a:	9320      	str	r3, [sp, #128]	; 0x80
 800581c:	dc77      	bgt.n	800590e <_svfprintf_r+0x18e>
 800581e:	3408      	adds	r4, #8
 8005820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005822:	4433      	add	r3, r6
 8005824:	9309      	str	r3, [sp, #36]	; 0x24
 8005826:	782b      	ldrb	r3, [r5, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 8729 	beq.w	8006680 <_svfprintf_r+0xf00>
 800582e:	2300      	movs	r3, #0
 8005830:	1c69      	adds	r1, r5, #1
 8005832:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005836:	461a      	mov	r2, r3
 8005838:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800583c:	930a      	str	r3, [sp, #40]	; 0x28
 800583e:	461d      	mov	r5, r3
 8005840:	200a      	movs	r0, #10
 8005842:	1c4e      	adds	r6, r1, #1
 8005844:	7809      	ldrb	r1, [r1, #0]
 8005846:	9605      	str	r6, [sp, #20]
 8005848:	9102      	str	r1, [sp, #8]
 800584a:	9902      	ldr	r1, [sp, #8]
 800584c:	3920      	subs	r1, #32
 800584e:	2958      	cmp	r1, #88	; 0x58
 8005850:	f200 8418 	bhi.w	8006084 <_svfprintf_r+0x904>
 8005854:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005858:	041600a6 	.word	0x041600a6
 800585c:	00ab0416 	.word	0x00ab0416
 8005860:	04160416 	.word	0x04160416
 8005864:	04160416 	.word	0x04160416
 8005868:	04160416 	.word	0x04160416
 800586c:	006500ae 	.word	0x006500ae
 8005870:	00b70416 	.word	0x00b70416
 8005874:	041600ba 	.word	0x041600ba
 8005878:	00da00d7 	.word	0x00da00d7
 800587c:	00da00da 	.word	0x00da00da
 8005880:	00da00da 	.word	0x00da00da
 8005884:	00da00da 	.word	0x00da00da
 8005888:	00da00da 	.word	0x00da00da
 800588c:	04160416 	.word	0x04160416
 8005890:	04160416 	.word	0x04160416
 8005894:	04160416 	.word	0x04160416
 8005898:	04160416 	.word	0x04160416
 800589c:	04160416 	.word	0x04160416
 80058a0:	012b0115 	.word	0x012b0115
 80058a4:	012b0416 	.word	0x012b0416
 80058a8:	04160416 	.word	0x04160416
 80058ac:	04160416 	.word	0x04160416
 80058b0:	041600ed 	.word	0x041600ed
 80058b4:	03400416 	.word	0x03400416
 80058b8:	04160416 	.word	0x04160416
 80058bc:	04160416 	.word	0x04160416
 80058c0:	03a80416 	.word	0x03a80416
 80058c4:	04160416 	.word	0x04160416
 80058c8:	04160086 	.word	0x04160086
 80058cc:	04160416 	.word	0x04160416
 80058d0:	04160416 	.word	0x04160416
 80058d4:	04160416 	.word	0x04160416
 80058d8:	04160416 	.word	0x04160416
 80058dc:	01070416 	.word	0x01070416
 80058e0:	012b006b 	.word	0x012b006b
 80058e4:	012b012b 	.word	0x012b012b
 80058e8:	006b00f0 	.word	0x006b00f0
 80058ec:	04160416 	.word	0x04160416
 80058f0:	041600fa 	.word	0x041600fa
 80058f4:	03420322 	.word	0x03420322
 80058f8:	01010376 	.word	0x01010376
 80058fc:	03870416 	.word	0x03870416
 8005900:	03aa0416 	.word	0x03aa0416
 8005904:	04160416 	.word	0x04160416
 8005908:	03c2      	.short	0x03c2
 800590a:	461d      	mov	r5, r3
 800590c:	e773      	b.n	80057f6 <_svfprintf_r+0x76>
 800590e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005910:	4651      	mov	r1, sl
 8005912:	4658      	mov	r0, fp
 8005914:	f003 fef5 	bl	8009702 <__ssprint_r>
 8005918:	2800      	cmp	r0, #0
 800591a:	f040 8692 	bne.w	8006642 <_svfprintf_r+0xec2>
 800591e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005920:	e77e      	b.n	8005820 <_svfprintf_r+0xa0>
 8005922:	2301      	movs	r3, #1
 8005924:	222b      	movs	r2, #43	; 0x2b
 8005926:	9905      	ldr	r1, [sp, #20]
 8005928:	e78b      	b.n	8005842 <_svfprintf_r+0xc2>
 800592a:	460f      	mov	r7, r1
 800592c:	e7fb      	b.n	8005926 <_svfprintf_r+0x1a6>
 800592e:	b10b      	cbz	r3, 8005934 <_svfprintf_r+0x1b4>
 8005930:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005934:	06ae      	lsls	r6, r5, #26
 8005936:	f140 80aa 	bpl.w	8005a8e <_svfprintf_r+0x30e>
 800593a:	3707      	adds	r7, #7
 800593c:	f027 0707 	bic.w	r7, r7, #7
 8005940:	f107 0308 	add.w	r3, r7, #8
 8005944:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005948:	9304      	str	r3, [sp, #16]
 800594a:	2e00      	cmp	r6, #0
 800594c:	f177 0300 	sbcs.w	r3, r7, #0
 8005950:	da06      	bge.n	8005960 <_svfprintf_r+0x1e0>
 8005952:	4276      	negs	r6, r6
 8005954:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8005958:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800595c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005960:	2301      	movs	r3, #1
 8005962:	e2ca      	b.n	8005efa <_svfprintf_r+0x77a>
 8005964:	b10b      	cbz	r3, 800596a <_svfprintf_r+0x1ea>
 8005966:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800596a:	4b37      	ldr	r3, [pc, #220]	; (8005a48 <_svfprintf_r+0x2c8>)
 800596c:	9311      	str	r3, [sp, #68]	; 0x44
 800596e:	06ab      	lsls	r3, r5, #26
 8005970:	f140 8339 	bpl.w	8005fe6 <_svfprintf_r+0x866>
 8005974:	3707      	adds	r7, #7
 8005976:	f027 0707 	bic.w	r7, r7, #7
 800597a:	f107 0308 	add.w	r3, r7, #8
 800597e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005982:	9304      	str	r3, [sp, #16]
 8005984:	07e8      	lsls	r0, r5, #31
 8005986:	d50b      	bpl.n	80059a0 <_svfprintf_r+0x220>
 8005988:	ea56 0307 	orrs.w	r3, r6, r7
 800598c:	d008      	beq.n	80059a0 <_svfprintf_r+0x220>
 800598e:	2330      	movs	r3, #48	; 0x30
 8005990:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8005994:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005998:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 800599c:	f045 0502 	orr.w	r5, r5, #2
 80059a0:	2302      	movs	r3, #2
 80059a2:	e2a7      	b.n	8005ef4 <_svfprintf_r+0x774>
 80059a4:	2a00      	cmp	r2, #0
 80059a6:	d1be      	bne.n	8005926 <_svfprintf_r+0x1a6>
 80059a8:	2301      	movs	r3, #1
 80059aa:	2220      	movs	r2, #32
 80059ac:	e7bb      	b.n	8005926 <_svfprintf_r+0x1a6>
 80059ae:	f045 0501 	orr.w	r5, r5, #1
 80059b2:	e7b8      	b.n	8005926 <_svfprintf_r+0x1a6>
 80059b4:	683e      	ldr	r6, [r7, #0]
 80059b6:	960a      	str	r6, [sp, #40]	; 0x28
 80059b8:	2e00      	cmp	r6, #0
 80059ba:	f107 0104 	add.w	r1, r7, #4
 80059be:	dab4      	bge.n	800592a <_svfprintf_r+0x1aa>
 80059c0:	4276      	negs	r6, r6
 80059c2:	960a      	str	r6, [sp, #40]	; 0x28
 80059c4:	460f      	mov	r7, r1
 80059c6:	f045 0504 	orr.w	r5, r5, #4
 80059ca:	e7ac      	b.n	8005926 <_svfprintf_r+0x1a6>
 80059cc:	9905      	ldr	r1, [sp, #20]
 80059ce:	1c4e      	adds	r6, r1, #1
 80059d0:	7809      	ldrb	r1, [r1, #0]
 80059d2:	9102      	str	r1, [sp, #8]
 80059d4:	292a      	cmp	r1, #42	; 0x2a
 80059d6:	d010      	beq.n	80059fa <_svfprintf_r+0x27a>
 80059d8:	f04f 0900 	mov.w	r9, #0
 80059dc:	9605      	str	r6, [sp, #20]
 80059de:	9902      	ldr	r1, [sp, #8]
 80059e0:	3930      	subs	r1, #48	; 0x30
 80059e2:	2909      	cmp	r1, #9
 80059e4:	f63f af31 	bhi.w	800584a <_svfprintf_r+0xca>
 80059e8:	fb00 1909 	mla	r9, r0, r9, r1
 80059ec:	9905      	ldr	r1, [sp, #20]
 80059ee:	460e      	mov	r6, r1
 80059f0:	f816 1b01 	ldrb.w	r1, [r6], #1
 80059f4:	9102      	str	r1, [sp, #8]
 80059f6:	9605      	str	r6, [sp, #20]
 80059f8:	e7f1      	b.n	80059de <_svfprintf_r+0x25e>
 80059fa:	6839      	ldr	r1, [r7, #0]
 80059fc:	9605      	str	r6, [sp, #20]
 80059fe:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 8005a02:	3704      	adds	r7, #4
 8005a04:	e78f      	b.n	8005926 <_svfprintf_r+0x1a6>
 8005a06:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8005a0a:	e78c      	b.n	8005926 <_svfprintf_r+0x1a6>
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	910a      	str	r1, [sp, #40]	; 0x28
 8005a10:	9902      	ldr	r1, [sp, #8]
 8005a12:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005a14:	3930      	subs	r1, #48	; 0x30
 8005a16:	fb00 1106 	mla	r1, r0, r6, r1
 8005a1a:	910a      	str	r1, [sp, #40]	; 0x28
 8005a1c:	9905      	ldr	r1, [sp, #20]
 8005a1e:	460e      	mov	r6, r1
 8005a20:	f816 1b01 	ldrb.w	r1, [r6], #1
 8005a24:	9102      	str	r1, [sp, #8]
 8005a26:	9902      	ldr	r1, [sp, #8]
 8005a28:	9605      	str	r6, [sp, #20]
 8005a2a:	3930      	subs	r1, #48	; 0x30
 8005a2c:	2909      	cmp	r1, #9
 8005a2e:	d9ef      	bls.n	8005a10 <_svfprintf_r+0x290>
 8005a30:	e70b      	b.n	800584a <_svfprintf_r+0xca>
 8005a32:	f045 0508 	orr.w	r5, r5, #8
 8005a36:	e776      	b.n	8005926 <_svfprintf_r+0x1a6>
 8005a38:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8005a3c:	e773      	b.n	8005926 <_svfprintf_r+0x1a6>
 8005a3e:	bf00      	nop
	...
 8005a48:	0800a6dc 	.word	0x0800a6dc
 8005a4c:	9905      	ldr	r1, [sp, #20]
 8005a4e:	7809      	ldrb	r1, [r1, #0]
 8005a50:	296c      	cmp	r1, #108	; 0x6c
 8005a52:	d105      	bne.n	8005a60 <_svfprintf_r+0x2e0>
 8005a54:	9905      	ldr	r1, [sp, #20]
 8005a56:	3101      	adds	r1, #1
 8005a58:	9105      	str	r1, [sp, #20]
 8005a5a:	f045 0520 	orr.w	r5, r5, #32
 8005a5e:	e762      	b.n	8005926 <_svfprintf_r+0x1a6>
 8005a60:	f045 0510 	orr.w	r5, r5, #16
 8005a64:	e75f      	b.n	8005926 <_svfprintf_r+0x1a6>
 8005a66:	1d3b      	adds	r3, r7, #4
 8005a68:	9304      	str	r3, [sp, #16]
 8005a6a:	2600      	movs	r6, #0
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8005a72:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005a76:	f04f 0901 	mov.w	r9, #1
 8005a7a:	4637      	mov	r7, r6
 8005a7c:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8005a80:	e11b      	b.n	8005cba <_svfprintf_r+0x53a>
 8005a82:	b10b      	cbz	r3, 8005a88 <_svfprintf_r+0x308>
 8005a84:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005a88:	f045 0510 	orr.w	r5, r5, #16
 8005a8c:	e752      	b.n	8005934 <_svfprintf_r+0x1b4>
 8005a8e:	f015 0f10 	tst.w	r5, #16
 8005a92:	f107 0304 	add.w	r3, r7, #4
 8005a96:	d003      	beq.n	8005aa0 <_svfprintf_r+0x320>
 8005a98:	683e      	ldr	r6, [r7, #0]
 8005a9a:	9304      	str	r3, [sp, #16]
 8005a9c:	17f7      	asrs	r7, r6, #31
 8005a9e:	e754      	b.n	800594a <_svfprintf_r+0x1ca>
 8005aa0:	683e      	ldr	r6, [r7, #0]
 8005aa2:	9304      	str	r3, [sp, #16]
 8005aa4:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005aa8:	bf18      	it	ne
 8005aaa:	b236      	sxthne	r6, r6
 8005aac:	e7f6      	b.n	8005a9c <_svfprintf_r+0x31c>
 8005aae:	b10b      	cbz	r3, 8005ab4 <_svfprintf_r+0x334>
 8005ab0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005ab4:	3707      	adds	r7, #7
 8005ab6:	f027 0707 	bic.w	r7, r7, #7
 8005aba:	f107 0308 	add.w	r3, r7, #8
 8005abe:	9304      	str	r3, [sp, #16]
 8005ac0:	ed97 7b00 	vldr	d7, [r7]
 8005ac4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005ac8:	9b06      	ldr	r3, [sp, #24]
 8005aca:	9312      	str	r3, [sp, #72]	; 0x48
 8005acc:	9b07      	ldr	r3, [sp, #28]
 8005ace:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ad2:	9313      	str	r3, [sp, #76]	; 0x4c
 8005ad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ad8:	4b4a      	ldr	r3, [pc, #296]	; (8005c04 <_svfprintf_r+0x484>)
 8005ada:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005ade:	f7fb f829 	bl	8000b34 <__aeabi_dcmpun>
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	f040 85d5 	bne.w	8006692 <_svfprintf_r+0xf12>
 8005ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005aec:	4b45      	ldr	r3, [pc, #276]	; (8005c04 <_svfprintf_r+0x484>)
 8005aee:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005af2:	f7fb f801 	bl	8000af8 <__aeabi_dcmple>
 8005af6:	2800      	cmp	r0, #0
 8005af8:	f040 85cb 	bne.w	8006692 <_svfprintf_r+0xf12>
 8005afc:	2200      	movs	r2, #0
 8005afe:	2300      	movs	r3, #0
 8005b00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b04:	f7fa ffee 	bl	8000ae4 <__aeabi_dcmplt>
 8005b08:	b110      	cbz	r0, 8005b10 <_svfprintf_r+0x390>
 8005b0a:	232d      	movs	r3, #45	; 0x2d
 8005b0c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005b10:	4b3d      	ldr	r3, [pc, #244]	; (8005c08 <_svfprintf_r+0x488>)
 8005b12:	4a3e      	ldr	r2, [pc, #248]	; (8005c0c <_svfprintf_r+0x48c>)
 8005b14:	9902      	ldr	r1, [sp, #8]
 8005b16:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8005b1a:	2947      	cmp	r1, #71	; 0x47
 8005b1c:	bfcc      	ite	gt
 8005b1e:	4690      	movgt	r8, r2
 8005b20:	4698      	movle	r8, r3
 8005b22:	f04f 0903 	mov.w	r9, #3
 8005b26:	2600      	movs	r6, #0
 8005b28:	4637      	mov	r7, r6
 8005b2a:	e0c6      	b.n	8005cba <_svfprintf_r+0x53a>
 8005b2c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8005b30:	d022      	beq.n	8005b78 <_svfprintf_r+0x3f8>
 8005b32:	9b02      	ldr	r3, [sp, #8]
 8005b34:	f023 0320 	bic.w	r3, r3, #32
 8005b38:	2b47      	cmp	r3, #71	; 0x47
 8005b3a:	d104      	bne.n	8005b46 <_svfprintf_r+0x3c6>
 8005b3c:	f1b9 0f00 	cmp.w	r9, #0
 8005b40:	bf08      	it	eq
 8005b42:	f04f 0901 	moveq.w	r9, #1
 8005b46:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8005b4a:	930c      	str	r3, [sp, #48]	; 0x30
 8005b4c:	9b07      	ldr	r3, [sp, #28]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	da15      	bge.n	8005b7e <_svfprintf_r+0x3fe>
 8005b52:	9b06      	ldr	r3, [sp, #24]
 8005b54:	930e      	str	r3, [sp, #56]	; 0x38
 8005b56:	9b07      	ldr	r3, [sp, #28]
 8005b58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005b5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b5e:	232d      	movs	r3, #45	; 0x2d
 8005b60:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b62:	9b02      	ldr	r3, [sp, #8]
 8005b64:	f023 0720 	bic.w	r7, r3, #32
 8005b68:	2f46      	cmp	r7, #70	; 0x46
 8005b6a:	d00e      	beq.n	8005b8a <_svfprintf_r+0x40a>
 8005b6c:	2f45      	cmp	r7, #69	; 0x45
 8005b6e:	d146      	bne.n	8005bfe <_svfprintf_r+0x47e>
 8005b70:	f109 0601 	add.w	r6, r9, #1
 8005b74:	2102      	movs	r1, #2
 8005b76:	e00a      	b.n	8005b8e <_svfprintf_r+0x40e>
 8005b78:	f04f 0906 	mov.w	r9, #6
 8005b7c:	e7e3      	b.n	8005b46 <_svfprintf_r+0x3c6>
 8005b7e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005b82:	2300      	movs	r3, #0
 8005b84:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8005b88:	e7ea      	b.n	8005b60 <_svfprintf_r+0x3e0>
 8005b8a:	464e      	mov	r6, r9
 8005b8c:	2103      	movs	r1, #3
 8005b8e:	ab1d      	add	r3, sp, #116	; 0x74
 8005b90:	9301      	str	r3, [sp, #4]
 8005b92:	ab1a      	add	r3, sp, #104	; 0x68
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	4632      	mov	r2, r6
 8005b98:	ab19      	add	r3, sp, #100	; 0x64
 8005b9a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8005b9e:	4658      	mov	r0, fp
 8005ba0:	f001 fb92 	bl	80072c8 <_dtoa_r>
 8005ba4:	2f47      	cmp	r7, #71	; 0x47
 8005ba6:	4680      	mov	r8, r0
 8005ba8:	d102      	bne.n	8005bb0 <_svfprintf_r+0x430>
 8005baa:	07e8      	lsls	r0, r5, #31
 8005bac:	f140 857e 	bpl.w	80066ac <_svfprintf_r+0xf2c>
 8005bb0:	eb08 0306 	add.w	r3, r8, r6
 8005bb4:	2f46      	cmp	r7, #70	; 0x46
 8005bb6:	9303      	str	r3, [sp, #12]
 8005bb8:	d111      	bne.n	8005bde <_svfprintf_r+0x45e>
 8005bba:	f898 3000 	ldrb.w	r3, [r8]
 8005bbe:	2b30      	cmp	r3, #48	; 0x30
 8005bc0:	d109      	bne.n	8005bd6 <_svfprintf_r+0x456>
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005bca:	f7fa ff81 	bl	8000ad0 <__aeabi_dcmpeq>
 8005bce:	b910      	cbnz	r0, 8005bd6 <_svfprintf_r+0x456>
 8005bd0:	f1c6 0601 	rsb	r6, r6, #1
 8005bd4:	9619      	str	r6, [sp, #100]	; 0x64
 8005bd6:	9a03      	ldr	r2, [sp, #12]
 8005bd8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005bda:	441a      	add	r2, r3
 8005bdc:	9203      	str	r2, [sp, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	2300      	movs	r3, #0
 8005be2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005be6:	f7fa ff73 	bl	8000ad0 <__aeabi_dcmpeq>
 8005bea:	b988      	cbnz	r0, 8005c10 <_svfprintf_r+0x490>
 8005bec:	2230      	movs	r2, #48	; 0x30
 8005bee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005bf0:	9903      	ldr	r1, [sp, #12]
 8005bf2:	4299      	cmp	r1, r3
 8005bf4:	d90e      	bls.n	8005c14 <_svfprintf_r+0x494>
 8005bf6:	1c59      	adds	r1, r3, #1
 8005bf8:	911d      	str	r1, [sp, #116]	; 0x74
 8005bfa:	701a      	strb	r2, [r3, #0]
 8005bfc:	e7f7      	b.n	8005bee <_svfprintf_r+0x46e>
 8005bfe:	464e      	mov	r6, r9
 8005c00:	e7b8      	b.n	8005b74 <_svfprintf_r+0x3f4>
 8005c02:	bf00      	nop
 8005c04:	7fefffff 	.word	0x7fefffff
 8005c08:	0800a6cc 	.word	0x0800a6cc
 8005c0c:	0800a6d0 	.word	0x0800a6d0
 8005c10:	9b03      	ldr	r3, [sp, #12]
 8005c12:	931d      	str	r3, [sp, #116]	; 0x74
 8005c14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005c16:	2f47      	cmp	r7, #71	; 0x47
 8005c18:	eba3 0308 	sub.w	r3, r3, r8
 8005c1c:	9303      	str	r3, [sp, #12]
 8005c1e:	f040 80fa 	bne.w	8005e16 <_svfprintf_r+0x696>
 8005c22:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c24:	1cd9      	adds	r1, r3, #3
 8005c26:	db02      	blt.n	8005c2e <_svfprintf_r+0x4ae>
 8005c28:	4599      	cmp	r9, r3
 8005c2a:	f280 8120 	bge.w	8005e6e <_svfprintf_r+0x6ee>
 8005c2e:	9b02      	ldr	r3, [sp, #8]
 8005c30:	3b02      	subs	r3, #2
 8005c32:	9302      	str	r3, [sp, #8]
 8005c34:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005c36:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8005c3a:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8005c3e:	1e53      	subs	r3, r2, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	9319      	str	r3, [sp, #100]	; 0x64
 8005c44:	bfb6      	itet	lt
 8005c46:	f1c2 0301 	rsblt	r3, r2, #1
 8005c4a:	222b      	movge	r2, #43	; 0x2b
 8005c4c:	222d      	movlt	r2, #45	; 0x2d
 8005c4e:	2b09      	cmp	r3, #9
 8005c50:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8005c54:	f340 80fb 	ble.w	8005e4e <_svfprintf_r+0x6ce>
 8005c58:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8005c5c:	260a      	movs	r6, #10
 8005c5e:	fb93 f0f6 	sdiv	r0, r3, r6
 8005c62:	fb06 3310 	mls	r3, r6, r0, r3
 8005c66:	3330      	adds	r3, #48	; 0x30
 8005c68:	2809      	cmp	r0, #9
 8005c6a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005c6e:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 8005c72:	4603      	mov	r3, r0
 8005c74:	f300 80e4 	bgt.w	8005e40 <_svfprintf_r+0x6c0>
 8005c78:	3330      	adds	r3, #48	; 0x30
 8005c7a:	f801 3c01 	strb.w	r3, [r1, #-1]
 8005c7e:	3a02      	subs	r2, #2
 8005c80:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8005c84:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8005c88:	4282      	cmp	r2, r0
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	f0c0 80da 	bcc.w	8005e44 <_svfprintf_r+0x6c4>
 8005c90:	9a03      	ldr	r2, [sp, #12]
 8005c92:	ab1b      	add	r3, sp, #108	; 0x6c
 8005c94:	1acb      	subs	r3, r1, r3
 8005c96:	2a01      	cmp	r2, #1
 8005c98:	9310      	str	r3, [sp, #64]	; 0x40
 8005c9a:	eb03 0902 	add.w	r9, r3, r2
 8005c9e:	dc02      	bgt.n	8005ca6 <_svfprintf_r+0x526>
 8005ca0:	f015 0701 	ands.w	r7, r5, #1
 8005ca4:	d002      	beq.n	8005cac <_svfprintf_r+0x52c>
 8005ca6:	9b08      	ldr	r3, [sp, #32]
 8005ca8:	2700      	movs	r7, #0
 8005caa:	4499      	add	r9, r3
 8005cac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cae:	b113      	cbz	r3, 8005cb6 <_svfprintf_r+0x536>
 8005cb0:	232d      	movs	r3, #45	; 0x2d
 8005cb2:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005cb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cb8:	2600      	movs	r6, #0
 8005cba:	454e      	cmp	r6, r9
 8005cbc:	4633      	mov	r3, r6
 8005cbe:	bfb8      	it	lt
 8005cc0:	464b      	movlt	r3, r9
 8005cc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cc4:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8005cc8:	b113      	cbz	r3, 8005cd0 <_svfprintf_r+0x550>
 8005cca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ccc:	3301      	adds	r3, #1
 8005cce:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cd0:	f015 0302 	ands.w	r3, r5, #2
 8005cd4:	9314      	str	r3, [sp, #80]	; 0x50
 8005cd6:	bf1e      	ittt	ne
 8005cd8:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8005cda:	3302      	addne	r3, #2
 8005cdc:	930b      	strne	r3, [sp, #44]	; 0x2c
 8005cde:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8005ce2:	9315      	str	r3, [sp, #84]	; 0x54
 8005ce4:	d118      	bne.n	8005d18 <_svfprintf_r+0x598>
 8005ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ce8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005cea:	1a9b      	subs	r3, r3, r2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	930c      	str	r3, [sp, #48]	; 0x30
 8005cf0:	dd12      	ble.n	8005d18 <_svfprintf_r+0x598>
 8005cf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cf4:	2b10      	cmp	r3, #16
 8005cf6:	4ba9      	ldr	r3, [pc, #676]	; (8005f9c <_svfprintf_r+0x81c>)
 8005cf8:	6023      	str	r3, [r4, #0]
 8005cfa:	f300 81d5 	bgt.w	80060a8 <_svfprintf_r+0x928>
 8005cfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d00:	6063      	str	r3, [r4, #4]
 8005d02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d06:	4413      	add	r3, r2
 8005d08:	9321      	str	r3, [sp, #132]	; 0x84
 8005d0a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	2b07      	cmp	r3, #7
 8005d10:	9320      	str	r3, [sp, #128]	; 0x80
 8005d12:	f300 81e2 	bgt.w	80060da <_svfprintf_r+0x95a>
 8005d16:	3408      	adds	r4, #8
 8005d18:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8005d1c:	b173      	cbz	r3, 8005d3c <_svfprintf_r+0x5bc>
 8005d1e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8005d22:	6023      	str	r3, [r4, #0]
 8005d24:	2301      	movs	r3, #1
 8005d26:	6063      	str	r3, [r4, #4]
 8005d28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	9321      	str	r3, [sp, #132]	; 0x84
 8005d2e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005d30:	3301      	adds	r3, #1
 8005d32:	2b07      	cmp	r3, #7
 8005d34:	9320      	str	r3, [sp, #128]	; 0x80
 8005d36:	f300 81da 	bgt.w	80060ee <_svfprintf_r+0x96e>
 8005d3a:	3408      	adds	r4, #8
 8005d3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d3e:	b16b      	cbz	r3, 8005d5c <_svfprintf_r+0x5dc>
 8005d40:	ab18      	add	r3, sp, #96	; 0x60
 8005d42:	6023      	str	r3, [r4, #0]
 8005d44:	2302      	movs	r3, #2
 8005d46:	6063      	str	r3, [r4, #4]
 8005d48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d4a:	3302      	adds	r3, #2
 8005d4c:	9321      	str	r3, [sp, #132]	; 0x84
 8005d4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005d50:	3301      	adds	r3, #1
 8005d52:	2b07      	cmp	r3, #7
 8005d54:	9320      	str	r3, [sp, #128]	; 0x80
 8005d56:	f300 81d4 	bgt.w	8006102 <_svfprintf_r+0x982>
 8005d5a:	3408      	adds	r4, #8
 8005d5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d5e:	2b80      	cmp	r3, #128	; 0x80
 8005d60:	d114      	bne.n	8005d8c <_svfprintf_r+0x60c>
 8005d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d66:	1a9b      	subs	r3, r3, r2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	dd0f      	ble.n	8005d8c <_svfprintf_r+0x60c>
 8005d6c:	4a8c      	ldr	r2, [pc, #560]	; (8005fa0 <_svfprintf_r+0x820>)
 8005d6e:	6022      	str	r2, [r4, #0]
 8005d70:	2b10      	cmp	r3, #16
 8005d72:	f300 81d0 	bgt.w	8006116 <_svfprintf_r+0x996>
 8005d76:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d78:	6063      	str	r3, [r4, #4]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	9321      	str	r3, [sp, #132]	; 0x84
 8005d7e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005d80:	3301      	adds	r3, #1
 8005d82:	2b07      	cmp	r3, #7
 8005d84:	9320      	str	r3, [sp, #128]	; 0x80
 8005d86:	f300 81df 	bgt.w	8006148 <_svfprintf_r+0x9c8>
 8005d8a:	3408      	adds	r4, #8
 8005d8c:	eba6 0609 	sub.w	r6, r6, r9
 8005d90:	2e00      	cmp	r6, #0
 8005d92:	dd0f      	ble.n	8005db4 <_svfprintf_r+0x634>
 8005d94:	4b82      	ldr	r3, [pc, #520]	; (8005fa0 <_svfprintf_r+0x820>)
 8005d96:	6023      	str	r3, [r4, #0]
 8005d98:	2e10      	cmp	r6, #16
 8005d9a:	f300 81df 	bgt.w	800615c <_svfprintf_r+0x9dc>
 8005d9e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005da0:	9821      	ldr	r0, [sp, #132]	; 0x84
 8005da2:	6066      	str	r6, [r4, #4]
 8005da4:	3301      	adds	r3, #1
 8005da6:	4406      	add	r6, r0
 8005da8:	2b07      	cmp	r3, #7
 8005daa:	9621      	str	r6, [sp, #132]	; 0x84
 8005dac:	9320      	str	r3, [sp, #128]	; 0x80
 8005dae:	f300 81ec 	bgt.w	800618a <_svfprintf_r+0xa0a>
 8005db2:	3408      	adds	r4, #8
 8005db4:	05eb      	lsls	r3, r5, #23
 8005db6:	f100 81f2 	bmi.w	800619e <_svfprintf_r+0xa1e>
 8005dba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dbc:	e884 0300 	stmia.w	r4, {r8, r9}
 8005dc0:	444b      	add	r3, r9
 8005dc2:	9321      	str	r3, [sp, #132]	; 0x84
 8005dc4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	2b07      	cmp	r3, #7
 8005dca:	9320      	str	r3, [sp, #128]	; 0x80
 8005dcc:	f340 8419 	ble.w	8006602 <_svfprintf_r+0xe82>
 8005dd0:	aa1f      	add	r2, sp, #124	; 0x7c
 8005dd2:	4651      	mov	r1, sl
 8005dd4:	4658      	mov	r0, fp
 8005dd6:	f003 fc94 	bl	8009702 <__ssprint_r>
 8005dda:	2800      	cmp	r0, #0
 8005ddc:	f040 8431 	bne.w	8006642 <_svfprintf_r+0xec2>
 8005de0:	ac2c      	add	r4, sp, #176	; 0xb0
 8005de2:	076b      	lsls	r3, r5, #29
 8005de4:	f100 8410 	bmi.w	8006608 <_svfprintf_r+0xe88>
 8005de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dee:	428a      	cmp	r2, r1
 8005df0:	bfac      	ite	ge
 8005df2:	189b      	addge	r3, r3, r2
 8005df4:	185b      	addlt	r3, r3, r1
 8005df6:	9309      	str	r3, [sp, #36]	; 0x24
 8005df8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dfa:	b13b      	cbz	r3, 8005e0c <_svfprintf_r+0x68c>
 8005dfc:	aa1f      	add	r2, sp, #124	; 0x7c
 8005dfe:	4651      	mov	r1, sl
 8005e00:	4658      	mov	r0, fp
 8005e02:	f003 fc7e 	bl	8009702 <__ssprint_r>
 8005e06:	2800      	cmp	r0, #0
 8005e08:	f040 841b 	bne.w	8006642 <_svfprintf_r+0xec2>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	9320      	str	r3, [sp, #128]	; 0x80
 8005e10:	9f04      	ldr	r7, [sp, #16]
 8005e12:	ac2c      	add	r4, sp, #176	; 0xb0
 8005e14:	e4ee      	b.n	80057f4 <_svfprintf_r+0x74>
 8005e16:	9b02      	ldr	r3, [sp, #8]
 8005e18:	2b65      	cmp	r3, #101	; 0x65
 8005e1a:	f77f af0b 	ble.w	8005c34 <_svfprintf_r+0x4b4>
 8005e1e:	9b02      	ldr	r3, [sp, #8]
 8005e20:	2b66      	cmp	r3, #102	; 0x66
 8005e22:	d124      	bne.n	8005e6e <_svfprintf_r+0x6ee>
 8005e24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	dd19      	ble.n	8005e5e <_svfprintf_r+0x6de>
 8005e2a:	f1b9 0f00 	cmp.w	r9, #0
 8005e2e:	d101      	bne.n	8005e34 <_svfprintf_r+0x6b4>
 8005e30:	07ea      	lsls	r2, r5, #31
 8005e32:	d502      	bpl.n	8005e3a <_svfprintf_r+0x6ba>
 8005e34:	9a08      	ldr	r2, [sp, #32]
 8005e36:	4413      	add	r3, r2
 8005e38:	444b      	add	r3, r9
 8005e3a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8005e3c:	4699      	mov	r9, r3
 8005e3e:	e735      	b.n	8005cac <_svfprintf_r+0x52c>
 8005e40:	460a      	mov	r2, r1
 8005e42:	e70c      	b.n	8005c5e <_svfprintf_r+0x4de>
 8005e44:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005e48:	f803 1b01 	strb.w	r1, [r3], #1
 8005e4c:	e71c      	b.n	8005c88 <_svfprintf_r+0x508>
 8005e4e:	2230      	movs	r2, #48	; 0x30
 8005e50:	4413      	add	r3, r2
 8005e52:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8005e56:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8005e5a:	a91c      	add	r1, sp, #112	; 0x70
 8005e5c:	e718      	b.n	8005c90 <_svfprintf_r+0x510>
 8005e5e:	f1b9 0f00 	cmp.w	r9, #0
 8005e62:	d101      	bne.n	8005e68 <_svfprintf_r+0x6e8>
 8005e64:	07eb      	lsls	r3, r5, #31
 8005e66:	d515      	bpl.n	8005e94 <_svfprintf_r+0x714>
 8005e68:	9b08      	ldr	r3, [sp, #32]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	e7e4      	b.n	8005e38 <_svfprintf_r+0x6b8>
 8005e6e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005e70:	9b03      	ldr	r3, [sp, #12]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	db06      	blt.n	8005e84 <_svfprintf_r+0x704>
 8005e76:	07ef      	lsls	r7, r5, #31
 8005e78:	d50e      	bpl.n	8005e98 <_svfprintf_r+0x718>
 8005e7a:	9b08      	ldr	r3, [sp, #32]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	2267      	movs	r2, #103	; 0x67
 8005e80:	9202      	str	r2, [sp, #8]
 8005e82:	e7da      	b.n	8005e3a <_svfprintf_r+0x6ba>
 8005e84:	9b03      	ldr	r3, [sp, #12]
 8005e86:	9908      	ldr	r1, [sp, #32]
 8005e88:	2a00      	cmp	r2, #0
 8005e8a:	440b      	add	r3, r1
 8005e8c:	dcf7      	bgt.n	8005e7e <_svfprintf_r+0x6fe>
 8005e8e:	f1c2 0201 	rsb	r2, r2, #1
 8005e92:	e7f3      	b.n	8005e7c <_svfprintf_r+0x6fc>
 8005e94:	2301      	movs	r3, #1
 8005e96:	e7d0      	b.n	8005e3a <_svfprintf_r+0x6ba>
 8005e98:	4613      	mov	r3, r2
 8005e9a:	e7f0      	b.n	8005e7e <_svfprintf_r+0x6fe>
 8005e9c:	b10b      	cbz	r3, 8005ea2 <_svfprintf_r+0x722>
 8005e9e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005ea2:	f015 0f20 	tst.w	r5, #32
 8005ea6:	f107 0304 	add.w	r3, r7, #4
 8005eaa:	d008      	beq.n	8005ebe <_svfprintf_r+0x73e>
 8005eac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	17ce      	asrs	r6, r1, #31
 8005eb2:	4608      	mov	r0, r1
 8005eb4:	4631      	mov	r1, r6
 8005eb6:	e9c2 0100 	strd	r0, r1, [r2]
 8005eba:	461f      	mov	r7, r3
 8005ebc:	e49a      	b.n	80057f4 <_svfprintf_r+0x74>
 8005ebe:	06ee      	lsls	r6, r5, #27
 8005ec0:	d503      	bpl.n	8005eca <_svfprintf_r+0x74a>
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ec6:	6011      	str	r1, [r2, #0]
 8005ec8:	e7f7      	b.n	8005eba <_svfprintf_r+0x73a>
 8005eca:	0668      	lsls	r0, r5, #25
 8005ecc:	d5f9      	bpl.n	8005ec2 <_svfprintf_r+0x742>
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8005ed4:	8011      	strh	r1, [r2, #0]
 8005ed6:	e7f0      	b.n	8005eba <_svfprintf_r+0x73a>
 8005ed8:	f045 0510 	orr.w	r5, r5, #16
 8005edc:	f015 0320 	ands.w	r3, r5, #32
 8005ee0:	d022      	beq.n	8005f28 <_svfprintf_r+0x7a8>
 8005ee2:	3707      	adds	r7, #7
 8005ee4:	f027 0707 	bic.w	r7, r7, #7
 8005ee8:	f107 0308 	add.w	r3, r7, #8
 8005eec:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005ef0:	9304      	str	r3, [sp, #16]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005efa:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8005efe:	f000 83db 	beq.w	80066b8 <_svfprintf_r+0xf38>
 8005f02:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8005f06:	920b      	str	r2, [sp, #44]	; 0x2c
 8005f08:	ea56 0207 	orrs.w	r2, r6, r7
 8005f0c:	f040 83d9 	bne.w	80066c2 <_svfprintf_r+0xf42>
 8005f10:	f1b9 0f00 	cmp.w	r9, #0
 8005f14:	f000 80aa 	beq.w	800606c <_svfprintf_r+0x8ec>
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d076      	beq.n	800600a <_svfprintf_r+0x88a>
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	f000 8091 	beq.w	8006044 <_svfprintf_r+0x8c4>
 8005f22:	2600      	movs	r6, #0
 8005f24:	2700      	movs	r7, #0
 8005f26:	e3d2      	b.n	80066ce <_svfprintf_r+0xf4e>
 8005f28:	1d3a      	adds	r2, r7, #4
 8005f2a:	f015 0110 	ands.w	r1, r5, #16
 8005f2e:	9204      	str	r2, [sp, #16]
 8005f30:	d002      	beq.n	8005f38 <_svfprintf_r+0x7b8>
 8005f32:	683e      	ldr	r6, [r7, #0]
 8005f34:	2700      	movs	r7, #0
 8005f36:	e7dd      	b.n	8005ef4 <_svfprintf_r+0x774>
 8005f38:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8005f3c:	d0f9      	beq.n	8005f32 <_svfprintf_r+0x7b2>
 8005f3e:	883e      	ldrh	r6, [r7, #0]
 8005f40:	2700      	movs	r7, #0
 8005f42:	e7d6      	b.n	8005ef2 <_svfprintf_r+0x772>
 8005f44:	1d3b      	adds	r3, r7, #4
 8005f46:	9304      	str	r3, [sp, #16]
 8005f48:	2330      	movs	r3, #48	; 0x30
 8005f4a:	2278      	movs	r2, #120	; 0x78
 8005f4c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8005f50:	4b14      	ldr	r3, [pc, #80]	; (8005fa4 <_svfprintf_r+0x824>)
 8005f52:	683e      	ldr	r6, [r7, #0]
 8005f54:	9311      	str	r3, [sp, #68]	; 0x44
 8005f56:	2700      	movs	r7, #0
 8005f58:	f045 0502 	orr.w	r5, r5, #2
 8005f5c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8005f60:	2302      	movs	r3, #2
 8005f62:	9202      	str	r2, [sp, #8]
 8005f64:	e7c6      	b.n	8005ef4 <_svfprintf_r+0x774>
 8005f66:	1d3b      	adds	r3, r7, #4
 8005f68:	2600      	movs	r6, #0
 8005f6a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8005f6e:	9304      	str	r3, [sp, #16]
 8005f70:	f8d7 8000 	ldr.w	r8, [r7]
 8005f74:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005f78:	d00a      	beq.n	8005f90 <_svfprintf_r+0x810>
 8005f7a:	464a      	mov	r2, r9
 8005f7c:	4631      	mov	r1, r6
 8005f7e:	4640      	mov	r0, r8
 8005f80:	f7fa f92e 	bl	80001e0 <memchr>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	f000 808d 	beq.w	80060a4 <_svfprintf_r+0x924>
 8005f8a:	eba0 0908 	sub.w	r9, r0, r8
 8005f8e:	e5cb      	b.n	8005b28 <_svfprintf_r+0x3a8>
 8005f90:	4640      	mov	r0, r8
 8005f92:	f7fa f975 	bl	8000280 <strlen>
 8005f96:	4681      	mov	r9, r0
 8005f98:	e5c6      	b.n	8005b28 <_svfprintf_r+0x3a8>
 8005f9a:	bf00      	nop
 8005f9c:	0800a700 	.word	0x0800a700
 8005fa0:	0800a710 	.word	0x0800a710
 8005fa4:	0800a6ed 	.word	0x0800a6ed
 8005fa8:	f045 0510 	orr.w	r5, r5, #16
 8005fac:	06a9      	lsls	r1, r5, #26
 8005fae:	d509      	bpl.n	8005fc4 <_svfprintf_r+0x844>
 8005fb0:	3707      	adds	r7, #7
 8005fb2:	f027 0707 	bic.w	r7, r7, #7
 8005fb6:	f107 0308 	add.w	r3, r7, #8
 8005fba:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005fbe:	9304      	str	r3, [sp, #16]
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e797      	b.n	8005ef4 <_svfprintf_r+0x774>
 8005fc4:	1d3b      	adds	r3, r7, #4
 8005fc6:	f015 0f10 	tst.w	r5, #16
 8005fca:	9304      	str	r3, [sp, #16]
 8005fcc:	d001      	beq.n	8005fd2 <_svfprintf_r+0x852>
 8005fce:	683e      	ldr	r6, [r7, #0]
 8005fd0:	e002      	b.n	8005fd8 <_svfprintf_r+0x858>
 8005fd2:	066a      	lsls	r2, r5, #25
 8005fd4:	d5fb      	bpl.n	8005fce <_svfprintf_r+0x84e>
 8005fd6:	883e      	ldrh	r6, [r7, #0]
 8005fd8:	2700      	movs	r7, #0
 8005fda:	e7f1      	b.n	8005fc0 <_svfprintf_r+0x840>
 8005fdc:	b10b      	cbz	r3, 8005fe2 <_svfprintf_r+0x862>
 8005fde:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005fe2:	4ba3      	ldr	r3, [pc, #652]	; (8006270 <_svfprintf_r+0xaf0>)
 8005fe4:	e4c2      	b.n	800596c <_svfprintf_r+0x1ec>
 8005fe6:	1d3b      	adds	r3, r7, #4
 8005fe8:	f015 0f10 	tst.w	r5, #16
 8005fec:	9304      	str	r3, [sp, #16]
 8005fee:	d001      	beq.n	8005ff4 <_svfprintf_r+0x874>
 8005ff0:	683e      	ldr	r6, [r7, #0]
 8005ff2:	e002      	b.n	8005ffa <_svfprintf_r+0x87a>
 8005ff4:	066e      	lsls	r6, r5, #25
 8005ff6:	d5fb      	bpl.n	8005ff0 <_svfprintf_r+0x870>
 8005ff8:	883e      	ldrh	r6, [r7, #0]
 8005ffa:	2700      	movs	r7, #0
 8005ffc:	e4c2      	b.n	8005984 <_svfprintf_r+0x204>
 8005ffe:	4643      	mov	r3, r8
 8006000:	e366      	b.n	80066d0 <_svfprintf_r+0xf50>
 8006002:	2f00      	cmp	r7, #0
 8006004:	bf08      	it	eq
 8006006:	2e0a      	cmpeq	r6, #10
 8006008:	d205      	bcs.n	8006016 <_svfprintf_r+0x896>
 800600a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800600e:	3630      	adds	r6, #48	; 0x30
 8006010:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8006014:	e377      	b.n	8006706 <_svfprintf_r+0xf86>
 8006016:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800601a:	4630      	mov	r0, r6
 800601c:	4639      	mov	r1, r7
 800601e:	220a      	movs	r2, #10
 8006020:	2300      	movs	r3, #0
 8006022:	f7fa fe35 	bl	8000c90 <__aeabi_uldivmod>
 8006026:	3230      	adds	r2, #48	; 0x30
 8006028:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800602c:	2300      	movs	r3, #0
 800602e:	4630      	mov	r0, r6
 8006030:	4639      	mov	r1, r7
 8006032:	220a      	movs	r2, #10
 8006034:	f7fa fe2c 	bl	8000c90 <__aeabi_uldivmod>
 8006038:	4606      	mov	r6, r0
 800603a:	460f      	mov	r7, r1
 800603c:	ea56 0307 	orrs.w	r3, r6, r7
 8006040:	d1eb      	bne.n	800601a <_svfprintf_r+0x89a>
 8006042:	e360      	b.n	8006706 <_svfprintf_r+0xf86>
 8006044:	2600      	movs	r6, #0
 8006046:	2700      	movs	r7, #0
 8006048:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800604c:	f006 030f 	and.w	r3, r6, #15
 8006050:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006052:	5cd3      	ldrb	r3, [r2, r3]
 8006054:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8006058:	0933      	lsrs	r3, r6, #4
 800605a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800605e:	093a      	lsrs	r2, r7, #4
 8006060:	461e      	mov	r6, r3
 8006062:	4617      	mov	r7, r2
 8006064:	ea56 0307 	orrs.w	r3, r6, r7
 8006068:	d1f0      	bne.n	800604c <_svfprintf_r+0x8cc>
 800606a:	e34c      	b.n	8006706 <_svfprintf_r+0xf86>
 800606c:	b93b      	cbnz	r3, 800607e <_svfprintf_r+0x8fe>
 800606e:	07ea      	lsls	r2, r5, #31
 8006070:	d505      	bpl.n	800607e <_svfprintf_r+0x8fe>
 8006072:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8006076:	2330      	movs	r3, #48	; 0x30
 8006078:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800607c:	e343      	b.n	8006706 <_svfprintf_r+0xf86>
 800607e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8006082:	e340      	b.n	8006706 <_svfprintf_r+0xf86>
 8006084:	b10b      	cbz	r3, 800608a <_svfprintf_r+0x90a>
 8006086:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800608a:	9b02      	ldr	r3, [sp, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 82f7 	beq.w	8006680 <_svfprintf_r+0xf00>
 8006092:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8006096:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800609a:	2600      	movs	r6, #0
 800609c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80060a0:	9704      	str	r7, [sp, #16]
 80060a2:	e4e8      	b.n	8005a76 <_svfprintf_r+0x2f6>
 80060a4:	4606      	mov	r6, r0
 80060a6:	e53f      	b.n	8005b28 <_svfprintf_r+0x3a8>
 80060a8:	2310      	movs	r3, #16
 80060aa:	6063      	str	r3, [r4, #4]
 80060ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060ae:	3310      	adds	r3, #16
 80060b0:	9321      	str	r3, [sp, #132]	; 0x84
 80060b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80060b4:	3301      	adds	r3, #1
 80060b6:	2b07      	cmp	r3, #7
 80060b8:	9320      	str	r3, [sp, #128]	; 0x80
 80060ba:	dc04      	bgt.n	80060c6 <_svfprintf_r+0x946>
 80060bc:	3408      	adds	r4, #8
 80060be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060c0:	3b10      	subs	r3, #16
 80060c2:	930c      	str	r3, [sp, #48]	; 0x30
 80060c4:	e615      	b.n	8005cf2 <_svfprintf_r+0x572>
 80060c6:	aa1f      	add	r2, sp, #124	; 0x7c
 80060c8:	4651      	mov	r1, sl
 80060ca:	4658      	mov	r0, fp
 80060cc:	f003 fb19 	bl	8009702 <__ssprint_r>
 80060d0:	2800      	cmp	r0, #0
 80060d2:	f040 82b6 	bne.w	8006642 <_svfprintf_r+0xec2>
 80060d6:	ac2c      	add	r4, sp, #176	; 0xb0
 80060d8:	e7f1      	b.n	80060be <_svfprintf_r+0x93e>
 80060da:	aa1f      	add	r2, sp, #124	; 0x7c
 80060dc:	4651      	mov	r1, sl
 80060de:	4658      	mov	r0, fp
 80060e0:	f003 fb0f 	bl	8009702 <__ssprint_r>
 80060e4:	2800      	cmp	r0, #0
 80060e6:	f040 82ac 	bne.w	8006642 <_svfprintf_r+0xec2>
 80060ea:	ac2c      	add	r4, sp, #176	; 0xb0
 80060ec:	e614      	b.n	8005d18 <_svfprintf_r+0x598>
 80060ee:	aa1f      	add	r2, sp, #124	; 0x7c
 80060f0:	4651      	mov	r1, sl
 80060f2:	4658      	mov	r0, fp
 80060f4:	f003 fb05 	bl	8009702 <__ssprint_r>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	f040 82a2 	bne.w	8006642 <_svfprintf_r+0xec2>
 80060fe:	ac2c      	add	r4, sp, #176	; 0xb0
 8006100:	e61c      	b.n	8005d3c <_svfprintf_r+0x5bc>
 8006102:	aa1f      	add	r2, sp, #124	; 0x7c
 8006104:	4651      	mov	r1, sl
 8006106:	4658      	mov	r0, fp
 8006108:	f003 fafb 	bl	8009702 <__ssprint_r>
 800610c:	2800      	cmp	r0, #0
 800610e:	f040 8298 	bne.w	8006642 <_svfprintf_r+0xec2>
 8006112:	ac2c      	add	r4, sp, #176	; 0xb0
 8006114:	e622      	b.n	8005d5c <_svfprintf_r+0x5dc>
 8006116:	2210      	movs	r2, #16
 8006118:	6062      	str	r2, [r4, #4]
 800611a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800611c:	3210      	adds	r2, #16
 800611e:	9221      	str	r2, [sp, #132]	; 0x84
 8006120:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006122:	3201      	adds	r2, #1
 8006124:	2a07      	cmp	r2, #7
 8006126:	9220      	str	r2, [sp, #128]	; 0x80
 8006128:	dc02      	bgt.n	8006130 <_svfprintf_r+0x9b0>
 800612a:	3408      	adds	r4, #8
 800612c:	3b10      	subs	r3, #16
 800612e:	e61d      	b.n	8005d6c <_svfprintf_r+0x5ec>
 8006130:	aa1f      	add	r2, sp, #124	; 0x7c
 8006132:	4651      	mov	r1, sl
 8006134:	4658      	mov	r0, fp
 8006136:	930c      	str	r3, [sp, #48]	; 0x30
 8006138:	f003 fae3 	bl	8009702 <__ssprint_r>
 800613c:	2800      	cmp	r0, #0
 800613e:	f040 8280 	bne.w	8006642 <_svfprintf_r+0xec2>
 8006142:	ac2c      	add	r4, sp, #176	; 0xb0
 8006144:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006146:	e7f1      	b.n	800612c <_svfprintf_r+0x9ac>
 8006148:	aa1f      	add	r2, sp, #124	; 0x7c
 800614a:	4651      	mov	r1, sl
 800614c:	4658      	mov	r0, fp
 800614e:	f003 fad8 	bl	8009702 <__ssprint_r>
 8006152:	2800      	cmp	r0, #0
 8006154:	f040 8275 	bne.w	8006642 <_svfprintf_r+0xec2>
 8006158:	ac2c      	add	r4, sp, #176	; 0xb0
 800615a:	e617      	b.n	8005d8c <_svfprintf_r+0x60c>
 800615c:	2310      	movs	r3, #16
 800615e:	6063      	str	r3, [r4, #4]
 8006160:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006162:	3310      	adds	r3, #16
 8006164:	9321      	str	r3, [sp, #132]	; 0x84
 8006166:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006168:	3301      	adds	r3, #1
 800616a:	2b07      	cmp	r3, #7
 800616c:	9320      	str	r3, [sp, #128]	; 0x80
 800616e:	dc02      	bgt.n	8006176 <_svfprintf_r+0x9f6>
 8006170:	3408      	adds	r4, #8
 8006172:	3e10      	subs	r6, #16
 8006174:	e60e      	b.n	8005d94 <_svfprintf_r+0x614>
 8006176:	aa1f      	add	r2, sp, #124	; 0x7c
 8006178:	4651      	mov	r1, sl
 800617a:	4658      	mov	r0, fp
 800617c:	f003 fac1 	bl	8009702 <__ssprint_r>
 8006180:	2800      	cmp	r0, #0
 8006182:	f040 825e 	bne.w	8006642 <_svfprintf_r+0xec2>
 8006186:	ac2c      	add	r4, sp, #176	; 0xb0
 8006188:	e7f3      	b.n	8006172 <_svfprintf_r+0x9f2>
 800618a:	aa1f      	add	r2, sp, #124	; 0x7c
 800618c:	4651      	mov	r1, sl
 800618e:	4658      	mov	r0, fp
 8006190:	f003 fab7 	bl	8009702 <__ssprint_r>
 8006194:	2800      	cmp	r0, #0
 8006196:	f040 8254 	bne.w	8006642 <_svfprintf_r+0xec2>
 800619a:	ac2c      	add	r4, sp, #176	; 0xb0
 800619c:	e60a      	b.n	8005db4 <_svfprintf_r+0x634>
 800619e:	9b02      	ldr	r3, [sp, #8]
 80061a0:	2b65      	cmp	r3, #101	; 0x65
 80061a2:	f340 81a9 	ble.w	80064f8 <_svfprintf_r+0xd78>
 80061a6:	2200      	movs	r2, #0
 80061a8:	2300      	movs	r3, #0
 80061aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061ae:	f7fa fc8f 	bl	8000ad0 <__aeabi_dcmpeq>
 80061b2:	2800      	cmp	r0, #0
 80061b4:	d062      	beq.n	800627c <_svfprintf_r+0xafc>
 80061b6:	4b2f      	ldr	r3, [pc, #188]	; (8006274 <_svfprintf_r+0xaf4>)
 80061b8:	6023      	str	r3, [r4, #0]
 80061ba:	2301      	movs	r3, #1
 80061bc:	6063      	str	r3, [r4, #4]
 80061be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061c0:	3301      	adds	r3, #1
 80061c2:	9321      	str	r3, [sp, #132]	; 0x84
 80061c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80061c6:	3301      	adds	r3, #1
 80061c8:	2b07      	cmp	r3, #7
 80061ca:	9320      	str	r3, [sp, #128]	; 0x80
 80061cc:	dc25      	bgt.n	800621a <_svfprintf_r+0xa9a>
 80061ce:	3408      	adds	r4, #8
 80061d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80061d2:	9a03      	ldr	r2, [sp, #12]
 80061d4:	4293      	cmp	r3, r2
 80061d6:	db02      	blt.n	80061de <_svfprintf_r+0xa5e>
 80061d8:	07ee      	lsls	r6, r5, #31
 80061da:	f57f ae02 	bpl.w	8005de2 <_svfprintf_r+0x662>
 80061de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	9b08      	ldr	r3, [sp, #32]
 80061e4:	6063      	str	r3, [r4, #4]
 80061e6:	9a08      	ldr	r2, [sp, #32]
 80061e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061ea:	4413      	add	r3, r2
 80061ec:	9321      	str	r3, [sp, #132]	; 0x84
 80061ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80061f0:	3301      	adds	r3, #1
 80061f2:	2b07      	cmp	r3, #7
 80061f4:	9320      	str	r3, [sp, #128]	; 0x80
 80061f6:	dc1a      	bgt.n	800622e <_svfprintf_r+0xaae>
 80061f8:	3408      	adds	r4, #8
 80061fa:	9b03      	ldr	r3, [sp, #12]
 80061fc:	1e5e      	subs	r6, r3, #1
 80061fe:	2e00      	cmp	r6, #0
 8006200:	f77f adef 	ble.w	8005de2 <_svfprintf_r+0x662>
 8006204:	4f1c      	ldr	r7, [pc, #112]	; (8006278 <_svfprintf_r+0xaf8>)
 8006206:	f04f 0810 	mov.w	r8, #16
 800620a:	2e10      	cmp	r6, #16
 800620c:	6027      	str	r7, [r4, #0]
 800620e:	dc18      	bgt.n	8006242 <_svfprintf_r+0xac2>
 8006210:	6066      	str	r6, [r4, #4]
 8006212:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006214:	441e      	add	r6, r3
 8006216:	9621      	str	r6, [sp, #132]	; 0x84
 8006218:	e5d4      	b.n	8005dc4 <_svfprintf_r+0x644>
 800621a:	aa1f      	add	r2, sp, #124	; 0x7c
 800621c:	4651      	mov	r1, sl
 800621e:	4658      	mov	r0, fp
 8006220:	f003 fa6f 	bl	8009702 <__ssprint_r>
 8006224:	2800      	cmp	r0, #0
 8006226:	f040 820c 	bne.w	8006642 <_svfprintf_r+0xec2>
 800622a:	ac2c      	add	r4, sp, #176	; 0xb0
 800622c:	e7d0      	b.n	80061d0 <_svfprintf_r+0xa50>
 800622e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006230:	4651      	mov	r1, sl
 8006232:	4658      	mov	r0, fp
 8006234:	f003 fa65 	bl	8009702 <__ssprint_r>
 8006238:	2800      	cmp	r0, #0
 800623a:	f040 8202 	bne.w	8006642 <_svfprintf_r+0xec2>
 800623e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006240:	e7db      	b.n	80061fa <_svfprintf_r+0xa7a>
 8006242:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006244:	f8c4 8004 	str.w	r8, [r4, #4]
 8006248:	3310      	adds	r3, #16
 800624a:	9321      	str	r3, [sp, #132]	; 0x84
 800624c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800624e:	3301      	adds	r3, #1
 8006250:	2b07      	cmp	r3, #7
 8006252:	9320      	str	r3, [sp, #128]	; 0x80
 8006254:	dc02      	bgt.n	800625c <_svfprintf_r+0xadc>
 8006256:	3408      	adds	r4, #8
 8006258:	3e10      	subs	r6, #16
 800625a:	e7d6      	b.n	800620a <_svfprintf_r+0xa8a>
 800625c:	aa1f      	add	r2, sp, #124	; 0x7c
 800625e:	4651      	mov	r1, sl
 8006260:	4658      	mov	r0, fp
 8006262:	f003 fa4e 	bl	8009702 <__ssprint_r>
 8006266:	2800      	cmp	r0, #0
 8006268:	f040 81eb 	bne.w	8006642 <_svfprintf_r+0xec2>
 800626c:	ac2c      	add	r4, sp, #176	; 0xb0
 800626e:	e7f3      	b.n	8006258 <_svfprintf_r+0xad8>
 8006270:	0800a6ed 	.word	0x0800a6ed
 8006274:	0800a6fe 	.word	0x0800a6fe
 8006278:	0800a710 	.word	0x0800a710
 800627c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800627e:	2b00      	cmp	r3, #0
 8006280:	dc7a      	bgt.n	8006378 <_svfprintf_r+0xbf8>
 8006282:	4b9b      	ldr	r3, [pc, #620]	; (80064f0 <_svfprintf_r+0xd70>)
 8006284:	6023      	str	r3, [r4, #0]
 8006286:	2301      	movs	r3, #1
 8006288:	6063      	str	r3, [r4, #4]
 800628a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800628c:	3301      	adds	r3, #1
 800628e:	9321      	str	r3, [sp, #132]	; 0x84
 8006290:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006292:	3301      	adds	r3, #1
 8006294:	2b07      	cmp	r3, #7
 8006296:	9320      	str	r3, [sp, #128]	; 0x80
 8006298:	dc44      	bgt.n	8006324 <_svfprintf_r+0xba4>
 800629a:	3408      	adds	r4, #8
 800629c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800629e:	b923      	cbnz	r3, 80062aa <_svfprintf_r+0xb2a>
 80062a0:	9b03      	ldr	r3, [sp, #12]
 80062a2:	b913      	cbnz	r3, 80062aa <_svfprintf_r+0xb2a>
 80062a4:	07e8      	lsls	r0, r5, #31
 80062a6:	f57f ad9c 	bpl.w	8005de2 <_svfprintf_r+0x662>
 80062aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	9b08      	ldr	r3, [sp, #32]
 80062b0:	6063      	str	r3, [r4, #4]
 80062b2:	9a08      	ldr	r2, [sp, #32]
 80062b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062b6:	4413      	add	r3, r2
 80062b8:	9321      	str	r3, [sp, #132]	; 0x84
 80062ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80062bc:	3301      	adds	r3, #1
 80062be:	2b07      	cmp	r3, #7
 80062c0:	9320      	str	r3, [sp, #128]	; 0x80
 80062c2:	dc39      	bgt.n	8006338 <_svfprintf_r+0xbb8>
 80062c4:	f104 0308 	add.w	r3, r4, #8
 80062c8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80062ca:	2e00      	cmp	r6, #0
 80062cc:	da19      	bge.n	8006302 <_svfprintf_r+0xb82>
 80062ce:	4f89      	ldr	r7, [pc, #548]	; (80064f4 <_svfprintf_r+0xd74>)
 80062d0:	4276      	negs	r6, r6
 80062d2:	2410      	movs	r4, #16
 80062d4:	2e10      	cmp	r6, #16
 80062d6:	601f      	str	r7, [r3, #0]
 80062d8:	dc38      	bgt.n	800634c <_svfprintf_r+0xbcc>
 80062da:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80062dc:	605e      	str	r6, [r3, #4]
 80062de:	4416      	add	r6, r2
 80062e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80062e2:	9621      	str	r6, [sp, #132]	; 0x84
 80062e4:	3201      	adds	r2, #1
 80062e6:	2a07      	cmp	r2, #7
 80062e8:	f103 0308 	add.w	r3, r3, #8
 80062ec:	9220      	str	r2, [sp, #128]	; 0x80
 80062ee:	dd08      	ble.n	8006302 <_svfprintf_r+0xb82>
 80062f0:	aa1f      	add	r2, sp, #124	; 0x7c
 80062f2:	4651      	mov	r1, sl
 80062f4:	4658      	mov	r0, fp
 80062f6:	f003 fa04 	bl	8009702 <__ssprint_r>
 80062fa:	2800      	cmp	r0, #0
 80062fc:	f040 81a1 	bne.w	8006642 <_svfprintf_r+0xec2>
 8006300:	ab2c      	add	r3, sp, #176	; 0xb0
 8006302:	9a03      	ldr	r2, [sp, #12]
 8006304:	605a      	str	r2, [r3, #4]
 8006306:	9903      	ldr	r1, [sp, #12]
 8006308:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800630a:	f8c3 8000 	str.w	r8, [r3]
 800630e:	440a      	add	r2, r1
 8006310:	9221      	str	r2, [sp, #132]	; 0x84
 8006312:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006314:	3201      	adds	r2, #1
 8006316:	2a07      	cmp	r2, #7
 8006318:	9220      	str	r2, [sp, #128]	; 0x80
 800631a:	f73f ad59 	bgt.w	8005dd0 <_svfprintf_r+0x650>
 800631e:	f103 0408 	add.w	r4, r3, #8
 8006322:	e55e      	b.n	8005de2 <_svfprintf_r+0x662>
 8006324:	aa1f      	add	r2, sp, #124	; 0x7c
 8006326:	4651      	mov	r1, sl
 8006328:	4658      	mov	r0, fp
 800632a:	f003 f9ea 	bl	8009702 <__ssprint_r>
 800632e:	2800      	cmp	r0, #0
 8006330:	f040 8187 	bne.w	8006642 <_svfprintf_r+0xec2>
 8006334:	ac2c      	add	r4, sp, #176	; 0xb0
 8006336:	e7b1      	b.n	800629c <_svfprintf_r+0xb1c>
 8006338:	aa1f      	add	r2, sp, #124	; 0x7c
 800633a:	4651      	mov	r1, sl
 800633c:	4658      	mov	r0, fp
 800633e:	f003 f9e0 	bl	8009702 <__ssprint_r>
 8006342:	2800      	cmp	r0, #0
 8006344:	f040 817d 	bne.w	8006642 <_svfprintf_r+0xec2>
 8006348:	ab2c      	add	r3, sp, #176	; 0xb0
 800634a:	e7bd      	b.n	80062c8 <_svfprintf_r+0xb48>
 800634c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800634e:	605c      	str	r4, [r3, #4]
 8006350:	3210      	adds	r2, #16
 8006352:	9221      	str	r2, [sp, #132]	; 0x84
 8006354:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006356:	3201      	adds	r2, #1
 8006358:	2a07      	cmp	r2, #7
 800635a:	9220      	str	r2, [sp, #128]	; 0x80
 800635c:	dc02      	bgt.n	8006364 <_svfprintf_r+0xbe4>
 800635e:	3308      	adds	r3, #8
 8006360:	3e10      	subs	r6, #16
 8006362:	e7b7      	b.n	80062d4 <_svfprintf_r+0xb54>
 8006364:	aa1f      	add	r2, sp, #124	; 0x7c
 8006366:	4651      	mov	r1, sl
 8006368:	4658      	mov	r0, fp
 800636a:	f003 f9ca 	bl	8009702 <__ssprint_r>
 800636e:	2800      	cmp	r0, #0
 8006370:	f040 8167 	bne.w	8006642 <_svfprintf_r+0xec2>
 8006374:	ab2c      	add	r3, sp, #176	; 0xb0
 8006376:	e7f3      	b.n	8006360 <_svfprintf_r+0xbe0>
 8006378:	9b03      	ldr	r3, [sp, #12]
 800637a:	42bb      	cmp	r3, r7
 800637c:	bfa8      	it	ge
 800637e:	463b      	movge	r3, r7
 8006380:	2b00      	cmp	r3, #0
 8006382:	461e      	mov	r6, r3
 8006384:	dd0b      	ble.n	800639e <_svfprintf_r+0xc1e>
 8006386:	6063      	str	r3, [r4, #4]
 8006388:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800638a:	f8c4 8000 	str.w	r8, [r4]
 800638e:	4433      	add	r3, r6
 8006390:	9321      	str	r3, [sp, #132]	; 0x84
 8006392:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006394:	3301      	adds	r3, #1
 8006396:	2b07      	cmp	r3, #7
 8006398:	9320      	str	r3, [sp, #128]	; 0x80
 800639a:	dc5f      	bgt.n	800645c <_svfprintf_r+0xcdc>
 800639c:	3408      	adds	r4, #8
 800639e:	2e00      	cmp	r6, #0
 80063a0:	bfac      	ite	ge
 80063a2:	1bbe      	subge	r6, r7, r6
 80063a4:	463e      	movlt	r6, r7
 80063a6:	2e00      	cmp	r6, #0
 80063a8:	dd0f      	ble.n	80063ca <_svfprintf_r+0xc4a>
 80063aa:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80064f4 <_svfprintf_r+0xd74>
 80063ae:	f8c4 9000 	str.w	r9, [r4]
 80063b2:	2e10      	cmp	r6, #16
 80063b4:	dc5c      	bgt.n	8006470 <_svfprintf_r+0xcf0>
 80063b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063b8:	6066      	str	r6, [r4, #4]
 80063ba:	441e      	add	r6, r3
 80063bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80063be:	9621      	str	r6, [sp, #132]	; 0x84
 80063c0:	3301      	adds	r3, #1
 80063c2:	2b07      	cmp	r3, #7
 80063c4:	9320      	str	r3, [sp, #128]	; 0x80
 80063c6:	dc6a      	bgt.n	800649e <_svfprintf_r+0xd1e>
 80063c8:	3408      	adds	r4, #8
 80063ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80063cc:	9a03      	ldr	r2, [sp, #12]
 80063ce:	4293      	cmp	r3, r2
 80063d0:	db01      	blt.n	80063d6 <_svfprintf_r+0xc56>
 80063d2:	07e9      	lsls	r1, r5, #31
 80063d4:	d50d      	bpl.n	80063f2 <_svfprintf_r+0xc72>
 80063d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063d8:	6023      	str	r3, [r4, #0]
 80063da:	9b08      	ldr	r3, [sp, #32]
 80063dc:	6063      	str	r3, [r4, #4]
 80063de:	9a08      	ldr	r2, [sp, #32]
 80063e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063e2:	4413      	add	r3, r2
 80063e4:	9321      	str	r3, [sp, #132]	; 0x84
 80063e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80063e8:	3301      	adds	r3, #1
 80063ea:	2b07      	cmp	r3, #7
 80063ec:	9320      	str	r3, [sp, #128]	; 0x80
 80063ee:	dc60      	bgt.n	80064b2 <_svfprintf_r+0xd32>
 80063f0:	3408      	adds	r4, #8
 80063f2:	9b03      	ldr	r3, [sp, #12]
 80063f4:	9a03      	ldr	r2, [sp, #12]
 80063f6:	1bde      	subs	r6, r3, r7
 80063f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	429e      	cmp	r6, r3
 80063fe:	bfa8      	it	ge
 8006400:	461e      	movge	r6, r3
 8006402:	2e00      	cmp	r6, #0
 8006404:	dd0b      	ble.n	800641e <_svfprintf_r+0xc9e>
 8006406:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006408:	6066      	str	r6, [r4, #4]
 800640a:	4433      	add	r3, r6
 800640c:	9321      	str	r3, [sp, #132]	; 0x84
 800640e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006410:	3301      	adds	r3, #1
 8006412:	4447      	add	r7, r8
 8006414:	2b07      	cmp	r3, #7
 8006416:	6027      	str	r7, [r4, #0]
 8006418:	9320      	str	r3, [sp, #128]	; 0x80
 800641a:	dc54      	bgt.n	80064c6 <_svfprintf_r+0xd46>
 800641c:	3408      	adds	r4, #8
 800641e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006420:	9a03      	ldr	r2, [sp, #12]
 8006422:	2e00      	cmp	r6, #0
 8006424:	eba2 0303 	sub.w	r3, r2, r3
 8006428:	bfac      	ite	ge
 800642a:	1b9e      	subge	r6, r3, r6
 800642c:	461e      	movlt	r6, r3
 800642e:	2e00      	cmp	r6, #0
 8006430:	f77f acd7 	ble.w	8005de2 <_svfprintf_r+0x662>
 8006434:	4f2f      	ldr	r7, [pc, #188]	; (80064f4 <_svfprintf_r+0xd74>)
 8006436:	f04f 0810 	mov.w	r8, #16
 800643a:	2e10      	cmp	r6, #16
 800643c:	6027      	str	r7, [r4, #0]
 800643e:	f77f aee7 	ble.w	8006210 <_svfprintf_r+0xa90>
 8006442:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006444:	f8c4 8004 	str.w	r8, [r4, #4]
 8006448:	3310      	adds	r3, #16
 800644a:	9321      	str	r3, [sp, #132]	; 0x84
 800644c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800644e:	3301      	adds	r3, #1
 8006450:	2b07      	cmp	r3, #7
 8006452:	9320      	str	r3, [sp, #128]	; 0x80
 8006454:	dc41      	bgt.n	80064da <_svfprintf_r+0xd5a>
 8006456:	3408      	adds	r4, #8
 8006458:	3e10      	subs	r6, #16
 800645a:	e7ee      	b.n	800643a <_svfprintf_r+0xcba>
 800645c:	aa1f      	add	r2, sp, #124	; 0x7c
 800645e:	4651      	mov	r1, sl
 8006460:	4658      	mov	r0, fp
 8006462:	f003 f94e 	bl	8009702 <__ssprint_r>
 8006466:	2800      	cmp	r0, #0
 8006468:	f040 80eb 	bne.w	8006642 <_svfprintf_r+0xec2>
 800646c:	ac2c      	add	r4, sp, #176	; 0xb0
 800646e:	e796      	b.n	800639e <_svfprintf_r+0xc1e>
 8006470:	2310      	movs	r3, #16
 8006472:	6063      	str	r3, [r4, #4]
 8006474:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006476:	3310      	adds	r3, #16
 8006478:	9321      	str	r3, [sp, #132]	; 0x84
 800647a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800647c:	3301      	adds	r3, #1
 800647e:	2b07      	cmp	r3, #7
 8006480:	9320      	str	r3, [sp, #128]	; 0x80
 8006482:	dc02      	bgt.n	800648a <_svfprintf_r+0xd0a>
 8006484:	3408      	adds	r4, #8
 8006486:	3e10      	subs	r6, #16
 8006488:	e791      	b.n	80063ae <_svfprintf_r+0xc2e>
 800648a:	aa1f      	add	r2, sp, #124	; 0x7c
 800648c:	4651      	mov	r1, sl
 800648e:	4658      	mov	r0, fp
 8006490:	f003 f937 	bl	8009702 <__ssprint_r>
 8006494:	2800      	cmp	r0, #0
 8006496:	f040 80d4 	bne.w	8006642 <_svfprintf_r+0xec2>
 800649a:	ac2c      	add	r4, sp, #176	; 0xb0
 800649c:	e7f3      	b.n	8006486 <_svfprintf_r+0xd06>
 800649e:	aa1f      	add	r2, sp, #124	; 0x7c
 80064a0:	4651      	mov	r1, sl
 80064a2:	4658      	mov	r0, fp
 80064a4:	f003 f92d 	bl	8009702 <__ssprint_r>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	f040 80ca 	bne.w	8006642 <_svfprintf_r+0xec2>
 80064ae:	ac2c      	add	r4, sp, #176	; 0xb0
 80064b0:	e78b      	b.n	80063ca <_svfprintf_r+0xc4a>
 80064b2:	aa1f      	add	r2, sp, #124	; 0x7c
 80064b4:	4651      	mov	r1, sl
 80064b6:	4658      	mov	r0, fp
 80064b8:	f003 f923 	bl	8009702 <__ssprint_r>
 80064bc:	2800      	cmp	r0, #0
 80064be:	f040 80c0 	bne.w	8006642 <_svfprintf_r+0xec2>
 80064c2:	ac2c      	add	r4, sp, #176	; 0xb0
 80064c4:	e795      	b.n	80063f2 <_svfprintf_r+0xc72>
 80064c6:	aa1f      	add	r2, sp, #124	; 0x7c
 80064c8:	4651      	mov	r1, sl
 80064ca:	4658      	mov	r0, fp
 80064cc:	f003 f919 	bl	8009702 <__ssprint_r>
 80064d0:	2800      	cmp	r0, #0
 80064d2:	f040 80b6 	bne.w	8006642 <_svfprintf_r+0xec2>
 80064d6:	ac2c      	add	r4, sp, #176	; 0xb0
 80064d8:	e7a1      	b.n	800641e <_svfprintf_r+0xc9e>
 80064da:	aa1f      	add	r2, sp, #124	; 0x7c
 80064dc:	4651      	mov	r1, sl
 80064de:	4658      	mov	r0, fp
 80064e0:	f003 f90f 	bl	8009702 <__ssprint_r>
 80064e4:	2800      	cmp	r0, #0
 80064e6:	f040 80ac 	bne.w	8006642 <_svfprintf_r+0xec2>
 80064ea:	ac2c      	add	r4, sp, #176	; 0xb0
 80064ec:	e7b4      	b.n	8006458 <_svfprintf_r+0xcd8>
 80064ee:	bf00      	nop
 80064f0:	0800a6fe 	.word	0x0800a6fe
 80064f4:	0800a710 	.word	0x0800a710
 80064f8:	9b03      	ldr	r3, [sp, #12]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	dc01      	bgt.n	8006502 <_svfprintf_r+0xd82>
 80064fe:	07ea      	lsls	r2, r5, #31
 8006500:	d576      	bpl.n	80065f0 <_svfprintf_r+0xe70>
 8006502:	2301      	movs	r3, #1
 8006504:	6063      	str	r3, [r4, #4]
 8006506:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006508:	f8c4 8000 	str.w	r8, [r4]
 800650c:	3301      	adds	r3, #1
 800650e:	9321      	str	r3, [sp, #132]	; 0x84
 8006510:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006512:	3301      	adds	r3, #1
 8006514:	2b07      	cmp	r3, #7
 8006516:	9320      	str	r3, [sp, #128]	; 0x80
 8006518:	dc36      	bgt.n	8006588 <_svfprintf_r+0xe08>
 800651a:	3408      	adds	r4, #8
 800651c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800651e:	6023      	str	r3, [r4, #0]
 8006520:	9b08      	ldr	r3, [sp, #32]
 8006522:	6063      	str	r3, [r4, #4]
 8006524:	9a08      	ldr	r2, [sp, #32]
 8006526:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006528:	4413      	add	r3, r2
 800652a:	9321      	str	r3, [sp, #132]	; 0x84
 800652c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800652e:	3301      	adds	r3, #1
 8006530:	2b07      	cmp	r3, #7
 8006532:	9320      	str	r3, [sp, #128]	; 0x80
 8006534:	dc31      	bgt.n	800659a <_svfprintf_r+0xe1a>
 8006536:	3408      	adds	r4, #8
 8006538:	2300      	movs	r3, #0
 800653a:	2200      	movs	r2, #0
 800653c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006540:	f7fa fac6 	bl	8000ad0 <__aeabi_dcmpeq>
 8006544:	9b03      	ldr	r3, [sp, #12]
 8006546:	1e5e      	subs	r6, r3, #1
 8006548:	2800      	cmp	r0, #0
 800654a:	d12f      	bne.n	80065ac <_svfprintf_r+0xe2c>
 800654c:	f108 0301 	add.w	r3, r8, #1
 8006550:	e884 0048 	stmia.w	r4, {r3, r6}
 8006554:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006556:	9a03      	ldr	r2, [sp, #12]
 8006558:	3b01      	subs	r3, #1
 800655a:	4413      	add	r3, r2
 800655c:	9321      	str	r3, [sp, #132]	; 0x84
 800655e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006560:	3301      	adds	r3, #1
 8006562:	2b07      	cmp	r3, #7
 8006564:	9320      	str	r3, [sp, #128]	; 0x80
 8006566:	dd4a      	ble.n	80065fe <_svfprintf_r+0xe7e>
 8006568:	aa1f      	add	r2, sp, #124	; 0x7c
 800656a:	4651      	mov	r1, sl
 800656c:	4658      	mov	r0, fp
 800656e:	f003 f8c8 	bl	8009702 <__ssprint_r>
 8006572:	2800      	cmp	r0, #0
 8006574:	d165      	bne.n	8006642 <_svfprintf_r+0xec2>
 8006576:	ac2c      	add	r4, sp, #176	; 0xb0
 8006578:	ab1b      	add	r3, sp, #108	; 0x6c
 800657a:	6023      	str	r3, [r4, #0]
 800657c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800657e:	6063      	str	r3, [r4, #4]
 8006580:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006582:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006584:	4413      	add	r3, r2
 8006586:	e41c      	b.n	8005dc2 <_svfprintf_r+0x642>
 8006588:	aa1f      	add	r2, sp, #124	; 0x7c
 800658a:	4651      	mov	r1, sl
 800658c:	4658      	mov	r0, fp
 800658e:	f003 f8b8 	bl	8009702 <__ssprint_r>
 8006592:	2800      	cmp	r0, #0
 8006594:	d155      	bne.n	8006642 <_svfprintf_r+0xec2>
 8006596:	ac2c      	add	r4, sp, #176	; 0xb0
 8006598:	e7c0      	b.n	800651c <_svfprintf_r+0xd9c>
 800659a:	aa1f      	add	r2, sp, #124	; 0x7c
 800659c:	4651      	mov	r1, sl
 800659e:	4658      	mov	r0, fp
 80065a0:	f003 f8af 	bl	8009702 <__ssprint_r>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d14c      	bne.n	8006642 <_svfprintf_r+0xec2>
 80065a8:	ac2c      	add	r4, sp, #176	; 0xb0
 80065aa:	e7c5      	b.n	8006538 <_svfprintf_r+0xdb8>
 80065ac:	2e00      	cmp	r6, #0
 80065ae:	dde3      	ble.n	8006578 <_svfprintf_r+0xdf8>
 80065b0:	4f59      	ldr	r7, [pc, #356]	; (8006718 <_svfprintf_r+0xf98>)
 80065b2:	f04f 0810 	mov.w	r8, #16
 80065b6:	2e10      	cmp	r6, #16
 80065b8:	6027      	str	r7, [r4, #0]
 80065ba:	dc04      	bgt.n	80065c6 <_svfprintf_r+0xe46>
 80065bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065be:	6066      	str	r6, [r4, #4]
 80065c0:	441e      	add	r6, r3
 80065c2:	9621      	str	r6, [sp, #132]	; 0x84
 80065c4:	e7cb      	b.n	800655e <_svfprintf_r+0xdde>
 80065c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065c8:	f8c4 8004 	str.w	r8, [r4, #4]
 80065cc:	3310      	adds	r3, #16
 80065ce:	9321      	str	r3, [sp, #132]	; 0x84
 80065d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80065d2:	3301      	adds	r3, #1
 80065d4:	2b07      	cmp	r3, #7
 80065d6:	9320      	str	r3, [sp, #128]	; 0x80
 80065d8:	dc02      	bgt.n	80065e0 <_svfprintf_r+0xe60>
 80065da:	3408      	adds	r4, #8
 80065dc:	3e10      	subs	r6, #16
 80065de:	e7ea      	b.n	80065b6 <_svfprintf_r+0xe36>
 80065e0:	aa1f      	add	r2, sp, #124	; 0x7c
 80065e2:	4651      	mov	r1, sl
 80065e4:	4658      	mov	r0, fp
 80065e6:	f003 f88c 	bl	8009702 <__ssprint_r>
 80065ea:	bb50      	cbnz	r0, 8006642 <_svfprintf_r+0xec2>
 80065ec:	ac2c      	add	r4, sp, #176	; 0xb0
 80065ee:	e7f5      	b.n	80065dc <_svfprintf_r+0xe5c>
 80065f0:	2301      	movs	r3, #1
 80065f2:	6063      	str	r3, [r4, #4]
 80065f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065f6:	f8c4 8000 	str.w	r8, [r4]
 80065fa:	3301      	adds	r3, #1
 80065fc:	e7ae      	b.n	800655c <_svfprintf_r+0xddc>
 80065fe:	3408      	adds	r4, #8
 8006600:	e7ba      	b.n	8006578 <_svfprintf_r+0xdf8>
 8006602:	3408      	adds	r4, #8
 8006604:	f7ff bbed 	b.w	8005de2 <_svfprintf_r+0x662>
 8006608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800660a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800660c:	1a9d      	subs	r5, r3, r2
 800660e:	2d00      	cmp	r5, #0
 8006610:	f77f abea 	ble.w	8005de8 <_svfprintf_r+0x668>
 8006614:	2610      	movs	r6, #16
 8006616:	4b41      	ldr	r3, [pc, #260]	; (800671c <_svfprintf_r+0xf9c>)
 8006618:	6023      	str	r3, [r4, #0]
 800661a:	2d10      	cmp	r5, #16
 800661c:	dc1b      	bgt.n	8006656 <_svfprintf_r+0xed6>
 800661e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006620:	6065      	str	r5, [r4, #4]
 8006622:	441d      	add	r5, r3
 8006624:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006626:	9521      	str	r5, [sp, #132]	; 0x84
 8006628:	3301      	adds	r3, #1
 800662a:	2b07      	cmp	r3, #7
 800662c:	9320      	str	r3, [sp, #128]	; 0x80
 800662e:	f77f abdb 	ble.w	8005de8 <_svfprintf_r+0x668>
 8006632:	aa1f      	add	r2, sp, #124	; 0x7c
 8006634:	4651      	mov	r1, sl
 8006636:	4658      	mov	r0, fp
 8006638:	f003 f863 	bl	8009702 <__ssprint_r>
 800663c:	2800      	cmp	r0, #0
 800663e:	f43f abd3 	beq.w	8005de8 <_svfprintf_r+0x668>
 8006642:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006646:	f013 0f40 	tst.w	r3, #64	; 0x40
 800664a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800664c:	bf18      	it	ne
 800664e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8006652:	f7ff b8b9 	b.w	80057c8 <_svfprintf_r+0x48>
 8006656:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006658:	6066      	str	r6, [r4, #4]
 800665a:	3310      	adds	r3, #16
 800665c:	9321      	str	r3, [sp, #132]	; 0x84
 800665e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006660:	3301      	adds	r3, #1
 8006662:	2b07      	cmp	r3, #7
 8006664:	9320      	str	r3, [sp, #128]	; 0x80
 8006666:	dc02      	bgt.n	800666e <_svfprintf_r+0xeee>
 8006668:	3408      	adds	r4, #8
 800666a:	3d10      	subs	r5, #16
 800666c:	e7d3      	b.n	8006616 <_svfprintf_r+0xe96>
 800666e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006670:	4651      	mov	r1, sl
 8006672:	4658      	mov	r0, fp
 8006674:	f003 f845 	bl	8009702 <__ssprint_r>
 8006678:	2800      	cmp	r0, #0
 800667a:	d1e2      	bne.n	8006642 <_svfprintf_r+0xec2>
 800667c:	ac2c      	add	r4, sp, #176	; 0xb0
 800667e:	e7f4      	b.n	800666a <_svfprintf_r+0xeea>
 8006680:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0dd      	beq.n	8006642 <_svfprintf_r+0xec2>
 8006686:	aa1f      	add	r2, sp, #124	; 0x7c
 8006688:	4651      	mov	r1, sl
 800668a:	4658      	mov	r0, fp
 800668c:	f003 f839 	bl	8009702 <__ssprint_r>
 8006690:	e7d7      	b.n	8006642 <_svfprintf_r+0xec2>
 8006692:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006696:	4610      	mov	r0, r2
 8006698:	4619      	mov	r1, r3
 800669a:	f7fa fa4b 	bl	8000b34 <__aeabi_dcmpun>
 800669e:	2800      	cmp	r0, #0
 80066a0:	f43f aa44 	beq.w	8005b2c <_svfprintf_r+0x3ac>
 80066a4:	4b1e      	ldr	r3, [pc, #120]	; (8006720 <_svfprintf_r+0xfa0>)
 80066a6:	4a1f      	ldr	r2, [pc, #124]	; (8006724 <_svfprintf_r+0xfa4>)
 80066a8:	f7ff ba34 	b.w	8005b14 <_svfprintf_r+0x394>
 80066ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80066ae:	eba3 0308 	sub.w	r3, r3, r8
 80066b2:	9303      	str	r3, [sp, #12]
 80066b4:	f7ff bab5 	b.w	8005c22 <_svfprintf_r+0x4a2>
 80066b8:	ea56 0207 	orrs.w	r2, r6, r7
 80066bc:	950b      	str	r5, [sp, #44]	; 0x2c
 80066be:	f43f ac2b 	beq.w	8005f18 <_svfprintf_r+0x798>
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	f43f ac9d 	beq.w	8006002 <_svfprintf_r+0x882>
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	f43f acbd 	beq.w	8006048 <_svfprintf_r+0x8c8>
 80066ce:	ab2c      	add	r3, sp, #176	; 0xb0
 80066d0:	08f1      	lsrs	r1, r6, #3
 80066d2:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 80066d6:	08f8      	lsrs	r0, r7, #3
 80066d8:	f006 0207 	and.w	r2, r6, #7
 80066dc:	4607      	mov	r7, r0
 80066de:	460e      	mov	r6, r1
 80066e0:	3230      	adds	r2, #48	; 0x30
 80066e2:	ea56 0107 	orrs.w	r1, r6, r7
 80066e6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80066ea:	f803 2c01 	strb.w	r2, [r3, #-1]
 80066ee:	f47f ac86 	bne.w	8005ffe <_svfprintf_r+0x87e>
 80066f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066f4:	07c9      	lsls	r1, r1, #31
 80066f6:	d506      	bpl.n	8006706 <_svfprintf_r+0xf86>
 80066f8:	2a30      	cmp	r2, #48	; 0x30
 80066fa:	d004      	beq.n	8006706 <_svfprintf_r+0xf86>
 80066fc:	2230      	movs	r2, #48	; 0x30
 80066fe:	f808 2c01 	strb.w	r2, [r8, #-1]
 8006702:	f1a3 0802 	sub.w	r8, r3, #2
 8006706:	464e      	mov	r6, r9
 8006708:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800670c:	eba9 0908 	sub.w	r9, r9, r8
 8006710:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006712:	2700      	movs	r7, #0
 8006714:	f7ff bad1 	b.w	8005cba <_svfprintf_r+0x53a>
 8006718:	0800a710 	.word	0x0800a710
 800671c:	0800a700 	.word	0x0800a700
 8006720:	0800a6d4 	.word	0x0800a6d4
 8006724:	0800a6d8 	.word	0x0800a6d8

08006728 <__sprint_r>:
 8006728:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672c:	6893      	ldr	r3, [r2, #8]
 800672e:	4680      	mov	r8, r0
 8006730:	460f      	mov	r7, r1
 8006732:	4614      	mov	r4, r2
 8006734:	b91b      	cbnz	r3, 800673e <__sprint_r+0x16>
 8006736:	6053      	str	r3, [r2, #4]
 8006738:	4618      	mov	r0, r3
 800673a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800673e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8006740:	049d      	lsls	r5, r3, #18
 8006742:	d523      	bpl.n	800678c <__sprint_r+0x64>
 8006744:	6815      	ldr	r5, [r2, #0]
 8006746:	68a0      	ldr	r0, [r4, #8]
 8006748:	3508      	adds	r5, #8
 800674a:	b920      	cbnz	r0, 8006756 <__sprint_r+0x2e>
 800674c:	2300      	movs	r3, #0
 800674e:	60a3      	str	r3, [r4, #8]
 8006750:	6063      	str	r3, [r4, #4]
 8006752:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006756:	f855 6c04 	ldr.w	r6, [r5, #-4]
 800675a:	f855 bc08 	ldr.w	fp, [r5, #-8]
 800675e:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8006762:	f04f 0900 	mov.w	r9, #0
 8006766:	45ca      	cmp	sl, r9
 8006768:	dc05      	bgt.n	8006776 <__sprint_r+0x4e>
 800676a:	68a3      	ldr	r3, [r4, #8]
 800676c:	f026 0603 	bic.w	r6, r6, #3
 8006770:	1b9e      	subs	r6, r3, r6
 8006772:	60a6      	str	r6, [r4, #8]
 8006774:	e7e7      	b.n	8006746 <__sprint_r+0x1e>
 8006776:	463a      	mov	r2, r7
 8006778:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800677c:	4640      	mov	r0, r8
 800677e:	f001 fd58 	bl	8008232 <_fputwc_r>
 8006782:	1c43      	adds	r3, r0, #1
 8006784:	d0e2      	beq.n	800674c <__sprint_r+0x24>
 8006786:	f109 0901 	add.w	r9, r9, #1
 800678a:	e7ec      	b.n	8006766 <__sprint_r+0x3e>
 800678c:	f001 fe8c 	bl	80084a8 <__sfvwrite_r>
 8006790:	e7dc      	b.n	800674c <__sprint_r+0x24>
	...

08006794 <_vfiprintf_r>:
 8006794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006798:	460f      	mov	r7, r1
 800679a:	b0ab      	sub	sp, #172	; 0xac
 800679c:	4615      	mov	r5, r2
 800679e:	461e      	mov	r6, r3
 80067a0:	461c      	mov	r4, r3
 80067a2:	4682      	mov	sl, r0
 80067a4:	b118      	cbz	r0, 80067ae <_vfiprintf_r+0x1a>
 80067a6:	6983      	ldr	r3, [r0, #24]
 80067a8:	b90b      	cbnz	r3, 80067ae <_vfiprintf_r+0x1a>
 80067aa:	f001 fc81 	bl	80080b0 <__sinit>
 80067ae:	4b95      	ldr	r3, [pc, #596]	; (8006a04 <_vfiprintf_r+0x270>)
 80067b0:	429f      	cmp	r7, r3
 80067b2:	d12c      	bne.n	800680e <_vfiprintf_r+0x7a>
 80067b4:	f8da 7004 	ldr.w	r7, [sl, #4]
 80067b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067ba:	07d8      	lsls	r0, r3, #31
 80067bc:	d405      	bmi.n	80067ca <_vfiprintf_r+0x36>
 80067be:	89bb      	ldrh	r3, [r7, #12]
 80067c0:	0599      	lsls	r1, r3, #22
 80067c2:	d402      	bmi.n	80067ca <_vfiprintf_r+0x36>
 80067c4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80067c6:	f001 fff9 	bl	80087bc <__retarget_lock_acquire_recursive>
 80067ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80067ce:	049a      	lsls	r2, r3, #18
 80067d0:	d406      	bmi.n	80067e0 <_vfiprintf_r+0x4c>
 80067d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80067d6:	81bb      	strh	r3, [r7, #12]
 80067d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067de:	667b      	str	r3, [r7, #100]	; 0x64
 80067e0:	89bb      	ldrh	r3, [r7, #12]
 80067e2:	071b      	lsls	r3, r3, #28
 80067e4:	d501      	bpl.n	80067ea <_vfiprintf_r+0x56>
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	b9eb      	cbnz	r3, 8006826 <_vfiprintf_r+0x92>
 80067ea:	4639      	mov	r1, r7
 80067ec:	4650      	mov	r0, sl
 80067ee:	f000 fc67 	bl	80070c0 <__swsetup_r>
 80067f2:	b1c0      	cbz	r0, 8006826 <_vfiprintf_r+0x92>
 80067f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067f6:	07d8      	lsls	r0, r3, #31
 80067f8:	d405      	bmi.n	8006806 <_vfiprintf_r+0x72>
 80067fa:	89bb      	ldrh	r3, [r7, #12]
 80067fc:	0599      	lsls	r1, r3, #22
 80067fe:	d402      	bmi.n	8006806 <_vfiprintf_r+0x72>
 8006800:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006802:	f001 ffdc 	bl	80087be <__retarget_lock_release_recursive>
 8006806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800680a:	9303      	str	r3, [sp, #12]
 800680c:	e023      	b.n	8006856 <_vfiprintf_r+0xc2>
 800680e:	4b7e      	ldr	r3, [pc, #504]	; (8006a08 <_vfiprintf_r+0x274>)
 8006810:	429f      	cmp	r7, r3
 8006812:	d102      	bne.n	800681a <_vfiprintf_r+0x86>
 8006814:	f8da 7008 	ldr.w	r7, [sl, #8]
 8006818:	e7ce      	b.n	80067b8 <_vfiprintf_r+0x24>
 800681a:	4b7c      	ldr	r3, [pc, #496]	; (8006a0c <_vfiprintf_r+0x278>)
 800681c:	429f      	cmp	r7, r3
 800681e:	bf08      	it	eq
 8006820:	f8da 700c 	ldreq.w	r7, [sl, #12]
 8006824:	e7c8      	b.n	80067b8 <_vfiprintf_r+0x24>
 8006826:	89bb      	ldrh	r3, [r7, #12]
 8006828:	f003 021a 	and.w	r2, r3, #26
 800682c:	2a0a      	cmp	r2, #10
 800682e:	d116      	bne.n	800685e <_vfiprintf_r+0xca>
 8006830:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006834:	2a00      	cmp	r2, #0
 8006836:	db12      	blt.n	800685e <_vfiprintf_r+0xca>
 8006838:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800683a:	07d2      	lsls	r2, r2, #31
 800683c:	d404      	bmi.n	8006848 <_vfiprintf_r+0xb4>
 800683e:	059b      	lsls	r3, r3, #22
 8006840:	d402      	bmi.n	8006848 <_vfiprintf_r+0xb4>
 8006842:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006844:	f001 ffbb 	bl	80087be <__retarget_lock_release_recursive>
 8006848:	4633      	mov	r3, r6
 800684a:	462a      	mov	r2, r5
 800684c:	4639      	mov	r1, r7
 800684e:	4650      	mov	r0, sl
 8006850:	f000 fbf6 	bl	8007040 <__sbprintf>
 8006854:	9003      	str	r0, [sp, #12]
 8006856:	9803      	ldr	r0, [sp, #12]
 8006858:	b02b      	add	sp, #172	; 0xac
 800685a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800685e:	2300      	movs	r3, #0
 8006860:	ae1a      	add	r6, sp, #104	; 0x68
 8006862:	960d      	str	r6, [sp, #52]	; 0x34
 8006864:	930f      	str	r3, [sp, #60]	; 0x3c
 8006866:	930e      	str	r3, [sp, #56]	; 0x38
 8006868:	9502      	str	r5, [sp, #8]
 800686a:	9306      	str	r3, [sp, #24]
 800686c:	9303      	str	r3, [sp, #12]
 800686e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006872:	4645      	mov	r5, r8
 8006874:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006878:	b10b      	cbz	r3, 800687e <_vfiprintf_r+0xea>
 800687a:	2b25      	cmp	r3, #37	; 0x25
 800687c:	d146      	bne.n	800690c <_vfiprintf_r+0x178>
 800687e:	9b02      	ldr	r3, [sp, #8]
 8006880:	ebb8 0903 	subs.w	r9, r8, r3
 8006884:	d00d      	beq.n	80068a2 <_vfiprintf_r+0x10e>
 8006886:	e886 0208 	stmia.w	r6, {r3, r9}
 800688a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800688c:	444b      	add	r3, r9
 800688e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006890:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006892:	3301      	adds	r3, #1
 8006894:	2b07      	cmp	r3, #7
 8006896:	930e      	str	r3, [sp, #56]	; 0x38
 8006898:	dc3a      	bgt.n	8006910 <_vfiprintf_r+0x17c>
 800689a:	3608      	adds	r6, #8
 800689c:	9b03      	ldr	r3, [sp, #12]
 800689e:	444b      	add	r3, r9
 80068a0:	9303      	str	r3, [sp, #12]
 80068a2:	f898 3000 	ldrb.w	r3, [r8]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 8388 	beq.w	8006fbc <_vfiprintf_r+0x828>
 80068ac:	f04f 0300 	mov.w	r3, #0
 80068b0:	2200      	movs	r2, #0
 80068b2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 80068b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068ba:	4611      	mov	r1, r2
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	9204      	str	r2, [sp, #16]
 80068c0:	4693      	mov	fp, r2
 80068c2:	f04f 0e0a 	mov.w	lr, #10
 80068c6:	1c6b      	adds	r3, r5, #1
 80068c8:	7828      	ldrb	r0, [r5, #0]
 80068ca:	9302      	str	r3, [sp, #8]
 80068cc:	2858      	cmp	r0, #88	; 0x58
 80068ce:	f000 8165 	beq.w	8006b9c <_vfiprintf_r+0x408>
 80068d2:	dc49      	bgt.n	8006968 <_vfiprintf_r+0x1d4>
 80068d4:	282e      	cmp	r0, #46	; 0x2e
 80068d6:	f000 8193 	beq.w	8006c00 <_vfiprintf_r+0x46c>
 80068da:	dc2d      	bgt.n	8006938 <_vfiprintf_r+0x1a4>
 80068dc:	282a      	cmp	r0, #42	; 0x2a
 80068de:	f000 8184 	beq.w	8006bea <_vfiprintf_r+0x456>
 80068e2:	dc21      	bgt.n	8006928 <_vfiprintf_r+0x194>
 80068e4:	2820      	cmp	r0, #32
 80068e6:	f000 8178 	beq.w	8006bda <_vfiprintf_r+0x446>
 80068ea:	2823      	cmp	r0, #35	; 0x23
 80068ec:	f000 817a 	beq.w	8006be4 <_vfiprintf_r+0x450>
 80068f0:	b10a      	cbz	r2, 80068f6 <_vfiprintf_r+0x162>
 80068f2:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 80068f6:	2800      	cmp	r0, #0
 80068f8:	f000 8360 	beq.w	8006fbc <_vfiprintf_r+0x828>
 80068fc:	f04f 0300 	mov.w	r3, #0
 8006900:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
 8006904:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8006908:	46a0      	mov	r8, r4
 800690a:	e1b6      	b.n	8006c7a <_vfiprintf_r+0x4e6>
 800690c:	46a8      	mov	r8, r5
 800690e:	e7b0      	b.n	8006872 <_vfiprintf_r+0xde>
 8006910:	aa0d      	add	r2, sp, #52	; 0x34
 8006912:	4639      	mov	r1, r7
 8006914:	4650      	mov	r0, sl
 8006916:	f7ff ff07 	bl	8006728 <__sprint_r>
 800691a:	2800      	cmp	r0, #0
 800691c:	f040 832d 	bne.w	8006f7a <_vfiprintf_r+0x7e6>
 8006920:	ae1a      	add	r6, sp, #104	; 0x68
 8006922:	e7bb      	b.n	800689c <_vfiprintf_r+0x108>
 8006924:	4604      	mov	r4, r0
 8006926:	e15b      	b.n	8006be0 <_vfiprintf_r+0x44c>
 8006928:	282b      	cmp	r0, #43	; 0x2b
 800692a:	f000 8157 	beq.w	8006bdc <_vfiprintf_r+0x448>
 800692e:	282d      	cmp	r0, #45	; 0x2d
 8006930:	d1de      	bne.n	80068f0 <_vfiprintf_r+0x15c>
 8006932:	f04b 0b04 	orr.w	fp, fp, #4
 8006936:	e153      	b.n	8006be0 <_vfiprintf_r+0x44c>
 8006938:	2839      	cmp	r0, #57	; 0x39
 800693a:	dc07      	bgt.n	800694c <_vfiprintf_r+0x1b8>
 800693c:	2831      	cmp	r0, #49	; 0x31
 800693e:	f280 817d 	bge.w	8006c3c <_vfiprintf_r+0x4a8>
 8006942:	2830      	cmp	r0, #48	; 0x30
 8006944:	d1d4      	bne.n	80068f0 <_vfiprintf_r+0x15c>
 8006946:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 800694a:	e149      	b.n	8006be0 <_vfiprintf_r+0x44c>
 800694c:	284f      	cmp	r0, #79	; 0x4f
 800694e:	f000 81c8 	beq.w	8006ce2 <_vfiprintf_r+0x54e>
 8006952:	2855      	cmp	r0, #85	; 0x55
 8006954:	f000 8205 	beq.w	8006d62 <_vfiprintf_r+0x5ce>
 8006958:	2844      	cmp	r0, #68	; 0x44
 800695a:	d1c9      	bne.n	80068f0 <_vfiprintf_r+0x15c>
 800695c:	b10a      	cbz	r2, 8006962 <_vfiprintf_r+0x1ce>
 800695e:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8006962:	f04b 0b10 	orr.w	fp, fp, #16
 8006966:	e00f      	b.n	8006988 <_vfiprintf_r+0x1f4>
 8006968:	286e      	cmp	r0, #110	; 0x6e
 800696a:	f000 819a 	beq.w	8006ca2 <_vfiprintf_r+0x50e>
 800696e:	dc31      	bgt.n	80069d4 <_vfiprintf_r+0x240>
 8006970:	2868      	cmp	r0, #104	; 0x68
 8006972:	f000 8173 	beq.w	8006c5c <_vfiprintf_r+0x4c8>
 8006976:	dc1f      	bgt.n	80069b8 <_vfiprintf_r+0x224>
 8006978:	2863      	cmp	r0, #99	; 0x63
 800697a:	f000 8175 	beq.w	8006c68 <_vfiprintf_r+0x4d4>
 800697e:	2864      	cmp	r0, #100	; 0x64
 8006980:	d1b6      	bne.n	80068f0 <_vfiprintf_r+0x15c>
 8006982:	b10a      	cbz	r2, 8006988 <_vfiprintf_r+0x1f4>
 8006984:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8006988:	f01b 0f20 	tst.w	fp, #32
 800698c:	f000 817b 	beq.w	8006c86 <_vfiprintf_r+0x4f2>
 8006990:	3407      	adds	r4, #7
 8006992:	f024 0407 	bic.w	r4, r4, #7
 8006996:	f104 0808 	add.w	r8, r4, #8
 800699a:	e9d4 4500 	ldrd	r4, r5, [r4]
 800699e:	2c00      	cmp	r4, #0
 80069a0:	f175 0300 	sbcs.w	r3, r5, #0
 80069a4:	da06      	bge.n	80069b4 <_vfiprintf_r+0x220>
 80069a6:	4264      	negs	r4, r4
 80069a8:	f04f 022d 	mov.w	r2, #45	; 0x2d
 80069ac:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80069b0:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 80069b4:	2201      	movs	r2, #1
 80069b6:	e1a5      	b.n	8006d04 <_vfiprintf_r+0x570>
 80069b8:	2869      	cmp	r0, #105	; 0x69
 80069ba:	d0e2      	beq.n	8006982 <_vfiprintf_r+0x1ee>
 80069bc:	286c      	cmp	r0, #108	; 0x6c
 80069be:	d197      	bne.n	80068f0 <_vfiprintf_r+0x15c>
 80069c0:	9b02      	ldr	r3, [sp, #8]
 80069c2:	7818      	ldrb	r0, [r3, #0]
 80069c4:	286c      	cmp	r0, #108	; 0x6c
 80069c6:	f040 814c 	bne.w	8006c62 <_vfiprintf_r+0x4ce>
 80069ca:	3301      	adds	r3, #1
 80069cc:	9302      	str	r3, [sp, #8]
 80069ce:	f04b 0b20 	orr.w	fp, fp, #32
 80069d2:	e105      	b.n	8006be0 <_vfiprintf_r+0x44c>
 80069d4:	2871      	cmp	r0, #113	; 0x71
 80069d6:	d0fa      	beq.n	80069ce <_vfiprintf_r+0x23a>
 80069d8:	dc1c      	bgt.n	8006a14 <_vfiprintf_r+0x280>
 80069da:	286f      	cmp	r0, #111	; 0x6f
 80069dc:	f000 8183 	beq.w	8006ce6 <_vfiprintf_r+0x552>
 80069e0:	2870      	cmp	r0, #112	; 0x70
 80069e2:	d185      	bne.n	80068f0 <_vfiprintf_r+0x15c>
 80069e4:	2230      	movs	r2, #48	; 0x30
 80069e6:	f104 0804 	add.w	r8, r4, #4
 80069ea:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 80069ee:	4b08      	ldr	r3, [pc, #32]	; (8006a10 <_vfiprintf_r+0x27c>)
 80069f0:	6824      	ldr	r4, [r4, #0]
 80069f2:	9306      	str	r3, [sp, #24]
 80069f4:	2278      	movs	r2, #120	; 0x78
 80069f6:	2500      	movs	r5, #0
 80069f8:	f04b 0b02 	orr.w	fp, fp, #2
 80069fc:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 8006a00:	2202      	movs	r2, #2
 8006a02:	e17b      	b.n	8006cfc <_vfiprintf_r+0x568>
 8006a04:	0800a770 	.word	0x0800a770
 8006a08:	0800a790 	.word	0x0800a790
 8006a0c:	0800a750 	.word	0x0800a750
 8006a10:	0800a6ed 	.word	0x0800a6ed
 8006a14:	2875      	cmp	r0, #117	; 0x75
 8006a16:	f000 81a6 	beq.w	8006d66 <_vfiprintf_r+0x5d2>
 8006a1a:	2878      	cmp	r0, #120	; 0x78
 8006a1c:	f000 81bc 	beq.w	8006d98 <_vfiprintf_r+0x604>
 8006a20:	2873      	cmp	r0, #115	; 0x73
 8006a22:	f47f af65 	bne.w	80068f0 <_vfiprintf_r+0x15c>
 8006a26:	f04f 0300 	mov.w	r3, #0
 8006a2a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8006a2e:	9b01      	ldr	r3, [sp, #4]
 8006a30:	f8d4 9000 	ldr.w	r9, [r4]
 8006a34:	f104 0804 	add.w	r8, r4, #4
 8006a38:	1c5c      	adds	r4, r3, #1
 8006a3a:	f000 818d 	beq.w	8006d58 <_vfiprintf_r+0x5c4>
 8006a3e:	461a      	mov	r2, r3
 8006a40:	2100      	movs	r1, #0
 8006a42:	4648      	mov	r0, r9
 8006a44:	f7f9 fbcc 	bl	80001e0 <memchr>
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	f000 81fb 	beq.w	8006e44 <_vfiprintf_r+0x6b0>
 8006a4e:	eba0 0309 	sub.w	r3, r0, r9
 8006a52:	9301      	str	r3, [sp, #4]
 8006a54:	2500      	movs	r5, #0
 8006a56:	9b01      	ldr	r3, [sp, #4]
 8006a58:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8006a5c:	42ab      	cmp	r3, r5
 8006a5e:	bfb8      	it	lt
 8006a60:	462b      	movlt	r3, r5
 8006a62:	9305      	str	r3, [sp, #20]
 8006a64:	b10a      	cbz	r2, 8006a6a <_vfiprintf_r+0x2d6>
 8006a66:	3301      	adds	r3, #1
 8006a68:	9305      	str	r3, [sp, #20]
 8006a6a:	f01b 0302 	ands.w	r3, fp, #2
 8006a6e:	9307      	str	r3, [sp, #28]
 8006a70:	bf1e      	ittt	ne
 8006a72:	9b05      	ldrne	r3, [sp, #20]
 8006a74:	3302      	addne	r3, #2
 8006a76:	9305      	strne	r3, [sp, #20]
 8006a78:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8006a7c:	9308      	str	r3, [sp, #32]
 8006a7e:	d114      	bne.n	8006aaa <_vfiprintf_r+0x316>
 8006a80:	9b04      	ldr	r3, [sp, #16]
 8006a82:	9a05      	ldr	r2, [sp, #20]
 8006a84:	1a9c      	subs	r4, r3, r2
 8006a86:	2c00      	cmp	r4, #0
 8006a88:	dd0f      	ble.n	8006aaa <_vfiprintf_r+0x316>
 8006a8a:	4bad      	ldr	r3, [pc, #692]	; (8006d40 <_vfiprintf_r+0x5ac>)
 8006a8c:	6033      	str	r3, [r6, #0]
 8006a8e:	2c10      	cmp	r4, #16
 8006a90:	f300 81da 	bgt.w	8006e48 <_vfiprintf_r+0x6b4>
 8006a94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a96:	6074      	str	r4, [r6, #4]
 8006a98:	4414      	add	r4, r2
 8006a9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a9c:	940f      	str	r4, [sp, #60]	; 0x3c
 8006a9e:	3201      	adds	r2, #1
 8006aa0:	2a07      	cmp	r2, #7
 8006aa2:	920e      	str	r2, [sp, #56]	; 0x38
 8006aa4:	f300 81e9 	bgt.w	8006e7a <_vfiprintf_r+0x6e6>
 8006aa8:	3608      	adds	r6, #8
 8006aaa:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8006aae:	b172      	cbz	r2, 8006ace <_vfiprintf_r+0x33a>
 8006ab0:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
 8006ab4:	6032      	str	r2, [r6, #0]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	6072      	str	r2, [r6, #4]
 8006aba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006abc:	3201      	adds	r2, #1
 8006abe:	920f      	str	r2, [sp, #60]	; 0x3c
 8006ac0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ac2:	3201      	adds	r2, #1
 8006ac4:	2a07      	cmp	r2, #7
 8006ac6:	920e      	str	r2, [sp, #56]	; 0x38
 8006ac8:	f300 81e0 	bgt.w	8006e8c <_vfiprintf_r+0x6f8>
 8006acc:	3608      	adds	r6, #8
 8006ace:	9b07      	ldr	r3, [sp, #28]
 8006ad0:	b16b      	cbz	r3, 8006aee <_vfiprintf_r+0x35a>
 8006ad2:	aa0c      	add	r2, sp, #48	; 0x30
 8006ad4:	6032      	str	r2, [r6, #0]
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	6072      	str	r2, [r6, #4]
 8006ada:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006adc:	3202      	adds	r2, #2
 8006ade:	920f      	str	r2, [sp, #60]	; 0x3c
 8006ae0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ae2:	3201      	adds	r2, #1
 8006ae4:	2a07      	cmp	r2, #7
 8006ae6:	920e      	str	r2, [sp, #56]	; 0x38
 8006ae8:	f300 81d9 	bgt.w	8006e9e <_vfiprintf_r+0x70a>
 8006aec:	3608      	adds	r6, #8
 8006aee:	9b08      	ldr	r3, [sp, #32]
 8006af0:	2b80      	cmp	r3, #128	; 0x80
 8006af2:	d114      	bne.n	8006b1e <_vfiprintf_r+0x38a>
 8006af4:	9b04      	ldr	r3, [sp, #16]
 8006af6:	9a05      	ldr	r2, [sp, #20]
 8006af8:	1a9c      	subs	r4, r3, r2
 8006afa:	2c00      	cmp	r4, #0
 8006afc:	dd0f      	ble.n	8006b1e <_vfiprintf_r+0x38a>
 8006afe:	4b91      	ldr	r3, [pc, #580]	; (8006d44 <_vfiprintf_r+0x5b0>)
 8006b00:	6033      	str	r3, [r6, #0]
 8006b02:	2c10      	cmp	r4, #16
 8006b04:	f300 81d4 	bgt.w	8006eb0 <_vfiprintf_r+0x71c>
 8006b08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b0a:	6074      	str	r4, [r6, #4]
 8006b0c:	4414      	add	r4, r2
 8006b0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b10:	940f      	str	r4, [sp, #60]	; 0x3c
 8006b12:	3201      	adds	r2, #1
 8006b14:	2a07      	cmp	r2, #7
 8006b16:	920e      	str	r2, [sp, #56]	; 0x38
 8006b18:	f300 81e2 	bgt.w	8006ee0 <_vfiprintf_r+0x74c>
 8006b1c:	3608      	adds	r6, #8
 8006b1e:	9b01      	ldr	r3, [sp, #4]
 8006b20:	1aec      	subs	r4, r5, r3
 8006b22:	2c00      	cmp	r4, #0
 8006b24:	dd10      	ble.n	8006b48 <_vfiprintf_r+0x3b4>
 8006b26:	4d87      	ldr	r5, [pc, #540]	; (8006d44 <_vfiprintf_r+0x5b0>)
 8006b28:	2310      	movs	r3, #16
 8006b2a:	2c10      	cmp	r4, #16
 8006b2c:	6035      	str	r5, [r6, #0]
 8006b2e:	f300 81e0 	bgt.w	8006ef2 <_vfiprintf_r+0x75e>
 8006b32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b34:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006b36:	6074      	str	r4, [r6, #4]
 8006b38:	3201      	adds	r2, #1
 8006b3a:	4404      	add	r4, r0
 8006b3c:	2a07      	cmp	r2, #7
 8006b3e:	940f      	str	r4, [sp, #60]	; 0x3c
 8006b40:	920e      	str	r2, [sp, #56]	; 0x38
 8006b42:	f300 81ed 	bgt.w	8006f20 <_vfiprintf_r+0x78c>
 8006b46:	3608      	adds	r6, #8
 8006b48:	9b01      	ldr	r3, [sp, #4]
 8006b4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b4c:	f8c6 9000 	str.w	r9, [r6]
 8006b50:	441a      	add	r2, r3
 8006b52:	920f      	str	r2, [sp, #60]	; 0x3c
 8006b54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b56:	6073      	str	r3, [r6, #4]
 8006b58:	3201      	adds	r2, #1
 8006b5a:	2a07      	cmp	r2, #7
 8006b5c:	920e      	str	r2, [sp, #56]	; 0x38
 8006b5e:	f300 81e7 	bgt.w	8006f30 <_vfiprintf_r+0x79c>
 8006b62:	f106 0208 	add.w	r2, r6, #8
 8006b66:	f01b 0f04 	tst.w	fp, #4
 8006b6a:	f040 81e9 	bne.w	8006f40 <_vfiprintf_r+0x7ac>
 8006b6e:	9b03      	ldr	r3, [sp, #12]
 8006b70:	9a04      	ldr	r2, [sp, #16]
 8006b72:	9905      	ldr	r1, [sp, #20]
 8006b74:	428a      	cmp	r2, r1
 8006b76:	bfac      	ite	ge
 8006b78:	189b      	addge	r3, r3, r2
 8006b7a:	185b      	addlt	r3, r3, r1
 8006b7c:	9303      	str	r3, [sp, #12]
 8006b7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b80:	b13b      	cbz	r3, 8006b92 <_vfiprintf_r+0x3fe>
 8006b82:	aa0d      	add	r2, sp, #52	; 0x34
 8006b84:	4639      	mov	r1, r7
 8006b86:	4650      	mov	r0, sl
 8006b88:	f7ff fdce 	bl	8006728 <__sprint_r>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	f040 81f4 	bne.w	8006f7a <_vfiprintf_r+0x7e6>
 8006b92:	2300      	movs	r3, #0
 8006b94:	930e      	str	r3, [sp, #56]	; 0x38
 8006b96:	4644      	mov	r4, r8
 8006b98:	ae1a      	add	r6, sp, #104	; 0x68
 8006b9a:	e668      	b.n	800686e <_vfiprintf_r+0xda>
 8006b9c:	b10a      	cbz	r2, 8006ba2 <_vfiprintf_r+0x40e>
 8006b9e:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8006ba2:	4b69      	ldr	r3, [pc, #420]	; (8006d48 <_vfiprintf_r+0x5b4>)
 8006ba4:	9306      	str	r3, [sp, #24]
 8006ba6:	f01b 0f20 	tst.w	fp, #32
 8006baa:	f000 80fa 	beq.w	8006da2 <_vfiprintf_r+0x60e>
 8006bae:	3407      	adds	r4, #7
 8006bb0:	f024 0407 	bic.w	r4, r4, #7
 8006bb4:	f104 0808 	add.w	r8, r4, #8
 8006bb8:	e9d4 4500 	ldrd	r4, r5, [r4]
 8006bbc:	f01b 0f01 	tst.w	fp, #1
 8006bc0:	f43f af1e 	beq.w	8006a00 <_vfiprintf_r+0x26c>
 8006bc4:	ea54 0305 	orrs.w	r3, r4, r5
 8006bc8:	bf1f      	itttt	ne
 8006bca:	2230      	movne	r2, #48	; 0x30
 8006bcc:	f88d 2030 	strbne.w	r2, [sp, #48]	; 0x30
 8006bd0:	f88d 0031 	strbne.w	r0, [sp, #49]	; 0x31
 8006bd4:	f04b 0b02 	orrne.w	fp, fp, #2
 8006bd8:	e712      	b.n	8006a00 <_vfiprintf_r+0x26c>
 8006bda:	b909      	cbnz	r1, 8006be0 <_vfiprintf_r+0x44c>
 8006bdc:	2201      	movs	r2, #1
 8006bde:	4601      	mov	r1, r0
 8006be0:	9d02      	ldr	r5, [sp, #8]
 8006be2:	e670      	b.n	80068c6 <_vfiprintf_r+0x132>
 8006be4:	f04b 0b01 	orr.w	fp, fp, #1
 8006be8:	e7fa      	b.n	8006be0 <_vfiprintf_r+0x44c>
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	9304      	str	r3, [sp, #16]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f104 0004 	add.w	r0, r4, #4
 8006bf4:	f6bf ae96 	bge.w	8006924 <_vfiprintf_r+0x190>
 8006bf8:	425b      	negs	r3, r3
 8006bfa:	9304      	str	r3, [sp, #16]
 8006bfc:	4604      	mov	r4, r0
 8006bfe:	e698      	b.n	8006932 <_vfiprintf_r+0x19e>
 8006c00:	9b02      	ldr	r3, [sp, #8]
 8006c02:	7818      	ldrb	r0, [r3, #0]
 8006c04:	282a      	cmp	r0, #42	; 0x2a
 8006c06:	f103 0501 	add.w	r5, r3, #1
 8006c0a:	d010      	beq.n	8006c2e <_vfiprintf_r+0x49a>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	9301      	str	r3, [sp, #4]
 8006c10:	9502      	str	r5, [sp, #8]
 8006c12:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
 8006c16:	2d09      	cmp	r5, #9
 8006c18:	f63f ae58 	bhi.w	80068cc <_vfiprintf_r+0x138>
 8006c1c:	9b01      	ldr	r3, [sp, #4]
 8006c1e:	fb0e 5303 	mla	r3, lr, r3, r5
 8006c22:	9301      	str	r3, [sp, #4]
 8006c24:	9b02      	ldr	r3, [sp, #8]
 8006c26:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006c2a:	9302      	str	r3, [sp, #8]
 8006c2c:	e7f1      	b.n	8006c12 <_vfiprintf_r+0x47e>
 8006c2e:	6820      	ldr	r0, [r4, #0]
 8006c30:	9502      	str	r5, [sp, #8]
 8006c32:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8006c36:	9301      	str	r3, [sp, #4]
 8006c38:	3404      	adds	r4, #4
 8006c3a:	e7d1      	b.n	8006be0 <_vfiprintf_r+0x44c>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	9304      	str	r3, [sp, #16]
 8006c40:	9b04      	ldr	r3, [sp, #16]
 8006c42:	3830      	subs	r0, #48	; 0x30
 8006c44:	fb0e 0303 	mla	r3, lr, r3, r0
 8006c48:	9304      	str	r3, [sp, #16]
 8006c4a:	9b02      	ldr	r3, [sp, #8]
 8006c4c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006c50:	9302      	str	r3, [sp, #8]
 8006c52:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
 8006c56:	2d09      	cmp	r5, #9
 8006c58:	d9f2      	bls.n	8006c40 <_vfiprintf_r+0x4ac>
 8006c5a:	e637      	b.n	80068cc <_vfiprintf_r+0x138>
 8006c5c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 8006c60:	e7be      	b.n	8006be0 <_vfiprintf_r+0x44c>
 8006c62:	f04b 0b10 	orr.w	fp, fp, #16
 8006c66:	e7bb      	b.n	8006be0 <_vfiprintf_r+0x44c>
 8006c68:	6822      	ldr	r2, [r4, #0]
 8006c6a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
 8006c6e:	f04f 0300 	mov.w	r3, #0
 8006c72:	f104 0804 	add.w	r8, r4, #4
 8006c76:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	9301      	str	r3, [sp, #4]
 8006c7e:	2500      	movs	r5, #0
 8006c80:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 8006c84:	e6e7      	b.n	8006a56 <_vfiprintf_r+0x2c2>
 8006c86:	f01b 0f10 	tst.w	fp, #16
 8006c8a:	f104 0804 	add.w	r8, r4, #4
 8006c8e:	d002      	beq.n	8006c96 <_vfiprintf_r+0x502>
 8006c90:	6824      	ldr	r4, [r4, #0]
 8006c92:	17e5      	asrs	r5, r4, #31
 8006c94:	e683      	b.n	800699e <_vfiprintf_r+0x20a>
 8006c96:	6824      	ldr	r4, [r4, #0]
 8006c98:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006c9c:	bf18      	it	ne
 8006c9e:	b224      	sxthne	r4, r4
 8006ca0:	e7f7      	b.n	8006c92 <_vfiprintf_r+0x4fe>
 8006ca2:	b10a      	cbz	r2, 8006ca8 <_vfiprintf_r+0x514>
 8006ca4:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8006ca8:	f01b 0f20 	tst.w	fp, #32
 8006cac:	f104 0204 	add.w	r2, r4, #4
 8006cb0:	d008      	beq.n	8006cc4 <_vfiprintf_r+0x530>
 8006cb2:	9903      	ldr	r1, [sp, #12]
 8006cb4:	6823      	ldr	r3, [r4, #0]
 8006cb6:	17cd      	asrs	r5, r1, #31
 8006cb8:	4608      	mov	r0, r1
 8006cba:	4629      	mov	r1, r5
 8006cbc:	e9c3 0100 	strd	r0, r1, [r3]
 8006cc0:	4614      	mov	r4, r2
 8006cc2:	e5d4      	b.n	800686e <_vfiprintf_r+0xda>
 8006cc4:	f01b 0f10 	tst.w	fp, #16
 8006cc8:	d003      	beq.n	8006cd2 <_vfiprintf_r+0x53e>
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	9903      	ldr	r1, [sp, #12]
 8006cce:	6019      	str	r1, [r3, #0]
 8006cd0:	e7f6      	b.n	8006cc0 <_vfiprintf_r+0x52c>
 8006cd2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006cd6:	d0f8      	beq.n	8006cca <_vfiprintf_r+0x536>
 8006cd8:	6823      	ldr	r3, [r4, #0]
 8006cda:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8006cde:	8019      	strh	r1, [r3, #0]
 8006ce0:	e7ee      	b.n	8006cc0 <_vfiprintf_r+0x52c>
 8006ce2:	f04b 0b10 	orr.w	fp, fp, #16
 8006ce6:	f01b 0220 	ands.w	r2, fp, #32
 8006cea:	d021      	beq.n	8006d30 <_vfiprintf_r+0x59c>
 8006cec:	3407      	adds	r4, #7
 8006cee:	f024 0407 	bic.w	r4, r4, #7
 8006cf2:	f104 0808 	add.w	r8, r4, #8
 8006cf6:	e9d4 4500 	ldrd	r4, r5, [r4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f04f 0300 	mov.w	r3, #0
 8006d00:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8006d04:	9b01      	ldr	r3, [sp, #4]
 8006d06:	3301      	adds	r3, #1
 8006d08:	f000 8165 	beq.w	8006fd6 <_vfiprintf_r+0x842>
 8006d0c:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
 8006d10:	9305      	str	r3, [sp, #20]
 8006d12:	ea54 0305 	orrs.w	r3, r4, r5
 8006d16:	f040 8164 	bne.w	8006fe2 <_vfiprintf_r+0x84e>
 8006d1a:	9b01      	ldr	r3, [sp, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 8084 	beq.w	8006e2a <_vfiprintf_r+0x696>
 8006d22:	2a01      	cmp	r2, #1
 8006d24:	d050      	beq.n	8006dc8 <_vfiprintf_r+0x634>
 8006d26:	2a02      	cmp	r2, #2
 8006d28:	d06b      	beq.n	8006e02 <_vfiprintf_r+0x66e>
 8006d2a:	2400      	movs	r4, #0
 8006d2c:	2500      	movs	r5, #0
 8006d2e:	e15e      	b.n	8006fee <_vfiprintf_r+0x85a>
 8006d30:	f01b 0110 	ands.w	r1, fp, #16
 8006d34:	f104 0804 	add.w	r8, r4, #4
 8006d38:	d008      	beq.n	8006d4c <_vfiprintf_r+0x5b8>
 8006d3a:	6824      	ldr	r4, [r4, #0]
 8006d3c:	2500      	movs	r5, #0
 8006d3e:	e7dd      	b.n	8006cfc <_vfiprintf_r+0x568>
 8006d40:	0800a720 	.word	0x0800a720
 8006d44:	0800a730 	.word	0x0800a730
 8006d48:	0800a6dc 	.word	0x0800a6dc
 8006d4c:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
 8006d50:	d0f3      	beq.n	8006d3a <_vfiprintf_r+0x5a6>
 8006d52:	8824      	ldrh	r4, [r4, #0]
 8006d54:	2500      	movs	r5, #0
 8006d56:	e7d0      	b.n	8006cfa <_vfiprintf_r+0x566>
 8006d58:	4648      	mov	r0, r9
 8006d5a:	f7f9 fa91 	bl	8000280 <strlen>
 8006d5e:	9001      	str	r0, [sp, #4]
 8006d60:	e678      	b.n	8006a54 <_vfiprintf_r+0x2c0>
 8006d62:	f04b 0b10 	orr.w	fp, fp, #16
 8006d66:	f01b 0f20 	tst.w	fp, #32
 8006d6a:	d008      	beq.n	8006d7e <_vfiprintf_r+0x5ea>
 8006d6c:	3407      	adds	r4, #7
 8006d6e:	f024 0407 	bic.w	r4, r4, #7
 8006d72:	f104 0808 	add.w	r8, r4, #8
 8006d76:	e9d4 4500 	ldrd	r4, r5, [r4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	e7be      	b.n	8006cfc <_vfiprintf_r+0x568>
 8006d7e:	f01b 0f10 	tst.w	fp, #16
 8006d82:	f104 0804 	add.w	r8, r4, #4
 8006d86:	d001      	beq.n	8006d8c <_vfiprintf_r+0x5f8>
 8006d88:	6824      	ldr	r4, [r4, #0]
 8006d8a:	e003      	b.n	8006d94 <_vfiprintf_r+0x600>
 8006d8c:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006d90:	d0fa      	beq.n	8006d88 <_vfiprintf_r+0x5f4>
 8006d92:	8824      	ldrh	r4, [r4, #0]
 8006d94:	2500      	movs	r5, #0
 8006d96:	e7f0      	b.n	8006d7a <_vfiprintf_r+0x5e6>
 8006d98:	b10a      	cbz	r2, 8006d9e <_vfiprintf_r+0x60a>
 8006d9a:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8006d9e:	4ba6      	ldr	r3, [pc, #664]	; (8007038 <_vfiprintf_r+0x8a4>)
 8006da0:	e700      	b.n	8006ba4 <_vfiprintf_r+0x410>
 8006da2:	f01b 0f10 	tst.w	fp, #16
 8006da6:	f104 0804 	add.w	r8, r4, #4
 8006daa:	d001      	beq.n	8006db0 <_vfiprintf_r+0x61c>
 8006dac:	6824      	ldr	r4, [r4, #0]
 8006dae:	e003      	b.n	8006db8 <_vfiprintf_r+0x624>
 8006db0:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006db4:	d0fa      	beq.n	8006dac <_vfiprintf_r+0x618>
 8006db6:	8824      	ldrh	r4, [r4, #0]
 8006db8:	2500      	movs	r5, #0
 8006dba:	e6ff      	b.n	8006bbc <_vfiprintf_r+0x428>
 8006dbc:	464b      	mov	r3, r9
 8006dbe:	e117      	b.n	8006ff0 <_vfiprintf_r+0x85c>
 8006dc0:	2d00      	cmp	r5, #0
 8006dc2:	bf08      	it	eq
 8006dc4:	2c0a      	cmpeq	r4, #10
 8006dc6:	d205      	bcs.n	8006dd4 <_vfiprintf_r+0x640>
 8006dc8:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 8006dcc:	3430      	adds	r4, #48	; 0x30
 8006dce:	f809 4d41 	strb.w	r4, [r9, #-65]!
 8006dd2:	e128      	b.n	8007026 <_vfiprintf_r+0x892>
 8006dd4:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8006dd8:	4620      	mov	r0, r4
 8006dda:	4629      	mov	r1, r5
 8006ddc:	220a      	movs	r2, #10
 8006dde:	2300      	movs	r3, #0
 8006de0:	f7f9 ff56 	bl	8000c90 <__aeabi_uldivmod>
 8006de4:	3230      	adds	r2, #48	; 0x30
 8006de6:	f809 2d01 	strb.w	r2, [r9, #-1]!
 8006dea:	2300      	movs	r3, #0
 8006dec:	4620      	mov	r0, r4
 8006dee:	4629      	mov	r1, r5
 8006df0:	220a      	movs	r2, #10
 8006df2:	f7f9 ff4d 	bl	8000c90 <__aeabi_uldivmod>
 8006df6:	4604      	mov	r4, r0
 8006df8:	460d      	mov	r5, r1
 8006dfa:	ea54 0305 	orrs.w	r3, r4, r5
 8006dfe:	d1eb      	bne.n	8006dd8 <_vfiprintf_r+0x644>
 8006e00:	e111      	b.n	8007026 <_vfiprintf_r+0x892>
 8006e02:	2400      	movs	r4, #0
 8006e04:	2500      	movs	r5, #0
 8006e06:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8006e0a:	f004 030f 	and.w	r3, r4, #15
 8006e0e:	9a06      	ldr	r2, [sp, #24]
 8006e10:	5cd3      	ldrb	r3, [r2, r3]
 8006e12:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8006e16:	0923      	lsrs	r3, r4, #4
 8006e18:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8006e1c:	092a      	lsrs	r2, r5, #4
 8006e1e:	461c      	mov	r4, r3
 8006e20:	4615      	mov	r5, r2
 8006e22:	ea54 0305 	orrs.w	r3, r4, r5
 8006e26:	d1f0      	bne.n	8006e0a <_vfiprintf_r+0x676>
 8006e28:	e0fd      	b.n	8007026 <_vfiprintf_r+0x892>
 8006e2a:	b942      	cbnz	r2, 8006e3e <_vfiprintf_r+0x6aa>
 8006e2c:	f01b 0f01 	tst.w	fp, #1
 8006e30:	d005      	beq.n	8006e3e <_vfiprintf_r+0x6aa>
 8006e32:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 8006e36:	2330      	movs	r3, #48	; 0x30
 8006e38:	f809 3d41 	strb.w	r3, [r9, #-65]!
 8006e3c:	e0f3      	b.n	8007026 <_vfiprintf_r+0x892>
 8006e3e:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8006e42:	e0f0      	b.n	8007026 <_vfiprintf_r+0x892>
 8006e44:	4605      	mov	r5, r0
 8006e46:	e606      	b.n	8006a56 <_vfiprintf_r+0x2c2>
 8006e48:	2210      	movs	r2, #16
 8006e4a:	6072      	str	r2, [r6, #4]
 8006e4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e4e:	3210      	adds	r2, #16
 8006e50:	920f      	str	r2, [sp, #60]	; 0x3c
 8006e52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e54:	3201      	adds	r2, #1
 8006e56:	2a07      	cmp	r2, #7
 8006e58:	920e      	str	r2, [sp, #56]	; 0x38
 8006e5a:	dc02      	bgt.n	8006e62 <_vfiprintf_r+0x6ce>
 8006e5c:	3608      	adds	r6, #8
 8006e5e:	3c10      	subs	r4, #16
 8006e60:	e614      	b.n	8006a8c <_vfiprintf_r+0x2f8>
 8006e62:	aa0d      	add	r2, sp, #52	; 0x34
 8006e64:	4639      	mov	r1, r7
 8006e66:	4650      	mov	r0, sl
 8006e68:	9309      	str	r3, [sp, #36]	; 0x24
 8006e6a:	f7ff fc5d 	bl	8006728 <__sprint_r>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	f040 8083 	bne.w	8006f7a <_vfiprintf_r+0x7e6>
 8006e74:	ae1a      	add	r6, sp, #104	; 0x68
 8006e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e78:	e7f1      	b.n	8006e5e <_vfiprintf_r+0x6ca>
 8006e7a:	aa0d      	add	r2, sp, #52	; 0x34
 8006e7c:	4639      	mov	r1, r7
 8006e7e:	4650      	mov	r0, sl
 8006e80:	f7ff fc52 	bl	8006728 <__sprint_r>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d178      	bne.n	8006f7a <_vfiprintf_r+0x7e6>
 8006e88:	ae1a      	add	r6, sp, #104	; 0x68
 8006e8a:	e60e      	b.n	8006aaa <_vfiprintf_r+0x316>
 8006e8c:	aa0d      	add	r2, sp, #52	; 0x34
 8006e8e:	4639      	mov	r1, r7
 8006e90:	4650      	mov	r0, sl
 8006e92:	f7ff fc49 	bl	8006728 <__sprint_r>
 8006e96:	2800      	cmp	r0, #0
 8006e98:	d16f      	bne.n	8006f7a <_vfiprintf_r+0x7e6>
 8006e9a:	ae1a      	add	r6, sp, #104	; 0x68
 8006e9c:	e617      	b.n	8006ace <_vfiprintf_r+0x33a>
 8006e9e:	aa0d      	add	r2, sp, #52	; 0x34
 8006ea0:	4639      	mov	r1, r7
 8006ea2:	4650      	mov	r0, sl
 8006ea4:	f7ff fc40 	bl	8006728 <__sprint_r>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	d166      	bne.n	8006f7a <_vfiprintf_r+0x7e6>
 8006eac:	ae1a      	add	r6, sp, #104	; 0x68
 8006eae:	e61e      	b.n	8006aee <_vfiprintf_r+0x35a>
 8006eb0:	2210      	movs	r2, #16
 8006eb2:	6072      	str	r2, [r6, #4]
 8006eb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006eb6:	3210      	adds	r2, #16
 8006eb8:	920f      	str	r2, [sp, #60]	; 0x3c
 8006eba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ebc:	3201      	adds	r2, #1
 8006ebe:	2a07      	cmp	r2, #7
 8006ec0:	920e      	str	r2, [sp, #56]	; 0x38
 8006ec2:	dc02      	bgt.n	8006eca <_vfiprintf_r+0x736>
 8006ec4:	3608      	adds	r6, #8
 8006ec6:	3c10      	subs	r4, #16
 8006ec8:	e61a      	b.n	8006b00 <_vfiprintf_r+0x36c>
 8006eca:	aa0d      	add	r2, sp, #52	; 0x34
 8006ecc:	4639      	mov	r1, r7
 8006ece:	4650      	mov	r0, sl
 8006ed0:	9307      	str	r3, [sp, #28]
 8006ed2:	f7ff fc29 	bl	8006728 <__sprint_r>
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	d14f      	bne.n	8006f7a <_vfiprintf_r+0x7e6>
 8006eda:	ae1a      	add	r6, sp, #104	; 0x68
 8006edc:	9b07      	ldr	r3, [sp, #28]
 8006ede:	e7f2      	b.n	8006ec6 <_vfiprintf_r+0x732>
 8006ee0:	aa0d      	add	r2, sp, #52	; 0x34
 8006ee2:	4639      	mov	r1, r7
 8006ee4:	4650      	mov	r0, sl
 8006ee6:	f7ff fc1f 	bl	8006728 <__sprint_r>
 8006eea:	2800      	cmp	r0, #0
 8006eec:	d145      	bne.n	8006f7a <_vfiprintf_r+0x7e6>
 8006eee:	ae1a      	add	r6, sp, #104	; 0x68
 8006ef0:	e615      	b.n	8006b1e <_vfiprintf_r+0x38a>
 8006ef2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ef4:	6073      	str	r3, [r6, #4]
 8006ef6:	3210      	adds	r2, #16
 8006ef8:	920f      	str	r2, [sp, #60]	; 0x3c
 8006efa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006efc:	3201      	adds	r2, #1
 8006efe:	2a07      	cmp	r2, #7
 8006f00:	920e      	str	r2, [sp, #56]	; 0x38
 8006f02:	dc02      	bgt.n	8006f0a <_vfiprintf_r+0x776>
 8006f04:	3608      	adds	r6, #8
 8006f06:	3c10      	subs	r4, #16
 8006f08:	e60f      	b.n	8006b2a <_vfiprintf_r+0x396>
 8006f0a:	aa0d      	add	r2, sp, #52	; 0x34
 8006f0c:	4639      	mov	r1, r7
 8006f0e:	4650      	mov	r0, sl
 8006f10:	9307      	str	r3, [sp, #28]
 8006f12:	f7ff fc09 	bl	8006728 <__sprint_r>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	d12f      	bne.n	8006f7a <_vfiprintf_r+0x7e6>
 8006f1a:	ae1a      	add	r6, sp, #104	; 0x68
 8006f1c:	9b07      	ldr	r3, [sp, #28]
 8006f1e:	e7f2      	b.n	8006f06 <_vfiprintf_r+0x772>
 8006f20:	aa0d      	add	r2, sp, #52	; 0x34
 8006f22:	4639      	mov	r1, r7
 8006f24:	4650      	mov	r0, sl
 8006f26:	f7ff fbff 	bl	8006728 <__sprint_r>
 8006f2a:	bb30      	cbnz	r0, 8006f7a <_vfiprintf_r+0x7e6>
 8006f2c:	ae1a      	add	r6, sp, #104	; 0x68
 8006f2e:	e60b      	b.n	8006b48 <_vfiprintf_r+0x3b4>
 8006f30:	aa0d      	add	r2, sp, #52	; 0x34
 8006f32:	4639      	mov	r1, r7
 8006f34:	4650      	mov	r0, sl
 8006f36:	f7ff fbf7 	bl	8006728 <__sprint_r>
 8006f3a:	b9f0      	cbnz	r0, 8006f7a <_vfiprintf_r+0x7e6>
 8006f3c:	aa1a      	add	r2, sp, #104	; 0x68
 8006f3e:	e612      	b.n	8006b66 <_vfiprintf_r+0x3d2>
 8006f40:	9b04      	ldr	r3, [sp, #16]
 8006f42:	9905      	ldr	r1, [sp, #20]
 8006f44:	1a5c      	subs	r4, r3, r1
 8006f46:	2c00      	cmp	r4, #0
 8006f48:	f77f ae11 	ble.w	8006b6e <_vfiprintf_r+0x3da>
 8006f4c:	4d3b      	ldr	r5, [pc, #236]	; (800703c <_vfiprintf_r+0x8a8>)
 8006f4e:	2610      	movs	r6, #16
 8006f50:	2c10      	cmp	r4, #16
 8006f52:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006f54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f56:	6015      	str	r5, [r2, #0]
 8006f58:	dc1d      	bgt.n	8006f96 <_vfiprintf_r+0x802>
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	6054      	str	r4, [r2, #4]
 8006f5e:	2b07      	cmp	r3, #7
 8006f60:	440c      	add	r4, r1
 8006f62:	940f      	str	r4, [sp, #60]	; 0x3c
 8006f64:	930e      	str	r3, [sp, #56]	; 0x38
 8006f66:	f77f ae02 	ble.w	8006b6e <_vfiprintf_r+0x3da>
 8006f6a:	aa0d      	add	r2, sp, #52	; 0x34
 8006f6c:	4639      	mov	r1, r7
 8006f6e:	4650      	mov	r0, sl
 8006f70:	f7ff fbda 	bl	8006728 <__sprint_r>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	f43f adfa 	beq.w	8006b6e <_vfiprintf_r+0x3da>
 8006f7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f7c:	07d9      	lsls	r1, r3, #31
 8006f7e:	d405      	bmi.n	8006f8c <_vfiprintf_r+0x7f8>
 8006f80:	89bb      	ldrh	r3, [r7, #12]
 8006f82:	059a      	lsls	r2, r3, #22
 8006f84:	d402      	bmi.n	8006f8c <_vfiprintf_r+0x7f8>
 8006f86:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006f88:	f001 fc19 	bl	80087be <__retarget_lock_release_recursive>
 8006f8c:	89bb      	ldrh	r3, [r7, #12]
 8006f8e:	065b      	lsls	r3, r3, #25
 8006f90:	f57f ac61 	bpl.w	8006856 <_vfiprintf_r+0xc2>
 8006f94:	e437      	b.n	8006806 <_vfiprintf_r+0x72>
 8006f96:	3301      	adds	r3, #1
 8006f98:	3110      	adds	r1, #16
 8006f9a:	2b07      	cmp	r3, #7
 8006f9c:	6056      	str	r6, [r2, #4]
 8006f9e:	910f      	str	r1, [sp, #60]	; 0x3c
 8006fa0:	930e      	str	r3, [sp, #56]	; 0x38
 8006fa2:	dc02      	bgt.n	8006faa <_vfiprintf_r+0x816>
 8006fa4:	3208      	adds	r2, #8
 8006fa6:	3c10      	subs	r4, #16
 8006fa8:	e7d2      	b.n	8006f50 <_vfiprintf_r+0x7bc>
 8006faa:	aa0d      	add	r2, sp, #52	; 0x34
 8006fac:	4639      	mov	r1, r7
 8006fae:	4650      	mov	r0, sl
 8006fb0:	f7ff fbba 	bl	8006728 <__sprint_r>
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	d1e0      	bne.n	8006f7a <_vfiprintf_r+0x7e6>
 8006fb8:	aa1a      	add	r2, sp, #104	; 0x68
 8006fba:	e7f4      	b.n	8006fa6 <_vfiprintf_r+0x812>
 8006fbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fbe:	b913      	cbnz	r3, 8006fc6 <_vfiprintf_r+0x832>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	930e      	str	r3, [sp, #56]	; 0x38
 8006fc4:	e7d9      	b.n	8006f7a <_vfiprintf_r+0x7e6>
 8006fc6:	aa0d      	add	r2, sp, #52	; 0x34
 8006fc8:	4639      	mov	r1, r7
 8006fca:	4650      	mov	r0, sl
 8006fcc:	f7ff fbac 	bl	8006728 <__sprint_r>
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	d0f5      	beq.n	8006fc0 <_vfiprintf_r+0x82c>
 8006fd4:	e7d1      	b.n	8006f7a <_vfiprintf_r+0x7e6>
 8006fd6:	ea54 0305 	orrs.w	r3, r4, r5
 8006fda:	f8cd b014 	str.w	fp, [sp, #20]
 8006fde:	f43f aea0 	beq.w	8006d22 <_vfiprintf_r+0x58e>
 8006fe2:	2a01      	cmp	r2, #1
 8006fe4:	f43f aeec 	beq.w	8006dc0 <_vfiprintf_r+0x62c>
 8006fe8:	2a02      	cmp	r2, #2
 8006fea:	f43f af0c 	beq.w	8006e06 <_vfiprintf_r+0x672>
 8006fee:	ab1a      	add	r3, sp, #104	; 0x68
 8006ff0:	08e1      	lsrs	r1, r4, #3
 8006ff2:	ea41 7145 	orr.w	r1, r1, r5, lsl #29
 8006ff6:	08e8      	lsrs	r0, r5, #3
 8006ff8:	f004 0207 	and.w	r2, r4, #7
 8006ffc:	4605      	mov	r5, r0
 8006ffe:	460c      	mov	r4, r1
 8007000:	3230      	adds	r2, #48	; 0x30
 8007002:	ea54 0105 	orrs.w	r1, r4, r5
 8007006:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 800700a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800700e:	f47f aed5 	bne.w	8006dbc <_vfiprintf_r+0x628>
 8007012:	9905      	ldr	r1, [sp, #20]
 8007014:	07c8      	lsls	r0, r1, #31
 8007016:	d506      	bpl.n	8007026 <_vfiprintf_r+0x892>
 8007018:	2a30      	cmp	r2, #48	; 0x30
 800701a:	d004      	beq.n	8007026 <_vfiprintf_r+0x892>
 800701c:	2230      	movs	r2, #48	; 0x30
 800701e:	f809 2c01 	strb.w	r2, [r9, #-1]
 8007022:	f1a3 0902 	sub.w	r9, r3, #2
 8007026:	ab1a      	add	r3, sp, #104	; 0x68
 8007028:	eba3 0309 	sub.w	r3, r3, r9
 800702c:	9d01      	ldr	r5, [sp, #4]
 800702e:	f8dd b014 	ldr.w	fp, [sp, #20]
 8007032:	9301      	str	r3, [sp, #4]
 8007034:	e50f      	b.n	8006a56 <_vfiprintf_r+0x2c2>
 8007036:	bf00      	nop
 8007038:	0800a6ed 	.word	0x0800a6ed
 800703c:	0800a720 	.word	0x0800a720

08007040 <__sbprintf>:
 8007040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007042:	460c      	mov	r4, r1
 8007044:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8007048:	461f      	mov	r7, r3
 800704a:	8989      	ldrh	r1, [r1, #12]
 800704c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800704e:	9319      	str	r3, [sp, #100]	; 0x64
 8007050:	89e3      	ldrh	r3, [r4, #14]
 8007052:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007056:	f021 0102 	bic.w	r1, r1, #2
 800705a:	6a23      	ldr	r3, [r4, #32]
 800705c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8007060:	9308      	str	r3, [sp, #32]
 8007062:	a91a      	add	r1, sp, #104	; 0x68
 8007064:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007066:	930a      	str	r3, [sp, #40]	; 0x28
 8007068:	4615      	mov	r5, r2
 800706a:	2300      	movs	r3, #0
 800706c:	4606      	mov	r6, r0
 800706e:	9100      	str	r1, [sp, #0]
 8007070:	9104      	str	r1, [sp, #16]
 8007072:	a816      	add	r0, sp, #88	; 0x58
 8007074:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007078:	9102      	str	r1, [sp, #8]
 800707a:	9105      	str	r1, [sp, #20]
 800707c:	9306      	str	r3, [sp, #24]
 800707e:	f001 fb9b 	bl	80087b8 <__retarget_lock_init_recursive>
 8007082:	462a      	mov	r2, r5
 8007084:	463b      	mov	r3, r7
 8007086:	4669      	mov	r1, sp
 8007088:	4630      	mov	r0, r6
 800708a:	f7ff fb83 	bl	8006794 <_vfiprintf_r>
 800708e:	1e05      	subs	r5, r0, #0
 8007090:	db07      	blt.n	80070a2 <__sbprintf+0x62>
 8007092:	4669      	mov	r1, sp
 8007094:	4630      	mov	r0, r6
 8007096:	f000 ff77 	bl	8007f88 <_fflush_r>
 800709a:	2800      	cmp	r0, #0
 800709c:	bf18      	it	ne
 800709e:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80070a2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80070a6:	9816      	ldr	r0, [sp, #88]	; 0x58
 80070a8:	065b      	lsls	r3, r3, #25
 80070aa:	bf42      	ittt	mi
 80070ac:	89a3      	ldrhmi	r3, [r4, #12]
 80070ae:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80070b2:	81a3      	strhmi	r3, [r4, #12]
 80070b4:	f001 fb81 	bl	80087ba <__retarget_lock_close_recursive>
 80070b8:	4628      	mov	r0, r5
 80070ba:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 80070be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080070c0 <__swsetup_r>:
 80070c0:	4b32      	ldr	r3, [pc, #200]	; (800718c <__swsetup_r+0xcc>)
 80070c2:	b570      	push	{r4, r5, r6, lr}
 80070c4:	681d      	ldr	r5, [r3, #0]
 80070c6:	4606      	mov	r6, r0
 80070c8:	460c      	mov	r4, r1
 80070ca:	b125      	cbz	r5, 80070d6 <__swsetup_r+0x16>
 80070cc:	69ab      	ldr	r3, [r5, #24]
 80070ce:	b913      	cbnz	r3, 80070d6 <__swsetup_r+0x16>
 80070d0:	4628      	mov	r0, r5
 80070d2:	f000 ffed 	bl	80080b0 <__sinit>
 80070d6:	4b2e      	ldr	r3, [pc, #184]	; (8007190 <__swsetup_r+0xd0>)
 80070d8:	429c      	cmp	r4, r3
 80070da:	d10f      	bne.n	80070fc <__swsetup_r+0x3c>
 80070dc:	686c      	ldr	r4, [r5, #4]
 80070de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	0715      	lsls	r5, r2, #28
 80070e6:	d42c      	bmi.n	8007142 <__swsetup_r+0x82>
 80070e8:	06d0      	lsls	r0, r2, #27
 80070ea:	d411      	bmi.n	8007110 <__swsetup_r+0x50>
 80070ec:	2209      	movs	r2, #9
 80070ee:	6032      	str	r2, [r6, #0]
 80070f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070f4:	81a3      	strh	r3, [r4, #12]
 80070f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070fa:	bd70      	pop	{r4, r5, r6, pc}
 80070fc:	4b25      	ldr	r3, [pc, #148]	; (8007194 <__swsetup_r+0xd4>)
 80070fe:	429c      	cmp	r4, r3
 8007100:	d101      	bne.n	8007106 <__swsetup_r+0x46>
 8007102:	68ac      	ldr	r4, [r5, #8]
 8007104:	e7eb      	b.n	80070de <__swsetup_r+0x1e>
 8007106:	4b24      	ldr	r3, [pc, #144]	; (8007198 <__swsetup_r+0xd8>)
 8007108:	429c      	cmp	r4, r3
 800710a:	bf08      	it	eq
 800710c:	68ec      	ldreq	r4, [r5, #12]
 800710e:	e7e6      	b.n	80070de <__swsetup_r+0x1e>
 8007110:	0751      	lsls	r1, r2, #29
 8007112:	d512      	bpl.n	800713a <__swsetup_r+0x7a>
 8007114:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007116:	b141      	cbz	r1, 800712a <__swsetup_r+0x6a>
 8007118:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800711c:	4299      	cmp	r1, r3
 800711e:	d002      	beq.n	8007126 <__swsetup_r+0x66>
 8007120:	4630      	mov	r0, r6
 8007122:	f001 f905 	bl	8008330 <_free_r>
 8007126:	2300      	movs	r3, #0
 8007128:	6363      	str	r3, [r4, #52]	; 0x34
 800712a:	89a3      	ldrh	r3, [r4, #12]
 800712c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007130:	81a3      	strh	r3, [r4, #12]
 8007132:	2300      	movs	r3, #0
 8007134:	6063      	str	r3, [r4, #4]
 8007136:	6923      	ldr	r3, [r4, #16]
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	89a3      	ldrh	r3, [r4, #12]
 800713c:	f043 0308 	orr.w	r3, r3, #8
 8007140:	81a3      	strh	r3, [r4, #12]
 8007142:	6923      	ldr	r3, [r4, #16]
 8007144:	b94b      	cbnz	r3, 800715a <__swsetup_r+0x9a>
 8007146:	89a3      	ldrh	r3, [r4, #12]
 8007148:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800714c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007150:	d003      	beq.n	800715a <__swsetup_r+0x9a>
 8007152:	4621      	mov	r1, r4
 8007154:	4630      	mov	r0, r6
 8007156:	f001 fb5f 	bl	8008818 <__smakebuf_r>
 800715a:	89a2      	ldrh	r2, [r4, #12]
 800715c:	f012 0301 	ands.w	r3, r2, #1
 8007160:	d00c      	beq.n	800717c <__swsetup_r+0xbc>
 8007162:	2300      	movs	r3, #0
 8007164:	60a3      	str	r3, [r4, #8]
 8007166:	6963      	ldr	r3, [r4, #20]
 8007168:	425b      	negs	r3, r3
 800716a:	61a3      	str	r3, [r4, #24]
 800716c:	6923      	ldr	r3, [r4, #16]
 800716e:	b953      	cbnz	r3, 8007186 <__swsetup_r+0xc6>
 8007170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007174:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007178:	d1ba      	bne.n	80070f0 <__swsetup_r+0x30>
 800717a:	bd70      	pop	{r4, r5, r6, pc}
 800717c:	0792      	lsls	r2, r2, #30
 800717e:	bf58      	it	pl
 8007180:	6963      	ldrpl	r3, [r4, #20]
 8007182:	60a3      	str	r3, [r4, #8]
 8007184:	e7f2      	b.n	800716c <__swsetup_r+0xac>
 8007186:	2000      	movs	r0, #0
 8007188:	e7f7      	b.n	800717a <__swsetup_r+0xba>
 800718a:	bf00      	nop
 800718c:	20000114 	.word	0x20000114
 8007190:	0800a770 	.word	0x0800a770
 8007194:	0800a790 	.word	0x0800a790
 8007198:	0800a750 	.word	0x0800a750

0800719c <abort>:
 800719c:	b508      	push	{r3, lr}
 800719e:	2006      	movs	r0, #6
 80071a0:	f002 fa50 	bl	8009644 <raise>
 80071a4:	2001      	movs	r0, #1
 80071a6:	f7fe f9d7 	bl	8005558 <_exit>

080071aa <quorem>:
 80071aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ae:	6903      	ldr	r3, [r0, #16]
 80071b0:	690c      	ldr	r4, [r1, #16]
 80071b2:	429c      	cmp	r4, r3
 80071b4:	4680      	mov	r8, r0
 80071b6:	f300 8082 	bgt.w	80072be <quorem+0x114>
 80071ba:	3c01      	subs	r4, #1
 80071bc:	f101 0714 	add.w	r7, r1, #20
 80071c0:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80071c4:	f100 0614 	add.w	r6, r0, #20
 80071c8:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80071cc:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80071d0:	eb06 030e 	add.w	r3, r6, lr
 80071d4:	3501      	adds	r5, #1
 80071d6:	eb07 090e 	add.w	r9, r7, lr
 80071da:	9301      	str	r3, [sp, #4]
 80071dc:	fbb0 f5f5 	udiv	r5, r0, r5
 80071e0:	b395      	cbz	r5, 8007248 <quorem+0x9e>
 80071e2:	f04f 0a00 	mov.w	sl, #0
 80071e6:	4638      	mov	r0, r7
 80071e8:	46b4      	mov	ip, r6
 80071ea:	46d3      	mov	fp, sl
 80071ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80071f0:	b293      	uxth	r3, r2
 80071f2:	fb05 a303 	mla	r3, r5, r3, sl
 80071f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	ebab 0303 	sub.w	r3, fp, r3
 8007200:	0c12      	lsrs	r2, r2, #16
 8007202:	f8bc b000 	ldrh.w	fp, [ip]
 8007206:	fb05 a202 	mla	r2, r5, r2, sl
 800720a:	fa13 f38b 	uxtah	r3, r3, fp
 800720e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007212:	fa1f fb82 	uxth.w	fp, r2
 8007216:	f8dc 2000 	ldr.w	r2, [ip]
 800721a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800721e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007222:	b29b      	uxth	r3, r3
 8007224:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007228:	4581      	cmp	r9, r0
 800722a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800722e:	f84c 3b04 	str.w	r3, [ip], #4
 8007232:	d2db      	bcs.n	80071ec <quorem+0x42>
 8007234:	f856 300e 	ldr.w	r3, [r6, lr]
 8007238:	b933      	cbnz	r3, 8007248 <quorem+0x9e>
 800723a:	9b01      	ldr	r3, [sp, #4]
 800723c:	3b04      	subs	r3, #4
 800723e:	429e      	cmp	r6, r3
 8007240:	461a      	mov	r2, r3
 8007242:	d330      	bcc.n	80072a6 <quorem+0xfc>
 8007244:	f8c8 4010 	str.w	r4, [r8, #16]
 8007248:	4640      	mov	r0, r8
 800724a:	f001 ff7c 	bl	8009146 <__mcmp>
 800724e:	2800      	cmp	r0, #0
 8007250:	db25      	blt.n	800729e <quorem+0xf4>
 8007252:	3501      	adds	r5, #1
 8007254:	4630      	mov	r0, r6
 8007256:	f04f 0e00 	mov.w	lr, #0
 800725a:	f857 2b04 	ldr.w	r2, [r7], #4
 800725e:	f8d0 c000 	ldr.w	ip, [r0]
 8007262:	b293      	uxth	r3, r2
 8007264:	ebae 0303 	sub.w	r3, lr, r3
 8007268:	0c12      	lsrs	r2, r2, #16
 800726a:	fa13 f38c 	uxtah	r3, r3, ip
 800726e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007272:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007276:	b29b      	uxth	r3, r3
 8007278:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800727c:	45b9      	cmp	r9, r7
 800727e:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007282:	f840 3b04 	str.w	r3, [r0], #4
 8007286:	d2e8      	bcs.n	800725a <quorem+0xb0>
 8007288:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800728c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007290:	b92a      	cbnz	r2, 800729e <quorem+0xf4>
 8007292:	3b04      	subs	r3, #4
 8007294:	429e      	cmp	r6, r3
 8007296:	461a      	mov	r2, r3
 8007298:	d30b      	bcc.n	80072b2 <quorem+0x108>
 800729a:	f8c8 4010 	str.w	r4, [r8, #16]
 800729e:	4628      	mov	r0, r5
 80072a0:	b003      	add	sp, #12
 80072a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a6:	6812      	ldr	r2, [r2, #0]
 80072a8:	3b04      	subs	r3, #4
 80072aa:	2a00      	cmp	r2, #0
 80072ac:	d1ca      	bne.n	8007244 <quorem+0x9a>
 80072ae:	3c01      	subs	r4, #1
 80072b0:	e7c5      	b.n	800723e <quorem+0x94>
 80072b2:	6812      	ldr	r2, [r2, #0]
 80072b4:	3b04      	subs	r3, #4
 80072b6:	2a00      	cmp	r2, #0
 80072b8:	d1ef      	bne.n	800729a <quorem+0xf0>
 80072ba:	3c01      	subs	r4, #1
 80072bc:	e7ea      	b.n	8007294 <quorem+0xea>
 80072be:	2000      	movs	r0, #0
 80072c0:	e7ee      	b.n	80072a0 <quorem+0xf6>
 80072c2:	0000      	movs	r0, r0
 80072c4:	0000      	movs	r0, r0
	...

080072c8 <_dtoa_r>:
 80072c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072cc:	ec57 6b10 	vmov	r6, r7, d0
 80072d0:	b097      	sub	sp, #92	; 0x5c
 80072d2:	e9cd 6700 	strd	r6, r7, [sp]
 80072d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80072d8:	9107      	str	r1, [sp, #28]
 80072da:	4604      	mov	r4, r0
 80072dc:	920a      	str	r2, [sp, #40]	; 0x28
 80072de:	930f      	str	r3, [sp, #60]	; 0x3c
 80072e0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80072e2:	b93e      	cbnz	r6, 80072f4 <_dtoa_r+0x2c>
 80072e4:	2010      	movs	r0, #16
 80072e6:	f001 fad7 	bl	8008898 <malloc>
 80072ea:	6260      	str	r0, [r4, #36]	; 0x24
 80072ec:	6046      	str	r6, [r0, #4]
 80072ee:	6086      	str	r6, [r0, #8]
 80072f0:	6006      	str	r6, [r0, #0]
 80072f2:	60c6      	str	r6, [r0, #12]
 80072f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072f6:	6819      	ldr	r1, [r3, #0]
 80072f8:	b151      	cbz	r1, 8007310 <_dtoa_r+0x48>
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	604a      	str	r2, [r1, #4]
 80072fe:	2301      	movs	r3, #1
 8007300:	4093      	lsls	r3, r2
 8007302:	608b      	str	r3, [r1, #8]
 8007304:	4620      	mov	r0, r4
 8007306:	f001 fd49 	bl	8008d9c <_Bfree>
 800730a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800730c:	2200      	movs	r2, #0
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	9b01      	ldr	r3, [sp, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	bfbf      	itttt	lt
 8007316:	2301      	movlt	r3, #1
 8007318:	602b      	strlt	r3, [r5, #0]
 800731a:	9b01      	ldrlt	r3, [sp, #4]
 800731c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007320:	bfb2      	itee	lt
 8007322:	9301      	strlt	r3, [sp, #4]
 8007324:	2300      	movge	r3, #0
 8007326:	602b      	strge	r3, [r5, #0]
 8007328:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800732c:	4ba8      	ldr	r3, [pc, #672]	; (80075d0 <_dtoa_r+0x308>)
 800732e:	ea33 0308 	bics.w	r3, r3, r8
 8007332:	d11b      	bne.n	800736c <_dtoa_r+0xa4>
 8007334:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007336:	f242 730f 	movw	r3, #9999	; 0x270f
 800733a:	6013      	str	r3, [r2, #0]
 800733c:	9b00      	ldr	r3, [sp, #0]
 800733e:	b923      	cbnz	r3, 800734a <_dtoa_r+0x82>
 8007340:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007344:	2800      	cmp	r0, #0
 8007346:	f000 8578 	beq.w	8007e3a <_dtoa_r+0xb72>
 800734a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800734c:	b953      	cbnz	r3, 8007364 <_dtoa_r+0x9c>
 800734e:	4ba1      	ldr	r3, [pc, #644]	; (80075d4 <_dtoa_r+0x30c>)
 8007350:	e021      	b.n	8007396 <_dtoa_r+0xce>
 8007352:	4ba1      	ldr	r3, [pc, #644]	; (80075d8 <_dtoa_r+0x310>)
 8007354:	9302      	str	r3, [sp, #8]
 8007356:	3308      	adds	r3, #8
 8007358:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800735a:	6013      	str	r3, [r2, #0]
 800735c:	9802      	ldr	r0, [sp, #8]
 800735e:	b017      	add	sp, #92	; 0x5c
 8007360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007364:	4b9b      	ldr	r3, [pc, #620]	; (80075d4 <_dtoa_r+0x30c>)
 8007366:	9302      	str	r3, [sp, #8]
 8007368:	3303      	adds	r3, #3
 800736a:	e7f5      	b.n	8007358 <_dtoa_r+0x90>
 800736c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007370:	2200      	movs	r2, #0
 8007372:	2300      	movs	r3, #0
 8007374:	4630      	mov	r0, r6
 8007376:	4639      	mov	r1, r7
 8007378:	f7f9 fbaa 	bl	8000ad0 <__aeabi_dcmpeq>
 800737c:	4681      	mov	r9, r0
 800737e:	b160      	cbz	r0, 800739a <_dtoa_r+0xd2>
 8007380:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007382:	2301      	movs	r3, #1
 8007384:	6013      	str	r3, [r2, #0]
 8007386:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007388:	2b00      	cmp	r3, #0
 800738a:	f000 8553 	beq.w	8007e34 <_dtoa_r+0xb6c>
 800738e:	4b93      	ldr	r3, [pc, #588]	; (80075dc <_dtoa_r+0x314>)
 8007390:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007392:	6013      	str	r3, [r2, #0]
 8007394:	3b01      	subs	r3, #1
 8007396:	9302      	str	r3, [sp, #8]
 8007398:	e7e0      	b.n	800735c <_dtoa_r+0x94>
 800739a:	aa14      	add	r2, sp, #80	; 0x50
 800739c:	a915      	add	r1, sp, #84	; 0x54
 800739e:	ec47 6b10 	vmov	d0, r6, r7
 80073a2:	4620      	mov	r0, r4
 80073a4:	f001 ff47 	bl	8009236 <__d2b>
 80073a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80073ac:	4682      	mov	sl, r0
 80073ae:	2d00      	cmp	r5, #0
 80073b0:	d07e      	beq.n	80074b0 <_dtoa_r+0x1e8>
 80073b2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80073b6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80073ba:	4630      	mov	r0, r6
 80073bc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80073c0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80073c4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 80073c8:	2200      	movs	r2, #0
 80073ca:	4b85      	ldr	r3, [pc, #532]	; (80075e0 <_dtoa_r+0x318>)
 80073cc:	f7f8 ff64 	bl	8000298 <__aeabi_dsub>
 80073d0:	a379      	add	r3, pc, #484	; (adr r3, 80075b8 <_dtoa_r+0x2f0>)
 80073d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d6:	f7f9 f913 	bl	8000600 <__aeabi_dmul>
 80073da:	a379      	add	r3, pc, #484	; (adr r3, 80075c0 <_dtoa_r+0x2f8>)
 80073dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e0:	f7f8 ff5c 	bl	800029c <__adddf3>
 80073e4:	4606      	mov	r6, r0
 80073e6:	4628      	mov	r0, r5
 80073e8:	460f      	mov	r7, r1
 80073ea:	f7f9 f8a3 	bl	8000534 <__aeabi_i2d>
 80073ee:	a376      	add	r3, pc, #472	; (adr r3, 80075c8 <_dtoa_r+0x300>)
 80073f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f4:	f7f9 f904 	bl	8000600 <__aeabi_dmul>
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	4630      	mov	r0, r6
 80073fe:	4639      	mov	r1, r7
 8007400:	f7f8 ff4c 	bl	800029c <__adddf3>
 8007404:	4606      	mov	r6, r0
 8007406:	460f      	mov	r7, r1
 8007408:	f7f9 fbaa 	bl	8000b60 <__aeabi_d2iz>
 800740c:	2200      	movs	r2, #0
 800740e:	4683      	mov	fp, r0
 8007410:	2300      	movs	r3, #0
 8007412:	4630      	mov	r0, r6
 8007414:	4639      	mov	r1, r7
 8007416:	f7f9 fb65 	bl	8000ae4 <__aeabi_dcmplt>
 800741a:	b158      	cbz	r0, 8007434 <_dtoa_r+0x16c>
 800741c:	4658      	mov	r0, fp
 800741e:	f7f9 f889 	bl	8000534 <__aeabi_i2d>
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	4630      	mov	r0, r6
 8007428:	4639      	mov	r1, r7
 800742a:	f7f9 fb51 	bl	8000ad0 <__aeabi_dcmpeq>
 800742e:	b908      	cbnz	r0, 8007434 <_dtoa_r+0x16c>
 8007430:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007434:	f1bb 0f16 	cmp.w	fp, #22
 8007438:	d859      	bhi.n	80074ee <_dtoa_r+0x226>
 800743a:	496a      	ldr	r1, [pc, #424]	; (80075e4 <_dtoa_r+0x31c>)
 800743c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8007440:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007444:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007448:	f7f9 fb6a 	bl	8000b20 <__aeabi_dcmpgt>
 800744c:	2800      	cmp	r0, #0
 800744e:	d050      	beq.n	80074f2 <_dtoa_r+0x22a>
 8007450:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007454:	2300      	movs	r3, #0
 8007456:	930e      	str	r3, [sp, #56]	; 0x38
 8007458:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800745a:	1b5d      	subs	r5, r3, r5
 800745c:	1e6b      	subs	r3, r5, #1
 800745e:	9306      	str	r3, [sp, #24]
 8007460:	bf45      	ittet	mi
 8007462:	f1c5 0301 	rsbmi	r3, r5, #1
 8007466:	9305      	strmi	r3, [sp, #20]
 8007468:	2300      	movpl	r3, #0
 800746a:	2300      	movmi	r3, #0
 800746c:	bf4c      	ite	mi
 800746e:	9306      	strmi	r3, [sp, #24]
 8007470:	9305      	strpl	r3, [sp, #20]
 8007472:	f1bb 0f00 	cmp.w	fp, #0
 8007476:	db3e      	blt.n	80074f6 <_dtoa_r+0x22e>
 8007478:	9b06      	ldr	r3, [sp, #24]
 800747a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800747e:	445b      	add	r3, fp
 8007480:	9306      	str	r3, [sp, #24]
 8007482:	2300      	movs	r3, #0
 8007484:	9308      	str	r3, [sp, #32]
 8007486:	9b07      	ldr	r3, [sp, #28]
 8007488:	2b09      	cmp	r3, #9
 800748a:	f200 80af 	bhi.w	80075ec <_dtoa_r+0x324>
 800748e:	2b05      	cmp	r3, #5
 8007490:	bfc4      	itt	gt
 8007492:	3b04      	subgt	r3, #4
 8007494:	9307      	strgt	r3, [sp, #28]
 8007496:	9b07      	ldr	r3, [sp, #28]
 8007498:	f1a3 0302 	sub.w	r3, r3, #2
 800749c:	bfcc      	ite	gt
 800749e:	2600      	movgt	r6, #0
 80074a0:	2601      	movle	r6, #1
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	f200 80ae 	bhi.w	8007604 <_dtoa_r+0x33c>
 80074a8:	e8df f003 	tbb	[pc, r3]
 80074ac:	772f8482 	.word	0x772f8482
 80074b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074b2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80074b4:	441d      	add	r5, r3
 80074b6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80074ba:	2b20      	cmp	r3, #32
 80074bc:	dd11      	ble.n	80074e2 <_dtoa_r+0x21a>
 80074be:	9a00      	ldr	r2, [sp, #0]
 80074c0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80074c4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80074c8:	fa22 f000 	lsr.w	r0, r2, r0
 80074cc:	fa08 f303 	lsl.w	r3, r8, r3
 80074d0:	4318      	orrs	r0, r3
 80074d2:	f7f9 f81f 	bl	8000514 <__aeabi_ui2d>
 80074d6:	2301      	movs	r3, #1
 80074d8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80074dc:	3d01      	subs	r5, #1
 80074de:	9312      	str	r3, [sp, #72]	; 0x48
 80074e0:	e772      	b.n	80073c8 <_dtoa_r+0x100>
 80074e2:	f1c3 0020 	rsb	r0, r3, #32
 80074e6:	9b00      	ldr	r3, [sp, #0]
 80074e8:	fa03 f000 	lsl.w	r0, r3, r0
 80074ec:	e7f1      	b.n	80074d2 <_dtoa_r+0x20a>
 80074ee:	2301      	movs	r3, #1
 80074f0:	e7b1      	b.n	8007456 <_dtoa_r+0x18e>
 80074f2:	900e      	str	r0, [sp, #56]	; 0x38
 80074f4:	e7b0      	b.n	8007458 <_dtoa_r+0x190>
 80074f6:	9b05      	ldr	r3, [sp, #20]
 80074f8:	eba3 030b 	sub.w	r3, r3, fp
 80074fc:	9305      	str	r3, [sp, #20]
 80074fe:	f1cb 0300 	rsb	r3, fp, #0
 8007502:	9308      	str	r3, [sp, #32]
 8007504:	2300      	movs	r3, #0
 8007506:	930b      	str	r3, [sp, #44]	; 0x2c
 8007508:	e7bd      	b.n	8007486 <_dtoa_r+0x1be>
 800750a:	2301      	movs	r3, #1
 800750c:	9309      	str	r3, [sp, #36]	; 0x24
 800750e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007510:	2b00      	cmp	r3, #0
 8007512:	dd7a      	ble.n	800760a <_dtoa_r+0x342>
 8007514:	9304      	str	r3, [sp, #16]
 8007516:	9303      	str	r3, [sp, #12]
 8007518:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800751a:	2200      	movs	r2, #0
 800751c:	606a      	str	r2, [r5, #4]
 800751e:	2104      	movs	r1, #4
 8007520:	f101 0214 	add.w	r2, r1, #20
 8007524:	429a      	cmp	r2, r3
 8007526:	d975      	bls.n	8007614 <_dtoa_r+0x34c>
 8007528:	6869      	ldr	r1, [r5, #4]
 800752a:	4620      	mov	r0, r4
 800752c:	f001 fc02 	bl	8008d34 <_Balloc>
 8007530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007532:	6028      	str	r0, [r5, #0]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	9302      	str	r3, [sp, #8]
 8007538:	9b03      	ldr	r3, [sp, #12]
 800753a:	2b0e      	cmp	r3, #14
 800753c:	f200 80e5 	bhi.w	800770a <_dtoa_r+0x442>
 8007540:	2e00      	cmp	r6, #0
 8007542:	f000 80e2 	beq.w	800770a <_dtoa_r+0x442>
 8007546:	ed9d 7b00 	vldr	d7, [sp]
 800754a:	f1bb 0f00 	cmp.w	fp, #0
 800754e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8007552:	dd74      	ble.n	800763e <_dtoa_r+0x376>
 8007554:	4a23      	ldr	r2, [pc, #140]	; (80075e4 <_dtoa_r+0x31c>)
 8007556:	f00b 030f 	and.w	r3, fp, #15
 800755a:	ea4f 162b 	mov.w	r6, fp, asr #4
 800755e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007562:	06f0      	lsls	r0, r6, #27
 8007564:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007568:	d559      	bpl.n	800761e <_dtoa_r+0x356>
 800756a:	4b1f      	ldr	r3, [pc, #124]	; (80075e8 <_dtoa_r+0x320>)
 800756c:	ec51 0b17 	vmov	r0, r1, d7
 8007570:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007574:	f7f9 f96e 	bl	8000854 <__aeabi_ddiv>
 8007578:	e9cd 0100 	strd	r0, r1, [sp]
 800757c:	f006 060f 	and.w	r6, r6, #15
 8007580:	2503      	movs	r5, #3
 8007582:	4f19      	ldr	r7, [pc, #100]	; (80075e8 <_dtoa_r+0x320>)
 8007584:	2e00      	cmp	r6, #0
 8007586:	d14c      	bne.n	8007622 <_dtoa_r+0x35a>
 8007588:	4642      	mov	r2, r8
 800758a:	464b      	mov	r3, r9
 800758c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007590:	f7f9 f960 	bl	8000854 <__aeabi_ddiv>
 8007594:	e9cd 0100 	strd	r0, r1, [sp]
 8007598:	e06a      	b.n	8007670 <_dtoa_r+0x3a8>
 800759a:	2301      	movs	r3, #1
 800759c:	9309      	str	r3, [sp, #36]	; 0x24
 800759e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075a0:	445b      	add	r3, fp
 80075a2:	9304      	str	r3, [sp, #16]
 80075a4:	3301      	adds	r3, #1
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	9303      	str	r3, [sp, #12]
 80075aa:	bfb8      	it	lt
 80075ac:	2301      	movlt	r3, #1
 80075ae:	e7b3      	b.n	8007518 <_dtoa_r+0x250>
 80075b0:	2300      	movs	r3, #0
 80075b2:	e7ab      	b.n	800750c <_dtoa_r+0x244>
 80075b4:	2300      	movs	r3, #0
 80075b6:	e7f1      	b.n	800759c <_dtoa_r+0x2d4>
 80075b8:	636f4361 	.word	0x636f4361
 80075bc:	3fd287a7 	.word	0x3fd287a7
 80075c0:	8b60c8b3 	.word	0x8b60c8b3
 80075c4:	3fc68a28 	.word	0x3fc68a28
 80075c8:	509f79fb 	.word	0x509f79fb
 80075cc:	3fd34413 	.word	0x3fd34413
 80075d0:	7ff00000 	.word	0x7ff00000
 80075d4:	0800a749 	.word	0x0800a749
 80075d8:	0800a740 	.word	0x0800a740
 80075dc:	0800a6ff 	.word	0x0800a6ff
 80075e0:	3ff80000 	.word	0x3ff80000
 80075e4:	0800a7e8 	.word	0x0800a7e8
 80075e8:	0800a7c0 	.word	0x0800a7c0
 80075ec:	2601      	movs	r6, #1
 80075ee:	2300      	movs	r3, #0
 80075f0:	9307      	str	r3, [sp, #28]
 80075f2:	9609      	str	r6, [sp, #36]	; 0x24
 80075f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075f8:	9304      	str	r3, [sp, #16]
 80075fa:	9303      	str	r3, [sp, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	2312      	movs	r3, #18
 8007600:	920a      	str	r2, [sp, #40]	; 0x28
 8007602:	e789      	b.n	8007518 <_dtoa_r+0x250>
 8007604:	2301      	movs	r3, #1
 8007606:	9309      	str	r3, [sp, #36]	; 0x24
 8007608:	e7f4      	b.n	80075f4 <_dtoa_r+0x32c>
 800760a:	2301      	movs	r3, #1
 800760c:	9304      	str	r3, [sp, #16]
 800760e:	9303      	str	r3, [sp, #12]
 8007610:	461a      	mov	r2, r3
 8007612:	e7f5      	b.n	8007600 <_dtoa_r+0x338>
 8007614:	686a      	ldr	r2, [r5, #4]
 8007616:	3201      	adds	r2, #1
 8007618:	606a      	str	r2, [r5, #4]
 800761a:	0049      	lsls	r1, r1, #1
 800761c:	e780      	b.n	8007520 <_dtoa_r+0x258>
 800761e:	2502      	movs	r5, #2
 8007620:	e7af      	b.n	8007582 <_dtoa_r+0x2ba>
 8007622:	07f1      	lsls	r1, r6, #31
 8007624:	d508      	bpl.n	8007638 <_dtoa_r+0x370>
 8007626:	4640      	mov	r0, r8
 8007628:	4649      	mov	r1, r9
 800762a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800762e:	f7f8 ffe7 	bl	8000600 <__aeabi_dmul>
 8007632:	3501      	adds	r5, #1
 8007634:	4680      	mov	r8, r0
 8007636:	4689      	mov	r9, r1
 8007638:	1076      	asrs	r6, r6, #1
 800763a:	3708      	adds	r7, #8
 800763c:	e7a2      	b.n	8007584 <_dtoa_r+0x2bc>
 800763e:	f000 809d 	beq.w	800777c <_dtoa_r+0x4b4>
 8007642:	f1cb 0600 	rsb	r6, fp, #0
 8007646:	4b9f      	ldr	r3, [pc, #636]	; (80078c4 <_dtoa_r+0x5fc>)
 8007648:	4f9f      	ldr	r7, [pc, #636]	; (80078c8 <_dtoa_r+0x600>)
 800764a:	f006 020f 	and.w	r2, r6, #15
 800764e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007656:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800765a:	f7f8 ffd1 	bl	8000600 <__aeabi_dmul>
 800765e:	e9cd 0100 	strd	r0, r1, [sp]
 8007662:	1136      	asrs	r6, r6, #4
 8007664:	2300      	movs	r3, #0
 8007666:	2502      	movs	r5, #2
 8007668:	2e00      	cmp	r6, #0
 800766a:	d17c      	bne.n	8007766 <_dtoa_r+0x49e>
 800766c:	2b00      	cmp	r3, #0
 800766e:	d191      	bne.n	8007594 <_dtoa_r+0x2cc>
 8007670:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 8084 	beq.w	8007780 <_dtoa_r+0x4b8>
 8007678:	e9dd 8900 	ldrd	r8, r9, [sp]
 800767c:	2200      	movs	r2, #0
 800767e:	4b93      	ldr	r3, [pc, #588]	; (80078cc <_dtoa_r+0x604>)
 8007680:	4640      	mov	r0, r8
 8007682:	4649      	mov	r1, r9
 8007684:	f7f9 fa2e 	bl	8000ae4 <__aeabi_dcmplt>
 8007688:	2800      	cmp	r0, #0
 800768a:	d079      	beq.n	8007780 <_dtoa_r+0x4b8>
 800768c:	9b03      	ldr	r3, [sp, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d076      	beq.n	8007780 <_dtoa_r+0x4b8>
 8007692:	9b04      	ldr	r3, [sp, #16]
 8007694:	2b00      	cmp	r3, #0
 8007696:	dd34      	ble.n	8007702 <_dtoa_r+0x43a>
 8007698:	2200      	movs	r2, #0
 800769a:	4b8d      	ldr	r3, [pc, #564]	; (80078d0 <_dtoa_r+0x608>)
 800769c:	4640      	mov	r0, r8
 800769e:	4649      	mov	r1, r9
 80076a0:	f7f8 ffae 	bl	8000600 <__aeabi_dmul>
 80076a4:	e9cd 0100 	strd	r0, r1, [sp]
 80076a8:	9e04      	ldr	r6, [sp, #16]
 80076aa:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80076ae:	3501      	adds	r5, #1
 80076b0:	4628      	mov	r0, r5
 80076b2:	f7f8 ff3f 	bl	8000534 <__aeabi_i2d>
 80076b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076ba:	f7f8 ffa1 	bl	8000600 <__aeabi_dmul>
 80076be:	2200      	movs	r2, #0
 80076c0:	4b84      	ldr	r3, [pc, #528]	; (80078d4 <_dtoa_r+0x60c>)
 80076c2:	f7f8 fdeb 	bl	800029c <__adddf3>
 80076c6:	4680      	mov	r8, r0
 80076c8:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80076cc:	2e00      	cmp	r6, #0
 80076ce:	d15a      	bne.n	8007786 <_dtoa_r+0x4be>
 80076d0:	2200      	movs	r2, #0
 80076d2:	4b81      	ldr	r3, [pc, #516]	; (80078d8 <_dtoa_r+0x610>)
 80076d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076d8:	f7f8 fdde 	bl	8000298 <__aeabi_dsub>
 80076dc:	4642      	mov	r2, r8
 80076de:	464b      	mov	r3, r9
 80076e0:	e9cd 0100 	strd	r0, r1, [sp]
 80076e4:	f7f9 fa1c 	bl	8000b20 <__aeabi_dcmpgt>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	f040 829b 	bne.w	8007c24 <_dtoa_r+0x95c>
 80076ee:	4642      	mov	r2, r8
 80076f0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80076f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076f8:	f7f9 f9f4 	bl	8000ae4 <__aeabi_dcmplt>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	f040 828f 	bne.w	8007c20 <_dtoa_r+0x958>
 8007702:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007706:	e9cd 2300 	strd	r2, r3, [sp]
 800770a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800770c:	2b00      	cmp	r3, #0
 800770e:	f2c0 8150 	blt.w	80079b2 <_dtoa_r+0x6ea>
 8007712:	f1bb 0f0e 	cmp.w	fp, #14
 8007716:	f300 814c 	bgt.w	80079b2 <_dtoa_r+0x6ea>
 800771a:	4b6a      	ldr	r3, [pc, #424]	; (80078c4 <_dtoa_r+0x5fc>)
 800771c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007720:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007726:	2b00      	cmp	r3, #0
 8007728:	f280 80da 	bge.w	80078e0 <_dtoa_r+0x618>
 800772c:	9b03      	ldr	r3, [sp, #12]
 800772e:	2b00      	cmp	r3, #0
 8007730:	f300 80d6 	bgt.w	80078e0 <_dtoa_r+0x618>
 8007734:	f040 8273 	bne.w	8007c1e <_dtoa_r+0x956>
 8007738:	2200      	movs	r2, #0
 800773a:	4b67      	ldr	r3, [pc, #412]	; (80078d8 <_dtoa_r+0x610>)
 800773c:	4640      	mov	r0, r8
 800773e:	4649      	mov	r1, r9
 8007740:	f7f8 ff5e 	bl	8000600 <__aeabi_dmul>
 8007744:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007748:	f7f9 f9e0 	bl	8000b0c <__aeabi_dcmpge>
 800774c:	9e03      	ldr	r6, [sp, #12]
 800774e:	4637      	mov	r7, r6
 8007750:	2800      	cmp	r0, #0
 8007752:	f040 824a 	bne.w	8007bea <_dtoa_r+0x922>
 8007756:	9b02      	ldr	r3, [sp, #8]
 8007758:	9a02      	ldr	r2, [sp, #8]
 800775a:	1c5d      	adds	r5, r3, #1
 800775c:	2331      	movs	r3, #49	; 0x31
 800775e:	7013      	strb	r3, [r2, #0]
 8007760:	f10b 0b01 	add.w	fp, fp, #1
 8007764:	e245      	b.n	8007bf2 <_dtoa_r+0x92a>
 8007766:	07f2      	lsls	r2, r6, #31
 8007768:	d505      	bpl.n	8007776 <_dtoa_r+0x4ae>
 800776a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800776e:	f7f8 ff47 	bl	8000600 <__aeabi_dmul>
 8007772:	3501      	adds	r5, #1
 8007774:	2301      	movs	r3, #1
 8007776:	1076      	asrs	r6, r6, #1
 8007778:	3708      	adds	r7, #8
 800777a:	e775      	b.n	8007668 <_dtoa_r+0x3a0>
 800777c:	2502      	movs	r5, #2
 800777e:	e777      	b.n	8007670 <_dtoa_r+0x3a8>
 8007780:	465f      	mov	r7, fp
 8007782:	9e03      	ldr	r6, [sp, #12]
 8007784:	e794      	b.n	80076b0 <_dtoa_r+0x3e8>
 8007786:	9a02      	ldr	r2, [sp, #8]
 8007788:	4b4e      	ldr	r3, [pc, #312]	; (80078c4 <_dtoa_r+0x5fc>)
 800778a:	4432      	add	r2, r6
 800778c:	9213      	str	r2, [sp, #76]	; 0x4c
 800778e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007790:	1e71      	subs	r1, r6, #1
 8007792:	2a00      	cmp	r2, #0
 8007794:	d048      	beq.n	8007828 <_dtoa_r+0x560>
 8007796:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800779a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779e:	2000      	movs	r0, #0
 80077a0:	494e      	ldr	r1, [pc, #312]	; (80078dc <_dtoa_r+0x614>)
 80077a2:	f7f9 f857 	bl	8000854 <__aeabi_ddiv>
 80077a6:	4642      	mov	r2, r8
 80077a8:	464b      	mov	r3, r9
 80077aa:	f7f8 fd75 	bl	8000298 <__aeabi_dsub>
 80077ae:	9d02      	ldr	r5, [sp, #8]
 80077b0:	4680      	mov	r8, r0
 80077b2:	4689      	mov	r9, r1
 80077b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077b8:	f7f9 f9d2 	bl	8000b60 <__aeabi_d2iz>
 80077bc:	4606      	mov	r6, r0
 80077be:	f7f8 feb9 	bl	8000534 <__aeabi_i2d>
 80077c2:	4602      	mov	r2, r0
 80077c4:	460b      	mov	r3, r1
 80077c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077ca:	f7f8 fd65 	bl	8000298 <__aeabi_dsub>
 80077ce:	3630      	adds	r6, #48	; 0x30
 80077d0:	f805 6b01 	strb.w	r6, [r5], #1
 80077d4:	4642      	mov	r2, r8
 80077d6:	464b      	mov	r3, r9
 80077d8:	e9cd 0100 	strd	r0, r1, [sp]
 80077dc:	f7f9 f982 	bl	8000ae4 <__aeabi_dcmplt>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	d165      	bne.n	80078b0 <_dtoa_r+0x5e8>
 80077e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077e8:	2000      	movs	r0, #0
 80077ea:	4938      	ldr	r1, [pc, #224]	; (80078cc <_dtoa_r+0x604>)
 80077ec:	f7f8 fd54 	bl	8000298 <__aeabi_dsub>
 80077f0:	4642      	mov	r2, r8
 80077f2:	464b      	mov	r3, r9
 80077f4:	f7f9 f976 	bl	8000ae4 <__aeabi_dcmplt>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	f040 80ba 	bne.w	8007972 <_dtoa_r+0x6aa>
 80077fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007800:	429d      	cmp	r5, r3
 8007802:	f43f af7e 	beq.w	8007702 <_dtoa_r+0x43a>
 8007806:	2200      	movs	r2, #0
 8007808:	4b31      	ldr	r3, [pc, #196]	; (80078d0 <_dtoa_r+0x608>)
 800780a:	4640      	mov	r0, r8
 800780c:	4649      	mov	r1, r9
 800780e:	f7f8 fef7 	bl	8000600 <__aeabi_dmul>
 8007812:	2200      	movs	r2, #0
 8007814:	4680      	mov	r8, r0
 8007816:	4689      	mov	r9, r1
 8007818:	4b2d      	ldr	r3, [pc, #180]	; (80078d0 <_dtoa_r+0x608>)
 800781a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800781e:	f7f8 feef 	bl	8000600 <__aeabi_dmul>
 8007822:	e9cd 0100 	strd	r0, r1, [sp]
 8007826:	e7c5      	b.n	80077b4 <_dtoa_r+0x4ec>
 8007828:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800782c:	4642      	mov	r2, r8
 800782e:	464b      	mov	r3, r9
 8007830:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007834:	f7f8 fee4 	bl	8000600 <__aeabi_dmul>
 8007838:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800783c:	9d02      	ldr	r5, [sp, #8]
 800783e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007842:	f7f9 f98d 	bl	8000b60 <__aeabi_d2iz>
 8007846:	4606      	mov	r6, r0
 8007848:	f7f8 fe74 	bl	8000534 <__aeabi_i2d>
 800784c:	3630      	adds	r6, #48	; 0x30
 800784e:	4602      	mov	r2, r0
 8007850:	460b      	mov	r3, r1
 8007852:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007856:	f7f8 fd1f 	bl	8000298 <__aeabi_dsub>
 800785a:	f805 6b01 	strb.w	r6, [r5], #1
 800785e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007860:	42ab      	cmp	r3, r5
 8007862:	4680      	mov	r8, r0
 8007864:	4689      	mov	r9, r1
 8007866:	f04f 0200 	mov.w	r2, #0
 800786a:	d125      	bne.n	80078b8 <_dtoa_r+0x5f0>
 800786c:	4b1b      	ldr	r3, [pc, #108]	; (80078dc <_dtoa_r+0x614>)
 800786e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007872:	f7f8 fd13 	bl	800029c <__adddf3>
 8007876:	4602      	mov	r2, r0
 8007878:	460b      	mov	r3, r1
 800787a:	4640      	mov	r0, r8
 800787c:	4649      	mov	r1, r9
 800787e:	f7f9 f94f 	bl	8000b20 <__aeabi_dcmpgt>
 8007882:	2800      	cmp	r0, #0
 8007884:	d175      	bne.n	8007972 <_dtoa_r+0x6aa>
 8007886:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800788a:	2000      	movs	r0, #0
 800788c:	4913      	ldr	r1, [pc, #76]	; (80078dc <_dtoa_r+0x614>)
 800788e:	f7f8 fd03 	bl	8000298 <__aeabi_dsub>
 8007892:	4602      	mov	r2, r0
 8007894:	460b      	mov	r3, r1
 8007896:	4640      	mov	r0, r8
 8007898:	4649      	mov	r1, r9
 800789a:	f7f9 f923 	bl	8000ae4 <__aeabi_dcmplt>
 800789e:	2800      	cmp	r0, #0
 80078a0:	f43f af2f 	beq.w	8007702 <_dtoa_r+0x43a>
 80078a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80078a8:	2b30      	cmp	r3, #48	; 0x30
 80078aa:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80078ae:	d001      	beq.n	80078b4 <_dtoa_r+0x5ec>
 80078b0:	46bb      	mov	fp, r7
 80078b2:	e04d      	b.n	8007950 <_dtoa_r+0x688>
 80078b4:	4615      	mov	r5, r2
 80078b6:	e7f5      	b.n	80078a4 <_dtoa_r+0x5dc>
 80078b8:	4b05      	ldr	r3, [pc, #20]	; (80078d0 <_dtoa_r+0x608>)
 80078ba:	f7f8 fea1 	bl	8000600 <__aeabi_dmul>
 80078be:	e9cd 0100 	strd	r0, r1, [sp]
 80078c2:	e7bc      	b.n	800783e <_dtoa_r+0x576>
 80078c4:	0800a7e8 	.word	0x0800a7e8
 80078c8:	0800a7c0 	.word	0x0800a7c0
 80078cc:	3ff00000 	.word	0x3ff00000
 80078d0:	40240000 	.word	0x40240000
 80078d4:	401c0000 	.word	0x401c0000
 80078d8:	40140000 	.word	0x40140000
 80078dc:	3fe00000 	.word	0x3fe00000
 80078e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80078e4:	9d02      	ldr	r5, [sp, #8]
 80078e6:	4642      	mov	r2, r8
 80078e8:	464b      	mov	r3, r9
 80078ea:	4630      	mov	r0, r6
 80078ec:	4639      	mov	r1, r7
 80078ee:	f7f8 ffb1 	bl	8000854 <__aeabi_ddiv>
 80078f2:	f7f9 f935 	bl	8000b60 <__aeabi_d2iz>
 80078f6:	9000      	str	r0, [sp, #0]
 80078f8:	f7f8 fe1c 	bl	8000534 <__aeabi_i2d>
 80078fc:	4642      	mov	r2, r8
 80078fe:	464b      	mov	r3, r9
 8007900:	f7f8 fe7e 	bl	8000600 <__aeabi_dmul>
 8007904:	4602      	mov	r2, r0
 8007906:	460b      	mov	r3, r1
 8007908:	4630      	mov	r0, r6
 800790a:	4639      	mov	r1, r7
 800790c:	f7f8 fcc4 	bl	8000298 <__aeabi_dsub>
 8007910:	9e00      	ldr	r6, [sp, #0]
 8007912:	9f03      	ldr	r7, [sp, #12]
 8007914:	3630      	adds	r6, #48	; 0x30
 8007916:	f805 6b01 	strb.w	r6, [r5], #1
 800791a:	9e02      	ldr	r6, [sp, #8]
 800791c:	1bae      	subs	r6, r5, r6
 800791e:	42b7      	cmp	r7, r6
 8007920:	4602      	mov	r2, r0
 8007922:	460b      	mov	r3, r1
 8007924:	d138      	bne.n	8007998 <_dtoa_r+0x6d0>
 8007926:	f7f8 fcb9 	bl	800029c <__adddf3>
 800792a:	4606      	mov	r6, r0
 800792c:	460f      	mov	r7, r1
 800792e:	4602      	mov	r2, r0
 8007930:	460b      	mov	r3, r1
 8007932:	4640      	mov	r0, r8
 8007934:	4649      	mov	r1, r9
 8007936:	f7f9 f8d5 	bl	8000ae4 <__aeabi_dcmplt>
 800793a:	b9c8      	cbnz	r0, 8007970 <_dtoa_r+0x6a8>
 800793c:	4632      	mov	r2, r6
 800793e:	463b      	mov	r3, r7
 8007940:	4640      	mov	r0, r8
 8007942:	4649      	mov	r1, r9
 8007944:	f7f9 f8c4 	bl	8000ad0 <__aeabi_dcmpeq>
 8007948:	b110      	cbz	r0, 8007950 <_dtoa_r+0x688>
 800794a:	9b00      	ldr	r3, [sp, #0]
 800794c:	07db      	lsls	r3, r3, #31
 800794e:	d40f      	bmi.n	8007970 <_dtoa_r+0x6a8>
 8007950:	4651      	mov	r1, sl
 8007952:	4620      	mov	r0, r4
 8007954:	f001 fa22 	bl	8008d9c <_Bfree>
 8007958:	2300      	movs	r3, #0
 800795a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800795c:	702b      	strb	r3, [r5, #0]
 800795e:	f10b 0301 	add.w	r3, fp, #1
 8007962:	6013      	str	r3, [r2, #0]
 8007964:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007966:	2b00      	cmp	r3, #0
 8007968:	f43f acf8 	beq.w	800735c <_dtoa_r+0x94>
 800796c:	601d      	str	r5, [r3, #0]
 800796e:	e4f5      	b.n	800735c <_dtoa_r+0x94>
 8007970:	465f      	mov	r7, fp
 8007972:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007976:	2a39      	cmp	r2, #57	; 0x39
 8007978:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800797c:	d106      	bne.n	800798c <_dtoa_r+0x6c4>
 800797e:	9a02      	ldr	r2, [sp, #8]
 8007980:	429a      	cmp	r2, r3
 8007982:	d107      	bne.n	8007994 <_dtoa_r+0x6cc>
 8007984:	2330      	movs	r3, #48	; 0x30
 8007986:	7013      	strb	r3, [r2, #0]
 8007988:	3701      	adds	r7, #1
 800798a:	4613      	mov	r3, r2
 800798c:	781a      	ldrb	r2, [r3, #0]
 800798e:	3201      	adds	r2, #1
 8007990:	701a      	strb	r2, [r3, #0]
 8007992:	e78d      	b.n	80078b0 <_dtoa_r+0x5e8>
 8007994:	461d      	mov	r5, r3
 8007996:	e7ec      	b.n	8007972 <_dtoa_r+0x6aa>
 8007998:	2200      	movs	r2, #0
 800799a:	4ba4      	ldr	r3, [pc, #656]	; (8007c2c <_dtoa_r+0x964>)
 800799c:	f7f8 fe30 	bl	8000600 <__aeabi_dmul>
 80079a0:	2200      	movs	r2, #0
 80079a2:	2300      	movs	r3, #0
 80079a4:	4606      	mov	r6, r0
 80079a6:	460f      	mov	r7, r1
 80079a8:	f7f9 f892 	bl	8000ad0 <__aeabi_dcmpeq>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	d09a      	beq.n	80078e6 <_dtoa_r+0x61e>
 80079b0:	e7ce      	b.n	8007950 <_dtoa_r+0x688>
 80079b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079b4:	2a00      	cmp	r2, #0
 80079b6:	f000 80cd 	beq.w	8007b54 <_dtoa_r+0x88c>
 80079ba:	9a07      	ldr	r2, [sp, #28]
 80079bc:	2a01      	cmp	r2, #1
 80079be:	f300 80af 	bgt.w	8007b20 <_dtoa_r+0x858>
 80079c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80079c4:	2a00      	cmp	r2, #0
 80079c6:	f000 80a7 	beq.w	8007b18 <_dtoa_r+0x850>
 80079ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80079ce:	9e08      	ldr	r6, [sp, #32]
 80079d0:	9d05      	ldr	r5, [sp, #20]
 80079d2:	9a05      	ldr	r2, [sp, #20]
 80079d4:	441a      	add	r2, r3
 80079d6:	9205      	str	r2, [sp, #20]
 80079d8:	9a06      	ldr	r2, [sp, #24]
 80079da:	2101      	movs	r1, #1
 80079dc:	441a      	add	r2, r3
 80079de:	4620      	mov	r0, r4
 80079e0:	9206      	str	r2, [sp, #24]
 80079e2:	f001 fa7b 	bl	8008edc <__i2b>
 80079e6:	4607      	mov	r7, r0
 80079e8:	2d00      	cmp	r5, #0
 80079ea:	dd0c      	ble.n	8007a06 <_dtoa_r+0x73e>
 80079ec:	9b06      	ldr	r3, [sp, #24]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	dd09      	ble.n	8007a06 <_dtoa_r+0x73e>
 80079f2:	42ab      	cmp	r3, r5
 80079f4:	9a05      	ldr	r2, [sp, #20]
 80079f6:	bfa8      	it	ge
 80079f8:	462b      	movge	r3, r5
 80079fa:	1ad2      	subs	r2, r2, r3
 80079fc:	9205      	str	r2, [sp, #20]
 80079fe:	9a06      	ldr	r2, [sp, #24]
 8007a00:	1aed      	subs	r5, r5, r3
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	9306      	str	r3, [sp, #24]
 8007a06:	9b08      	ldr	r3, [sp, #32]
 8007a08:	b1f3      	cbz	r3, 8007a48 <_dtoa_r+0x780>
 8007a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f000 80a5 	beq.w	8007b5c <_dtoa_r+0x894>
 8007a12:	2e00      	cmp	r6, #0
 8007a14:	dd10      	ble.n	8007a38 <_dtoa_r+0x770>
 8007a16:	4639      	mov	r1, r7
 8007a18:	4632      	mov	r2, r6
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f001 faf4 	bl	8009008 <__pow5mult>
 8007a20:	4652      	mov	r2, sl
 8007a22:	4601      	mov	r1, r0
 8007a24:	4607      	mov	r7, r0
 8007a26:	4620      	mov	r0, r4
 8007a28:	f001 fa61 	bl	8008eee <__multiply>
 8007a2c:	4651      	mov	r1, sl
 8007a2e:	4680      	mov	r8, r0
 8007a30:	4620      	mov	r0, r4
 8007a32:	f001 f9b3 	bl	8008d9c <_Bfree>
 8007a36:	46c2      	mov	sl, r8
 8007a38:	9b08      	ldr	r3, [sp, #32]
 8007a3a:	1b9a      	subs	r2, r3, r6
 8007a3c:	d004      	beq.n	8007a48 <_dtoa_r+0x780>
 8007a3e:	4651      	mov	r1, sl
 8007a40:	4620      	mov	r0, r4
 8007a42:	f001 fae1 	bl	8009008 <__pow5mult>
 8007a46:	4682      	mov	sl, r0
 8007a48:	2101      	movs	r1, #1
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f001 fa46 	bl	8008edc <__i2b>
 8007a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	4606      	mov	r6, r0
 8007a56:	f340 8083 	ble.w	8007b60 <_dtoa_r+0x898>
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	4601      	mov	r1, r0
 8007a5e:	4620      	mov	r0, r4
 8007a60:	f001 fad2 	bl	8009008 <__pow5mult>
 8007a64:	9b07      	ldr	r3, [sp, #28]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	4606      	mov	r6, r0
 8007a6a:	dd7c      	ble.n	8007b66 <_dtoa_r+0x89e>
 8007a6c:	f04f 0800 	mov.w	r8, #0
 8007a70:	6933      	ldr	r3, [r6, #16]
 8007a72:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007a76:	6918      	ldr	r0, [r3, #16]
 8007a78:	f001 f9e2 	bl	8008e40 <__hi0bits>
 8007a7c:	f1c0 0020 	rsb	r0, r0, #32
 8007a80:	9b06      	ldr	r3, [sp, #24]
 8007a82:	4418      	add	r0, r3
 8007a84:	f010 001f 	ands.w	r0, r0, #31
 8007a88:	f000 8096 	beq.w	8007bb8 <_dtoa_r+0x8f0>
 8007a8c:	f1c0 0320 	rsb	r3, r0, #32
 8007a90:	2b04      	cmp	r3, #4
 8007a92:	f340 8087 	ble.w	8007ba4 <_dtoa_r+0x8dc>
 8007a96:	9b05      	ldr	r3, [sp, #20]
 8007a98:	f1c0 001c 	rsb	r0, r0, #28
 8007a9c:	4403      	add	r3, r0
 8007a9e:	9305      	str	r3, [sp, #20]
 8007aa0:	9b06      	ldr	r3, [sp, #24]
 8007aa2:	4405      	add	r5, r0
 8007aa4:	4403      	add	r3, r0
 8007aa6:	9306      	str	r3, [sp, #24]
 8007aa8:	9b05      	ldr	r3, [sp, #20]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	dd05      	ble.n	8007aba <_dtoa_r+0x7f2>
 8007aae:	4651      	mov	r1, sl
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f001 faf6 	bl	80090a4 <__lshift>
 8007ab8:	4682      	mov	sl, r0
 8007aba:	9b06      	ldr	r3, [sp, #24]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	dd05      	ble.n	8007acc <_dtoa_r+0x804>
 8007ac0:	4631      	mov	r1, r6
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	f001 faed 	bl	80090a4 <__lshift>
 8007aca:	4606      	mov	r6, r0
 8007acc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d074      	beq.n	8007bbc <_dtoa_r+0x8f4>
 8007ad2:	4631      	mov	r1, r6
 8007ad4:	4650      	mov	r0, sl
 8007ad6:	f001 fb36 	bl	8009146 <__mcmp>
 8007ada:	2800      	cmp	r0, #0
 8007adc:	da6e      	bge.n	8007bbc <_dtoa_r+0x8f4>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	4651      	mov	r1, sl
 8007ae2:	220a      	movs	r2, #10
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	f001 f970 	bl	8008dca <__multadd>
 8007aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aec:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007af0:	4682      	mov	sl, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f000 81a8 	beq.w	8007e48 <_dtoa_r+0xb80>
 8007af8:	2300      	movs	r3, #0
 8007afa:	4639      	mov	r1, r7
 8007afc:	220a      	movs	r2, #10
 8007afe:	4620      	mov	r0, r4
 8007b00:	f001 f963 	bl	8008dca <__multadd>
 8007b04:	9b04      	ldr	r3, [sp, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	4607      	mov	r7, r0
 8007b0a:	f300 80c8 	bgt.w	8007c9e <_dtoa_r+0x9d6>
 8007b0e:	9b07      	ldr	r3, [sp, #28]
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	f340 80c4 	ble.w	8007c9e <_dtoa_r+0x9d6>
 8007b16:	e059      	b.n	8007bcc <_dtoa_r+0x904>
 8007b18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b1a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007b1e:	e756      	b.n	80079ce <_dtoa_r+0x706>
 8007b20:	9b03      	ldr	r3, [sp, #12]
 8007b22:	1e5e      	subs	r6, r3, #1
 8007b24:	9b08      	ldr	r3, [sp, #32]
 8007b26:	42b3      	cmp	r3, r6
 8007b28:	bfbf      	itttt	lt
 8007b2a:	9b08      	ldrlt	r3, [sp, #32]
 8007b2c:	9608      	strlt	r6, [sp, #32]
 8007b2e:	1af2      	sublt	r2, r6, r3
 8007b30:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8007b32:	bfb6      	itet	lt
 8007b34:	189b      	addlt	r3, r3, r2
 8007b36:	1b9e      	subge	r6, r3, r6
 8007b38:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8007b3a:	9b03      	ldr	r3, [sp, #12]
 8007b3c:	bfb8      	it	lt
 8007b3e:	2600      	movlt	r6, #0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	bfb9      	ittee	lt
 8007b44:	9b05      	ldrlt	r3, [sp, #20]
 8007b46:	9a03      	ldrlt	r2, [sp, #12]
 8007b48:	9d05      	ldrge	r5, [sp, #20]
 8007b4a:	9b03      	ldrge	r3, [sp, #12]
 8007b4c:	bfbc      	itt	lt
 8007b4e:	1a9d      	sublt	r5, r3, r2
 8007b50:	2300      	movlt	r3, #0
 8007b52:	e73e      	b.n	80079d2 <_dtoa_r+0x70a>
 8007b54:	9e08      	ldr	r6, [sp, #32]
 8007b56:	9d05      	ldr	r5, [sp, #20]
 8007b58:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007b5a:	e745      	b.n	80079e8 <_dtoa_r+0x720>
 8007b5c:	9a08      	ldr	r2, [sp, #32]
 8007b5e:	e76e      	b.n	8007a3e <_dtoa_r+0x776>
 8007b60:	9b07      	ldr	r3, [sp, #28]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	dc19      	bgt.n	8007b9a <_dtoa_r+0x8d2>
 8007b66:	9b00      	ldr	r3, [sp, #0]
 8007b68:	b9bb      	cbnz	r3, 8007b9a <_dtoa_r+0x8d2>
 8007b6a:	9b01      	ldr	r3, [sp, #4]
 8007b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b70:	b99b      	cbnz	r3, 8007b9a <_dtoa_r+0x8d2>
 8007b72:	9b01      	ldr	r3, [sp, #4]
 8007b74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b78:	0d1b      	lsrs	r3, r3, #20
 8007b7a:	051b      	lsls	r3, r3, #20
 8007b7c:	b183      	cbz	r3, 8007ba0 <_dtoa_r+0x8d8>
 8007b7e:	9b05      	ldr	r3, [sp, #20]
 8007b80:	3301      	adds	r3, #1
 8007b82:	9305      	str	r3, [sp, #20]
 8007b84:	9b06      	ldr	r3, [sp, #24]
 8007b86:	3301      	adds	r3, #1
 8007b88:	9306      	str	r3, [sp, #24]
 8007b8a:	f04f 0801 	mov.w	r8, #1
 8007b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f47f af6d 	bne.w	8007a70 <_dtoa_r+0x7a8>
 8007b96:	2001      	movs	r0, #1
 8007b98:	e772      	b.n	8007a80 <_dtoa_r+0x7b8>
 8007b9a:	f04f 0800 	mov.w	r8, #0
 8007b9e:	e7f6      	b.n	8007b8e <_dtoa_r+0x8c6>
 8007ba0:	4698      	mov	r8, r3
 8007ba2:	e7f4      	b.n	8007b8e <_dtoa_r+0x8c6>
 8007ba4:	d080      	beq.n	8007aa8 <_dtoa_r+0x7e0>
 8007ba6:	9a05      	ldr	r2, [sp, #20]
 8007ba8:	331c      	adds	r3, #28
 8007baa:	441a      	add	r2, r3
 8007bac:	9205      	str	r2, [sp, #20]
 8007bae:	9a06      	ldr	r2, [sp, #24]
 8007bb0:	441a      	add	r2, r3
 8007bb2:	441d      	add	r5, r3
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	e776      	b.n	8007aa6 <_dtoa_r+0x7de>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	e7f4      	b.n	8007ba6 <_dtoa_r+0x8de>
 8007bbc:	9b03      	ldr	r3, [sp, #12]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	dc36      	bgt.n	8007c30 <_dtoa_r+0x968>
 8007bc2:	9b07      	ldr	r3, [sp, #28]
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	dd33      	ble.n	8007c30 <_dtoa_r+0x968>
 8007bc8:	9b03      	ldr	r3, [sp, #12]
 8007bca:	9304      	str	r3, [sp, #16]
 8007bcc:	9b04      	ldr	r3, [sp, #16]
 8007bce:	b963      	cbnz	r3, 8007bea <_dtoa_r+0x922>
 8007bd0:	4631      	mov	r1, r6
 8007bd2:	2205      	movs	r2, #5
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	f001 f8f8 	bl	8008dca <__multadd>
 8007bda:	4601      	mov	r1, r0
 8007bdc:	4606      	mov	r6, r0
 8007bde:	4650      	mov	r0, sl
 8007be0:	f001 fab1 	bl	8009146 <__mcmp>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	f73f adb6 	bgt.w	8007756 <_dtoa_r+0x48e>
 8007bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bec:	9d02      	ldr	r5, [sp, #8]
 8007bee:	ea6f 0b03 	mvn.w	fp, r3
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	9303      	str	r3, [sp, #12]
 8007bf6:	4631      	mov	r1, r6
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	f001 f8cf 	bl	8008d9c <_Bfree>
 8007bfe:	2f00      	cmp	r7, #0
 8007c00:	f43f aea6 	beq.w	8007950 <_dtoa_r+0x688>
 8007c04:	9b03      	ldr	r3, [sp, #12]
 8007c06:	b12b      	cbz	r3, 8007c14 <_dtoa_r+0x94c>
 8007c08:	42bb      	cmp	r3, r7
 8007c0a:	d003      	beq.n	8007c14 <_dtoa_r+0x94c>
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f001 f8c4 	bl	8008d9c <_Bfree>
 8007c14:	4639      	mov	r1, r7
 8007c16:	4620      	mov	r0, r4
 8007c18:	f001 f8c0 	bl	8008d9c <_Bfree>
 8007c1c:	e698      	b.n	8007950 <_dtoa_r+0x688>
 8007c1e:	2600      	movs	r6, #0
 8007c20:	4637      	mov	r7, r6
 8007c22:	e7e2      	b.n	8007bea <_dtoa_r+0x922>
 8007c24:	46bb      	mov	fp, r7
 8007c26:	4637      	mov	r7, r6
 8007c28:	e595      	b.n	8007756 <_dtoa_r+0x48e>
 8007c2a:	bf00      	nop
 8007c2c:	40240000 	.word	0x40240000
 8007c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c32:	bb93      	cbnz	r3, 8007c9a <_dtoa_r+0x9d2>
 8007c34:	9b03      	ldr	r3, [sp, #12]
 8007c36:	9304      	str	r3, [sp, #16]
 8007c38:	9d02      	ldr	r5, [sp, #8]
 8007c3a:	4631      	mov	r1, r6
 8007c3c:	4650      	mov	r0, sl
 8007c3e:	f7ff fab4 	bl	80071aa <quorem>
 8007c42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007c46:	f805 9b01 	strb.w	r9, [r5], #1
 8007c4a:	9b02      	ldr	r3, [sp, #8]
 8007c4c:	9a04      	ldr	r2, [sp, #16]
 8007c4e:	1aeb      	subs	r3, r5, r3
 8007c50:	429a      	cmp	r2, r3
 8007c52:	f300 80dc 	bgt.w	8007e0e <_dtoa_r+0xb46>
 8007c56:	9b02      	ldr	r3, [sp, #8]
 8007c58:	2a01      	cmp	r2, #1
 8007c5a:	bfac      	ite	ge
 8007c5c:	189b      	addge	r3, r3, r2
 8007c5e:	3301      	addlt	r3, #1
 8007c60:	4698      	mov	r8, r3
 8007c62:	2300      	movs	r3, #0
 8007c64:	9303      	str	r3, [sp, #12]
 8007c66:	4651      	mov	r1, sl
 8007c68:	2201      	movs	r2, #1
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f001 fa1a 	bl	80090a4 <__lshift>
 8007c70:	4631      	mov	r1, r6
 8007c72:	4682      	mov	sl, r0
 8007c74:	f001 fa67 	bl	8009146 <__mcmp>
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	f300 808d 	bgt.w	8007d98 <_dtoa_r+0xad0>
 8007c7e:	d103      	bne.n	8007c88 <_dtoa_r+0x9c0>
 8007c80:	f019 0f01 	tst.w	r9, #1
 8007c84:	f040 8088 	bne.w	8007d98 <_dtoa_r+0xad0>
 8007c88:	4645      	mov	r5, r8
 8007c8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c8e:	2b30      	cmp	r3, #48	; 0x30
 8007c90:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007c94:	d1af      	bne.n	8007bf6 <_dtoa_r+0x92e>
 8007c96:	4615      	mov	r5, r2
 8007c98:	e7f7      	b.n	8007c8a <_dtoa_r+0x9c2>
 8007c9a:	9b03      	ldr	r3, [sp, #12]
 8007c9c:	9304      	str	r3, [sp, #16]
 8007c9e:	2d00      	cmp	r5, #0
 8007ca0:	dd05      	ble.n	8007cae <_dtoa_r+0x9e6>
 8007ca2:	4639      	mov	r1, r7
 8007ca4:	462a      	mov	r2, r5
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	f001 f9fc 	bl	80090a4 <__lshift>
 8007cac:	4607      	mov	r7, r0
 8007cae:	f1b8 0f00 	cmp.w	r8, #0
 8007cb2:	d04c      	beq.n	8007d4e <_dtoa_r+0xa86>
 8007cb4:	6879      	ldr	r1, [r7, #4]
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f001 f83c 	bl	8008d34 <_Balloc>
 8007cbc:	693a      	ldr	r2, [r7, #16]
 8007cbe:	3202      	adds	r2, #2
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	0092      	lsls	r2, r2, #2
 8007cc4:	f107 010c 	add.w	r1, r7, #12
 8007cc8:	300c      	adds	r0, #12
 8007cca:	f7fd fd1f 	bl	800570c <memcpy>
 8007cce:	2201      	movs	r2, #1
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f001 f9e6 	bl	80090a4 <__lshift>
 8007cd8:	9b00      	ldr	r3, [sp, #0]
 8007cda:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007cde:	9703      	str	r7, [sp, #12]
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	4607      	mov	r7, r0
 8007ce6:	9305      	str	r3, [sp, #20]
 8007ce8:	4631      	mov	r1, r6
 8007cea:	4650      	mov	r0, sl
 8007cec:	f7ff fa5d 	bl	80071aa <quorem>
 8007cf0:	9903      	ldr	r1, [sp, #12]
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007cf8:	4650      	mov	r0, sl
 8007cfa:	f001 fa24 	bl	8009146 <__mcmp>
 8007cfe:	463a      	mov	r2, r7
 8007d00:	9000      	str	r0, [sp, #0]
 8007d02:	4631      	mov	r1, r6
 8007d04:	4620      	mov	r0, r4
 8007d06:	f001 fa38 	bl	800917a <__mdiff>
 8007d0a:	68c3      	ldr	r3, [r0, #12]
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	bb03      	cbnz	r3, 8007d52 <_dtoa_r+0xa8a>
 8007d10:	4601      	mov	r1, r0
 8007d12:	9006      	str	r0, [sp, #24]
 8007d14:	4650      	mov	r0, sl
 8007d16:	f001 fa16 	bl	8009146 <__mcmp>
 8007d1a:	9a06      	ldr	r2, [sp, #24]
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	4611      	mov	r1, r2
 8007d20:	4620      	mov	r0, r4
 8007d22:	9306      	str	r3, [sp, #24]
 8007d24:	f001 f83a 	bl	8008d9c <_Bfree>
 8007d28:	9b06      	ldr	r3, [sp, #24]
 8007d2a:	b9a3      	cbnz	r3, 8007d56 <_dtoa_r+0xa8e>
 8007d2c:	9a07      	ldr	r2, [sp, #28]
 8007d2e:	b992      	cbnz	r2, 8007d56 <_dtoa_r+0xa8e>
 8007d30:	9a05      	ldr	r2, [sp, #20]
 8007d32:	b982      	cbnz	r2, 8007d56 <_dtoa_r+0xa8e>
 8007d34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007d38:	d029      	beq.n	8007d8e <_dtoa_r+0xac6>
 8007d3a:	9b00      	ldr	r3, [sp, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	dd01      	ble.n	8007d44 <_dtoa_r+0xa7c>
 8007d40:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8007d44:	f108 0501 	add.w	r5, r8, #1
 8007d48:	f888 9000 	strb.w	r9, [r8]
 8007d4c:	e753      	b.n	8007bf6 <_dtoa_r+0x92e>
 8007d4e:	4638      	mov	r0, r7
 8007d50:	e7c2      	b.n	8007cd8 <_dtoa_r+0xa10>
 8007d52:	2301      	movs	r3, #1
 8007d54:	e7e3      	b.n	8007d1e <_dtoa_r+0xa56>
 8007d56:	9a00      	ldr	r2, [sp, #0]
 8007d58:	2a00      	cmp	r2, #0
 8007d5a:	db04      	blt.n	8007d66 <_dtoa_r+0xa9e>
 8007d5c:	d125      	bne.n	8007daa <_dtoa_r+0xae2>
 8007d5e:	9a07      	ldr	r2, [sp, #28]
 8007d60:	bb1a      	cbnz	r2, 8007daa <_dtoa_r+0xae2>
 8007d62:	9a05      	ldr	r2, [sp, #20]
 8007d64:	bb0a      	cbnz	r2, 8007daa <_dtoa_r+0xae2>
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	ddec      	ble.n	8007d44 <_dtoa_r+0xa7c>
 8007d6a:	4651      	mov	r1, sl
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f001 f998 	bl	80090a4 <__lshift>
 8007d74:	4631      	mov	r1, r6
 8007d76:	4682      	mov	sl, r0
 8007d78:	f001 f9e5 	bl	8009146 <__mcmp>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	dc03      	bgt.n	8007d88 <_dtoa_r+0xac0>
 8007d80:	d1e0      	bne.n	8007d44 <_dtoa_r+0xa7c>
 8007d82:	f019 0f01 	tst.w	r9, #1
 8007d86:	d0dd      	beq.n	8007d44 <_dtoa_r+0xa7c>
 8007d88:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007d8c:	d1d8      	bne.n	8007d40 <_dtoa_r+0xa78>
 8007d8e:	2339      	movs	r3, #57	; 0x39
 8007d90:	f888 3000 	strb.w	r3, [r8]
 8007d94:	f108 0801 	add.w	r8, r8, #1
 8007d98:	4645      	mov	r5, r8
 8007d9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d9e:	2b39      	cmp	r3, #57	; 0x39
 8007da0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007da4:	d03b      	beq.n	8007e1e <_dtoa_r+0xb56>
 8007da6:	3301      	adds	r3, #1
 8007da8:	e040      	b.n	8007e2c <_dtoa_r+0xb64>
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f108 0501 	add.w	r5, r8, #1
 8007db0:	dd05      	ble.n	8007dbe <_dtoa_r+0xaf6>
 8007db2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007db6:	d0ea      	beq.n	8007d8e <_dtoa_r+0xac6>
 8007db8:	f109 0901 	add.w	r9, r9, #1
 8007dbc:	e7c4      	b.n	8007d48 <_dtoa_r+0xa80>
 8007dbe:	9b02      	ldr	r3, [sp, #8]
 8007dc0:	9a04      	ldr	r2, [sp, #16]
 8007dc2:	f805 9c01 	strb.w	r9, [r5, #-1]
 8007dc6:	1aeb      	subs	r3, r5, r3
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	46a8      	mov	r8, r5
 8007dcc:	f43f af4b 	beq.w	8007c66 <_dtoa_r+0x99e>
 8007dd0:	4651      	mov	r1, sl
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	220a      	movs	r2, #10
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	f000 fff7 	bl	8008dca <__multadd>
 8007ddc:	9b03      	ldr	r3, [sp, #12]
 8007dde:	9903      	ldr	r1, [sp, #12]
 8007de0:	42bb      	cmp	r3, r7
 8007de2:	4682      	mov	sl, r0
 8007de4:	f04f 0300 	mov.w	r3, #0
 8007de8:	f04f 020a 	mov.w	r2, #10
 8007dec:	4620      	mov	r0, r4
 8007dee:	d104      	bne.n	8007dfa <_dtoa_r+0xb32>
 8007df0:	f000 ffeb 	bl	8008dca <__multadd>
 8007df4:	9003      	str	r0, [sp, #12]
 8007df6:	4607      	mov	r7, r0
 8007df8:	e776      	b.n	8007ce8 <_dtoa_r+0xa20>
 8007dfa:	f000 ffe6 	bl	8008dca <__multadd>
 8007dfe:	2300      	movs	r3, #0
 8007e00:	9003      	str	r0, [sp, #12]
 8007e02:	220a      	movs	r2, #10
 8007e04:	4639      	mov	r1, r7
 8007e06:	4620      	mov	r0, r4
 8007e08:	f000 ffdf 	bl	8008dca <__multadd>
 8007e0c:	e7f3      	b.n	8007df6 <_dtoa_r+0xb2e>
 8007e0e:	4651      	mov	r1, sl
 8007e10:	2300      	movs	r3, #0
 8007e12:	220a      	movs	r2, #10
 8007e14:	4620      	mov	r0, r4
 8007e16:	f000 ffd8 	bl	8008dca <__multadd>
 8007e1a:	4682      	mov	sl, r0
 8007e1c:	e70d      	b.n	8007c3a <_dtoa_r+0x972>
 8007e1e:	9b02      	ldr	r3, [sp, #8]
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d105      	bne.n	8007e30 <_dtoa_r+0xb68>
 8007e24:	9a02      	ldr	r2, [sp, #8]
 8007e26:	f10b 0b01 	add.w	fp, fp, #1
 8007e2a:	2331      	movs	r3, #49	; 0x31
 8007e2c:	7013      	strb	r3, [r2, #0]
 8007e2e:	e6e2      	b.n	8007bf6 <_dtoa_r+0x92e>
 8007e30:	4615      	mov	r5, r2
 8007e32:	e7b2      	b.n	8007d9a <_dtoa_r+0xad2>
 8007e34:	4b09      	ldr	r3, [pc, #36]	; (8007e5c <_dtoa_r+0xb94>)
 8007e36:	f7ff baae 	b.w	8007396 <_dtoa_r+0xce>
 8007e3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f47f aa88 	bne.w	8007352 <_dtoa_r+0x8a>
 8007e42:	4b07      	ldr	r3, [pc, #28]	; (8007e60 <_dtoa_r+0xb98>)
 8007e44:	f7ff baa7 	b.w	8007396 <_dtoa_r+0xce>
 8007e48:	9b04      	ldr	r3, [sp, #16]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	f73f aef4 	bgt.w	8007c38 <_dtoa_r+0x970>
 8007e50:	9b07      	ldr	r3, [sp, #28]
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	f77f aef0 	ble.w	8007c38 <_dtoa_r+0x970>
 8007e58:	e6b8      	b.n	8007bcc <_dtoa_r+0x904>
 8007e5a:	bf00      	nop
 8007e5c:	0800a6fe 	.word	0x0800a6fe
 8007e60:	0800a740 	.word	0x0800a740

08007e64 <__sflush_r>:
 8007e64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e68:	b293      	uxth	r3, r2
 8007e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e6e:	4605      	mov	r5, r0
 8007e70:	0718      	lsls	r0, r3, #28
 8007e72:	460c      	mov	r4, r1
 8007e74:	d461      	bmi.n	8007f3a <__sflush_r+0xd6>
 8007e76:	684b      	ldr	r3, [r1, #4]
 8007e78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	818a      	strh	r2, [r1, #12]
 8007e80:	dc05      	bgt.n	8007e8e <__sflush_r+0x2a>
 8007e82:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	dc02      	bgt.n	8007e8e <__sflush_r+0x2a>
 8007e88:	2000      	movs	r0, #0
 8007e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e90:	2e00      	cmp	r6, #0
 8007e92:	d0f9      	beq.n	8007e88 <__sflush_r+0x24>
 8007e94:	2300      	movs	r3, #0
 8007e96:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e9a:	682f      	ldr	r7, [r5, #0]
 8007e9c:	602b      	str	r3, [r5, #0]
 8007e9e:	d037      	beq.n	8007f10 <__sflush_r+0xac>
 8007ea0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ea2:	89a3      	ldrh	r3, [r4, #12]
 8007ea4:	075a      	lsls	r2, r3, #29
 8007ea6:	d505      	bpl.n	8007eb4 <__sflush_r+0x50>
 8007ea8:	6863      	ldr	r3, [r4, #4]
 8007eaa:	1ac0      	subs	r0, r0, r3
 8007eac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007eae:	b10b      	cbz	r3, 8007eb4 <__sflush_r+0x50>
 8007eb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007eb2:	1ac0      	subs	r0, r0, r3
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007eba:	6a21      	ldr	r1, [r4, #32]
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	47b0      	blx	r6
 8007ec0:	1c43      	adds	r3, r0, #1
 8007ec2:	89a3      	ldrh	r3, [r4, #12]
 8007ec4:	d106      	bne.n	8007ed4 <__sflush_r+0x70>
 8007ec6:	6829      	ldr	r1, [r5, #0]
 8007ec8:	291d      	cmp	r1, #29
 8007eca:	d84f      	bhi.n	8007f6c <__sflush_r+0x108>
 8007ecc:	4a2d      	ldr	r2, [pc, #180]	; (8007f84 <__sflush_r+0x120>)
 8007ece:	40ca      	lsrs	r2, r1
 8007ed0:	07d6      	lsls	r6, r2, #31
 8007ed2:	d54b      	bpl.n	8007f6c <__sflush_r+0x108>
 8007ed4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ed8:	b21b      	sxth	r3, r3
 8007eda:	2200      	movs	r2, #0
 8007edc:	6062      	str	r2, [r4, #4]
 8007ede:	04d9      	lsls	r1, r3, #19
 8007ee0:	6922      	ldr	r2, [r4, #16]
 8007ee2:	81a3      	strh	r3, [r4, #12]
 8007ee4:	6022      	str	r2, [r4, #0]
 8007ee6:	d504      	bpl.n	8007ef2 <__sflush_r+0x8e>
 8007ee8:	1c42      	adds	r2, r0, #1
 8007eea:	d101      	bne.n	8007ef0 <__sflush_r+0x8c>
 8007eec:	682b      	ldr	r3, [r5, #0]
 8007eee:	b903      	cbnz	r3, 8007ef2 <__sflush_r+0x8e>
 8007ef0:	6560      	str	r0, [r4, #84]	; 0x54
 8007ef2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ef4:	602f      	str	r7, [r5, #0]
 8007ef6:	2900      	cmp	r1, #0
 8007ef8:	d0c6      	beq.n	8007e88 <__sflush_r+0x24>
 8007efa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007efe:	4299      	cmp	r1, r3
 8007f00:	d002      	beq.n	8007f08 <__sflush_r+0xa4>
 8007f02:	4628      	mov	r0, r5
 8007f04:	f000 fa14 	bl	8008330 <_free_r>
 8007f08:	2000      	movs	r0, #0
 8007f0a:	6360      	str	r0, [r4, #52]	; 0x34
 8007f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f10:	6a21      	ldr	r1, [r4, #32]
 8007f12:	2301      	movs	r3, #1
 8007f14:	4628      	mov	r0, r5
 8007f16:	47b0      	blx	r6
 8007f18:	1c41      	adds	r1, r0, #1
 8007f1a:	d1c2      	bne.n	8007ea2 <__sflush_r+0x3e>
 8007f1c:	682b      	ldr	r3, [r5, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d0bf      	beq.n	8007ea2 <__sflush_r+0x3e>
 8007f22:	2b1d      	cmp	r3, #29
 8007f24:	d001      	beq.n	8007f2a <__sflush_r+0xc6>
 8007f26:	2b16      	cmp	r3, #22
 8007f28:	d101      	bne.n	8007f2e <__sflush_r+0xca>
 8007f2a:	602f      	str	r7, [r5, #0]
 8007f2c:	e7ac      	b.n	8007e88 <__sflush_r+0x24>
 8007f2e:	89a3      	ldrh	r3, [r4, #12]
 8007f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f34:	81a3      	strh	r3, [r4, #12]
 8007f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f3a:	690f      	ldr	r7, [r1, #16]
 8007f3c:	2f00      	cmp	r7, #0
 8007f3e:	d0a3      	beq.n	8007e88 <__sflush_r+0x24>
 8007f40:	079b      	lsls	r3, r3, #30
 8007f42:	680e      	ldr	r6, [r1, #0]
 8007f44:	bf08      	it	eq
 8007f46:	694b      	ldreq	r3, [r1, #20]
 8007f48:	600f      	str	r7, [r1, #0]
 8007f4a:	bf18      	it	ne
 8007f4c:	2300      	movne	r3, #0
 8007f4e:	eba6 0807 	sub.w	r8, r6, r7
 8007f52:	608b      	str	r3, [r1, #8]
 8007f54:	f1b8 0f00 	cmp.w	r8, #0
 8007f58:	dd96      	ble.n	8007e88 <__sflush_r+0x24>
 8007f5a:	4643      	mov	r3, r8
 8007f5c:	463a      	mov	r2, r7
 8007f5e:	6a21      	ldr	r1, [r4, #32]
 8007f60:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f62:	4628      	mov	r0, r5
 8007f64:	47b0      	blx	r6
 8007f66:	2800      	cmp	r0, #0
 8007f68:	dc07      	bgt.n	8007f7a <__sflush_r+0x116>
 8007f6a:	89a3      	ldrh	r3, [r4, #12]
 8007f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f70:	81a3      	strh	r3, [r4, #12]
 8007f72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f7a:	4407      	add	r7, r0
 8007f7c:	eba8 0800 	sub.w	r8, r8, r0
 8007f80:	e7e8      	b.n	8007f54 <__sflush_r+0xf0>
 8007f82:	bf00      	nop
 8007f84:	20400001 	.word	0x20400001

08007f88 <_fflush_r>:
 8007f88:	b538      	push	{r3, r4, r5, lr}
 8007f8a:	690b      	ldr	r3, [r1, #16]
 8007f8c:	4605      	mov	r5, r0
 8007f8e:	460c      	mov	r4, r1
 8007f90:	b913      	cbnz	r3, 8007f98 <_fflush_r+0x10>
 8007f92:	2500      	movs	r5, #0
 8007f94:	4628      	mov	r0, r5
 8007f96:	bd38      	pop	{r3, r4, r5, pc}
 8007f98:	b118      	cbz	r0, 8007fa2 <_fflush_r+0x1a>
 8007f9a:	6983      	ldr	r3, [r0, #24]
 8007f9c:	b90b      	cbnz	r3, 8007fa2 <_fflush_r+0x1a>
 8007f9e:	f000 f887 	bl	80080b0 <__sinit>
 8007fa2:	4b14      	ldr	r3, [pc, #80]	; (8007ff4 <_fflush_r+0x6c>)
 8007fa4:	429c      	cmp	r4, r3
 8007fa6:	d11b      	bne.n	8007fe0 <_fflush_r+0x58>
 8007fa8:	686c      	ldr	r4, [r5, #4]
 8007faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d0ef      	beq.n	8007f92 <_fflush_r+0xa>
 8007fb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007fb4:	07d0      	lsls	r0, r2, #31
 8007fb6:	d404      	bmi.n	8007fc2 <_fflush_r+0x3a>
 8007fb8:	0599      	lsls	r1, r3, #22
 8007fba:	d402      	bmi.n	8007fc2 <_fflush_r+0x3a>
 8007fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fbe:	f000 fbfd 	bl	80087bc <__retarget_lock_acquire_recursive>
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	4621      	mov	r1, r4
 8007fc6:	f7ff ff4d 	bl	8007e64 <__sflush_r>
 8007fca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fcc:	07da      	lsls	r2, r3, #31
 8007fce:	4605      	mov	r5, r0
 8007fd0:	d4e0      	bmi.n	8007f94 <_fflush_r+0xc>
 8007fd2:	89a3      	ldrh	r3, [r4, #12]
 8007fd4:	059b      	lsls	r3, r3, #22
 8007fd6:	d4dd      	bmi.n	8007f94 <_fflush_r+0xc>
 8007fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fda:	f000 fbf0 	bl	80087be <__retarget_lock_release_recursive>
 8007fde:	e7d9      	b.n	8007f94 <_fflush_r+0xc>
 8007fe0:	4b05      	ldr	r3, [pc, #20]	; (8007ff8 <_fflush_r+0x70>)
 8007fe2:	429c      	cmp	r4, r3
 8007fe4:	d101      	bne.n	8007fea <_fflush_r+0x62>
 8007fe6:	68ac      	ldr	r4, [r5, #8]
 8007fe8:	e7df      	b.n	8007faa <_fflush_r+0x22>
 8007fea:	4b04      	ldr	r3, [pc, #16]	; (8007ffc <_fflush_r+0x74>)
 8007fec:	429c      	cmp	r4, r3
 8007fee:	bf08      	it	eq
 8007ff0:	68ec      	ldreq	r4, [r5, #12]
 8007ff2:	e7da      	b.n	8007faa <_fflush_r+0x22>
 8007ff4:	0800a770 	.word	0x0800a770
 8007ff8:	0800a790 	.word	0x0800a790
 8007ffc:	0800a750 	.word	0x0800a750

08008000 <_cleanup_r>:
 8008000:	4901      	ldr	r1, [pc, #4]	; (8008008 <_cleanup_r+0x8>)
 8008002:	f000 bb9f 	b.w	8008744 <_fwalk_reent>
 8008006:	bf00      	nop
 8008008:	080099c1 	.word	0x080099c1

0800800c <std.isra.0>:
 800800c:	2300      	movs	r3, #0
 800800e:	b510      	push	{r4, lr}
 8008010:	4604      	mov	r4, r0
 8008012:	6003      	str	r3, [r0, #0]
 8008014:	6043      	str	r3, [r0, #4]
 8008016:	6083      	str	r3, [r0, #8]
 8008018:	8181      	strh	r1, [r0, #12]
 800801a:	6643      	str	r3, [r0, #100]	; 0x64
 800801c:	81c2      	strh	r2, [r0, #14]
 800801e:	6103      	str	r3, [r0, #16]
 8008020:	6143      	str	r3, [r0, #20]
 8008022:	6183      	str	r3, [r0, #24]
 8008024:	4619      	mov	r1, r3
 8008026:	2208      	movs	r2, #8
 8008028:	305c      	adds	r0, #92	; 0x5c
 800802a:	f7fd fb7a 	bl	8005722 <memset>
 800802e:	4b05      	ldr	r3, [pc, #20]	; (8008044 <std.isra.0+0x38>)
 8008030:	6263      	str	r3, [r4, #36]	; 0x24
 8008032:	4b05      	ldr	r3, [pc, #20]	; (8008048 <std.isra.0+0x3c>)
 8008034:	62a3      	str	r3, [r4, #40]	; 0x28
 8008036:	4b05      	ldr	r3, [pc, #20]	; (800804c <std.isra.0+0x40>)
 8008038:	62e3      	str	r3, [r4, #44]	; 0x2c
 800803a:	4b05      	ldr	r3, [pc, #20]	; (8008050 <std.isra.0+0x44>)
 800803c:	6224      	str	r4, [r4, #32]
 800803e:	6323      	str	r3, [r4, #48]	; 0x30
 8008040:	bd10      	pop	{r4, pc}
 8008042:	bf00      	nop
 8008044:	0800967d 	.word	0x0800967d
 8008048:	0800969f 	.word	0x0800969f
 800804c:	080096d7 	.word	0x080096d7
 8008050:	080096fb 	.word	0x080096fb

08008054 <__sfmoreglue>:
 8008054:	b570      	push	{r4, r5, r6, lr}
 8008056:	1e4a      	subs	r2, r1, #1
 8008058:	2568      	movs	r5, #104	; 0x68
 800805a:	4355      	muls	r5, r2
 800805c:	460e      	mov	r6, r1
 800805e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008062:	f000 fc21 	bl	80088a8 <_malloc_r>
 8008066:	4604      	mov	r4, r0
 8008068:	b140      	cbz	r0, 800807c <__sfmoreglue+0x28>
 800806a:	2100      	movs	r1, #0
 800806c:	e880 0042 	stmia.w	r0, {r1, r6}
 8008070:	300c      	adds	r0, #12
 8008072:	60a0      	str	r0, [r4, #8]
 8008074:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008078:	f7fd fb53 	bl	8005722 <memset>
 800807c:	4620      	mov	r0, r4
 800807e:	bd70      	pop	{r4, r5, r6, pc}

08008080 <__sfp_lock_acquire>:
 8008080:	4801      	ldr	r0, [pc, #4]	; (8008088 <__sfp_lock_acquire+0x8>)
 8008082:	f000 bb9b 	b.w	80087bc <__retarget_lock_acquire_recursive>
 8008086:	bf00      	nop
 8008088:	200031f8 	.word	0x200031f8

0800808c <__sfp_lock_release>:
 800808c:	4801      	ldr	r0, [pc, #4]	; (8008094 <__sfp_lock_release+0x8>)
 800808e:	f000 bb96 	b.w	80087be <__retarget_lock_release_recursive>
 8008092:	bf00      	nop
 8008094:	200031f8 	.word	0x200031f8

08008098 <__sinit_lock_acquire>:
 8008098:	4801      	ldr	r0, [pc, #4]	; (80080a0 <__sinit_lock_acquire+0x8>)
 800809a:	f000 bb8f 	b.w	80087bc <__retarget_lock_acquire_recursive>
 800809e:	bf00      	nop
 80080a0:	200031f3 	.word	0x200031f3

080080a4 <__sinit_lock_release>:
 80080a4:	4801      	ldr	r0, [pc, #4]	; (80080ac <__sinit_lock_release+0x8>)
 80080a6:	f000 bb8a 	b.w	80087be <__retarget_lock_release_recursive>
 80080aa:	bf00      	nop
 80080ac:	200031f3 	.word	0x200031f3

080080b0 <__sinit>:
 80080b0:	b510      	push	{r4, lr}
 80080b2:	4604      	mov	r4, r0
 80080b4:	f7ff fff0 	bl	8008098 <__sinit_lock_acquire>
 80080b8:	69a3      	ldr	r3, [r4, #24]
 80080ba:	b11b      	cbz	r3, 80080c4 <__sinit+0x14>
 80080bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080c0:	f7ff bff0 	b.w	80080a4 <__sinit_lock_release>
 80080c4:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 80080c8:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 80080cc:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80080d0:	4b12      	ldr	r3, [pc, #72]	; (800811c <__sinit+0x6c>)
 80080d2:	4a13      	ldr	r2, [pc, #76]	; (8008120 <__sinit+0x70>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	62a2      	str	r2, [r4, #40]	; 0x28
 80080d8:	429c      	cmp	r4, r3
 80080da:	bf04      	itt	eq
 80080dc:	2301      	moveq	r3, #1
 80080de:	61a3      	streq	r3, [r4, #24]
 80080e0:	4620      	mov	r0, r4
 80080e2:	f000 f81f 	bl	8008124 <__sfp>
 80080e6:	6060      	str	r0, [r4, #4]
 80080e8:	4620      	mov	r0, r4
 80080ea:	f000 f81b 	bl	8008124 <__sfp>
 80080ee:	60a0      	str	r0, [r4, #8]
 80080f0:	4620      	mov	r0, r4
 80080f2:	f000 f817 	bl	8008124 <__sfp>
 80080f6:	2200      	movs	r2, #0
 80080f8:	60e0      	str	r0, [r4, #12]
 80080fa:	2104      	movs	r1, #4
 80080fc:	6860      	ldr	r0, [r4, #4]
 80080fe:	f7ff ff85 	bl	800800c <std.isra.0>
 8008102:	2201      	movs	r2, #1
 8008104:	2109      	movs	r1, #9
 8008106:	68a0      	ldr	r0, [r4, #8]
 8008108:	f7ff ff80 	bl	800800c <std.isra.0>
 800810c:	2202      	movs	r2, #2
 800810e:	2112      	movs	r1, #18
 8008110:	68e0      	ldr	r0, [r4, #12]
 8008112:	f7ff ff7b 	bl	800800c <std.isra.0>
 8008116:	2301      	movs	r3, #1
 8008118:	61a3      	str	r3, [r4, #24]
 800811a:	e7cf      	b.n	80080bc <__sinit+0xc>
 800811c:	0800a6c8 	.word	0x0800a6c8
 8008120:	08008001 	.word	0x08008001

08008124 <__sfp>:
 8008124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008126:	4607      	mov	r7, r0
 8008128:	f7ff ffaa 	bl	8008080 <__sfp_lock_acquire>
 800812c:	4b1f      	ldr	r3, [pc, #124]	; (80081ac <__sfp+0x88>)
 800812e:	681e      	ldr	r6, [r3, #0]
 8008130:	69b3      	ldr	r3, [r6, #24]
 8008132:	b913      	cbnz	r3, 800813a <__sfp+0x16>
 8008134:	4630      	mov	r0, r6
 8008136:	f7ff ffbb 	bl	80080b0 <__sinit>
 800813a:	36d8      	adds	r6, #216	; 0xd8
 800813c:	68b4      	ldr	r4, [r6, #8]
 800813e:	6873      	ldr	r3, [r6, #4]
 8008140:	3b01      	subs	r3, #1
 8008142:	d503      	bpl.n	800814c <__sfp+0x28>
 8008144:	6833      	ldr	r3, [r6, #0]
 8008146:	b133      	cbz	r3, 8008156 <__sfp+0x32>
 8008148:	6836      	ldr	r6, [r6, #0]
 800814a:	e7f7      	b.n	800813c <__sfp+0x18>
 800814c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008150:	b17d      	cbz	r5, 8008172 <__sfp+0x4e>
 8008152:	3468      	adds	r4, #104	; 0x68
 8008154:	e7f4      	b.n	8008140 <__sfp+0x1c>
 8008156:	2104      	movs	r1, #4
 8008158:	4638      	mov	r0, r7
 800815a:	f7ff ff7b 	bl	8008054 <__sfmoreglue>
 800815e:	4604      	mov	r4, r0
 8008160:	6030      	str	r0, [r6, #0]
 8008162:	2800      	cmp	r0, #0
 8008164:	d1f0      	bne.n	8008148 <__sfp+0x24>
 8008166:	f7ff ff91 	bl	800808c <__sfp_lock_release>
 800816a:	230c      	movs	r3, #12
 800816c:	603b      	str	r3, [r7, #0]
 800816e:	4620      	mov	r0, r4
 8008170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008172:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008176:	81e3      	strh	r3, [r4, #14]
 8008178:	2301      	movs	r3, #1
 800817a:	81a3      	strh	r3, [r4, #12]
 800817c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008180:	6665      	str	r5, [r4, #100]	; 0x64
 8008182:	f000 fb19 	bl	80087b8 <__retarget_lock_init_recursive>
 8008186:	f7ff ff81 	bl	800808c <__sfp_lock_release>
 800818a:	6025      	str	r5, [r4, #0]
 800818c:	60a5      	str	r5, [r4, #8]
 800818e:	6065      	str	r5, [r4, #4]
 8008190:	6125      	str	r5, [r4, #16]
 8008192:	6165      	str	r5, [r4, #20]
 8008194:	61a5      	str	r5, [r4, #24]
 8008196:	2208      	movs	r2, #8
 8008198:	4629      	mov	r1, r5
 800819a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800819e:	f7fd fac0 	bl	8005722 <memset>
 80081a2:	6365      	str	r5, [r4, #52]	; 0x34
 80081a4:	63a5      	str	r5, [r4, #56]	; 0x38
 80081a6:	64a5      	str	r5, [r4, #72]	; 0x48
 80081a8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80081aa:	e7e0      	b.n	800816e <__sfp+0x4a>
 80081ac:	0800a6c8 	.word	0x0800a6c8

080081b0 <__fputwc>:
 80081b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80081b4:	4680      	mov	r8, r0
 80081b6:	460e      	mov	r6, r1
 80081b8:	4614      	mov	r4, r2
 80081ba:	f000 fae1 	bl	8008780 <__locale_mb_cur_max>
 80081be:	2801      	cmp	r0, #1
 80081c0:	d11c      	bne.n	80081fc <__fputwc+0x4c>
 80081c2:	1e73      	subs	r3, r6, #1
 80081c4:	2bfe      	cmp	r3, #254	; 0xfe
 80081c6:	d819      	bhi.n	80081fc <__fputwc+0x4c>
 80081c8:	f88d 6004 	strb.w	r6, [sp, #4]
 80081cc:	4605      	mov	r5, r0
 80081ce:	2700      	movs	r7, #0
 80081d0:	f10d 0904 	add.w	r9, sp, #4
 80081d4:	42af      	cmp	r7, r5
 80081d6:	d020      	beq.n	800821a <__fputwc+0x6a>
 80081d8:	68a3      	ldr	r3, [r4, #8]
 80081da:	f817 1009 	ldrb.w	r1, [r7, r9]
 80081de:	3b01      	subs	r3, #1
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	60a3      	str	r3, [r4, #8]
 80081e4:	da04      	bge.n	80081f0 <__fputwc+0x40>
 80081e6:	69a2      	ldr	r2, [r4, #24]
 80081e8:	4293      	cmp	r3, r2
 80081ea:	db1a      	blt.n	8008222 <__fputwc+0x72>
 80081ec:	290a      	cmp	r1, #10
 80081ee:	d018      	beq.n	8008222 <__fputwc+0x72>
 80081f0:	6823      	ldr	r3, [r4, #0]
 80081f2:	1c5a      	adds	r2, r3, #1
 80081f4:	6022      	str	r2, [r4, #0]
 80081f6:	7019      	strb	r1, [r3, #0]
 80081f8:	3701      	adds	r7, #1
 80081fa:	e7eb      	b.n	80081d4 <__fputwc+0x24>
 80081fc:	4632      	mov	r2, r6
 80081fe:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8008202:	a901      	add	r1, sp, #4
 8008204:	4640      	mov	r0, r8
 8008206:	f001 fb55 	bl	80098b4 <_wcrtomb_r>
 800820a:	1c42      	adds	r2, r0, #1
 800820c:	4605      	mov	r5, r0
 800820e:	d1de      	bne.n	80081ce <__fputwc+0x1e>
 8008210:	89a3      	ldrh	r3, [r4, #12]
 8008212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008216:	81a3      	strh	r3, [r4, #12]
 8008218:	4606      	mov	r6, r0
 800821a:	4630      	mov	r0, r6
 800821c:	b003      	add	sp, #12
 800821e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008222:	4622      	mov	r2, r4
 8008224:	4640      	mov	r0, r8
 8008226:	f001 fae7 	bl	80097f8 <__swbuf_r>
 800822a:	1c43      	adds	r3, r0, #1
 800822c:	d1e4      	bne.n	80081f8 <__fputwc+0x48>
 800822e:	4606      	mov	r6, r0
 8008230:	e7f3      	b.n	800821a <__fputwc+0x6a>

08008232 <_fputwc_r>:
 8008232:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8008234:	07db      	lsls	r3, r3, #31
 8008236:	b570      	push	{r4, r5, r6, lr}
 8008238:	4605      	mov	r5, r0
 800823a:	460e      	mov	r6, r1
 800823c:	4614      	mov	r4, r2
 800823e:	d405      	bmi.n	800824c <_fputwc_r+0x1a>
 8008240:	8993      	ldrh	r3, [r2, #12]
 8008242:	0598      	lsls	r0, r3, #22
 8008244:	d402      	bmi.n	800824c <_fputwc_r+0x1a>
 8008246:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8008248:	f000 fab8 	bl	80087bc <__retarget_lock_acquire_recursive>
 800824c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008250:	0499      	lsls	r1, r3, #18
 8008252:	d406      	bmi.n	8008262 <_fputwc_r+0x30>
 8008254:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008258:	81a3      	strh	r3, [r4, #12]
 800825a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800825c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008260:	6663      	str	r3, [r4, #100]	; 0x64
 8008262:	4622      	mov	r2, r4
 8008264:	4628      	mov	r0, r5
 8008266:	4631      	mov	r1, r6
 8008268:	f7ff ffa2 	bl	80081b0 <__fputwc>
 800826c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800826e:	07da      	lsls	r2, r3, #31
 8008270:	4605      	mov	r5, r0
 8008272:	d405      	bmi.n	8008280 <_fputwc_r+0x4e>
 8008274:	89a3      	ldrh	r3, [r4, #12]
 8008276:	059b      	lsls	r3, r3, #22
 8008278:	d402      	bmi.n	8008280 <_fputwc_r+0x4e>
 800827a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800827c:	f000 fa9f 	bl	80087be <__retarget_lock_release_recursive>
 8008280:	4628      	mov	r0, r5
 8008282:	bd70      	pop	{r4, r5, r6, pc}

08008284 <_malloc_trim_r>:
 8008284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008288:	4f25      	ldr	r7, [pc, #148]	; (8008320 <_malloc_trim_r+0x9c>)
 800828a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800832c <_malloc_trim_r+0xa8>
 800828e:	4689      	mov	r9, r1
 8008290:	4606      	mov	r6, r0
 8008292:	f000 fd43 	bl	8008d1c <__malloc_lock>
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	685d      	ldr	r5, [r3, #4]
 800829a:	f1a8 0411 	sub.w	r4, r8, #17
 800829e:	f025 0503 	bic.w	r5, r5, #3
 80082a2:	eba4 0409 	sub.w	r4, r4, r9
 80082a6:	442c      	add	r4, r5
 80082a8:	fbb4 f4f8 	udiv	r4, r4, r8
 80082ac:	3c01      	subs	r4, #1
 80082ae:	fb08 f404 	mul.w	r4, r8, r4
 80082b2:	4544      	cmp	r4, r8
 80082b4:	da05      	bge.n	80082c2 <_malloc_trim_r+0x3e>
 80082b6:	4630      	mov	r0, r6
 80082b8:	f000 fd36 	bl	8008d28 <__malloc_unlock>
 80082bc:	2000      	movs	r0, #0
 80082be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082c2:	2100      	movs	r1, #0
 80082c4:	4630      	mov	r0, r6
 80082c6:	f001 f985 	bl	80095d4 <_sbrk_r>
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	442b      	add	r3, r5
 80082ce:	4298      	cmp	r0, r3
 80082d0:	d1f1      	bne.n	80082b6 <_malloc_trim_r+0x32>
 80082d2:	4261      	negs	r1, r4
 80082d4:	4630      	mov	r0, r6
 80082d6:	f001 f97d 	bl	80095d4 <_sbrk_r>
 80082da:	3001      	adds	r0, #1
 80082dc:	d110      	bne.n	8008300 <_malloc_trim_r+0x7c>
 80082de:	2100      	movs	r1, #0
 80082e0:	4630      	mov	r0, r6
 80082e2:	f001 f977 	bl	80095d4 <_sbrk_r>
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	1a83      	subs	r3, r0, r2
 80082ea:	2b0f      	cmp	r3, #15
 80082ec:	dde3      	ble.n	80082b6 <_malloc_trim_r+0x32>
 80082ee:	490d      	ldr	r1, [pc, #52]	; (8008324 <_malloc_trim_r+0xa0>)
 80082f0:	6809      	ldr	r1, [r1, #0]
 80082f2:	1a40      	subs	r0, r0, r1
 80082f4:	490c      	ldr	r1, [pc, #48]	; (8008328 <_malloc_trim_r+0xa4>)
 80082f6:	f043 0301 	orr.w	r3, r3, #1
 80082fa:	6008      	str	r0, [r1, #0]
 80082fc:	6053      	str	r3, [r2, #4]
 80082fe:	e7da      	b.n	80082b6 <_malloc_trim_r+0x32>
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	4a09      	ldr	r2, [pc, #36]	; (8008328 <_malloc_trim_r+0xa4>)
 8008304:	1b2d      	subs	r5, r5, r4
 8008306:	f045 0501 	orr.w	r5, r5, #1
 800830a:	605d      	str	r5, [r3, #4]
 800830c:	6813      	ldr	r3, [r2, #0]
 800830e:	4630      	mov	r0, r6
 8008310:	1b1c      	subs	r4, r3, r4
 8008312:	6014      	str	r4, [r2, #0]
 8008314:	f000 fd08 	bl	8008d28 <__malloc_unlock>
 8008318:	2001      	movs	r0, #1
 800831a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800831e:	bf00      	nop
 8008320:	20000374 	.word	0x20000374
 8008324:	2000077c 	.word	0x2000077c
 8008328:	20001dbc 	.word	0x20001dbc
 800832c:	00000080 	.word	0x00000080

08008330 <_free_r>:
 8008330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008334:	4604      	mov	r4, r0
 8008336:	4688      	mov	r8, r1
 8008338:	2900      	cmp	r1, #0
 800833a:	f000 80ab 	beq.w	8008494 <_free_r+0x164>
 800833e:	f000 fced 	bl	8008d1c <__malloc_lock>
 8008342:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8008346:	4d54      	ldr	r5, [pc, #336]	; (8008498 <_free_r+0x168>)
 8008348:	f022 0001 	bic.w	r0, r2, #1
 800834c:	f1a8 0308 	sub.w	r3, r8, #8
 8008350:	181f      	adds	r7, r3, r0
 8008352:	68a9      	ldr	r1, [r5, #8]
 8008354:	687e      	ldr	r6, [r7, #4]
 8008356:	428f      	cmp	r7, r1
 8008358:	f026 0603 	bic.w	r6, r6, #3
 800835c:	f002 0201 	and.w	r2, r2, #1
 8008360:	d11b      	bne.n	800839a <_free_r+0x6a>
 8008362:	4430      	add	r0, r6
 8008364:	b93a      	cbnz	r2, 8008376 <_free_r+0x46>
 8008366:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800836a:	1a9b      	subs	r3, r3, r2
 800836c:	4410      	add	r0, r2
 800836e:	6899      	ldr	r1, [r3, #8]
 8008370:	68da      	ldr	r2, [r3, #12]
 8008372:	60ca      	str	r2, [r1, #12]
 8008374:	6091      	str	r1, [r2, #8]
 8008376:	f040 0201 	orr.w	r2, r0, #1
 800837a:	605a      	str	r2, [r3, #4]
 800837c:	60ab      	str	r3, [r5, #8]
 800837e:	4b47      	ldr	r3, [pc, #284]	; (800849c <_free_r+0x16c>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4298      	cmp	r0, r3
 8008384:	d304      	bcc.n	8008390 <_free_r+0x60>
 8008386:	4b46      	ldr	r3, [pc, #280]	; (80084a0 <_free_r+0x170>)
 8008388:	4620      	mov	r0, r4
 800838a:	6819      	ldr	r1, [r3, #0]
 800838c:	f7ff ff7a 	bl	8008284 <_malloc_trim_r>
 8008390:	4620      	mov	r0, r4
 8008392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008396:	f000 bcc7 	b.w	8008d28 <__malloc_unlock>
 800839a:	607e      	str	r6, [r7, #4]
 800839c:	2a00      	cmp	r2, #0
 800839e:	d139      	bne.n	8008414 <_free_r+0xe4>
 80083a0:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80083a4:	1a5b      	subs	r3, r3, r1
 80083a6:	4408      	add	r0, r1
 80083a8:	6899      	ldr	r1, [r3, #8]
 80083aa:	f105 0e08 	add.w	lr, r5, #8
 80083ae:	4571      	cmp	r1, lr
 80083b0:	d032      	beq.n	8008418 <_free_r+0xe8>
 80083b2:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80083b6:	f8c1 e00c 	str.w	lr, [r1, #12]
 80083ba:	f8ce 1008 	str.w	r1, [lr, #8]
 80083be:	19b9      	adds	r1, r7, r6
 80083c0:	6849      	ldr	r1, [r1, #4]
 80083c2:	07c9      	lsls	r1, r1, #31
 80083c4:	d40a      	bmi.n	80083dc <_free_r+0xac>
 80083c6:	4430      	add	r0, r6
 80083c8:	68b9      	ldr	r1, [r7, #8]
 80083ca:	bb3a      	cbnz	r2, 800841c <_free_r+0xec>
 80083cc:	4e35      	ldr	r6, [pc, #212]	; (80084a4 <_free_r+0x174>)
 80083ce:	42b1      	cmp	r1, r6
 80083d0:	d124      	bne.n	800841c <_free_r+0xec>
 80083d2:	616b      	str	r3, [r5, #20]
 80083d4:	612b      	str	r3, [r5, #16]
 80083d6:	2201      	movs	r2, #1
 80083d8:	60d9      	str	r1, [r3, #12]
 80083da:	6099      	str	r1, [r3, #8]
 80083dc:	f040 0101 	orr.w	r1, r0, #1
 80083e0:	6059      	str	r1, [r3, #4]
 80083e2:	5018      	str	r0, [r3, r0]
 80083e4:	2a00      	cmp	r2, #0
 80083e6:	d1d3      	bne.n	8008390 <_free_r+0x60>
 80083e8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80083ec:	d21a      	bcs.n	8008424 <_free_r+0xf4>
 80083ee:	08c0      	lsrs	r0, r0, #3
 80083f0:	1081      	asrs	r1, r0, #2
 80083f2:	2201      	movs	r2, #1
 80083f4:	408a      	lsls	r2, r1
 80083f6:	6869      	ldr	r1, [r5, #4]
 80083f8:	3001      	adds	r0, #1
 80083fa:	430a      	orrs	r2, r1
 80083fc:	606a      	str	r2, [r5, #4]
 80083fe:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8008402:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8008406:	6099      	str	r1, [r3, #8]
 8008408:	3a08      	subs	r2, #8
 800840a:	60da      	str	r2, [r3, #12]
 800840c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8008410:	60cb      	str	r3, [r1, #12]
 8008412:	e7bd      	b.n	8008390 <_free_r+0x60>
 8008414:	2200      	movs	r2, #0
 8008416:	e7d2      	b.n	80083be <_free_r+0x8e>
 8008418:	2201      	movs	r2, #1
 800841a:	e7d0      	b.n	80083be <_free_r+0x8e>
 800841c:	68fe      	ldr	r6, [r7, #12]
 800841e:	60ce      	str	r6, [r1, #12]
 8008420:	60b1      	str	r1, [r6, #8]
 8008422:	e7db      	b.n	80083dc <_free_r+0xac>
 8008424:	0a42      	lsrs	r2, r0, #9
 8008426:	2a04      	cmp	r2, #4
 8008428:	d813      	bhi.n	8008452 <_free_r+0x122>
 800842a:	0982      	lsrs	r2, r0, #6
 800842c:	3238      	adds	r2, #56	; 0x38
 800842e:	1c51      	adds	r1, r2, #1
 8008430:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8008434:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8008438:	428e      	cmp	r6, r1
 800843a:	d124      	bne.n	8008486 <_free_r+0x156>
 800843c:	2001      	movs	r0, #1
 800843e:	1092      	asrs	r2, r2, #2
 8008440:	fa00 f202 	lsl.w	r2, r0, r2
 8008444:	6868      	ldr	r0, [r5, #4]
 8008446:	4302      	orrs	r2, r0
 8008448:	606a      	str	r2, [r5, #4]
 800844a:	60de      	str	r6, [r3, #12]
 800844c:	6099      	str	r1, [r3, #8]
 800844e:	60b3      	str	r3, [r6, #8]
 8008450:	e7de      	b.n	8008410 <_free_r+0xe0>
 8008452:	2a14      	cmp	r2, #20
 8008454:	d801      	bhi.n	800845a <_free_r+0x12a>
 8008456:	325b      	adds	r2, #91	; 0x5b
 8008458:	e7e9      	b.n	800842e <_free_r+0xfe>
 800845a:	2a54      	cmp	r2, #84	; 0x54
 800845c:	d802      	bhi.n	8008464 <_free_r+0x134>
 800845e:	0b02      	lsrs	r2, r0, #12
 8008460:	326e      	adds	r2, #110	; 0x6e
 8008462:	e7e4      	b.n	800842e <_free_r+0xfe>
 8008464:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008468:	d802      	bhi.n	8008470 <_free_r+0x140>
 800846a:	0bc2      	lsrs	r2, r0, #15
 800846c:	3277      	adds	r2, #119	; 0x77
 800846e:	e7de      	b.n	800842e <_free_r+0xfe>
 8008470:	f240 5154 	movw	r1, #1364	; 0x554
 8008474:	428a      	cmp	r2, r1
 8008476:	bf9a      	itte	ls
 8008478:	0c82      	lsrls	r2, r0, #18
 800847a:	327c      	addls	r2, #124	; 0x7c
 800847c:	227e      	movhi	r2, #126	; 0x7e
 800847e:	e7d6      	b.n	800842e <_free_r+0xfe>
 8008480:	6889      	ldr	r1, [r1, #8]
 8008482:	428e      	cmp	r6, r1
 8008484:	d004      	beq.n	8008490 <_free_r+0x160>
 8008486:	684a      	ldr	r2, [r1, #4]
 8008488:	f022 0203 	bic.w	r2, r2, #3
 800848c:	4290      	cmp	r0, r2
 800848e:	d3f7      	bcc.n	8008480 <_free_r+0x150>
 8008490:	68ce      	ldr	r6, [r1, #12]
 8008492:	e7da      	b.n	800844a <_free_r+0x11a>
 8008494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008498:	20000374 	.word	0x20000374
 800849c:	20000780 	.word	0x20000780
 80084a0:	20001dec 	.word	0x20001dec
 80084a4:	2000037c 	.word	0x2000037c

080084a8 <__sfvwrite_r>:
 80084a8:	6893      	ldr	r3, [r2, #8]
 80084aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ae:	4607      	mov	r7, r0
 80084b0:	460c      	mov	r4, r1
 80084b2:	4690      	mov	r8, r2
 80084b4:	b91b      	cbnz	r3, 80084be <__sfvwrite_r+0x16>
 80084b6:	2000      	movs	r0, #0
 80084b8:	b003      	add	sp, #12
 80084ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084be:	898b      	ldrh	r3, [r1, #12]
 80084c0:	0718      	lsls	r0, r3, #28
 80084c2:	d526      	bpl.n	8008512 <__sfvwrite_r+0x6a>
 80084c4:	690b      	ldr	r3, [r1, #16]
 80084c6:	b323      	cbz	r3, 8008512 <__sfvwrite_r+0x6a>
 80084c8:	89a3      	ldrh	r3, [r4, #12]
 80084ca:	f8d8 6000 	ldr.w	r6, [r8]
 80084ce:	f013 0902 	ands.w	r9, r3, #2
 80084d2:	d02d      	beq.n	8008530 <__sfvwrite_r+0x88>
 80084d4:	f04f 0a00 	mov.w	sl, #0
 80084d8:	f8df b264 	ldr.w	fp, [pc, #612]	; 8008740 <__sfvwrite_r+0x298>
 80084dc:	46d1      	mov	r9, sl
 80084de:	f1b9 0f00 	cmp.w	r9, #0
 80084e2:	d01f      	beq.n	8008524 <__sfvwrite_r+0x7c>
 80084e4:	45d9      	cmp	r9, fp
 80084e6:	464b      	mov	r3, r9
 80084e8:	4652      	mov	r2, sl
 80084ea:	bf28      	it	cs
 80084ec:	465b      	movcs	r3, fp
 80084ee:	6a21      	ldr	r1, [r4, #32]
 80084f0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80084f2:	4638      	mov	r0, r7
 80084f4:	47a8      	blx	r5
 80084f6:	2800      	cmp	r0, #0
 80084f8:	f340 8089 	ble.w	800860e <__sfvwrite_r+0x166>
 80084fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008500:	4482      	add	sl, r0
 8008502:	eba9 0900 	sub.w	r9, r9, r0
 8008506:	1a18      	subs	r0, r3, r0
 8008508:	f8c8 0008 	str.w	r0, [r8, #8]
 800850c:	2800      	cmp	r0, #0
 800850e:	d1e6      	bne.n	80084de <__sfvwrite_r+0x36>
 8008510:	e7d1      	b.n	80084b6 <__sfvwrite_r+0xe>
 8008512:	4621      	mov	r1, r4
 8008514:	4638      	mov	r0, r7
 8008516:	f7fe fdd3 	bl	80070c0 <__swsetup_r>
 800851a:	2800      	cmp	r0, #0
 800851c:	d0d4      	beq.n	80084c8 <__sfvwrite_r+0x20>
 800851e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008522:	e7c9      	b.n	80084b8 <__sfvwrite_r+0x10>
 8008524:	f8d6 a000 	ldr.w	sl, [r6]
 8008528:	f8d6 9004 	ldr.w	r9, [r6, #4]
 800852c:	3608      	adds	r6, #8
 800852e:	e7d6      	b.n	80084de <__sfvwrite_r+0x36>
 8008530:	f013 0301 	ands.w	r3, r3, #1
 8008534:	d043      	beq.n	80085be <__sfvwrite_r+0x116>
 8008536:	4648      	mov	r0, r9
 8008538:	46ca      	mov	sl, r9
 800853a:	46cb      	mov	fp, r9
 800853c:	f1bb 0f00 	cmp.w	fp, #0
 8008540:	f000 80d9 	beq.w	80086f6 <__sfvwrite_r+0x24e>
 8008544:	b950      	cbnz	r0, 800855c <__sfvwrite_r+0xb4>
 8008546:	465a      	mov	r2, fp
 8008548:	210a      	movs	r1, #10
 800854a:	4650      	mov	r0, sl
 800854c:	f7f7 fe48 	bl	80001e0 <memchr>
 8008550:	2800      	cmp	r0, #0
 8008552:	f000 80d5 	beq.w	8008700 <__sfvwrite_r+0x258>
 8008556:	3001      	adds	r0, #1
 8008558:	eba0 090a 	sub.w	r9, r0, sl
 800855c:	6820      	ldr	r0, [r4, #0]
 800855e:	6921      	ldr	r1, [r4, #16]
 8008560:	6962      	ldr	r2, [r4, #20]
 8008562:	45d9      	cmp	r9, fp
 8008564:	464b      	mov	r3, r9
 8008566:	bf28      	it	cs
 8008568:	465b      	movcs	r3, fp
 800856a:	4288      	cmp	r0, r1
 800856c:	f240 80cb 	bls.w	8008706 <__sfvwrite_r+0x25e>
 8008570:	68a5      	ldr	r5, [r4, #8]
 8008572:	4415      	add	r5, r2
 8008574:	42ab      	cmp	r3, r5
 8008576:	f340 80c6 	ble.w	8008706 <__sfvwrite_r+0x25e>
 800857a:	4651      	mov	r1, sl
 800857c:	462a      	mov	r2, r5
 800857e:	f000 fbb3 	bl	8008ce8 <memmove>
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	442b      	add	r3, r5
 8008586:	6023      	str	r3, [r4, #0]
 8008588:	4621      	mov	r1, r4
 800858a:	4638      	mov	r0, r7
 800858c:	f7ff fcfc 	bl	8007f88 <_fflush_r>
 8008590:	2800      	cmp	r0, #0
 8008592:	d13c      	bne.n	800860e <__sfvwrite_r+0x166>
 8008594:	ebb9 0905 	subs.w	r9, r9, r5
 8008598:	f040 80cf 	bne.w	800873a <__sfvwrite_r+0x292>
 800859c:	4621      	mov	r1, r4
 800859e:	4638      	mov	r0, r7
 80085a0:	f7ff fcf2 	bl	8007f88 <_fflush_r>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	d132      	bne.n	800860e <__sfvwrite_r+0x166>
 80085a8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80085ac:	44aa      	add	sl, r5
 80085ae:	ebab 0b05 	sub.w	fp, fp, r5
 80085b2:	1b5d      	subs	r5, r3, r5
 80085b4:	f8c8 5008 	str.w	r5, [r8, #8]
 80085b8:	2d00      	cmp	r5, #0
 80085ba:	d1bf      	bne.n	800853c <__sfvwrite_r+0x94>
 80085bc:	e77b      	b.n	80084b6 <__sfvwrite_r+0xe>
 80085be:	4699      	mov	r9, r3
 80085c0:	469a      	mov	sl, r3
 80085c2:	f1ba 0f00 	cmp.w	sl, #0
 80085c6:	d027      	beq.n	8008618 <__sfvwrite_r+0x170>
 80085c8:	89a2      	ldrh	r2, [r4, #12]
 80085ca:	68a5      	ldr	r5, [r4, #8]
 80085cc:	0591      	lsls	r1, r2, #22
 80085ce:	d565      	bpl.n	800869c <__sfvwrite_r+0x1f4>
 80085d0:	45aa      	cmp	sl, r5
 80085d2:	d33b      	bcc.n	800864c <__sfvwrite_r+0x1a4>
 80085d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085d8:	d036      	beq.n	8008648 <__sfvwrite_r+0x1a0>
 80085da:	6921      	ldr	r1, [r4, #16]
 80085dc:	6823      	ldr	r3, [r4, #0]
 80085de:	1a5b      	subs	r3, r3, r1
 80085e0:	9301      	str	r3, [sp, #4]
 80085e2:	6963      	ldr	r3, [r4, #20]
 80085e4:	2002      	movs	r0, #2
 80085e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80085ea:	fb93 fbf0 	sdiv	fp, r3, r0
 80085ee:	9b01      	ldr	r3, [sp, #4]
 80085f0:	1c58      	adds	r0, r3, #1
 80085f2:	4450      	add	r0, sl
 80085f4:	4583      	cmp	fp, r0
 80085f6:	bf38      	it	cc
 80085f8:	4683      	movcc	fp, r0
 80085fa:	0553      	lsls	r3, r2, #21
 80085fc:	d53e      	bpl.n	800867c <__sfvwrite_r+0x1d4>
 80085fe:	4659      	mov	r1, fp
 8008600:	4638      	mov	r0, r7
 8008602:	f000 f951 	bl	80088a8 <_malloc_r>
 8008606:	4605      	mov	r5, r0
 8008608:	b950      	cbnz	r0, 8008620 <__sfvwrite_r+0x178>
 800860a:	230c      	movs	r3, #12
 800860c:	603b      	str	r3, [r7, #0]
 800860e:	89a3      	ldrh	r3, [r4, #12]
 8008610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008614:	81a3      	strh	r3, [r4, #12]
 8008616:	e782      	b.n	800851e <__sfvwrite_r+0x76>
 8008618:	e896 0600 	ldmia.w	r6, {r9, sl}
 800861c:	3608      	adds	r6, #8
 800861e:	e7d0      	b.n	80085c2 <__sfvwrite_r+0x11a>
 8008620:	9a01      	ldr	r2, [sp, #4]
 8008622:	6921      	ldr	r1, [r4, #16]
 8008624:	f7fd f872 	bl	800570c <memcpy>
 8008628:	89a2      	ldrh	r2, [r4, #12]
 800862a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800862e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008632:	81a2      	strh	r2, [r4, #12]
 8008634:	9b01      	ldr	r3, [sp, #4]
 8008636:	6125      	str	r5, [r4, #16]
 8008638:	441d      	add	r5, r3
 800863a:	ebab 0303 	sub.w	r3, fp, r3
 800863e:	6025      	str	r5, [r4, #0]
 8008640:	f8c4 b014 	str.w	fp, [r4, #20]
 8008644:	4655      	mov	r5, sl
 8008646:	60a3      	str	r3, [r4, #8]
 8008648:	45aa      	cmp	sl, r5
 800864a:	d200      	bcs.n	800864e <__sfvwrite_r+0x1a6>
 800864c:	4655      	mov	r5, sl
 800864e:	462a      	mov	r2, r5
 8008650:	4649      	mov	r1, r9
 8008652:	6820      	ldr	r0, [r4, #0]
 8008654:	f000 fb48 	bl	8008ce8 <memmove>
 8008658:	68a3      	ldr	r3, [r4, #8]
 800865a:	1b5b      	subs	r3, r3, r5
 800865c:	60a3      	str	r3, [r4, #8]
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	441d      	add	r5, r3
 8008662:	6025      	str	r5, [r4, #0]
 8008664:	4655      	mov	r5, sl
 8008666:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800866a:	44a9      	add	r9, r5
 800866c:	ebaa 0a05 	sub.w	sl, sl, r5
 8008670:	1b5d      	subs	r5, r3, r5
 8008672:	f8c8 5008 	str.w	r5, [r8, #8]
 8008676:	2d00      	cmp	r5, #0
 8008678:	d1a3      	bne.n	80085c2 <__sfvwrite_r+0x11a>
 800867a:	e71c      	b.n	80084b6 <__sfvwrite_r+0xe>
 800867c:	465a      	mov	r2, fp
 800867e:	4638      	mov	r0, r7
 8008680:	f000 fe28 	bl	80092d4 <_realloc_r>
 8008684:	4605      	mov	r5, r0
 8008686:	2800      	cmp	r0, #0
 8008688:	d1d4      	bne.n	8008634 <__sfvwrite_r+0x18c>
 800868a:	6921      	ldr	r1, [r4, #16]
 800868c:	4638      	mov	r0, r7
 800868e:	f7ff fe4f 	bl	8008330 <_free_r>
 8008692:	89a3      	ldrh	r3, [r4, #12]
 8008694:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008698:	81a3      	strh	r3, [r4, #12]
 800869a:	e7b6      	b.n	800860a <__sfvwrite_r+0x162>
 800869c:	6820      	ldr	r0, [r4, #0]
 800869e:	6923      	ldr	r3, [r4, #16]
 80086a0:	4298      	cmp	r0, r3
 80086a2:	d802      	bhi.n	80086aa <__sfvwrite_r+0x202>
 80086a4:	6962      	ldr	r2, [r4, #20]
 80086a6:	4592      	cmp	sl, r2
 80086a8:	d215      	bcs.n	80086d6 <__sfvwrite_r+0x22e>
 80086aa:	4555      	cmp	r5, sl
 80086ac:	bf28      	it	cs
 80086ae:	4655      	movcs	r5, sl
 80086b0:	462a      	mov	r2, r5
 80086b2:	4649      	mov	r1, r9
 80086b4:	f000 fb18 	bl	8008ce8 <memmove>
 80086b8:	68a3      	ldr	r3, [r4, #8]
 80086ba:	6822      	ldr	r2, [r4, #0]
 80086bc:	1b5b      	subs	r3, r3, r5
 80086be:	442a      	add	r2, r5
 80086c0:	60a3      	str	r3, [r4, #8]
 80086c2:	6022      	str	r2, [r4, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1ce      	bne.n	8008666 <__sfvwrite_r+0x1be>
 80086c8:	4621      	mov	r1, r4
 80086ca:	4638      	mov	r0, r7
 80086cc:	f7ff fc5c 	bl	8007f88 <_fflush_r>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	d0c8      	beq.n	8008666 <__sfvwrite_r+0x1be>
 80086d4:	e79b      	b.n	800860e <__sfvwrite_r+0x166>
 80086d6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80086da:	4553      	cmp	r3, sl
 80086dc:	bf28      	it	cs
 80086de:	4653      	movcs	r3, sl
 80086e0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80086e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80086e6:	6a21      	ldr	r1, [r4, #32]
 80086e8:	4353      	muls	r3, r2
 80086ea:	4638      	mov	r0, r7
 80086ec:	464a      	mov	r2, r9
 80086ee:	47a8      	blx	r5
 80086f0:	1e05      	subs	r5, r0, #0
 80086f2:	dcb8      	bgt.n	8008666 <__sfvwrite_r+0x1be>
 80086f4:	e78b      	b.n	800860e <__sfvwrite_r+0x166>
 80086f6:	e896 0c00 	ldmia.w	r6, {sl, fp}
 80086fa:	2000      	movs	r0, #0
 80086fc:	3608      	adds	r6, #8
 80086fe:	e71d      	b.n	800853c <__sfvwrite_r+0x94>
 8008700:	f10b 0901 	add.w	r9, fp, #1
 8008704:	e72a      	b.n	800855c <__sfvwrite_r+0xb4>
 8008706:	4293      	cmp	r3, r2
 8008708:	db09      	blt.n	800871e <__sfvwrite_r+0x276>
 800870a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800870c:	6a21      	ldr	r1, [r4, #32]
 800870e:	4613      	mov	r3, r2
 8008710:	4638      	mov	r0, r7
 8008712:	4652      	mov	r2, sl
 8008714:	47a8      	blx	r5
 8008716:	1e05      	subs	r5, r0, #0
 8008718:	f73f af3c 	bgt.w	8008594 <__sfvwrite_r+0xec>
 800871c:	e777      	b.n	800860e <__sfvwrite_r+0x166>
 800871e:	461a      	mov	r2, r3
 8008720:	4651      	mov	r1, sl
 8008722:	9301      	str	r3, [sp, #4]
 8008724:	f000 fae0 	bl	8008ce8 <memmove>
 8008728:	9b01      	ldr	r3, [sp, #4]
 800872a:	68a2      	ldr	r2, [r4, #8]
 800872c:	1ad2      	subs	r2, r2, r3
 800872e:	60a2      	str	r2, [r4, #8]
 8008730:	6822      	ldr	r2, [r4, #0]
 8008732:	441a      	add	r2, r3
 8008734:	6022      	str	r2, [r4, #0]
 8008736:	461d      	mov	r5, r3
 8008738:	e72c      	b.n	8008594 <__sfvwrite_r+0xec>
 800873a:	2001      	movs	r0, #1
 800873c:	e734      	b.n	80085a8 <__sfvwrite_r+0x100>
 800873e:	bf00      	nop
 8008740:	7ffffc00 	.word	0x7ffffc00

08008744 <_fwalk_reent>:
 8008744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008748:	4680      	mov	r8, r0
 800874a:	4689      	mov	r9, r1
 800874c:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8008750:	2600      	movs	r6, #0
 8008752:	b914      	cbnz	r4, 800875a <_fwalk_reent+0x16>
 8008754:	4630      	mov	r0, r6
 8008756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800875a:	68a5      	ldr	r5, [r4, #8]
 800875c:	6867      	ldr	r7, [r4, #4]
 800875e:	3f01      	subs	r7, #1
 8008760:	d501      	bpl.n	8008766 <_fwalk_reent+0x22>
 8008762:	6824      	ldr	r4, [r4, #0]
 8008764:	e7f5      	b.n	8008752 <_fwalk_reent+0xe>
 8008766:	89ab      	ldrh	r3, [r5, #12]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d907      	bls.n	800877c <_fwalk_reent+0x38>
 800876c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008770:	3301      	adds	r3, #1
 8008772:	d003      	beq.n	800877c <_fwalk_reent+0x38>
 8008774:	4629      	mov	r1, r5
 8008776:	4640      	mov	r0, r8
 8008778:	47c8      	blx	r9
 800877a:	4306      	orrs	r6, r0
 800877c:	3568      	adds	r5, #104	; 0x68
 800877e:	e7ee      	b.n	800875e <_fwalk_reent+0x1a>

08008780 <__locale_mb_cur_max>:
 8008780:	4b04      	ldr	r3, [pc, #16]	; (8008794 <__locale_mb_cur_max+0x14>)
 8008782:	4a05      	ldr	r2, [pc, #20]	; (8008798 <__locale_mb_cur_max+0x18>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	6a1b      	ldr	r3, [r3, #32]
 8008788:	2b00      	cmp	r3, #0
 800878a:	bf08      	it	eq
 800878c:	4613      	moveq	r3, r2
 800878e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8008792:	4770      	bx	lr
 8008794:	20000114 	.word	0x20000114
 8008798:	20000208 	.word	0x20000208

0800879c <_localeconv_r>:
 800879c:	4b04      	ldr	r3, [pc, #16]	; (80087b0 <_localeconv_r+0x14>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6a18      	ldr	r0, [r3, #32]
 80087a2:	4b04      	ldr	r3, [pc, #16]	; (80087b4 <_localeconv_r+0x18>)
 80087a4:	2800      	cmp	r0, #0
 80087a6:	bf08      	it	eq
 80087a8:	4618      	moveq	r0, r3
 80087aa:	30f0      	adds	r0, #240	; 0xf0
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	20000114 	.word	0x20000114
 80087b4:	20000208 	.word	0x20000208

080087b8 <__retarget_lock_init_recursive>:
 80087b8:	4770      	bx	lr

080087ba <__retarget_lock_close_recursive>:
 80087ba:	4770      	bx	lr

080087bc <__retarget_lock_acquire_recursive>:
 80087bc:	4770      	bx	lr

080087be <__retarget_lock_release_recursive>:
 80087be:	4770      	bx	lr

080087c0 <__swhatbuf_r>:
 80087c0:	b570      	push	{r4, r5, r6, lr}
 80087c2:	460e      	mov	r6, r1
 80087c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087c8:	2900      	cmp	r1, #0
 80087ca:	b090      	sub	sp, #64	; 0x40
 80087cc:	4614      	mov	r4, r2
 80087ce:	461d      	mov	r5, r3
 80087d0:	da09      	bge.n	80087e6 <__swhatbuf_r+0x26>
 80087d2:	89b3      	ldrh	r3, [r6, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80087da:	602a      	str	r2, [r5, #0]
 80087dc:	d116      	bne.n	800880c <__swhatbuf_r+0x4c>
 80087de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087e2:	6023      	str	r3, [r4, #0]
 80087e4:	e015      	b.n	8008812 <__swhatbuf_r+0x52>
 80087e6:	aa01      	add	r2, sp, #4
 80087e8:	f001 f956 	bl	8009a98 <_fstat_r>
 80087ec:	2800      	cmp	r0, #0
 80087ee:	dbf0      	blt.n	80087d2 <__swhatbuf_r+0x12>
 80087f0:	9a02      	ldr	r2, [sp, #8]
 80087f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80087f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80087fa:	425a      	negs	r2, r3
 80087fc:	415a      	adcs	r2, r3
 80087fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008802:	602a      	str	r2, [r5, #0]
 8008804:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	e002      	b.n	8008812 <__swhatbuf_r+0x52>
 800880c:	2340      	movs	r3, #64	; 0x40
 800880e:	6023      	str	r3, [r4, #0]
 8008810:	4610      	mov	r0, r2
 8008812:	b010      	add	sp, #64	; 0x40
 8008814:	bd70      	pop	{r4, r5, r6, pc}
	...

08008818 <__smakebuf_r>:
 8008818:	898b      	ldrh	r3, [r1, #12]
 800881a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800881c:	079d      	lsls	r5, r3, #30
 800881e:	4606      	mov	r6, r0
 8008820:	460c      	mov	r4, r1
 8008822:	d507      	bpl.n	8008834 <__smakebuf_r+0x1c>
 8008824:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	6123      	str	r3, [r4, #16]
 800882c:	2301      	movs	r3, #1
 800882e:	6163      	str	r3, [r4, #20]
 8008830:	b002      	add	sp, #8
 8008832:	bd70      	pop	{r4, r5, r6, pc}
 8008834:	ab01      	add	r3, sp, #4
 8008836:	466a      	mov	r2, sp
 8008838:	f7ff ffc2 	bl	80087c0 <__swhatbuf_r>
 800883c:	9900      	ldr	r1, [sp, #0]
 800883e:	4605      	mov	r5, r0
 8008840:	4630      	mov	r0, r6
 8008842:	f000 f831 	bl	80088a8 <_malloc_r>
 8008846:	b948      	cbnz	r0, 800885c <__smakebuf_r+0x44>
 8008848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800884c:	059a      	lsls	r2, r3, #22
 800884e:	d4ef      	bmi.n	8008830 <__smakebuf_r+0x18>
 8008850:	f023 0303 	bic.w	r3, r3, #3
 8008854:	f043 0302 	orr.w	r3, r3, #2
 8008858:	81a3      	strh	r3, [r4, #12]
 800885a:	e7e3      	b.n	8008824 <__smakebuf_r+0xc>
 800885c:	4b0d      	ldr	r3, [pc, #52]	; (8008894 <__smakebuf_r+0x7c>)
 800885e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008860:	89a3      	ldrh	r3, [r4, #12]
 8008862:	6020      	str	r0, [r4, #0]
 8008864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008868:	81a3      	strh	r3, [r4, #12]
 800886a:	9b00      	ldr	r3, [sp, #0]
 800886c:	6163      	str	r3, [r4, #20]
 800886e:	9b01      	ldr	r3, [sp, #4]
 8008870:	6120      	str	r0, [r4, #16]
 8008872:	b15b      	cbz	r3, 800888c <__smakebuf_r+0x74>
 8008874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008878:	4630      	mov	r0, r6
 800887a:	f001 f91f 	bl	8009abc <_isatty_r>
 800887e:	b128      	cbz	r0, 800888c <__smakebuf_r+0x74>
 8008880:	89a3      	ldrh	r3, [r4, #12]
 8008882:	f023 0303 	bic.w	r3, r3, #3
 8008886:	f043 0301 	orr.w	r3, r3, #1
 800888a:	81a3      	strh	r3, [r4, #12]
 800888c:	89a3      	ldrh	r3, [r4, #12]
 800888e:	431d      	orrs	r5, r3
 8008890:	81a5      	strh	r5, [r4, #12]
 8008892:	e7cd      	b.n	8008830 <__smakebuf_r+0x18>
 8008894:	08008001 	.word	0x08008001

08008898 <malloc>:
 8008898:	4b02      	ldr	r3, [pc, #8]	; (80088a4 <malloc+0xc>)
 800889a:	4601      	mov	r1, r0
 800889c:	6818      	ldr	r0, [r3, #0]
 800889e:	f000 b803 	b.w	80088a8 <_malloc_r>
 80088a2:	bf00      	nop
 80088a4:	20000114 	.word	0x20000114

080088a8 <_malloc_r>:
 80088a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ac:	f101 040b 	add.w	r4, r1, #11
 80088b0:	2c16      	cmp	r4, #22
 80088b2:	4681      	mov	r9, r0
 80088b4:	d907      	bls.n	80088c6 <_malloc_r+0x1e>
 80088b6:	f034 0407 	bics.w	r4, r4, #7
 80088ba:	d505      	bpl.n	80088c8 <_malloc_r+0x20>
 80088bc:	230c      	movs	r3, #12
 80088be:	f8c9 3000 	str.w	r3, [r9]
 80088c2:	2600      	movs	r6, #0
 80088c4:	e131      	b.n	8008b2a <_malloc_r+0x282>
 80088c6:	2410      	movs	r4, #16
 80088c8:	428c      	cmp	r4, r1
 80088ca:	d3f7      	bcc.n	80088bc <_malloc_r+0x14>
 80088cc:	4648      	mov	r0, r9
 80088ce:	f000 fa25 	bl	8008d1c <__malloc_lock>
 80088d2:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80088d6:	4d9c      	ldr	r5, [pc, #624]	; (8008b48 <_malloc_r+0x2a0>)
 80088d8:	d236      	bcs.n	8008948 <_malloc_r+0xa0>
 80088da:	f104 0208 	add.w	r2, r4, #8
 80088de:	442a      	add	r2, r5
 80088e0:	f1a2 0108 	sub.w	r1, r2, #8
 80088e4:	6856      	ldr	r6, [r2, #4]
 80088e6:	428e      	cmp	r6, r1
 80088e8:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80088ec:	d102      	bne.n	80088f4 <_malloc_r+0x4c>
 80088ee:	68d6      	ldr	r6, [r2, #12]
 80088f0:	42b2      	cmp	r2, r6
 80088f2:	d010      	beq.n	8008916 <_malloc_r+0x6e>
 80088f4:	6873      	ldr	r3, [r6, #4]
 80088f6:	68f2      	ldr	r2, [r6, #12]
 80088f8:	68b1      	ldr	r1, [r6, #8]
 80088fa:	f023 0303 	bic.w	r3, r3, #3
 80088fe:	60ca      	str	r2, [r1, #12]
 8008900:	4433      	add	r3, r6
 8008902:	6091      	str	r1, [r2, #8]
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	f042 0201 	orr.w	r2, r2, #1
 800890a:	605a      	str	r2, [r3, #4]
 800890c:	4648      	mov	r0, r9
 800890e:	f000 fa0b 	bl	8008d28 <__malloc_unlock>
 8008912:	3608      	adds	r6, #8
 8008914:	e109      	b.n	8008b2a <_malloc_r+0x282>
 8008916:	3302      	adds	r3, #2
 8008918:	4a8c      	ldr	r2, [pc, #560]	; (8008b4c <_malloc_r+0x2a4>)
 800891a:	692e      	ldr	r6, [r5, #16]
 800891c:	4296      	cmp	r6, r2
 800891e:	4611      	mov	r1, r2
 8008920:	d06d      	beq.n	80089fe <_malloc_r+0x156>
 8008922:	6870      	ldr	r0, [r6, #4]
 8008924:	f020 0003 	bic.w	r0, r0, #3
 8008928:	1b07      	subs	r7, r0, r4
 800892a:	2f0f      	cmp	r7, #15
 800892c:	dd47      	ble.n	80089be <_malloc_r+0x116>
 800892e:	1933      	adds	r3, r6, r4
 8008930:	f044 0401 	orr.w	r4, r4, #1
 8008934:	6074      	str	r4, [r6, #4]
 8008936:	616b      	str	r3, [r5, #20]
 8008938:	612b      	str	r3, [r5, #16]
 800893a:	60da      	str	r2, [r3, #12]
 800893c:	609a      	str	r2, [r3, #8]
 800893e:	f047 0201 	orr.w	r2, r7, #1
 8008942:	605a      	str	r2, [r3, #4]
 8008944:	5037      	str	r7, [r6, r0]
 8008946:	e7e1      	b.n	800890c <_malloc_r+0x64>
 8008948:	0a63      	lsrs	r3, r4, #9
 800894a:	d02a      	beq.n	80089a2 <_malloc_r+0xfa>
 800894c:	2b04      	cmp	r3, #4
 800894e:	d812      	bhi.n	8008976 <_malloc_r+0xce>
 8008950:	09a3      	lsrs	r3, r4, #6
 8008952:	3338      	adds	r3, #56	; 0x38
 8008954:	1c5a      	adds	r2, r3, #1
 8008956:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800895a:	f1a2 0008 	sub.w	r0, r2, #8
 800895e:	6856      	ldr	r6, [r2, #4]
 8008960:	4286      	cmp	r6, r0
 8008962:	d006      	beq.n	8008972 <_malloc_r+0xca>
 8008964:	6872      	ldr	r2, [r6, #4]
 8008966:	f022 0203 	bic.w	r2, r2, #3
 800896a:	1b11      	subs	r1, r2, r4
 800896c:	290f      	cmp	r1, #15
 800896e:	dd1c      	ble.n	80089aa <_malloc_r+0x102>
 8008970:	3b01      	subs	r3, #1
 8008972:	3301      	adds	r3, #1
 8008974:	e7d0      	b.n	8008918 <_malloc_r+0x70>
 8008976:	2b14      	cmp	r3, #20
 8008978:	d801      	bhi.n	800897e <_malloc_r+0xd6>
 800897a:	335b      	adds	r3, #91	; 0x5b
 800897c:	e7ea      	b.n	8008954 <_malloc_r+0xac>
 800897e:	2b54      	cmp	r3, #84	; 0x54
 8008980:	d802      	bhi.n	8008988 <_malloc_r+0xe0>
 8008982:	0b23      	lsrs	r3, r4, #12
 8008984:	336e      	adds	r3, #110	; 0x6e
 8008986:	e7e5      	b.n	8008954 <_malloc_r+0xac>
 8008988:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800898c:	d802      	bhi.n	8008994 <_malloc_r+0xec>
 800898e:	0be3      	lsrs	r3, r4, #15
 8008990:	3377      	adds	r3, #119	; 0x77
 8008992:	e7df      	b.n	8008954 <_malloc_r+0xac>
 8008994:	f240 5254 	movw	r2, #1364	; 0x554
 8008998:	4293      	cmp	r3, r2
 800899a:	d804      	bhi.n	80089a6 <_malloc_r+0xfe>
 800899c:	0ca3      	lsrs	r3, r4, #18
 800899e:	337c      	adds	r3, #124	; 0x7c
 80089a0:	e7d8      	b.n	8008954 <_malloc_r+0xac>
 80089a2:	233f      	movs	r3, #63	; 0x3f
 80089a4:	e7d6      	b.n	8008954 <_malloc_r+0xac>
 80089a6:	237e      	movs	r3, #126	; 0x7e
 80089a8:	e7d4      	b.n	8008954 <_malloc_r+0xac>
 80089aa:	2900      	cmp	r1, #0
 80089ac:	68f1      	ldr	r1, [r6, #12]
 80089ae:	db04      	blt.n	80089ba <_malloc_r+0x112>
 80089b0:	68b3      	ldr	r3, [r6, #8]
 80089b2:	60d9      	str	r1, [r3, #12]
 80089b4:	608b      	str	r3, [r1, #8]
 80089b6:	18b3      	adds	r3, r6, r2
 80089b8:	e7a4      	b.n	8008904 <_malloc_r+0x5c>
 80089ba:	460e      	mov	r6, r1
 80089bc:	e7d0      	b.n	8008960 <_malloc_r+0xb8>
 80089be:	2f00      	cmp	r7, #0
 80089c0:	616a      	str	r2, [r5, #20]
 80089c2:	612a      	str	r2, [r5, #16]
 80089c4:	db05      	blt.n	80089d2 <_malloc_r+0x12a>
 80089c6:	4430      	add	r0, r6
 80089c8:	6843      	ldr	r3, [r0, #4]
 80089ca:	f043 0301 	orr.w	r3, r3, #1
 80089ce:	6043      	str	r3, [r0, #4]
 80089d0:	e79c      	b.n	800890c <_malloc_r+0x64>
 80089d2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80089d6:	d244      	bcs.n	8008a62 <_malloc_r+0x1ba>
 80089d8:	08c0      	lsrs	r0, r0, #3
 80089da:	1087      	asrs	r7, r0, #2
 80089dc:	2201      	movs	r2, #1
 80089de:	fa02 f707 	lsl.w	r7, r2, r7
 80089e2:	686a      	ldr	r2, [r5, #4]
 80089e4:	3001      	adds	r0, #1
 80089e6:	433a      	orrs	r2, r7
 80089e8:	606a      	str	r2, [r5, #4]
 80089ea:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80089ee:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 80089f2:	60b7      	str	r7, [r6, #8]
 80089f4:	3a08      	subs	r2, #8
 80089f6:	60f2      	str	r2, [r6, #12]
 80089f8:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 80089fc:	60fe      	str	r6, [r7, #12]
 80089fe:	2001      	movs	r0, #1
 8008a00:	109a      	asrs	r2, r3, #2
 8008a02:	fa00 f202 	lsl.w	r2, r0, r2
 8008a06:	6868      	ldr	r0, [r5, #4]
 8008a08:	4282      	cmp	r2, r0
 8008a0a:	f200 80a1 	bhi.w	8008b50 <_malloc_r+0x2a8>
 8008a0e:	4202      	tst	r2, r0
 8008a10:	d106      	bne.n	8008a20 <_malloc_r+0x178>
 8008a12:	f023 0303 	bic.w	r3, r3, #3
 8008a16:	0052      	lsls	r2, r2, #1
 8008a18:	4202      	tst	r2, r0
 8008a1a:	f103 0304 	add.w	r3, r3, #4
 8008a1e:	d0fa      	beq.n	8008a16 <_malloc_r+0x16e>
 8008a20:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8008a24:	46e0      	mov	r8, ip
 8008a26:	469e      	mov	lr, r3
 8008a28:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8008a2c:	4546      	cmp	r6, r8
 8008a2e:	d153      	bne.n	8008ad8 <_malloc_r+0x230>
 8008a30:	f10e 0e01 	add.w	lr, lr, #1
 8008a34:	f01e 0f03 	tst.w	lr, #3
 8008a38:	f108 0808 	add.w	r8, r8, #8
 8008a3c:	d1f4      	bne.n	8008a28 <_malloc_r+0x180>
 8008a3e:	0798      	lsls	r0, r3, #30
 8008a40:	d179      	bne.n	8008b36 <_malloc_r+0x28e>
 8008a42:	686b      	ldr	r3, [r5, #4]
 8008a44:	ea23 0302 	bic.w	r3, r3, r2
 8008a48:	606b      	str	r3, [r5, #4]
 8008a4a:	6868      	ldr	r0, [r5, #4]
 8008a4c:	0052      	lsls	r2, r2, #1
 8008a4e:	4282      	cmp	r2, r0
 8008a50:	d87e      	bhi.n	8008b50 <_malloc_r+0x2a8>
 8008a52:	2a00      	cmp	r2, #0
 8008a54:	d07c      	beq.n	8008b50 <_malloc_r+0x2a8>
 8008a56:	4673      	mov	r3, lr
 8008a58:	4202      	tst	r2, r0
 8008a5a:	d1e1      	bne.n	8008a20 <_malloc_r+0x178>
 8008a5c:	3304      	adds	r3, #4
 8008a5e:	0052      	lsls	r2, r2, #1
 8008a60:	e7fa      	b.n	8008a58 <_malloc_r+0x1b0>
 8008a62:	0a42      	lsrs	r2, r0, #9
 8008a64:	2a04      	cmp	r2, #4
 8008a66:	d815      	bhi.n	8008a94 <_malloc_r+0x1ec>
 8008a68:	0982      	lsrs	r2, r0, #6
 8008a6a:	3238      	adds	r2, #56	; 0x38
 8008a6c:	1c57      	adds	r7, r2, #1
 8008a6e:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8008a72:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8008a76:	45be      	cmp	lr, r7
 8008a78:	d126      	bne.n	8008ac8 <_malloc_r+0x220>
 8008a7a:	2001      	movs	r0, #1
 8008a7c:	1092      	asrs	r2, r2, #2
 8008a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8008a82:	6868      	ldr	r0, [r5, #4]
 8008a84:	4310      	orrs	r0, r2
 8008a86:	6068      	str	r0, [r5, #4]
 8008a88:	f8c6 e00c 	str.w	lr, [r6, #12]
 8008a8c:	60b7      	str	r7, [r6, #8]
 8008a8e:	f8ce 6008 	str.w	r6, [lr, #8]
 8008a92:	e7b3      	b.n	80089fc <_malloc_r+0x154>
 8008a94:	2a14      	cmp	r2, #20
 8008a96:	d801      	bhi.n	8008a9c <_malloc_r+0x1f4>
 8008a98:	325b      	adds	r2, #91	; 0x5b
 8008a9a:	e7e7      	b.n	8008a6c <_malloc_r+0x1c4>
 8008a9c:	2a54      	cmp	r2, #84	; 0x54
 8008a9e:	d802      	bhi.n	8008aa6 <_malloc_r+0x1fe>
 8008aa0:	0b02      	lsrs	r2, r0, #12
 8008aa2:	326e      	adds	r2, #110	; 0x6e
 8008aa4:	e7e2      	b.n	8008a6c <_malloc_r+0x1c4>
 8008aa6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008aaa:	d802      	bhi.n	8008ab2 <_malloc_r+0x20a>
 8008aac:	0bc2      	lsrs	r2, r0, #15
 8008aae:	3277      	adds	r2, #119	; 0x77
 8008ab0:	e7dc      	b.n	8008a6c <_malloc_r+0x1c4>
 8008ab2:	f240 5754 	movw	r7, #1364	; 0x554
 8008ab6:	42ba      	cmp	r2, r7
 8008ab8:	bf9a      	itte	ls
 8008aba:	0c82      	lsrls	r2, r0, #18
 8008abc:	327c      	addls	r2, #124	; 0x7c
 8008abe:	227e      	movhi	r2, #126	; 0x7e
 8008ac0:	e7d4      	b.n	8008a6c <_malloc_r+0x1c4>
 8008ac2:	68bf      	ldr	r7, [r7, #8]
 8008ac4:	45be      	cmp	lr, r7
 8008ac6:	d004      	beq.n	8008ad2 <_malloc_r+0x22a>
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	f022 0203 	bic.w	r2, r2, #3
 8008ace:	4290      	cmp	r0, r2
 8008ad0:	d3f7      	bcc.n	8008ac2 <_malloc_r+0x21a>
 8008ad2:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8008ad6:	e7d7      	b.n	8008a88 <_malloc_r+0x1e0>
 8008ad8:	6870      	ldr	r0, [r6, #4]
 8008ada:	68f7      	ldr	r7, [r6, #12]
 8008adc:	f020 0003 	bic.w	r0, r0, #3
 8008ae0:	eba0 0a04 	sub.w	sl, r0, r4
 8008ae4:	f1ba 0f0f 	cmp.w	sl, #15
 8008ae8:	dd10      	ble.n	8008b0c <_malloc_r+0x264>
 8008aea:	68b2      	ldr	r2, [r6, #8]
 8008aec:	1933      	adds	r3, r6, r4
 8008aee:	f044 0401 	orr.w	r4, r4, #1
 8008af2:	6074      	str	r4, [r6, #4]
 8008af4:	60d7      	str	r7, [r2, #12]
 8008af6:	60ba      	str	r2, [r7, #8]
 8008af8:	f04a 0201 	orr.w	r2, sl, #1
 8008afc:	616b      	str	r3, [r5, #20]
 8008afe:	612b      	str	r3, [r5, #16]
 8008b00:	60d9      	str	r1, [r3, #12]
 8008b02:	6099      	str	r1, [r3, #8]
 8008b04:	605a      	str	r2, [r3, #4]
 8008b06:	f846 a000 	str.w	sl, [r6, r0]
 8008b0a:	e6ff      	b.n	800890c <_malloc_r+0x64>
 8008b0c:	f1ba 0f00 	cmp.w	sl, #0
 8008b10:	db0f      	blt.n	8008b32 <_malloc_r+0x28a>
 8008b12:	4430      	add	r0, r6
 8008b14:	6843      	ldr	r3, [r0, #4]
 8008b16:	f043 0301 	orr.w	r3, r3, #1
 8008b1a:	6043      	str	r3, [r0, #4]
 8008b1c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8008b20:	4648      	mov	r0, r9
 8008b22:	60df      	str	r7, [r3, #12]
 8008b24:	60bb      	str	r3, [r7, #8]
 8008b26:	f000 f8ff 	bl	8008d28 <__malloc_unlock>
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	b003      	add	sp, #12
 8008b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b32:	463e      	mov	r6, r7
 8008b34:	e77a      	b.n	8008a2c <_malloc_r+0x184>
 8008b36:	f85c 0908 	ldr.w	r0, [ip], #-8
 8008b3a:	4584      	cmp	ip, r0
 8008b3c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008b40:	f43f af7d 	beq.w	8008a3e <_malloc_r+0x196>
 8008b44:	e781      	b.n	8008a4a <_malloc_r+0x1a2>
 8008b46:	bf00      	nop
 8008b48:	20000374 	.word	0x20000374
 8008b4c:	2000037c 	.word	0x2000037c
 8008b50:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8008b54:	f8db 6004 	ldr.w	r6, [fp, #4]
 8008b58:	f026 0603 	bic.w	r6, r6, #3
 8008b5c:	42b4      	cmp	r4, r6
 8008b5e:	d803      	bhi.n	8008b68 <_malloc_r+0x2c0>
 8008b60:	1b33      	subs	r3, r6, r4
 8008b62:	2b0f      	cmp	r3, #15
 8008b64:	f300 8096 	bgt.w	8008c94 <_malloc_r+0x3ec>
 8008b68:	4a4f      	ldr	r2, [pc, #316]	; (8008ca8 <_malloc_r+0x400>)
 8008b6a:	6817      	ldr	r7, [r2, #0]
 8008b6c:	4a4f      	ldr	r2, [pc, #316]	; (8008cac <_malloc_r+0x404>)
 8008b6e:	6811      	ldr	r1, [r2, #0]
 8008b70:	3710      	adds	r7, #16
 8008b72:	3101      	adds	r1, #1
 8008b74:	eb0b 0306 	add.w	r3, fp, r6
 8008b78:	4427      	add	r7, r4
 8008b7a:	d005      	beq.n	8008b88 <_malloc_r+0x2e0>
 8008b7c:	494c      	ldr	r1, [pc, #304]	; (8008cb0 <_malloc_r+0x408>)
 8008b7e:	3901      	subs	r1, #1
 8008b80:	440f      	add	r7, r1
 8008b82:	3101      	adds	r1, #1
 8008b84:	4249      	negs	r1, r1
 8008b86:	400f      	ands	r7, r1
 8008b88:	4639      	mov	r1, r7
 8008b8a:	4648      	mov	r0, r9
 8008b8c:	9201      	str	r2, [sp, #4]
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	f000 fd20 	bl	80095d4 <_sbrk_r>
 8008b94:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008b98:	4680      	mov	r8, r0
 8008b9a:	d056      	beq.n	8008c4a <_malloc_r+0x3a2>
 8008b9c:	9b00      	ldr	r3, [sp, #0]
 8008b9e:	9a01      	ldr	r2, [sp, #4]
 8008ba0:	4283      	cmp	r3, r0
 8008ba2:	d901      	bls.n	8008ba8 <_malloc_r+0x300>
 8008ba4:	45ab      	cmp	fp, r5
 8008ba6:	d150      	bne.n	8008c4a <_malloc_r+0x3a2>
 8008ba8:	4842      	ldr	r0, [pc, #264]	; (8008cb4 <_malloc_r+0x40c>)
 8008baa:	6801      	ldr	r1, [r0, #0]
 8008bac:	4543      	cmp	r3, r8
 8008bae:	eb07 0e01 	add.w	lr, r7, r1
 8008bb2:	f8c0 e000 	str.w	lr, [r0]
 8008bb6:	4940      	ldr	r1, [pc, #256]	; (8008cb8 <_malloc_r+0x410>)
 8008bb8:	4682      	mov	sl, r0
 8008bba:	d113      	bne.n	8008be4 <_malloc_r+0x33c>
 8008bbc:	420b      	tst	r3, r1
 8008bbe:	d111      	bne.n	8008be4 <_malloc_r+0x33c>
 8008bc0:	68ab      	ldr	r3, [r5, #8]
 8008bc2:	443e      	add	r6, r7
 8008bc4:	f046 0601 	orr.w	r6, r6, #1
 8008bc8:	605e      	str	r6, [r3, #4]
 8008bca:	4a3c      	ldr	r2, [pc, #240]	; (8008cbc <_malloc_r+0x414>)
 8008bcc:	f8da 3000 	ldr.w	r3, [sl]
 8008bd0:	6811      	ldr	r1, [r2, #0]
 8008bd2:	428b      	cmp	r3, r1
 8008bd4:	bf88      	it	hi
 8008bd6:	6013      	strhi	r3, [r2, #0]
 8008bd8:	4a39      	ldr	r2, [pc, #228]	; (8008cc0 <_malloc_r+0x418>)
 8008bda:	6811      	ldr	r1, [r2, #0]
 8008bdc:	428b      	cmp	r3, r1
 8008bde:	bf88      	it	hi
 8008be0:	6013      	strhi	r3, [r2, #0]
 8008be2:	e032      	b.n	8008c4a <_malloc_r+0x3a2>
 8008be4:	6810      	ldr	r0, [r2, #0]
 8008be6:	3001      	adds	r0, #1
 8008be8:	bf1b      	ittet	ne
 8008bea:	eba8 0303 	subne.w	r3, r8, r3
 8008bee:	4473      	addne	r3, lr
 8008bf0:	f8c2 8000 	streq.w	r8, [r2]
 8008bf4:	f8ca 3000 	strne.w	r3, [sl]
 8008bf8:	f018 0007 	ands.w	r0, r8, #7
 8008bfc:	bf1c      	itt	ne
 8008bfe:	f1c0 0008 	rsbne	r0, r0, #8
 8008c02:	4480      	addne	r8, r0
 8008c04:	4b2a      	ldr	r3, [pc, #168]	; (8008cb0 <_malloc_r+0x408>)
 8008c06:	4447      	add	r7, r8
 8008c08:	4418      	add	r0, r3
 8008c0a:	400f      	ands	r7, r1
 8008c0c:	1bc7      	subs	r7, r0, r7
 8008c0e:	4639      	mov	r1, r7
 8008c10:	4648      	mov	r0, r9
 8008c12:	f000 fcdf 	bl	80095d4 <_sbrk_r>
 8008c16:	1c43      	adds	r3, r0, #1
 8008c18:	bf08      	it	eq
 8008c1a:	4640      	moveq	r0, r8
 8008c1c:	f8da 3000 	ldr.w	r3, [sl]
 8008c20:	f8c5 8008 	str.w	r8, [r5, #8]
 8008c24:	bf08      	it	eq
 8008c26:	2700      	moveq	r7, #0
 8008c28:	eba0 0008 	sub.w	r0, r0, r8
 8008c2c:	443b      	add	r3, r7
 8008c2e:	4407      	add	r7, r0
 8008c30:	f047 0701 	orr.w	r7, r7, #1
 8008c34:	45ab      	cmp	fp, r5
 8008c36:	f8ca 3000 	str.w	r3, [sl]
 8008c3a:	f8c8 7004 	str.w	r7, [r8, #4]
 8008c3e:	d0c4      	beq.n	8008bca <_malloc_r+0x322>
 8008c40:	2e0f      	cmp	r6, #15
 8008c42:	d810      	bhi.n	8008c66 <_malloc_r+0x3be>
 8008c44:	2301      	movs	r3, #1
 8008c46:	f8c8 3004 	str.w	r3, [r8, #4]
 8008c4a:	68ab      	ldr	r3, [r5, #8]
 8008c4c:	685a      	ldr	r2, [r3, #4]
 8008c4e:	f022 0203 	bic.w	r2, r2, #3
 8008c52:	4294      	cmp	r4, r2
 8008c54:	eba2 0304 	sub.w	r3, r2, r4
 8008c58:	d801      	bhi.n	8008c5e <_malloc_r+0x3b6>
 8008c5a:	2b0f      	cmp	r3, #15
 8008c5c:	dc1a      	bgt.n	8008c94 <_malloc_r+0x3ec>
 8008c5e:	4648      	mov	r0, r9
 8008c60:	f000 f862 	bl	8008d28 <__malloc_unlock>
 8008c64:	e62d      	b.n	80088c2 <_malloc_r+0x1a>
 8008c66:	f8db 3004 	ldr.w	r3, [fp, #4]
 8008c6a:	3e0c      	subs	r6, #12
 8008c6c:	f026 0607 	bic.w	r6, r6, #7
 8008c70:	f003 0301 	and.w	r3, r3, #1
 8008c74:	4333      	orrs	r3, r6
 8008c76:	f8cb 3004 	str.w	r3, [fp, #4]
 8008c7a:	eb0b 0306 	add.w	r3, fp, r6
 8008c7e:	2205      	movs	r2, #5
 8008c80:	2e0f      	cmp	r6, #15
 8008c82:	605a      	str	r2, [r3, #4]
 8008c84:	609a      	str	r2, [r3, #8]
 8008c86:	d9a0      	bls.n	8008bca <_malloc_r+0x322>
 8008c88:	f10b 0108 	add.w	r1, fp, #8
 8008c8c:	4648      	mov	r0, r9
 8008c8e:	f7ff fb4f 	bl	8008330 <_free_r>
 8008c92:	e79a      	b.n	8008bca <_malloc_r+0x322>
 8008c94:	68ae      	ldr	r6, [r5, #8]
 8008c96:	f044 0201 	orr.w	r2, r4, #1
 8008c9a:	4434      	add	r4, r6
 8008c9c:	f043 0301 	orr.w	r3, r3, #1
 8008ca0:	6072      	str	r2, [r6, #4]
 8008ca2:	60ac      	str	r4, [r5, #8]
 8008ca4:	6063      	str	r3, [r4, #4]
 8008ca6:	e631      	b.n	800890c <_malloc_r+0x64>
 8008ca8:	20001dec 	.word	0x20001dec
 8008cac:	2000077c 	.word	0x2000077c
 8008cb0:	00000080 	.word	0x00000080
 8008cb4:	20001dbc 	.word	0x20001dbc
 8008cb8:	0000007f 	.word	0x0000007f
 8008cbc:	20001de4 	.word	0x20001de4
 8008cc0:	20001de8 	.word	0x20001de8

08008cc4 <__ascii_mbtowc>:
 8008cc4:	b082      	sub	sp, #8
 8008cc6:	b901      	cbnz	r1, 8008cca <__ascii_mbtowc+0x6>
 8008cc8:	a901      	add	r1, sp, #4
 8008cca:	b142      	cbz	r2, 8008cde <__ascii_mbtowc+0x1a>
 8008ccc:	b14b      	cbz	r3, 8008ce2 <__ascii_mbtowc+0x1e>
 8008cce:	7813      	ldrb	r3, [r2, #0]
 8008cd0:	600b      	str	r3, [r1, #0]
 8008cd2:	7812      	ldrb	r2, [r2, #0]
 8008cd4:	1c10      	adds	r0, r2, #0
 8008cd6:	bf18      	it	ne
 8008cd8:	2001      	movne	r0, #1
 8008cda:	b002      	add	sp, #8
 8008cdc:	4770      	bx	lr
 8008cde:	4610      	mov	r0, r2
 8008ce0:	e7fb      	b.n	8008cda <__ascii_mbtowc+0x16>
 8008ce2:	f06f 0001 	mvn.w	r0, #1
 8008ce6:	e7f8      	b.n	8008cda <__ascii_mbtowc+0x16>

08008ce8 <memmove>:
 8008ce8:	4288      	cmp	r0, r1
 8008cea:	b510      	push	{r4, lr}
 8008cec:	eb01 0302 	add.w	r3, r1, r2
 8008cf0:	d803      	bhi.n	8008cfa <memmove+0x12>
 8008cf2:	1e42      	subs	r2, r0, #1
 8008cf4:	4299      	cmp	r1, r3
 8008cf6:	d10c      	bne.n	8008d12 <memmove+0x2a>
 8008cf8:	bd10      	pop	{r4, pc}
 8008cfa:	4298      	cmp	r0, r3
 8008cfc:	d2f9      	bcs.n	8008cf2 <memmove+0xa>
 8008cfe:	1881      	adds	r1, r0, r2
 8008d00:	1ad2      	subs	r2, r2, r3
 8008d02:	42d3      	cmn	r3, r2
 8008d04:	d100      	bne.n	8008d08 <memmove+0x20>
 8008d06:	bd10      	pop	{r4, pc}
 8008d08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d0c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008d10:	e7f7      	b.n	8008d02 <memmove+0x1a>
 8008d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d16:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008d1a:	e7eb      	b.n	8008cf4 <memmove+0xc>

08008d1c <__malloc_lock>:
 8008d1c:	4801      	ldr	r0, [pc, #4]	; (8008d24 <__malloc_lock+0x8>)
 8008d1e:	f7ff bd4d 	b.w	80087bc <__retarget_lock_acquire_recursive>
 8008d22:	bf00      	nop
 8008d24:	200031f4 	.word	0x200031f4

08008d28 <__malloc_unlock>:
 8008d28:	4801      	ldr	r0, [pc, #4]	; (8008d30 <__malloc_unlock+0x8>)
 8008d2a:	f7ff bd48 	b.w	80087be <__retarget_lock_release_recursive>
 8008d2e:	bf00      	nop
 8008d30:	200031f4 	.word	0x200031f4

08008d34 <_Balloc>:
 8008d34:	b570      	push	{r4, r5, r6, lr}
 8008d36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d38:	4604      	mov	r4, r0
 8008d3a:	460e      	mov	r6, r1
 8008d3c:	b93d      	cbnz	r5, 8008d4e <_Balloc+0x1a>
 8008d3e:	2010      	movs	r0, #16
 8008d40:	f7ff fdaa 	bl	8008898 <malloc>
 8008d44:	6260      	str	r0, [r4, #36]	; 0x24
 8008d46:	6045      	str	r5, [r0, #4]
 8008d48:	6085      	str	r5, [r0, #8]
 8008d4a:	6005      	str	r5, [r0, #0]
 8008d4c:	60c5      	str	r5, [r0, #12]
 8008d4e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008d50:	68eb      	ldr	r3, [r5, #12]
 8008d52:	b183      	cbz	r3, 8008d76 <_Balloc+0x42>
 8008d54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008d5c:	b9b8      	cbnz	r0, 8008d8e <_Balloc+0x5a>
 8008d5e:	2101      	movs	r1, #1
 8008d60:	fa01 f506 	lsl.w	r5, r1, r6
 8008d64:	1d6a      	adds	r2, r5, #5
 8008d66:	0092      	lsls	r2, r2, #2
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f000 fdeb 	bl	8009944 <_calloc_r>
 8008d6e:	b160      	cbz	r0, 8008d8a <_Balloc+0x56>
 8008d70:	6046      	str	r6, [r0, #4]
 8008d72:	6085      	str	r5, [r0, #8]
 8008d74:	e00e      	b.n	8008d94 <_Balloc+0x60>
 8008d76:	2221      	movs	r2, #33	; 0x21
 8008d78:	2104      	movs	r1, #4
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f000 fde2 	bl	8009944 <_calloc_r>
 8008d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d82:	60e8      	str	r0, [r5, #12]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1e4      	bne.n	8008d54 <_Balloc+0x20>
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	bd70      	pop	{r4, r5, r6, pc}
 8008d8e:	6802      	ldr	r2, [r0, #0]
 8008d90:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008d94:	2300      	movs	r3, #0
 8008d96:	6103      	str	r3, [r0, #16]
 8008d98:	60c3      	str	r3, [r0, #12]
 8008d9a:	bd70      	pop	{r4, r5, r6, pc}

08008d9c <_Bfree>:
 8008d9c:	b570      	push	{r4, r5, r6, lr}
 8008d9e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008da0:	4606      	mov	r6, r0
 8008da2:	460d      	mov	r5, r1
 8008da4:	b93c      	cbnz	r4, 8008db6 <_Bfree+0x1a>
 8008da6:	2010      	movs	r0, #16
 8008da8:	f7ff fd76 	bl	8008898 <malloc>
 8008dac:	6270      	str	r0, [r6, #36]	; 0x24
 8008dae:	6044      	str	r4, [r0, #4]
 8008db0:	6084      	str	r4, [r0, #8]
 8008db2:	6004      	str	r4, [r0, #0]
 8008db4:	60c4      	str	r4, [r0, #12]
 8008db6:	b13d      	cbz	r5, 8008dc8 <_Bfree+0x2c>
 8008db8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008dba:	686a      	ldr	r2, [r5, #4]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008dc2:	6029      	str	r1, [r5, #0]
 8008dc4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008dc8:	bd70      	pop	{r4, r5, r6, pc}

08008dca <__multadd>:
 8008dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dce:	690d      	ldr	r5, [r1, #16]
 8008dd0:	461f      	mov	r7, r3
 8008dd2:	4606      	mov	r6, r0
 8008dd4:	460c      	mov	r4, r1
 8008dd6:	f101 0e14 	add.w	lr, r1, #20
 8008dda:	2300      	movs	r3, #0
 8008ddc:	f8de 0000 	ldr.w	r0, [lr]
 8008de0:	b281      	uxth	r1, r0
 8008de2:	fb02 7101 	mla	r1, r2, r1, r7
 8008de6:	0c0f      	lsrs	r7, r1, #16
 8008de8:	0c00      	lsrs	r0, r0, #16
 8008dea:	fb02 7000 	mla	r0, r2, r0, r7
 8008dee:	b289      	uxth	r1, r1
 8008df0:	3301      	adds	r3, #1
 8008df2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008df6:	429d      	cmp	r5, r3
 8008df8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008dfc:	f84e 1b04 	str.w	r1, [lr], #4
 8008e00:	dcec      	bgt.n	8008ddc <__multadd+0x12>
 8008e02:	b1d7      	cbz	r7, 8008e3a <__multadd+0x70>
 8008e04:	68a3      	ldr	r3, [r4, #8]
 8008e06:	429d      	cmp	r5, r3
 8008e08:	db12      	blt.n	8008e30 <__multadd+0x66>
 8008e0a:	6861      	ldr	r1, [r4, #4]
 8008e0c:	4630      	mov	r0, r6
 8008e0e:	3101      	adds	r1, #1
 8008e10:	f7ff ff90 	bl	8008d34 <_Balloc>
 8008e14:	6922      	ldr	r2, [r4, #16]
 8008e16:	3202      	adds	r2, #2
 8008e18:	f104 010c 	add.w	r1, r4, #12
 8008e1c:	4680      	mov	r8, r0
 8008e1e:	0092      	lsls	r2, r2, #2
 8008e20:	300c      	adds	r0, #12
 8008e22:	f7fc fc73 	bl	800570c <memcpy>
 8008e26:	4621      	mov	r1, r4
 8008e28:	4630      	mov	r0, r6
 8008e2a:	f7ff ffb7 	bl	8008d9c <_Bfree>
 8008e2e:	4644      	mov	r4, r8
 8008e30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e34:	3501      	adds	r5, #1
 8008e36:	615f      	str	r7, [r3, #20]
 8008e38:	6125      	str	r5, [r4, #16]
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008e40 <__hi0bits>:
 8008e40:	0c02      	lsrs	r2, r0, #16
 8008e42:	0412      	lsls	r2, r2, #16
 8008e44:	4603      	mov	r3, r0
 8008e46:	b9b2      	cbnz	r2, 8008e76 <__hi0bits+0x36>
 8008e48:	0403      	lsls	r3, r0, #16
 8008e4a:	2010      	movs	r0, #16
 8008e4c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008e50:	bf04      	itt	eq
 8008e52:	021b      	lsleq	r3, r3, #8
 8008e54:	3008      	addeq	r0, #8
 8008e56:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008e5a:	bf04      	itt	eq
 8008e5c:	011b      	lsleq	r3, r3, #4
 8008e5e:	3004      	addeq	r0, #4
 8008e60:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008e64:	bf04      	itt	eq
 8008e66:	009b      	lsleq	r3, r3, #2
 8008e68:	3002      	addeq	r0, #2
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	db06      	blt.n	8008e7c <__hi0bits+0x3c>
 8008e6e:	005b      	lsls	r3, r3, #1
 8008e70:	d503      	bpl.n	8008e7a <__hi0bits+0x3a>
 8008e72:	3001      	adds	r0, #1
 8008e74:	4770      	bx	lr
 8008e76:	2000      	movs	r0, #0
 8008e78:	e7e8      	b.n	8008e4c <__hi0bits+0xc>
 8008e7a:	2020      	movs	r0, #32
 8008e7c:	4770      	bx	lr

08008e7e <__lo0bits>:
 8008e7e:	6803      	ldr	r3, [r0, #0]
 8008e80:	f013 0207 	ands.w	r2, r3, #7
 8008e84:	4601      	mov	r1, r0
 8008e86:	d00b      	beq.n	8008ea0 <__lo0bits+0x22>
 8008e88:	07da      	lsls	r2, r3, #31
 8008e8a:	d423      	bmi.n	8008ed4 <__lo0bits+0x56>
 8008e8c:	0798      	lsls	r0, r3, #30
 8008e8e:	bf49      	itett	mi
 8008e90:	085b      	lsrmi	r3, r3, #1
 8008e92:	089b      	lsrpl	r3, r3, #2
 8008e94:	2001      	movmi	r0, #1
 8008e96:	600b      	strmi	r3, [r1, #0]
 8008e98:	bf5c      	itt	pl
 8008e9a:	600b      	strpl	r3, [r1, #0]
 8008e9c:	2002      	movpl	r0, #2
 8008e9e:	4770      	bx	lr
 8008ea0:	b298      	uxth	r0, r3
 8008ea2:	b9a8      	cbnz	r0, 8008ed0 <__lo0bits+0x52>
 8008ea4:	0c1b      	lsrs	r3, r3, #16
 8008ea6:	2010      	movs	r0, #16
 8008ea8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008eac:	bf04      	itt	eq
 8008eae:	0a1b      	lsreq	r3, r3, #8
 8008eb0:	3008      	addeq	r0, #8
 8008eb2:	071a      	lsls	r2, r3, #28
 8008eb4:	bf04      	itt	eq
 8008eb6:	091b      	lsreq	r3, r3, #4
 8008eb8:	3004      	addeq	r0, #4
 8008eba:	079a      	lsls	r2, r3, #30
 8008ebc:	bf04      	itt	eq
 8008ebe:	089b      	lsreq	r3, r3, #2
 8008ec0:	3002      	addeq	r0, #2
 8008ec2:	07da      	lsls	r2, r3, #31
 8008ec4:	d402      	bmi.n	8008ecc <__lo0bits+0x4e>
 8008ec6:	085b      	lsrs	r3, r3, #1
 8008ec8:	d006      	beq.n	8008ed8 <__lo0bits+0x5a>
 8008eca:	3001      	adds	r0, #1
 8008ecc:	600b      	str	r3, [r1, #0]
 8008ece:	4770      	bx	lr
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	e7e9      	b.n	8008ea8 <__lo0bits+0x2a>
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	4770      	bx	lr
 8008ed8:	2020      	movs	r0, #32
 8008eda:	4770      	bx	lr

08008edc <__i2b>:
 8008edc:	b510      	push	{r4, lr}
 8008ede:	460c      	mov	r4, r1
 8008ee0:	2101      	movs	r1, #1
 8008ee2:	f7ff ff27 	bl	8008d34 <_Balloc>
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	6144      	str	r4, [r0, #20]
 8008eea:	6102      	str	r2, [r0, #16]
 8008eec:	bd10      	pop	{r4, pc}

08008eee <__multiply>:
 8008eee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef2:	4614      	mov	r4, r2
 8008ef4:	690a      	ldr	r2, [r1, #16]
 8008ef6:	6923      	ldr	r3, [r4, #16]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	bfb8      	it	lt
 8008efc:	460b      	movlt	r3, r1
 8008efe:	4689      	mov	r9, r1
 8008f00:	bfbc      	itt	lt
 8008f02:	46a1      	movlt	r9, r4
 8008f04:	461c      	movlt	r4, r3
 8008f06:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008f0a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008f0e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008f12:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008f16:	eb07 060a 	add.w	r6, r7, sl
 8008f1a:	429e      	cmp	r6, r3
 8008f1c:	bfc8      	it	gt
 8008f1e:	3101      	addgt	r1, #1
 8008f20:	f7ff ff08 	bl	8008d34 <_Balloc>
 8008f24:	f100 0514 	add.w	r5, r0, #20
 8008f28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f2c:	462b      	mov	r3, r5
 8008f2e:	2200      	movs	r2, #0
 8008f30:	4543      	cmp	r3, r8
 8008f32:	d316      	bcc.n	8008f62 <__multiply+0x74>
 8008f34:	f104 0214 	add.w	r2, r4, #20
 8008f38:	f109 0114 	add.w	r1, r9, #20
 8008f3c:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8008f40:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008f44:	9301      	str	r3, [sp, #4]
 8008f46:	9c01      	ldr	r4, [sp, #4]
 8008f48:	4294      	cmp	r4, r2
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	d80c      	bhi.n	8008f68 <__multiply+0x7a>
 8008f4e:	2e00      	cmp	r6, #0
 8008f50:	dd03      	ble.n	8008f5a <__multiply+0x6c>
 8008f52:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d054      	beq.n	8009004 <__multiply+0x116>
 8008f5a:	6106      	str	r6, [r0, #16]
 8008f5c:	b003      	add	sp, #12
 8008f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f62:	f843 2b04 	str.w	r2, [r3], #4
 8008f66:	e7e3      	b.n	8008f30 <__multiply+0x42>
 8008f68:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f6c:	3204      	adds	r2, #4
 8008f6e:	f1ba 0f00 	cmp.w	sl, #0
 8008f72:	d020      	beq.n	8008fb6 <__multiply+0xc8>
 8008f74:	46ae      	mov	lr, r5
 8008f76:	4689      	mov	r9, r1
 8008f78:	f04f 0c00 	mov.w	ip, #0
 8008f7c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008f80:	f8be b000 	ldrh.w	fp, [lr]
 8008f84:	b2a3      	uxth	r3, r4
 8008f86:	fb0a b303 	mla	r3, sl, r3, fp
 8008f8a:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8008f8e:	f8de 4000 	ldr.w	r4, [lr]
 8008f92:	4463      	add	r3, ip
 8008f94:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8008f98:	fb0a c40b 	mla	r4, sl, fp, ip
 8008f9c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008fa6:	454f      	cmp	r7, r9
 8008fa8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8008fac:	f84e 3b04 	str.w	r3, [lr], #4
 8008fb0:	d8e4      	bhi.n	8008f7c <__multiply+0x8e>
 8008fb2:	f8ce c000 	str.w	ip, [lr]
 8008fb6:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8008fba:	f1b9 0f00 	cmp.w	r9, #0
 8008fbe:	d01f      	beq.n	8009000 <__multiply+0x112>
 8008fc0:	682b      	ldr	r3, [r5, #0]
 8008fc2:	46ae      	mov	lr, r5
 8008fc4:	468c      	mov	ip, r1
 8008fc6:	f04f 0a00 	mov.w	sl, #0
 8008fca:	f8bc 4000 	ldrh.w	r4, [ip]
 8008fce:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008fd2:	fb09 b404 	mla	r4, r9, r4, fp
 8008fd6:	44a2      	add	sl, r4
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8008fde:	f84e 3b04 	str.w	r3, [lr], #4
 8008fe2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008fe6:	f8be 4000 	ldrh.w	r4, [lr]
 8008fea:	0c1b      	lsrs	r3, r3, #16
 8008fec:	fb09 4303 	mla	r3, r9, r3, r4
 8008ff0:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8008ff4:	4567      	cmp	r7, ip
 8008ff6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ffa:	d8e6      	bhi.n	8008fca <__multiply+0xdc>
 8008ffc:	f8ce 3000 	str.w	r3, [lr]
 8009000:	3504      	adds	r5, #4
 8009002:	e7a0      	b.n	8008f46 <__multiply+0x58>
 8009004:	3e01      	subs	r6, #1
 8009006:	e7a2      	b.n	8008f4e <__multiply+0x60>

08009008 <__pow5mult>:
 8009008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800900c:	4615      	mov	r5, r2
 800900e:	f012 0203 	ands.w	r2, r2, #3
 8009012:	4606      	mov	r6, r0
 8009014:	460f      	mov	r7, r1
 8009016:	d007      	beq.n	8009028 <__pow5mult+0x20>
 8009018:	3a01      	subs	r2, #1
 800901a:	4c21      	ldr	r4, [pc, #132]	; (80090a0 <__pow5mult+0x98>)
 800901c:	2300      	movs	r3, #0
 800901e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009022:	f7ff fed2 	bl	8008dca <__multadd>
 8009026:	4607      	mov	r7, r0
 8009028:	10ad      	asrs	r5, r5, #2
 800902a:	d035      	beq.n	8009098 <__pow5mult+0x90>
 800902c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800902e:	b93c      	cbnz	r4, 8009040 <__pow5mult+0x38>
 8009030:	2010      	movs	r0, #16
 8009032:	f7ff fc31 	bl	8008898 <malloc>
 8009036:	6270      	str	r0, [r6, #36]	; 0x24
 8009038:	6044      	str	r4, [r0, #4]
 800903a:	6084      	str	r4, [r0, #8]
 800903c:	6004      	str	r4, [r0, #0]
 800903e:	60c4      	str	r4, [r0, #12]
 8009040:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009044:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009048:	b94c      	cbnz	r4, 800905e <__pow5mult+0x56>
 800904a:	f240 2171 	movw	r1, #625	; 0x271
 800904e:	4630      	mov	r0, r6
 8009050:	f7ff ff44 	bl	8008edc <__i2b>
 8009054:	2300      	movs	r3, #0
 8009056:	f8c8 0008 	str.w	r0, [r8, #8]
 800905a:	4604      	mov	r4, r0
 800905c:	6003      	str	r3, [r0, #0]
 800905e:	f04f 0800 	mov.w	r8, #0
 8009062:	07eb      	lsls	r3, r5, #31
 8009064:	d50a      	bpl.n	800907c <__pow5mult+0x74>
 8009066:	4639      	mov	r1, r7
 8009068:	4622      	mov	r2, r4
 800906a:	4630      	mov	r0, r6
 800906c:	f7ff ff3f 	bl	8008eee <__multiply>
 8009070:	4639      	mov	r1, r7
 8009072:	4681      	mov	r9, r0
 8009074:	4630      	mov	r0, r6
 8009076:	f7ff fe91 	bl	8008d9c <_Bfree>
 800907a:	464f      	mov	r7, r9
 800907c:	106d      	asrs	r5, r5, #1
 800907e:	d00b      	beq.n	8009098 <__pow5mult+0x90>
 8009080:	6820      	ldr	r0, [r4, #0]
 8009082:	b938      	cbnz	r0, 8009094 <__pow5mult+0x8c>
 8009084:	4622      	mov	r2, r4
 8009086:	4621      	mov	r1, r4
 8009088:	4630      	mov	r0, r6
 800908a:	f7ff ff30 	bl	8008eee <__multiply>
 800908e:	6020      	str	r0, [r4, #0]
 8009090:	f8c0 8000 	str.w	r8, [r0]
 8009094:	4604      	mov	r4, r0
 8009096:	e7e4      	b.n	8009062 <__pow5mult+0x5a>
 8009098:	4638      	mov	r0, r7
 800909a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800909e:	bf00      	nop
 80090a0:	0800a8b0 	.word	0x0800a8b0

080090a4 <__lshift>:
 80090a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090a8:	460c      	mov	r4, r1
 80090aa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090ae:	6923      	ldr	r3, [r4, #16]
 80090b0:	6849      	ldr	r1, [r1, #4]
 80090b2:	eb0a 0903 	add.w	r9, sl, r3
 80090b6:	68a3      	ldr	r3, [r4, #8]
 80090b8:	4607      	mov	r7, r0
 80090ba:	4616      	mov	r6, r2
 80090bc:	f109 0501 	add.w	r5, r9, #1
 80090c0:	42ab      	cmp	r3, r5
 80090c2:	db31      	blt.n	8009128 <__lshift+0x84>
 80090c4:	4638      	mov	r0, r7
 80090c6:	f7ff fe35 	bl	8008d34 <_Balloc>
 80090ca:	2200      	movs	r2, #0
 80090cc:	4680      	mov	r8, r0
 80090ce:	f100 0314 	add.w	r3, r0, #20
 80090d2:	4611      	mov	r1, r2
 80090d4:	4552      	cmp	r2, sl
 80090d6:	db2a      	blt.n	800912e <__lshift+0x8a>
 80090d8:	6920      	ldr	r0, [r4, #16]
 80090da:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090de:	f104 0114 	add.w	r1, r4, #20
 80090e2:	f016 021f 	ands.w	r2, r6, #31
 80090e6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80090ea:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80090ee:	d022      	beq.n	8009136 <__lshift+0x92>
 80090f0:	f1c2 0c20 	rsb	ip, r2, #32
 80090f4:	2000      	movs	r0, #0
 80090f6:	680e      	ldr	r6, [r1, #0]
 80090f8:	4096      	lsls	r6, r2
 80090fa:	4330      	orrs	r0, r6
 80090fc:	f843 0b04 	str.w	r0, [r3], #4
 8009100:	f851 0b04 	ldr.w	r0, [r1], #4
 8009104:	458e      	cmp	lr, r1
 8009106:	fa20 f00c 	lsr.w	r0, r0, ip
 800910a:	d8f4      	bhi.n	80090f6 <__lshift+0x52>
 800910c:	6018      	str	r0, [r3, #0]
 800910e:	b108      	cbz	r0, 8009114 <__lshift+0x70>
 8009110:	f109 0502 	add.w	r5, r9, #2
 8009114:	3d01      	subs	r5, #1
 8009116:	4638      	mov	r0, r7
 8009118:	f8c8 5010 	str.w	r5, [r8, #16]
 800911c:	4621      	mov	r1, r4
 800911e:	f7ff fe3d 	bl	8008d9c <_Bfree>
 8009122:	4640      	mov	r0, r8
 8009124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009128:	3101      	adds	r1, #1
 800912a:	005b      	lsls	r3, r3, #1
 800912c:	e7c8      	b.n	80090c0 <__lshift+0x1c>
 800912e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009132:	3201      	adds	r2, #1
 8009134:	e7ce      	b.n	80090d4 <__lshift+0x30>
 8009136:	3b04      	subs	r3, #4
 8009138:	f851 2b04 	ldr.w	r2, [r1], #4
 800913c:	f843 2f04 	str.w	r2, [r3, #4]!
 8009140:	458e      	cmp	lr, r1
 8009142:	d8f9      	bhi.n	8009138 <__lshift+0x94>
 8009144:	e7e6      	b.n	8009114 <__lshift+0x70>

08009146 <__mcmp>:
 8009146:	6903      	ldr	r3, [r0, #16]
 8009148:	690a      	ldr	r2, [r1, #16]
 800914a:	1a9b      	subs	r3, r3, r2
 800914c:	b530      	push	{r4, r5, lr}
 800914e:	d10c      	bne.n	800916a <__mcmp+0x24>
 8009150:	0092      	lsls	r2, r2, #2
 8009152:	3014      	adds	r0, #20
 8009154:	3114      	adds	r1, #20
 8009156:	1884      	adds	r4, r0, r2
 8009158:	4411      	add	r1, r2
 800915a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800915e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009162:	4295      	cmp	r5, r2
 8009164:	d003      	beq.n	800916e <__mcmp+0x28>
 8009166:	d305      	bcc.n	8009174 <__mcmp+0x2e>
 8009168:	2301      	movs	r3, #1
 800916a:	4618      	mov	r0, r3
 800916c:	bd30      	pop	{r4, r5, pc}
 800916e:	42a0      	cmp	r0, r4
 8009170:	d3f3      	bcc.n	800915a <__mcmp+0x14>
 8009172:	e7fa      	b.n	800916a <__mcmp+0x24>
 8009174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009178:	e7f7      	b.n	800916a <__mcmp+0x24>

0800917a <__mdiff>:
 800917a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800917e:	460d      	mov	r5, r1
 8009180:	4607      	mov	r7, r0
 8009182:	4611      	mov	r1, r2
 8009184:	4628      	mov	r0, r5
 8009186:	4614      	mov	r4, r2
 8009188:	f7ff ffdd 	bl	8009146 <__mcmp>
 800918c:	1e06      	subs	r6, r0, #0
 800918e:	d108      	bne.n	80091a2 <__mdiff+0x28>
 8009190:	4631      	mov	r1, r6
 8009192:	4638      	mov	r0, r7
 8009194:	f7ff fdce 	bl	8008d34 <_Balloc>
 8009198:	2301      	movs	r3, #1
 800919a:	6103      	str	r3, [r0, #16]
 800919c:	6146      	str	r6, [r0, #20]
 800919e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a2:	bfa4      	itt	ge
 80091a4:	4623      	movge	r3, r4
 80091a6:	462c      	movge	r4, r5
 80091a8:	4638      	mov	r0, r7
 80091aa:	6861      	ldr	r1, [r4, #4]
 80091ac:	bfa6      	itte	ge
 80091ae:	461d      	movge	r5, r3
 80091b0:	2600      	movge	r6, #0
 80091b2:	2601      	movlt	r6, #1
 80091b4:	f7ff fdbe 	bl	8008d34 <_Balloc>
 80091b8:	692b      	ldr	r3, [r5, #16]
 80091ba:	60c6      	str	r6, [r0, #12]
 80091bc:	6926      	ldr	r6, [r4, #16]
 80091be:	f105 0914 	add.w	r9, r5, #20
 80091c2:	f104 0214 	add.w	r2, r4, #20
 80091c6:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80091ca:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80091ce:	f100 0514 	add.w	r5, r0, #20
 80091d2:	f04f 0c00 	mov.w	ip, #0
 80091d6:	f852 ab04 	ldr.w	sl, [r2], #4
 80091da:	f859 4b04 	ldr.w	r4, [r9], #4
 80091de:	fa1c f18a 	uxtah	r1, ip, sl
 80091e2:	b2a3      	uxth	r3, r4
 80091e4:	1ac9      	subs	r1, r1, r3
 80091e6:	0c23      	lsrs	r3, r4, #16
 80091e8:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80091ec:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80091f0:	b289      	uxth	r1, r1
 80091f2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80091f6:	45c8      	cmp	r8, r9
 80091f8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80091fc:	4696      	mov	lr, r2
 80091fe:	f845 3b04 	str.w	r3, [r5], #4
 8009202:	d8e8      	bhi.n	80091d6 <__mdiff+0x5c>
 8009204:	45be      	cmp	lr, r7
 8009206:	d305      	bcc.n	8009214 <__mdiff+0x9a>
 8009208:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800920c:	b18b      	cbz	r3, 8009232 <__mdiff+0xb8>
 800920e:	6106      	str	r6, [r0, #16]
 8009210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009214:	f85e 1b04 	ldr.w	r1, [lr], #4
 8009218:	fa1c f381 	uxtah	r3, ip, r1
 800921c:	141a      	asrs	r2, r3, #16
 800921e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009222:	b29b      	uxth	r3, r3
 8009224:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009228:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800922c:	f845 3b04 	str.w	r3, [r5], #4
 8009230:	e7e8      	b.n	8009204 <__mdiff+0x8a>
 8009232:	3e01      	subs	r6, #1
 8009234:	e7e8      	b.n	8009208 <__mdiff+0x8e>

08009236 <__d2b>:
 8009236:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800923a:	460e      	mov	r6, r1
 800923c:	2101      	movs	r1, #1
 800923e:	ec59 8b10 	vmov	r8, r9, d0
 8009242:	4615      	mov	r5, r2
 8009244:	f7ff fd76 	bl	8008d34 <_Balloc>
 8009248:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800924c:	4607      	mov	r7, r0
 800924e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009252:	bb34      	cbnz	r4, 80092a2 <__d2b+0x6c>
 8009254:	9301      	str	r3, [sp, #4]
 8009256:	f1b8 0f00 	cmp.w	r8, #0
 800925a:	d027      	beq.n	80092ac <__d2b+0x76>
 800925c:	a802      	add	r0, sp, #8
 800925e:	f840 8d08 	str.w	r8, [r0, #-8]!
 8009262:	f7ff fe0c 	bl	8008e7e <__lo0bits>
 8009266:	9900      	ldr	r1, [sp, #0]
 8009268:	b1f0      	cbz	r0, 80092a8 <__d2b+0x72>
 800926a:	9a01      	ldr	r2, [sp, #4]
 800926c:	f1c0 0320 	rsb	r3, r0, #32
 8009270:	fa02 f303 	lsl.w	r3, r2, r3
 8009274:	430b      	orrs	r3, r1
 8009276:	40c2      	lsrs	r2, r0
 8009278:	617b      	str	r3, [r7, #20]
 800927a:	9201      	str	r2, [sp, #4]
 800927c:	9b01      	ldr	r3, [sp, #4]
 800927e:	61bb      	str	r3, [r7, #24]
 8009280:	2b00      	cmp	r3, #0
 8009282:	bf14      	ite	ne
 8009284:	2102      	movne	r1, #2
 8009286:	2101      	moveq	r1, #1
 8009288:	6139      	str	r1, [r7, #16]
 800928a:	b1c4      	cbz	r4, 80092be <__d2b+0x88>
 800928c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009290:	4404      	add	r4, r0
 8009292:	6034      	str	r4, [r6, #0]
 8009294:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009298:	6028      	str	r0, [r5, #0]
 800929a:	4638      	mov	r0, r7
 800929c:	b003      	add	sp, #12
 800929e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092a6:	e7d5      	b.n	8009254 <__d2b+0x1e>
 80092a8:	6179      	str	r1, [r7, #20]
 80092aa:	e7e7      	b.n	800927c <__d2b+0x46>
 80092ac:	a801      	add	r0, sp, #4
 80092ae:	f7ff fde6 	bl	8008e7e <__lo0bits>
 80092b2:	9b01      	ldr	r3, [sp, #4]
 80092b4:	617b      	str	r3, [r7, #20]
 80092b6:	2101      	movs	r1, #1
 80092b8:	6139      	str	r1, [r7, #16]
 80092ba:	3020      	adds	r0, #32
 80092bc:	e7e5      	b.n	800928a <__d2b+0x54>
 80092be:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80092c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80092c6:	6030      	str	r0, [r6, #0]
 80092c8:	6918      	ldr	r0, [r3, #16]
 80092ca:	f7ff fdb9 	bl	8008e40 <__hi0bits>
 80092ce:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80092d2:	e7e1      	b.n	8009298 <__d2b+0x62>

080092d4 <_realloc_r>:
 80092d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d8:	4682      	mov	sl, r0
 80092da:	460c      	mov	r4, r1
 80092dc:	b929      	cbnz	r1, 80092ea <_realloc_r+0x16>
 80092de:	4611      	mov	r1, r2
 80092e0:	b003      	add	sp, #12
 80092e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e6:	f7ff badf 	b.w	80088a8 <_malloc_r>
 80092ea:	9201      	str	r2, [sp, #4]
 80092ec:	f7ff fd16 	bl	8008d1c <__malloc_lock>
 80092f0:	9a01      	ldr	r2, [sp, #4]
 80092f2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80092f6:	f102 080b 	add.w	r8, r2, #11
 80092fa:	f1b8 0f16 	cmp.w	r8, #22
 80092fe:	f1a4 0908 	sub.w	r9, r4, #8
 8009302:	f025 0603 	bic.w	r6, r5, #3
 8009306:	d90a      	bls.n	800931e <_realloc_r+0x4a>
 8009308:	f038 0807 	bics.w	r8, r8, #7
 800930c:	d509      	bpl.n	8009322 <_realloc_r+0x4e>
 800930e:	230c      	movs	r3, #12
 8009310:	f8ca 3000 	str.w	r3, [sl]
 8009314:	2700      	movs	r7, #0
 8009316:	4638      	mov	r0, r7
 8009318:	b003      	add	sp, #12
 800931a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800931e:	f04f 0810 	mov.w	r8, #16
 8009322:	4590      	cmp	r8, r2
 8009324:	d3f3      	bcc.n	800930e <_realloc_r+0x3a>
 8009326:	45b0      	cmp	r8, r6
 8009328:	f340 8145 	ble.w	80095b6 <_realloc_r+0x2e2>
 800932c:	4ba8      	ldr	r3, [pc, #672]	; (80095d0 <_realloc_r+0x2fc>)
 800932e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8009332:	eb09 0106 	add.w	r1, r9, r6
 8009336:	4571      	cmp	r1, lr
 8009338:	469b      	mov	fp, r3
 800933a:	684b      	ldr	r3, [r1, #4]
 800933c:	d005      	beq.n	800934a <_realloc_r+0x76>
 800933e:	f023 0001 	bic.w	r0, r3, #1
 8009342:	4408      	add	r0, r1
 8009344:	6840      	ldr	r0, [r0, #4]
 8009346:	07c7      	lsls	r7, r0, #31
 8009348:	d447      	bmi.n	80093da <_realloc_r+0x106>
 800934a:	f023 0303 	bic.w	r3, r3, #3
 800934e:	4571      	cmp	r1, lr
 8009350:	eb06 0703 	add.w	r7, r6, r3
 8009354:	d119      	bne.n	800938a <_realloc_r+0xb6>
 8009356:	f108 0010 	add.w	r0, r8, #16
 800935a:	4287      	cmp	r7, r0
 800935c:	db3f      	blt.n	80093de <_realloc_r+0x10a>
 800935e:	eb09 0308 	add.w	r3, r9, r8
 8009362:	eba7 0708 	sub.w	r7, r7, r8
 8009366:	f047 0701 	orr.w	r7, r7, #1
 800936a:	f8cb 3008 	str.w	r3, [fp, #8]
 800936e:	605f      	str	r7, [r3, #4]
 8009370:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009374:	f003 0301 	and.w	r3, r3, #1
 8009378:	ea43 0308 	orr.w	r3, r3, r8
 800937c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009380:	4650      	mov	r0, sl
 8009382:	f7ff fcd1 	bl	8008d28 <__malloc_unlock>
 8009386:	4627      	mov	r7, r4
 8009388:	e7c5      	b.n	8009316 <_realloc_r+0x42>
 800938a:	45b8      	cmp	r8, r7
 800938c:	dc27      	bgt.n	80093de <_realloc_r+0x10a>
 800938e:	68cb      	ldr	r3, [r1, #12]
 8009390:	688a      	ldr	r2, [r1, #8]
 8009392:	60d3      	str	r3, [r2, #12]
 8009394:	609a      	str	r2, [r3, #8]
 8009396:	eba7 0008 	sub.w	r0, r7, r8
 800939a:	280f      	cmp	r0, #15
 800939c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80093a0:	eb09 0207 	add.w	r2, r9, r7
 80093a4:	f240 8109 	bls.w	80095ba <_realloc_r+0x2e6>
 80093a8:	eb09 0108 	add.w	r1, r9, r8
 80093ac:	f003 0301 	and.w	r3, r3, #1
 80093b0:	ea43 0308 	orr.w	r3, r3, r8
 80093b4:	f040 0001 	orr.w	r0, r0, #1
 80093b8:	f8c9 3004 	str.w	r3, [r9, #4]
 80093bc:	6048      	str	r0, [r1, #4]
 80093be:	6853      	ldr	r3, [r2, #4]
 80093c0:	f043 0301 	orr.w	r3, r3, #1
 80093c4:	6053      	str	r3, [r2, #4]
 80093c6:	3108      	adds	r1, #8
 80093c8:	4650      	mov	r0, sl
 80093ca:	f7fe ffb1 	bl	8008330 <_free_r>
 80093ce:	4650      	mov	r0, sl
 80093d0:	f7ff fcaa 	bl	8008d28 <__malloc_unlock>
 80093d4:	f109 0708 	add.w	r7, r9, #8
 80093d8:	e79d      	b.n	8009316 <_realloc_r+0x42>
 80093da:	2300      	movs	r3, #0
 80093dc:	4619      	mov	r1, r3
 80093de:	07e8      	lsls	r0, r5, #31
 80093e0:	f100 8084 	bmi.w	80094ec <_realloc_r+0x218>
 80093e4:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80093e8:	eba9 0505 	sub.w	r5, r9, r5
 80093ec:	6868      	ldr	r0, [r5, #4]
 80093ee:	f020 0003 	bic.w	r0, r0, #3
 80093f2:	4430      	add	r0, r6
 80093f4:	2900      	cmp	r1, #0
 80093f6:	d076      	beq.n	80094e6 <_realloc_r+0x212>
 80093f8:	4571      	cmp	r1, lr
 80093fa:	d150      	bne.n	800949e <_realloc_r+0x1ca>
 80093fc:	4403      	add	r3, r0
 80093fe:	f108 0110 	add.w	r1, r8, #16
 8009402:	428b      	cmp	r3, r1
 8009404:	db6f      	blt.n	80094e6 <_realloc_r+0x212>
 8009406:	462f      	mov	r7, r5
 8009408:	68ea      	ldr	r2, [r5, #12]
 800940a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800940e:	60ca      	str	r2, [r1, #12]
 8009410:	6091      	str	r1, [r2, #8]
 8009412:	1f32      	subs	r2, r6, #4
 8009414:	2a24      	cmp	r2, #36	; 0x24
 8009416:	d83b      	bhi.n	8009490 <_realloc_r+0x1bc>
 8009418:	2a13      	cmp	r2, #19
 800941a:	d936      	bls.n	800948a <_realloc_r+0x1b6>
 800941c:	6821      	ldr	r1, [r4, #0]
 800941e:	60a9      	str	r1, [r5, #8]
 8009420:	6861      	ldr	r1, [r4, #4]
 8009422:	60e9      	str	r1, [r5, #12]
 8009424:	2a1b      	cmp	r2, #27
 8009426:	d81c      	bhi.n	8009462 <_realloc_r+0x18e>
 8009428:	f105 0210 	add.w	r2, r5, #16
 800942c:	f104 0108 	add.w	r1, r4, #8
 8009430:	6808      	ldr	r0, [r1, #0]
 8009432:	6010      	str	r0, [r2, #0]
 8009434:	6848      	ldr	r0, [r1, #4]
 8009436:	6050      	str	r0, [r2, #4]
 8009438:	6889      	ldr	r1, [r1, #8]
 800943a:	6091      	str	r1, [r2, #8]
 800943c:	eb05 0208 	add.w	r2, r5, r8
 8009440:	eba3 0308 	sub.w	r3, r3, r8
 8009444:	f043 0301 	orr.w	r3, r3, #1
 8009448:	f8cb 2008 	str.w	r2, [fp, #8]
 800944c:	6053      	str	r3, [r2, #4]
 800944e:	686b      	ldr	r3, [r5, #4]
 8009450:	f003 0301 	and.w	r3, r3, #1
 8009454:	ea43 0308 	orr.w	r3, r3, r8
 8009458:	606b      	str	r3, [r5, #4]
 800945a:	4650      	mov	r0, sl
 800945c:	f7ff fc64 	bl	8008d28 <__malloc_unlock>
 8009460:	e759      	b.n	8009316 <_realloc_r+0x42>
 8009462:	68a1      	ldr	r1, [r4, #8]
 8009464:	6129      	str	r1, [r5, #16]
 8009466:	68e1      	ldr	r1, [r4, #12]
 8009468:	6169      	str	r1, [r5, #20]
 800946a:	2a24      	cmp	r2, #36	; 0x24
 800946c:	bf01      	itttt	eq
 800946e:	6922      	ldreq	r2, [r4, #16]
 8009470:	61aa      	streq	r2, [r5, #24]
 8009472:	6960      	ldreq	r0, [r4, #20]
 8009474:	61e8      	streq	r0, [r5, #28]
 8009476:	bf19      	ittee	ne
 8009478:	f105 0218 	addne.w	r2, r5, #24
 800947c:	f104 0110 	addne.w	r1, r4, #16
 8009480:	f105 0220 	addeq.w	r2, r5, #32
 8009484:	f104 0118 	addeq.w	r1, r4, #24
 8009488:	e7d2      	b.n	8009430 <_realloc_r+0x15c>
 800948a:	463a      	mov	r2, r7
 800948c:	4621      	mov	r1, r4
 800948e:	e7cf      	b.n	8009430 <_realloc_r+0x15c>
 8009490:	4621      	mov	r1, r4
 8009492:	4638      	mov	r0, r7
 8009494:	9301      	str	r3, [sp, #4]
 8009496:	f7ff fc27 	bl	8008ce8 <memmove>
 800949a:	9b01      	ldr	r3, [sp, #4]
 800949c:	e7ce      	b.n	800943c <_realloc_r+0x168>
 800949e:	18c7      	adds	r7, r0, r3
 80094a0:	45b8      	cmp	r8, r7
 80094a2:	dc20      	bgt.n	80094e6 <_realloc_r+0x212>
 80094a4:	68cb      	ldr	r3, [r1, #12]
 80094a6:	688a      	ldr	r2, [r1, #8]
 80094a8:	60d3      	str	r3, [r2, #12]
 80094aa:	609a      	str	r2, [r3, #8]
 80094ac:	4628      	mov	r0, r5
 80094ae:	68eb      	ldr	r3, [r5, #12]
 80094b0:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80094b4:	60d3      	str	r3, [r2, #12]
 80094b6:	609a      	str	r2, [r3, #8]
 80094b8:	1f32      	subs	r2, r6, #4
 80094ba:	2a24      	cmp	r2, #36	; 0x24
 80094bc:	d842      	bhi.n	8009544 <_realloc_r+0x270>
 80094be:	2a13      	cmp	r2, #19
 80094c0:	d93e      	bls.n	8009540 <_realloc_r+0x26c>
 80094c2:	6823      	ldr	r3, [r4, #0]
 80094c4:	60ab      	str	r3, [r5, #8]
 80094c6:	6863      	ldr	r3, [r4, #4]
 80094c8:	60eb      	str	r3, [r5, #12]
 80094ca:	2a1b      	cmp	r2, #27
 80094cc:	d824      	bhi.n	8009518 <_realloc_r+0x244>
 80094ce:	f105 0010 	add.w	r0, r5, #16
 80094d2:	f104 0308 	add.w	r3, r4, #8
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	6002      	str	r2, [r0, #0]
 80094da:	685a      	ldr	r2, [r3, #4]
 80094dc:	6042      	str	r2, [r0, #4]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	6083      	str	r3, [r0, #8]
 80094e2:	46a9      	mov	r9, r5
 80094e4:	e757      	b.n	8009396 <_realloc_r+0xc2>
 80094e6:	4580      	cmp	r8, r0
 80094e8:	4607      	mov	r7, r0
 80094ea:	dddf      	ble.n	80094ac <_realloc_r+0x1d8>
 80094ec:	4611      	mov	r1, r2
 80094ee:	4650      	mov	r0, sl
 80094f0:	f7ff f9da 	bl	80088a8 <_malloc_r>
 80094f4:	4607      	mov	r7, r0
 80094f6:	2800      	cmp	r0, #0
 80094f8:	d0af      	beq.n	800945a <_realloc_r+0x186>
 80094fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80094fe:	f023 0301 	bic.w	r3, r3, #1
 8009502:	f1a0 0208 	sub.w	r2, r0, #8
 8009506:	444b      	add	r3, r9
 8009508:	429a      	cmp	r2, r3
 800950a:	d11f      	bne.n	800954c <_realloc_r+0x278>
 800950c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8009510:	f027 0703 	bic.w	r7, r7, #3
 8009514:	4437      	add	r7, r6
 8009516:	e73e      	b.n	8009396 <_realloc_r+0xc2>
 8009518:	68a3      	ldr	r3, [r4, #8]
 800951a:	612b      	str	r3, [r5, #16]
 800951c:	68e3      	ldr	r3, [r4, #12]
 800951e:	616b      	str	r3, [r5, #20]
 8009520:	2a24      	cmp	r2, #36	; 0x24
 8009522:	bf01      	itttt	eq
 8009524:	6923      	ldreq	r3, [r4, #16]
 8009526:	61ab      	streq	r3, [r5, #24]
 8009528:	6962      	ldreq	r2, [r4, #20]
 800952a:	61ea      	streq	r2, [r5, #28]
 800952c:	bf19      	ittee	ne
 800952e:	f105 0018 	addne.w	r0, r5, #24
 8009532:	f104 0310 	addne.w	r3, r4, #16
 8009536:	f105 0020 	addeq.w	r0, r5, #32
 800953a:	f104 0318 	addeq.w	r3, r4, #24
 800953e:	e7ca      	b.n	80094d6 <_realloc_r+0x202>
 8009540:	4623      	mov	r3, r4
 8009542:	e7c8      	b.n	80094d6 <_realloc_r+0x202>
 8009544:	4621      	mov	r1, r4
 8009546:	f7ff fbcf 	bl	8008ce8 <memmove>
 800954a:	e7ca      	b.n	80094e2 <_realloc_r+0x20e>
 800954c:	1f32      	subs	r2, r6, #4
 800954e:	2a24      	cmp	r2, #36	; 0x24
 8009550:	d82d      	bhi.n	80095ae <_realloc_r+0x2da>
 8009552:	2a13      	cmp	r2, #19
 8009554:	d928      	bls.n	80095a8 <_realloc_r+0x2d4>
 8009556:	6823      	ldr	r3, [r4, #0]
 8009558:	6003      	str	r3, [r0, #0]
 800955a:	6863      	ldr	r3, [r4, #4]
 800955c:	6043      	str	r3, [r0, #4]
 800955e:	2a1b      	cmp	r2, #27
 8009560:	d80e      	bhi.n	8009580 <_realloc_r+0x2ac>
 8009562:	f100 0308 	add.w	r3, r0, #8
 8009566:	f104 0208 	add.w	r2, r4, #8
 800956a:	6811      	ldr	r1, [r2, #0]
 800956c:	6019      	str	r1, [r3, #0]
 800956e:	6851      	ldr	r1, [r2, #4]
 8009570:	6059      	str	r1, [r3, #4]
 8009572:	6892      	ldr	r2, [r2, #8]
 8009574:	609a      	str	r2, [r3, #8]
 8009576:	4621      	mov	r1, r4
 8009578:	4650      	mov	r0, sl
 800957a:	f7fe fed9 	bl	8008330 <_free_r>
 800957e:	e76c      	b.n	800945a <_realloc_r+0x186>
 8009580:	68a3      	ldr	r3, [r4, #8]
 8009582:	6083      	str	r3, [r0, #8]
 8009584:	68e3      	ldr	r3, [r4, #12]
 8009586:	60c3      	str	r3, [r0, #12]
 8009588:	2a24      	cmp	r2, #36	; 0x24
 800958a:	bf01      	itttt	eq
 800958c:	6923      	ldreq	r3, [r4, #16]
 800958e:	6103      	streq	r3, [r0, #16]
 8009590:	6961      	ldreq	r1, [r4, #20]
 8009592:	6141      	streq	r1, [r0, #20]
 8009594:	bf19      	ittee	ne
 8009596:	f100 0310 	addne.w	r3, r0, #16
 800959a:	f104 0210 	addne.w	r2, r4, #16
 800959e:	f100 0318 	addeq.w	r3, r0, #24
 80095a2:	f104 0218 	addeq.w	r2, r4, #24
 80095a6:	e7e0      	b.n	800956a <_realloc_r+0x296>
 80095a8:	4603      	mov	r3, r0
 80095aa:	4622      	mov	r2, r4
 80095ac:	e7dd      	b.n	800956a <_realloc_r+0x296>
 80095ae:	4621      	mov	r1, r4
 80095b0:	f7ff fb9a 	bl	8008ce8 <memmove>
 80095b4:	e7df      	b.n	8009576 <_realloc_r+0x2a2>
 80095b6:	4637      	mov	r7, r6
 80095b8:	e6ed      	b.n	8009396 <_realloc_r+0xc2>
 80095ba:	f003 0301 	and.w	r3, r3, #1
 80095be:	431f      	orrs	r7, r3
 80095c0:	f8c9 7004 	str.w	r7, [r9, #4]
 80095c4:	6853      	ldr	r3, [r2, #4]
 80095c6:	f043 0301 	orr.w	r3, r3, #1
 80095ca:	6053      	str	r3, [r2, #4]
 80095cc:	e6ff      	b.n	80093ce <_realloc_r+0xfa>
 80095ce:	bf00      	nop
 80095d0:	20000374 	.word	0x20000374

080095d4 <_sbrk_r>:
 80095d4:	b538      	push	{r3, r4, r5, lr}
 80095d6:	4c06      	ldr	r4, [pc, #24]	; (80095f0 <_sbrk_r+0x1c>)
 80095d8:	2300      	movs	r3, #0
 80095da:	4605      	mov	r5, r0
 80095dc:	4608      	mov	r0, r1
 80095de:	6023      	str	r3, [r4, #0]
 80095e0:	f7fb ffdc 	bl	800559c <_sbrk>
 80095e4:	1c43      	adds	r3, r0, #1
 80095e6:	d102      	bne.n	80095ee <_sbrk_r+0x1a>
 80095e8:	6823      	ldr	r3, [r4, #0]
 80095ea:	b103      	cbz	r3, 80095ee <_sbrk_r+0x1a>
 80095ec:	602b      	str	r3, [r5, #0]
 80095ee:	bd38      	pop	{r3, r4, r5, pc}
 80095f0:	200031fc 	.word	0x200031fc

080095f4 <_raise_r>:
 80095f4:	291f      	cmp	r1, #31
 80095f6:	b538      	push	{r3, r4, r5, lr}
 80095f8:	4604      	mov	r4, r0
 80095fa:	460d      	mov	r5, r1
 80095fc:	d904      	bls.n	8009608 <_raise_r+0x14>
 80095fe:	2316      	movs	r3, #22
 8009600:	6003      	str	r3, [r0, #0]
 8009602:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009606:	bd38      	pop	{r3, r4, r5, pc}
 8009608:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800960a:	b112      	cbz	r2, 8009612 <_raise_r+0x1e>
 800960c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009610:	b94b      	cbnz	r3, 8009626 <_raise_r+0x32>
 8009612:	4620      	mov	r0, r4
 8009614:	f000 f830 	bl	8009678 <_getpid_r>
 8009618:	462a      	mov	r2, r5
 800961a:	4601      	mov	r1, r0
 800961c:	4620      	mov	r0, r4
 800961e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009622:	f000 b817 	b.w	8009654 <_kill_r>
 8009626:	2b01      	cmp	r3, #1
 8009628:	d00a      	beq.n	8009640 <_raise_r+0x4c>
 800962a:	1c59      	adds	r1, r3, #1
 800962c:	d103      	bne.n	8009636 <_raise_r+0x42>
 800962e:	2316      	movs	r3, #22
 8009630:	6003      	str	r3, [r0, #0]
 8009632:	2001      	movs	r0, #1
 8009634:	bd38      	pop	{r3, r4, r5, pc}
 8009636:	2400      	movs	r4, #0
 8009638:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800963c:	4628      	mov	r0, r5
 800963e:	4798      	blx	r3
 8009640:	2000      	movs	r0, #0
 8009642:	bd38      	pop	{r3, r4, r5, pc}

08009644 <raise>:
 8009644:	4b02      	ldr	r3, [pc, #8]	; (8009650 <raise+0xc>)
 8009646:	4601      	mov	r1, r0
 8009648:	6818      	ldr	r0, [r3, #0]
 800964a:	f7ff bfd3 	b.w	80095f4 <_raise_r>
 800964e:	bf00      	nop
 8009650:	20000114 	.word	0x20000114

08009654 <_kill_r>:
 8009654:	b538      	push	{r3, r4, r5, lr}
 8009656:	4c07      	ldr	r4, [pc, #28]	; (8009674 <_kill_r+0x20>)
 8009658:	2300      	movs	r3, #0
 800965a:	4605      	mov	r5, r0
 800965c:	4608      	mov	r0, r1
 800965e:	4611      	mov	r1, r2
 8009660:	6023      	str	r3, [r4, #0]
 8009662:	f7fb ff71 	bl	8005548 <_kill>
 8009666:	1c43      	adds	r3, r0, #1
 8009668:	d102      	bne.n	8009670 <_kill_r+0x1c>
 800966a:	6823      	ldr	r3, [r4, #0]
 800966c:	b103      	cbz	r3, 8009670 <_kill_r+0x1c>
 800966e:	602b      	str	r3, [r5, #0]
 8009670:	bd38      	pop	{r3, r4, r5, pc}
 8009672:	bf00      	nop
 8009674:	200031fc 	.word	0x200031fc

08009678 <_getpid_r>:
 8009678:	f7fb bf64 	b.w	8005544 <_getpid>

0800967c <__sread>:
 800967c:	b510      	push	{r4, lr}
 800967e:	460c      	mov	r4, r1
 8009680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009684:	f000 fa3c 	bl	8009b00 <_read_r>
 8009688:	2800      	cmp	r0, #0
 800968a:	bfab      	itete	ge
 800968c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800968e:	89a3      	ldrhlt	r3, [r4, #12]
 8009690:	181b      	addge	r3, r3, r0
 8009692:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009696:	bfac      	ite	ge
 8009698:	6563      	strge	r3, [r4, #84]	; 0x54
 800969a:	81a3      	strhlt	r3, [r4, #12]
 800969c:	bd10      	pop	{r4, pc}

0800969e <__swrite>:
 800969e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a2:	461f      	mov	r7, r3
 80096a4:	898b      	ldrh	r3, [r1, #12]
 80096a6:	05db      	lsls	r3, r3, #23
 80096a8:	4605      	mov	r5, r0
 80096aa:	460c      	mov	r4, r1
 80096ac:	4616      	mov	r6, r2
 80096ae:	d505      	bpl.n	80096bc <__swrite+0x1e>
 80096b0:	2302      	movs	r3, #2
 80096b2:	2200      	movs	r2, #0
 80096b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096b8:	f000 fa10 	bl	8009adc <_lseek_r>
 80096bc:	89a3      	ldrh	r3, [r4, #12]
 80096be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096c6:	81a3      	strh	r3, [r4, #12]
 80096c8:	4632      	mov	r2, r6
 80096ca:	463b      	mov	r3, r7
 80096cc:	4628      	mov	r0, r5
 80096ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096d2:	f000 b925 	b.w	8009920 <_write_r>

080096d6 <__sseek>:
 80096d6:	b510      	push	{r4, lr}
 80096d8:	460c      	mov	r4, r1
 80096da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096de:	f000 f9fd 	bl	8009adc <_lseek_r>
 80096e2:	1c43      	adds	r3, r0, #1
 80096e4:	89a3      	ldrh	r3, [r4, #12]
 80096e6:	bf15      	itete	ne
 80096e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80096ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80096ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80096f2:	81a3      	strheq	r3, [r4, #12]
 80096f4:	bf18      	it	ne
 80096f6:	81a3      	strhne	r3, [r4, #12]
 80096f8:	bd10      	pop	{r4, pc}

080096fa <__sclose>:
 80096fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096fe:	f000 b94f 	b.w	80099a0 <_close_r>

08009702 <__ssprint_r>:
 8009702:	6893      	ldr	r3, [r2, #8]
 8009704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009708:	4681      	mov	r9, r0
 800970a:	460c      	mov	r4, r1
 800970c:	4617      	mov	r7, r2
 800970e:	2b00      	cmp	r3, #0
 8009710:	d060      	beq.n	80097d4 <__ssprint_r+0xd2>
 8009712:	f04f 0b00 	mov.w	fp, #0
 8009716:	f8d2 a000 	ldr.w	sl, [r2]
 800971a:	465e      	mov	r6, fp
 800971c:	b356      	cbz	r6, 8009774 <__ssprint_r+0x72>
 800971e:	68a3      	ldr	r3, [r4, #8]
 8009720:	429e      	cmp	r6, r3
 8009722:	d344      	bcc.n	80097ae <__ssprint_r+0xac>
 8009724:	89a2      	ldrh	r2, [r4, #12]
 8009726:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800972a:	d03e      	beq.n	80097aa <__ssprint_r+0xa8>
 800972c:	6825      	ldr	r5, [r4, #0]
 800972e:	6921      	ldr	r1, [r4, #16]
 8009730:	eba5 0801 	sub.w	r8, r5, r1
 8009734:	6965      	ldr	r5, [r4, #20]
 8009736:	2302      	movs	r3, #2
 8009738:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800973c:	fb95 f5f3 	sdiv	r5, r5, r3
 8009740:	f108 0301 	add.w	r3, r8, #1
 8009744:	4433      	add	r3, r6
 8009746:	429d      	cmp	r5, r3
 8009748:	bf38      	it	cc
 800974a:	461d      	movcc	r5, r3
 800974c:	0553      	lsls	r3, r2, #21
 800974e:	d546      	bpl.n	80097de <__ssprint_r+0xdc>
 8009750:	4629      	mov	r1, r5
 8009752:	4648      	mov	r0, r9
 8009754:	f7ff f8a8 	bl	80088a8 <_malloc_r>
 8009758:	b998      	cbnz	r0, 8009782 <__ssprint_r+0x80>
 800975a:	230c      	movs	r3, #12
 800975c:	f8c9 3000 	str.w	r3, [r9]
 8009760:	89a3      	ldrh	r3, [r4, #12]
 8009762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009766:	81a3      	strh	r3, [r4, #12]
 8009768:	2300      	movs	r3, #0
 800976a:	60bb      	str	r3, [r7, #8]
 800976c:	607b      	str	r3, [r7, #4]
 800976e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009772:	e031      	b.n	80097d8 <__ssprint_r+0xd6>
 8009774:	f8da b000 	ldr.w	fp, [sl]
 8009778:	f8da 6004 	ldr.w	r6, [sl, #4]
 800977c:	f10a 0a08 	add.w	sl, sl, #8
 8009780:	e7cc      	b.n	800971c <__ssprint_r+0x1a>
 8009782:	4642      	mov	r2, r8
 8009784:	6921      	ldr	r1, [r4, #16]
 8009786:	9001      	str	r0, [sp, #4]
 8009788:	f7fb ffc0 	bl	800570c <memcpy>
 800978c:	89a2      	ldrh	r2, [r4, #12]
 800978e:	9b01      	ldr	r3, [sp, #4]
 8009790:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8009794:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009798:	81a2      	strh	r2, [r4, #12]
 800979a:	6123      	str	r3, [r4, #16]
 800979c:	6165      	str	r5, [r4, #20]
 800979e:	4443      	add	r3, r8
 80097a0:	eba5 0508 	sub.w	r5, r5, r8
 80097a4:	6023      	str	r3, [r4, #0]
 80097a6:	60a5      	str	r5, [r4, #8]
 80097a8:	4633      	mov	r3, r6
 80097aa:	429e      	cmp	r6, r3
 80097ac:	d200      	bcs.n	80097b0 <__ssprint_r+0xae>
 80097ae:	4633      	mov	r3, r6
 80097b0:	461a      	mov	r2, r3
 80097b2:	4659      	mov	r1, fp
 80097b4:	6820      	ldr	r0, [r4, #0]
 80097b6:	9301      	str	r3, [sp, #4]
 80097b8:	f7ff fa96 	bl	8008ce8 <memmove>
 80097bc:	68a2      	ldr	r2, [r4, #8]
 80097be:	9b01      	ldr	r3, [sp, #4]
 80097c0:	1ad2      	subs	r2, r2, r3
 80097c2:	60a2      	str	r2, [r4, #8]
 80097c4:	6822      	ldr	r2, [r4, #0]
 80097c6:	4413      	add	r3, r2
 80097c8:	6023      	str	r3, [r4, #0]
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	1b9e      	subs	r6, r3, r6
 80097ce:	60be      	str	r6, [r7, #8]
 80097d0:	2e00      	cmp	r6, #0
 80097d2:	d1cf      	bne.n	8009774 <__ssprint_r+0x72>
 80097d4:	2000      	movs	r0, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	b003      	add	sp, #12
 80097da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097de:	462a      	mov	r2, r5
 80097e0:	4648      	mov	r0, r9
 80097e2:	f7ff fd77 	bl	80092d4 <_realloc_r>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2800      	cmp	r0, #0
 80097ea:	d1d6      	bne.n	800979a <__ssprint_r+0x98>
 80097ec:	6921      	ldr	r1, [r4, #16]
 80097ee:	4648      	mov	r0, r9
 80097f0:	f7fe fd9e 	bl	8008330 <_free_r>
 80097f4:	e7b1      	b.n	800975a <__ssprint_r+0x58>
	...

080097f8 <__swbuf_r>:
 80097f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fa:	460e      	mov	r6, r1
 80097fc:	4614      	mov	r4, r2
 80097fe:	4605      	mov	r5, r0
 8009800:	b118      	cbz	r0, 800980a <__swbuf_r+0x12>
 8009802:	6983      	ldr	r3, [r0, #24]
 8009804:	b90b      	cbnz	r3, 800980a <__swbuf_r+0x12>
 8009806:	f7fe fc53 	bl	80080b0 <__sinit>
 800980a:	4b27      	ldr	r3, [pc, #156]	; (80098a8 <__swbuf_r+0xb0>)
 800980c:	429c      	cmp	r4, r3
 800980e:	d12f      	bne.n	8009870 <__swbuf_r+0x78>
 8009810:	686c      	ldr	r4, [r5, #4]
 8009812:	69a3      	ldr	r3, [r4, #24]
 8009814:	60a3      	str	r3, [r4, #8]
 8009816:	89a3      	ldrh	r3, [r4, #12]
 8009818:	0719      	lsls	r1, r3, #28
 800981a:	d533      	bpl.n	8009884 <__swbuf_r+0x8c>
 800981c:	6923      	ldr	r3, [r4, #16]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d030      	beq.n	8009884 <__swbuf_r+0x8c>
 8009822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009826:	b2f6      	uxtb	r6, r6
 8009828:	049a      	lsls	r2, r3, #18
 800982a:	4637      	mov	r7, r6
 800982c:	d534      	bpl.n	8009898 <__swbuf_r+0xa0>
 800982e:	6923      	ldr	r3, [r4, #16]
 8009830:	6820      	ldr	r0, [r4, #0]
 8009832:	1ac0      	subs	r0, r0, r3
 8009834:	6963      	ldr	r3, [r4, #20]
 8009836:	4298      	cmp	r0, r3
 8009838:	db04      	blt.n	8009844 <__swbuf_r+0x4c>
 800983a:	4621      	mov	r1, r4
 800983c:	4628      	mov	r0, r5
 800983e:	f7fe fba3 	bl	8007f88 <_fflush_r>
 8009842:	bb28      	cbnz	r0, 8009890 <__swbuf_r+0x98>
 8009844:	68a3      	ldr	r3, [r4, #8]
 8009846:	3b01      	subs	r3, #1
 8009848:	60a3      	str	r3, [r4, #8]
 800984a:	6823      	ldr	r3, [r4, #0]
 800984c:	1c5a      	adds	r2, r3, #1
 800984e:	6022      	str	r2, [r4, #0]
 8009850:	701e      	strb	r6, [r3, #0]
 8009852:	6963      	ldr	r3, [r4, #20]
 8009854:	3001      	adds	r0, #1
 8009856:	4298      	cmp	r0, r3
 8009858:	d004      	beq.n	8009864 <__swbuf_r+0x6c>
 800985a:	89a3      	ldrh	r3, [r4, #12]
 800985c:	07db      	lsls	r3, r3, #31
 800985e:	d519      	bpl.n	8009894 <__swbuf_r+0x9c>
 8009860:	2e0a      	cmp	r6, #10
 8009862:	d117      	bne.n	8009894 <__swbuf_r+0x9c>
 8009864:	4621      	mov	r1, r4
 8009866:	4628      	mov	r0, r5
 8009868:	f7fe fb8e 	bl	8007f88 <_fflush_r>
 800986c:	b190      	cbz	r0, 8009894 <__swbuf_r+0x9c>
 800986e:	e00f      	b.n	8009890 <__swbuf_r+0x98>
 8009870:	4b0e      	ldr	r3, [pc, #56]	; (80098ac <__swbuf_r+0xb4>)
 8009872:	429c      	cmp	r4, r3
 8009874:	d101      	bne.n	800987a <__swbuf_r+0x82>
 8009876:	68ac      	ldr	r4, [r5, #8]
 8009878:	e7cb      	b.n	8009812 <__swbuf_r+0x1a>
 800987a:	4b0d      	ldr	r3, [pc, #52]	; (80098b0 <__swbuf_r+0xb8>)
 800987c:	429c      	cmp	r4, r3
 800987e:	bf08      	it	eq
 8009880:	68ec      	ldreq	r4, [r5, #12]
 8009882:	e7c6      	b.n	8009812 <__swbuf_r+0x1a>
 8009884:	4621      	mov	r1, r4
 8009886:	4628      	mov	r0, r5
 8009888:	f7fd fc1a 	bl	80070c0 <__swsetup_r>
 800988c:	2800      	cmp	r0, #0
 800988e:	d0c8      	beq.n	8009822 <__swbuf_r+0x2a>
 8009890:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009894:	4638      	mov	r0, r7
 8009896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009898:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800989c:	81a3      	strh	r3, [r4, #12]
 800989e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098a4:	6663      	str	r3, [r4, #100]	; 0x64
 80098a6:	e7c2      	b.n	800982e <__swbuf_r+0x36>
 80098a8:	0800a770 	.word	0x0800a770
 80098ac:	0800a790 	.word	0x0800a790
 80098b0:	0800a750 	.word	0x0800a750

080098b4 <_wcrtomb_r>:
 80098b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098b6:	4605      	mov	r5, r0
 80098b8:	b085      	sub	sp, #20
 80098ba:	461e      	mov	r6, r3
 80098bc:	460f      	mov	r7, r1
 80098be:	4c0f      	ldr	r4, [pc, #60]	; (80098fc <_wcrtomb_r+0x48>)
 80098c0:	b991      	cbnz	r1, 80098e8 <_wcrtomb_r+0x34>
 80098c2:	6822      	ldr	r2, [r4, #0]
 80098c4:	490e      	ldr	r1, [pc, #56]	; (8009900 <_wcrtomb_r+0x4c>)
 80098c6:	6a12      	ldr	r2, [r2, #32]
 80098c8:	2a00      	cmp	r2, #0
 80098ca:	bf08      	it	eq
 80098cc:	460a      	moveq	r2, r1
 80098ce:	a901      	add	r1, sp, #4
 80098d0:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 80098d4:	463a      	mov	r2, r7
 80098d6:	47a0      	blx	r4
 80098d8:	1c43      	adds	r3, r0, #1
 80098da:	bf01      	itttt	eq
 80098dc:	2300      	moveq	r3, #0
 80098de:	6033      	streq	r3, [r6, #0]
 80098e0:	238a      	moveq	r3, #138	; 0x8a
 80098e2:	602b      	streq	r3, [r5, #0]
 80098e4:	b005      	add	sp, #20
 80098e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098e8:	6824      	ldr	r4, [r4, #0]
 80098ea:	4f05      	ldr	r7, [pc, #20]	; (8009900 <_wcrtomb_r+0x4c>)
 80098ec:	6a24      	ldr	r4, [r4, #32]
 80098ee:	2c00      	cmp	r4, #0
 80098f0:	bf08      	it	eq
 80098f2:	463c      	moveq	r4, r7
 80098f4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 80098f8:	e7ed      	b.n	80098d6 <_wcrtomb_r+0x22>
 80098fa:	bf00      	nop
 80098fc:	20000114 	.word	0x20000114
 8009900:	20000208 	.word	0x20000208

08009904 <__ascii_wctomb>:
 8009904:	b149      	cbz	r1, 800991a <__ascii_wctomb+0x16>
 8009906:	2aff      	cmp	r2, #255	; 0xff
 8009908:	bf85      	ittet	hi
 800990a:	238a      	movhi	r3, #138	; 0x8a
 800990c:	6003      	strhi	r3, [r0, #0]
 800990e:	700a      	strbls	r2, [r1, #0]
 8009910:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009914:	bf98      	it	ls
 8009916:	2001      	movls	r0, #1
 8009918:	4770      	bx	lr
 800991a:	4608      	mov	r0, r1
 800991c:	4770      	bx	lr
	...

08009920 <_write_r>:
 8009920:	b538      	push	{r3, r4, r5, lr}
 8009922:	4c07      	ldr	r4, [pc, #28]	; (8009940 <_write_r+0x20>)
 8009924:	4605      	mov	r5, r0
 8009926:	4608      	mov	r0, r1
 8009928:	4611      	mov	r1, r2
 800992a:	2200      	movs	r2, #0
 800992c:	6022      	str	r2, [r4, #0]
 800992e:	461a      	mov	r2, r3
 8009930:	f7fb fe26 	bl	8005580 <_write>
 8009934:	1c43      	adds	r3, r0, #1
 8009936:	d102      	bne.n	800993e <_write_r+0x1e>
 8009938:	6823      	ldr	r3, [r4, #0]
 800993a:	b103      	cbz	r3, 800993e <_write_r+0x1e>
 800993c:	602b      	str	r3, [r5, #0]
 800993e:	bd38      	pop	{r3, r4, r5, pc}
 8009940:	200031fc 	.word	0x200031fc

08009944 <_calloc_r>:
 8009944:	b510      	push	{r4, lr}
 8009946:	4351      	muls	r1, r2
 8009948:	f7fe ffae 	bl	80088a8 <_malloc_r>
 800994c:	4604      	mov	r4, r0
 800994e:	b198      	cbz	r0, 8009978 <_calloc_r+0x34>
 8009950:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8009954:	f022 0203 	bic.w	r2, r2, #3
 8009958:	3a04      	subs	r2, #4
 800995a:	2a24      	cmp	r2, #36	; 0x24
 800995c:	d81b      	bhi.n	8009996 <_calloc_r+0x52>
 800995e:	2a13      	cmp	r2, #19
 8009960:	d917      	bls.n	8009992 <_calloc_r+0x4e>
 8009962:	2100      	movs	r1, #0
 8009964:	2a1b      	cmp	r2, #27
 8009966:	6001      	str	r1, [r0, #0]
 8009968:	6041      	str	r1, [r0, #4]
 800996a:	d807      	bhi.n	800997c <_calloc_r+0x38>
 800996c:	f100 0308 	add.w	r3, r0, #8
 8009970:	2200      	movs	r2, #0
 8009972:	601a      	str	r2, [r3, #0]
 8009974:	605a      	str	r2, [r3, #4]
 8009976:	609a      	str	r2, [r3, #8]
 8009978:	4620      	mov	r0, r4
 800997a:	bd10      	pop	{r4, pc}
 800997c:	2a24      	cmp	r2, #36	; 0x24
 800997e:	6081      	str	r1, [r0, #8]
 8009980:	60c1      	str	r1, [r0, #12]
 8009982:	bf11      	iteee	ne
 8009984:	f100 0310 	addne.w	r3, r0, #16
 8009988:	6101      	streq	r1, [r0, #16]
 800998a:	f100 0318 	addeq.w	r3, r0, #24
 800998e:	6141      	streq	r1, [r0, #20]
 8009990:	e7ee      	b.n	8009970 <_calloc_r+0x2c>
 8009992:	4603      	mov	r3, r0
 8009994:	e7ec      	b.n	8009970 <_calloc_r+0x2c>
 8009996:	2100      	movs	r1, #0
 8009998:	f7fb fec3 	bl	8005722 <memset>
 800999c:	e7ec      	b.n	8009978 <_calloc_r+0x34>
	...

080099a0 <_close_r>:
 80099a0:	b538      	push	{r3, r4, r5, lr}
 80099a2:	4c06      	ldr	r4, [pc, #24]	; (80099bc <_close_r+0x1c>)
 80099a4:	2300      	movs	r3, #0
 80099a6:	4605      	mov	r5, r0
 80099a8:	4608      	mov	r0, r1
 80099aa:	6023      	str	r3, [r4, #0]
 80099ac:	f7fb fe10 	bl	80055d0 <_close>
 80099b0:	1c43      	adds	r3, r0, #1
 80099b2:	d102      	bne.n	80099ba <_close_r+0x1a>
 80099b4:	6823      	ldr	r3, [r4, #0]
 80099b6:	b103      	cbz	r3, 80099ba <_close_r+0x1a>
 80099b8:	602b      	str	r3, [r5, #0]
 80099ba:	bd38      	pop	{r3, r4, r5, pc}
 80099bc:	200031fc 	.word	0x200031fc

080099c0 <_fclose_r>:
 80099c0:	b570      	push	{r4, r5, r6, lr}
 80099c2:	4605      	mov	r5, r0
 80099c4:	460c      	mov	r4, r1
 80099c6:	b911      	cbnz	r1, 80099ce <_fclose_r+0xe>
 80099c8:	2600      	movs	r6, #0
 80099ca:	4630      	mov	r0, r6
 80099cc:	bd70      	pop	{r4, r5, r6, pc}
 80099ce:	b118      	cbz	r0, 80099d8 <_fclose_r+0x18>
 80099d0:	6983      	ldr	r3, [r0, #24]
 80099d2:	b90b      	cbnz	r3, 80099d8 <_fclose_r+0x18>
 80099d4:	f7fe fb6c 	bl	80080b0 <__sinit>
 80099d8:	4b2c      	ldr	r3, [pc, #176]	; (8009a8c <_fclose_r+0xcc>)
 80099da:	429c      	cmp	r4, r3
 80099dc:	d114      	bne.n	8009a08 <_fclose_r+0x48>
 80099de:	686c      	ldr	r4, [r5, #4]
 80099e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099e2:	07d8      	lsls	r0, r3, #31
 80099e4:	d405      	bmi.n	80099f2 <_fclose_r+0x32>
 80099e6:	89a3      	ldrh	r3, [r4, #12]
 80099e8:	0599      	lsls	r1, r3, #22
 80099ea:	d402      	bmi.n	80099f2 <_fclose_r+0x32>
 80099ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099ee:	f7fe fee5 	bl	80087bc <__retarget_lock_acquire_recursive>
 80099f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099f6:	b98b      	cbnz	r3, 8009a1c <_fclose_r+0x5c>
 80099f8:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80099fa:	f016 0601 	ands.w	r6, r6, #1
 80099fe:	d1e3      	bne.n	80099c8 <_fclose_r+0x8>
 8009a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a02:	f7fe fedc 	bl	80087be <__retarget_lock_release_recursive>
 8009a06:	e7e0      	b.n	80099ca <_fclose_r+0xa>
 8009a08:	4b21      	ldr	r3, [pc, #132]	; (8009a90 <_fclose_r+0xd0>)
 8009a0a:	429c      	cmp	r4, r3
 8009a0c:	d101      	bne.n	8009a12 <_fclose_r+0x52>
 8009a0e:	68ac      	ldr	r4, [r5, #8]
 8009a10:	e7e6      	b.n	80099e0 <_fclose_r+0x20>
 8009a12:	4b20      	ldr	r3, [pc, #128]	; (8009a94 <_fclose_r+0xd4>)
 8009a14:	429c      	cmp	r4, r3
 8009a16:	bf08      	it	eq
 8009a18:	68ec      	ldreq	r4, [r5, #12]
 8009a1a:	e7e1      	b.n	80099e0 <_fclose_r+0x20>
 8009a1c:	4621      	mov	r1, r4
 8009a1e:	4628      	mov	r0, r5
 8009a20:	f7fe fa20 	bl	8007e64 <__sflush_r>
 8009a24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009a26:	4606      	mov	r6, r0
 8009a28:	b133      	cbz	r3, 8009a38 <_fclose_r+0x78>
 8009a2a:	6a21      	ldr	r1, [r4, #32]
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	4798      	blx	r3
 8009a30:	2800      	cmp	r0, #0
 8009a32:	bfb8      	it	lt
 8009a34:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 8009a38:	89a3      	ldrh	r3, [r4, #12]
 8009a3a:	061a      	lsls	r2, r3, #24
 8009a3c:	d503      	bpl.n	8009a46 <_fclose_r+0x86>
 8009a3e:	6921      	ldr	r1, [r4, #16]
 8009a40:	4628      	mov	r0, r5
 8009a42:	f7fe fc75 	bl	8008330 <_free_r>
 8009a46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a48:	b141      	cbz	r1, 8009a5c <_fclose_r+0x9c>
 8009a4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a4e:	4299      	cmp	r1, r3
 8009a50:	d002      	beq.n	8009a58 <_fclose_r+0x98>
 8009a52:	4628      	mov	r0, r5
 8009a54:	f7fe fc6c 	bl	8008330 <_free_r>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	6363      	str	r3, [r4, #52]	; 0x34
 8009a5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009a5e:	b121      	cbz	r1, 8009a6a <_fclose_r+0xaa>
 8009a60:	4628      	mov	r0, r5
 8009a62:	f7fe fc65 	bl	8008330 <_free_r>
 8009a66:	2300      	movs	r3, #0
 8009a68:	64a3      	str	r3, [r4, #72]	; 0x48
 8009a6a:	f7fe fb09 	bl	8008080 <__sfp_lock_acquire>
 8009a6e:	2300      	movs	r3, #0
 8009a70:	81a3      	strh	r3, [r4, #12]
 8009a72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a74:	07db      	lsls	r3, r3, #31
 8009a76:	d402      	bmi.n	8009a7e <_fclose_r+0xbe>
 8009a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a7a:	f7fe fea0 	bl	80087be <__retarget_lock_release_recursive>
 8009a7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a80:	f7fe fe9b 	bl	80087ba <__retarget_lock_close_recursive>
 8009a84:	f7fe fb02 	bl	800808c <__sfp_lock_release>
 8009a88:	e79f      	b.n	80099ca <_fclose_r+0xa>
 8009a8a:	bf00      	nop
 8009a8c:	0800a770 	.word	0x0800a770
 8009a90:	0800a790 	.word	0x0800a790
 8009a94:	0800a750 	.word	0x0800a750

08009a98 <_fstat_r>:
 8009a98:	b538      	push	{r3, r4, r5, lr}
 8009a9a:	4c07      	ldr	r4, [pc, #28]	; (8009ab8 <_fstat_r+0x20>)
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	4605      	mov	r5, r0
 8009aa0:	4608      	mov	r0, r1
 8009aa2:	4611      	mov	r1, r2
 8009aa4:	6023      	str	r3, [r4, #0]
 8009aa6:	f7fb fd96 	bl	80055d6 <_fstat>
 8009aaa:	1c43      	adds	r3, r0, #1
 8009aac:	d102      	bne.n	8009ab4 <_fstat_r+0x1c>
 8009aae:	6823      	ldr	r3, [r4, #0]
 8009ab0:	b103      	cbz	r3, 8009ab4 <_fstat_r+0x1c>
 8009ab2:	602b      	str	r3, [r5, #0]
 8009ab4:	bd38      	pop	{r3, r4, r5, pc}
 8009ab6:	bf00      	nop
 8009ab8:	200031fc 	.word	0x200031fc

08009abc <_isatty_r>:
 8009abc:	b538      	push	{r3, r4, r5, lr}
 8009abe:	4c06      	ldr	r4, [pc, #24]	; (8009ad8 <_isatty_r+0x1c>)
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	4605      	mov	r5, r0
 8009ac4:	4608      	mov	r0, r1
 8009ac6:	6023      	str	r3, [r4, #0]
 8009ac8:	f7fb fd8a 	bl	80055e0 <_isatty>
 8009acc:	1c43      	adds	r3, r0, #1
 8009ace:	d102      	bne.n	8009ad6 <_isatty_r+0x1a>
 8009ad0:	6823      	ldr	r3, [r4, #0]
 8009ad2:	b103      	cbz	r3, 8009ad6 <_isatty_r+0x1a>
 8009ad4:	602b      	str	r3, [r5, #0]
 8009ad6:	bd38      	pop	{r3, r4, r5, pc}
 8009ad8:	200031fc 	.word	0x200031fc

08009adc <_lseek_r>:
 8009adc:	b538      	push	{r3, r4, r5, lr}
 8009ade:	4c07      	ldr	r4, [pc, #28]	; (8009afc <_lseek_r+0x20>)
 8009ae0:	4605      	mov	r5, r0
 8009ae2:	4608      	mov	r0, r1
 8009ae4:	4611      	mov	r1, r2
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	6022      	str	r2, [r4, #0]
 8009aea:	461a      	mov	r2, r3
 8009aec:	f7fb fd7a 	bl	80055e4 <_lseek>
 8009af0:	1c43      	adds	r3, r0, #1
 8009af2:	d102      	bne.n	8009afa <_lseek_r+0x1e>
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	b103      	cbz	r3, 8009afa <_lseek_r+0x1e>
 8009af8:	602b      	str	r3, [r5, #0]
 8009afa:	bd38      	pop	{r3, r4, r5, pc}
 8009afc:	200031fc 	.word	0x200031fc

08009b00 <_read_r>:
 8009b00:	b538      	push	{r3, r4, r5, lr}
 8009b02:	4c07      	ldr	r4, [pc, #28]	; (8009b20 <_read_r+0x20>)
 8009b04:	4605      	mov	r5, r0
 8009b06:	4608      	mov	r0, r1
 8009b08:	4611      	mov	r1, r2
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	6022      	str	r2, [r4, #0]
 8009b0e:	461a      	mov	r2, r3
 8009b10:	f7fb fd28 	bl	8005564 <_read>
 8009b14:	1c43      	adds	r3, r0, #1
 8009b16:	d102      	bne.n	8009b1e <_read_r+0x1e>
 8009b18:	6823      	ldr	r3, [r4, #0]
 8009b1a:	b103      	cbz	r3, 8009b1e <_read_r+0x1e>
 8009b1c:	602b      	str	r3, [r5, #0]
 8009b1e:	bd38      	pop	{r3, r4, r5, pc}
 8009b20:	200031fc 	.word	0x200031fc

08009b24 <_init>:
 8009b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b26:	bf00      	nop
 8009b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b2a:	bc08      	pop	{r3}
 8009b2c:	469e      	mov	lr, r3
 8009b2e:	4770      	bx	lr

08009b30 <_fini>:
 8009b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b32:	bf00      	nop
 8009b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b36:	bc08      	pop	{r3}
 8009b38:	469e      	mov	lr, r3
 8009b3a:	4770      	bx	lr
