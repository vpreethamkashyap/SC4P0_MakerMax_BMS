
SC4P0_MakerMax.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007498  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018d4  08007638  08007638  00017638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008f0c  08008f0c  00018f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008f14  08008f14  00018f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008f18  08008f18  00018f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000007fc  20000000  08008f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000207fc  2**0
                  CONTENTS
  8 .bss          00002cec  200007fc  200007fc  000207fc  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200034e8  200034e8  000207fc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000207fc  2**0
                  CONTENTS, READONLY
 11 .debug_info   00029eb4  00000000  00000000  0002082c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000060ed  00000000  00000000  0004a6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000111fa  00000000  00000000  000507cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016a0  00000000  00000000  000619c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b30  00000000  00000000  00063068  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000da29  00000000  00000000  00064b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000083a4  00000000  00000000  000725c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0007a965  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004e64  00000000  00000000  0007a9e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200007fc 	.word	0x200007fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007620 	.word	0x08007620

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000800 	.word	0x20000800
 80001dc:	08007620 	.word	0x08007620

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__aeabi_d2uiz>:
 8000a24:	004a      	lsls	r2, r1, #1
 8000a26:	d211      	bcs.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a2c:	d211      	bcs.n	8000a52 <__aeabi_d2uiz+0x2e>
 8000a2e:	d50d      	bpl.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d40e      	bmi.n	8000a58 <__aeabi_d2uiz+0x34>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d102      	bne.n	8000a5e <__aeabi_d2uiz+0x3a>
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a5c:	4770      	bx	lr
 8000a5e:	f04f 0000 	mov.w	r0, #0
 8000a62:	4770      	bx	lr

08000a64 <__aeabi_d2f>:
 8000a64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a68:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a6c:	bf24      	itt	cs
 8000a6e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a72:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a76:	d90d      	bls.n	8000a94 <__aeabi_d2f+0x30>
 8000a78:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a7c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a80:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a84:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a88:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a8c:	bf08      	it	eq
 8000a8e:	f020 0001 	biceq.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a98:	d121      	bne.n	8000ade <__aeabi_d2f+0x7a>
 8000a9a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a9e:	bfbc      	itt	lt
 8000aa0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa4:	4770      	bxlt	lr
 8000aa6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aaa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aae:	f1c2 0218 	rsb	r2, r2, #24
 8000ab2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ab6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aba:	fa20 f002 	lsr.w	r0, r0, r2
 8000abe:	bf18      	it	ne
 8000ac0:	f040 0001 	orrne.w	r0, r0, #1
 8000ac4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000acc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad0:	ea40 000c 	orr.w	r0, r0, ip
 8000ad4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000adc:	e7cc      	b.n	8000a78 <__aeabi_d2f+0x14>
 8000ade:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae2:	d107      	bne.n	8000af4 <__aeabi_d2f+0x90>
 8000ae4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae8:	bf1e      	ittt	ne
 8000aea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000af2:	4770      	bxne	lr
 8000af4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000afc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b18:	f000 b97a 	b.w	8000e10 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	468c      	mov	ip, r1
 8000b3a:	460d      	mov	r5, r1
 8000b3c:	4604      	mov	r4, r0
 8000b3e:	9e08      	ldr	r6, [sp, #32]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d151      	bne.n	8000be8 <__udivmoddi4+0xb4>
 8000b44:	428a      	cmp	r2, r1
 8000b46:	4617      	mov	r7, r2
 8000b48:	d96d      	bls.n	8000c26 <__udivmoddi4+0xf2>
 8000b4a:	fab2 fe82 	clz	lr, r2
 8000b4e:	f1be 0f00 	cmp.w	lr, #0
 8000b52:	d00b      	beq.n	8000b6c <__udivmoddi4+0x38>
 8000b54:	f1ce 0c20 	rsb	ip, lr, #32
 8000b58:	fa01 f50e 	lsl.w	r5, r1, lr
 8000b5c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b60:	fa02 f70e 	lsl.w	r7, r2, lr
 8000b64:	ea4c 0c05 	orr.w	ip, ip, r5
 8000b68:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b6c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b70:	0c25      	lsrs	r5, r4, #16
 8000b72:	fbbc f8fa 	udiv	r8, ip, sl
 8000b76:	fa1f f987 	uxth.w	r9, r7
 8000b7a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000b7e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b82:	fb08 f309 	mul.w	r3, r8, r9
 8000b86:	42ab      	cmp	r3, r5
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x6c>
 8000b8a:	19ed      	adds	r5, r5, r7
 8000b8c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000b90:	f080 8123 	bcs.w	8000dda <__udivmoddi4+0x2a6>
 8000b94:	42ab      	cmp	r3, r5
 8000b96:	f240 8120 	bls.w	8000dda <__udivmoddi4+0x2a6>
 8000b9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000b9e:	443d      	add	r5, r7
 8000ba0:	1aed      	subs	r5, r5, r3
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ba8:	fb0a 5510 	mls	r5, sl, r0, r5
 8000bac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bb0:	fb00 f909 	mul.w	r9, r0, r9
 8000bb4:	45a1      	cmp	r9, r4
 8000bb6:	d909      	bls.n	8000bcc <__udivmoddi4+0x98>
 8000bb8:	19e4      	adds	r4, r4, r7
 8000bba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bbe:	f080 810a 	bcs.w	8000dd6 <__udivmoddi4+0x2a2>
 8000bc2:	45a1      	cmp	r9, r4
 8000bc4:	f240 8107 	bls.w	8000dd6 <__udivmoddi4+0x2a2>
 8000bc8:	3802      	subs	r0, #2
 8000bca:	443c      	add	r4, r7
 8000bcc:	eba4 0409 	sub.w	r4, r4, r9
 8000bd0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	d061      	beq.n	8000c9e <__udivmoddi4+0x16a>
 8000bda:	fa24 f40e 	lsr.w	r4, r4, lr
 8000bde:	2300      	movs	r3, #0
 8000be0:	6034      	str	r4, [r6, #0]
 8000be2:	6073      	str	r3, [r6, #4]
 8000be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be8:	428b      	cmp	r3, r1
 8000bea:	d907      	bls.n	8000bfc <__udivmoddi4+0xc8>
 8000bec:	2e00      	cmp	r6, #0
 8000bee:	d054      	beq.n	8000c9a <__udivmoddi4+0x166>
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	e886 0021 	stmia.w	r6, {r0, r5}
 8000bf6:	4608      	mov	r0, r1
 8000bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfc:	fab3 f183 	clz	r1, r3
 8000c00:	2900      	cmp	r1, #0
 8000c02:	f040 808e 	bne.w	8000d22 <__udivmoddi4+0x1ee>
 8000c06:	42ab      	cmp	r3, r5
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xdc>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80fa 	bhi.w	8000e04 <__udivmoddi4+0x2d0>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb65 0503 	sbc.w	r5, r5, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	46ac      	mov	ip, r5
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d03f      	beq.n	8000c9e <__udivmoddi4+0x16a>
 8000c1e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	b912      	cbnz	r2, 8000c2e <__udivmoddi4+0xfa>
 8000c28:	2701      	movs	r7, #1
 8000c2a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c2e:	fab7 fe87 	clz	lr, r7
 8000c32:	f1be 0f00 	cmp.w	lr, #0
 8000c36:	d134      	bne.n	8000ca2 <__udivmoddi4+0x16e>
 8000c38:	1beb      	subs	r3, r5, r7
 8000c3a:	0c3a      	lsrs	r2, r7, #16
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	2101      	movs	r1, #1
 8000c42:	fbb3 f8f2 	udiv	r8, r3, r2
 8000c46:	0c25      	lsrs	r5, r4, #16
 8000c48:	fb02 3318 	mls	r3, r2, r8, r3
 8000c4c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c50:	fb0c f308 	mul.w	r3, ip, r8
 8000c54:	42ab      	cmp	r3, r5
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x134>
 8000c58:	19ed      	adds	r5, r5, r7
 8000c5a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x132>
 8000c60:	42ab      	cmp	r3, r5
 8000c62:	f200 80d1 	bhi.w	8000e08 <__udivmoddi4+0x2d4>
 8000c66:	4680      	mov	r8, r0
 8000c68:	1aed      	subs	r5, r5, r3
 8000c6a:	b2a3      	uxth	r3, r4
 8000c6c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c70:	fb02 5510 	mls	r5, r2, r0, r5
 8000c74:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c78:	fb0c fc00 	mul.w	ip, ip, r0
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x15c>
 8000c80:	19e4      	adds	r4, r4, r7
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x15a>
 8000c88:	45a4      	cmp	ip, r4
 8000c8a:	f200 80b8 	bhi.w	8000dfe <__udivmoddi4+0x2ca>
 8000c8e:	4618      	mov	r0, r3
 8000c90:	eba4 040c 	sub.w	r4, r4, ip
 8000c94:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c98:	e79d      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000c9a:	4631      	mov	r1, r6
 8000c9c:	4630      	mov	r0, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	f1ce 0420 	rsb	r4, lr, #32
 8000ca6:	fa05 f30e 	lsl.w	r3, r5, lr
 8000caa:	fa07 f70e 	lsl.w	r7, r7, lr
 8000cae:	fa20 f804 	lsr.w	r8, r0, r4
 8000cb2:	0c3a      	lsrs	r2, r7, #16
 8000cb4:	fa25 f404 	lsr.w	r4, r5, r4
 8000cb8:	ea48 0803 	orr.w	r8, r8, r3
 8000cbc:	fbb4 f1f2 	udiv	r1, r4, r2
 8000cc0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000cc4:	fb02 4411 	mls	r4, r2, r1, r4
 8000cc8:	fa1f fc87 	uxth.w	ip, r7
 8000ccc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000cd0:	fb01 f30c 	mul.w	r3, r1, ip
 8000cd4:	42ab      	cmp	r3, r5
 8000cd6:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cda:	d909      	bls.n	8000cf0 <__udivmoddi4+0x1bc>
 8000cdc:	19ed      	adds	r5, r5, r7
 8000cde:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000ce2:	f080 808a 	bcs.w	8000dfa <__udivmoddi4+0x2c6>
 8000ce6:	42ab      	cmp	r3, r5
 8000ce8:	f240 8087 	bls.w	8000dfa <__udivmoddi4+0x2c6>
 8000cec:	3902      	subs	r1, #2
 8000cee:	443d      	add	r5, r7
 8000cf0:	1aeb      	subs	r3, r5, r3
 8000cf2:	fa1f f588 	uxth.w	r5, r8
 8000cf6:	fbb3 f0f2 	udiv	r0, r3, r2
 8000cfa:	fb02 3310 	mls	r3, r2, r0, r3
 8000cfe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d02:	fb00 f30c 	mul.w	r3, r0, ip
 8000d06:	42ab      	cmp	r3, r5
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x1e6>
 8000d0a:	19ed      	adds	r5, r5, r7
 8000d0c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d10:	d26f      	bcs.n	8000df2 <__udivmoddi4+0x2be>
 8000d12:	42ab      	cmp	r3, r5
 8000d14:	d96d      	bls.n	8000df2 <__udivmoddi4+0x2be>
 8000d16:	3802      	subs	r0, #2
 8000d18:	443d      	add	r5, r7
 8000d1a:	1aeb      	subs	r3, r5, r3
 8000d1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d20:	e78f      	b.n	8000c42 <__udivmoddi4+0x10e>
 8000d22:	f1c1 0720 	rsb	r7, r1, #32
 8000d26:	fa22 f807 	lsr.w	r8, r2, r7
 8000d2a:	408b      	lsls	r3, r1
 8000d2c:	fa05 f401 	lsl.w	r4, r5, r1
 8000d30:	ea48 0303 	orr.w	r3, r8, r3
 8000d34:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d38:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000d42:	fbb5 f9fc 	udiv	r9, r5, ip
 8000d46:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000d4a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000d4e:	fa1f f883 	uxth.w	r8, r3
 8000d52:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d56:	fb09 f408 	mul.w	r4, r9, r8
 8000d5a:	42ac      	cmp	r4, r5
 8000d5c:	fa02 f201 	lsl.w	r2, r2, r1
 8000d60:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x244>
 8000d66:	18ed      	adds	r5, r5, r3
 8000d68:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d6c:	d243      	bcs.n	8000df6 <__udivmoddi4+0x2c2>
 8000d6e:	42ac      	cmp	r4, r5
 8000d70:	d941      	bls.n	8000df6 <__udivmoddi4+0x2c2>
 8000d72:	f1a9 0902 	sub.w	r9, r9, #2
 8000d76:	441d      	add	r5, r3
 8000d78:	1b2d      	subs	r5, r5, r4
 8000d7a:	fa1f fe8e 	uxth.w	lr, lr
 8000d7e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d82:	fb0c 5510 	mls	r5, ip, r0, r5
 8000d86:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000d8a:	fb00 f808 	mul.w	r8, r0, r8
 8000d8e:	45a0      	cmp	r8, r4
 8000d90:	d907      	bls.n	8000da2 <__udivmoddi4+0x26e>
 8000d92:	18e4      	adds	r4, r4, r3
 8000d94:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000d98:	d229      	bcs.n	8000dee <__udivmoddi4+0x2ba>
 8000d9a:	45a0      	cmp	r8, r4
 8000d9c:	d927      	bls.n	8000dee <__udivmoddi4+0x2ba>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	441c      	add	r4, r3
 8000da2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000da6:	eba4 0408 	sub.w	r4, r4, r8
 8000daa:	fba0 8902 	umull	r8, r9, r0, r2
 8000dae:	454c      	cmp	r4, r9
 8000db0:	46c6      	mov	lr, r8
 8000db2:	464d      	mov	r5, r9
 8000db4:	d315      	bcc.n	8000de2 <__udivmoddi4+0x2ae>
 8000db6:	d012      	beq.n	8000dde <__udivmoddi4+0x2aa>
 8000db8:	b156      	cbz	r6, 8000dd0 <__udivmoddi4+0x29c>
 8000dba:	ebba 030e 	subs.w	r3, sl, lr
 8000dbe:	eb64 0405 	sbc.w	r4, r4, r5
 8000dc2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dc6:	40cb      	lsrs	r3, r1
 8000dc8:	431f      	orrs	r7, r3
 8000dca:	40cc      	lsrs	r4, r1
 8000dcc:	6037      	str	r7, [r6, #0]
 8000dce:	6074      	str	r4, [r6, #4]
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	e6f8      	b.n	8000bcc <__udivmoddi4+0x98>
 8000dda:	4690      	mov	r8, r2
 8000ddc:	e6e0      	b.n	8000ba0 <__udivmoddi4+0x6c>
 8000dde:	45c2      	cmp	sl, r8
 8000de0:	d2ea      	bcs.n	8000db8 <__udivmoddi4+0x284>
 8000de2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000de6:	eb69 0503 	sbc.w	r5, r9, r3
 8000dea:	3801      	subs	r0, #1
 8000dec:	e7e4      	b.n	8000db8 <__udivmoddi4+0x284>
 8000dee:	4628      	mov	r0, r5
 8000df0:	e7d7      	b.n	8000da2 <__udivmoddi4+0x26e>
 8000df2:	4640      	mov	r0, r8
 8000df4:	e791      	b.n	8000d1a <__udivmoddi4+0x1e6>
 8000df6:	4681      	mov	r9, r0
 8000df8:	e7be      	b.n	8000d78 <__udivmoddi4+0x244>
 8000dfa:	4601      	mov	r1, r0
 8000dfc:	e778      	b.n	8000cf0 <__udivmoddi4+0x1bc>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	443c      	add	r4, r7
 8000e02:	e745      	b.n	8000c90 <__udivmoddi4+0x15c>
 8000e04:	4608      	mov	r0, r1
 8000e06:	e708      	b.n	8000c1a <__udivmoddi4+0xe6>
 8000e08:	f1a8 0802 	sub.w	r8, r8, #2
 8000e0c:	443d      	add	r5, r7
 8000e0e:	e72b      	b.n	8000c68 <__udivmoddi4+0x134>

08000e10 <__aeabi_idiv0>:
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e16:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <HAL_InitTick+0x3c>)
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_InitTick+0x40>)
{
 8000e1a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e1c:	7818      	ldrb	r0, [r3, #0]
 8000e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e22:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e26:	6810      	ldr	r0, [r2, #0]
 8000e28:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e2c:	f000 f8a2 	bl	8000f74 <HAL_SYSTICK_Config>
 8000e30:	4604      	mov	r4, r0
 8000e32:	b958      	cbnz	r0, 8000e4c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e34:	2d0f      	cmp	r5, #15
 8000e36:	d809      	bhi.n	8000e4c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e38:	4602      	mov	r2, r0
 8000e3a:	4629      	mov	r1, r5
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e40:	f000 f856 	bl	8000ef0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <HAL_InitTick+0x44>)
 8000e46:	4620      	mov	r0, r4
 8000e48:	601d      	str	r5, [r3, #0]
 8000e4a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000e4c:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000e4e:	bd38      	pop	{r3, r4, r5, pc}
 8000e50:	20000188 	.word	0x20000188
 8000e54:	20000000 	.word	0x20000000
 8000e58:	20000004 	.word	0x20000004

08000e5c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5c:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <HAL_Init+0x20>)
{
 8000e5e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e60:	6813      	ldr	r3, [r2, #0]
 8000e62:	f043 0310 	orr.w	r3, r3, #16
 8000e66:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f000 f82f 	bl	8000ecc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6e:	200f      	movs	r0, #15
 8000e70:	f7ff ffd0 	bl	8000e14 <HAL_InitTick>
  HAL_MspInit();
 8000e74:	f004 f86e 	bl	8004f54 <HAL_MspInit>
}
 8000e78:	2000      	movs	r0, #0
 8000e7a:	bd08      	pop	{r3, pc}
 8000e7c:	40022000 	.word	0x40022000

08000e80 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e80:	4a03      	ldr	r2, [pc, #12]	; (8000e90 <HAL_IncTick+0x10>)
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <HAL_IncTick+0x14>)
 8000e84:	6811      	ldr	r1, [r2, #0]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	440b      	add	r3, r1
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20001fd4 	.word	0x20001fd4
 8000e94:	20000000 	.word	0x20000000

08000e98 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000e98:	4b01      	ldr	r3, [pc, #4]	; (8000ea0 <HAL_GetTick+0x8>)
 8000e9a:	6818      	ldr	r0, [r3, #0]
}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20001fd4 	.word	0x20001fd4

08000ea4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea4:	b538      	push	{r3, r4, r5, lr}
 8000ea6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ea8:	f7ff fff6 	bl	8000e98 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eac:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000eae:	bf1c      	itt	ne
 8000eb0:	4b05      	ldrne	r3, [pc, #20]	; (8000ec8 <HAL_Delay+0x24>)
 8000eb2:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000eb4:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000eb6:	bf18      	it	ne
 8000eb8:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000eba:	f7ff ffed 	bl	8000e98 <HAL_GetTick>
 8000ebe:	1b40      	subs	r0, r0, r5
 8000ec0:	4284      	cmp	r4, r0
 8000ec2:	d8fa      	bhi.n	8000eba <HAL_Delay+0x16>
  {
  }
}
 8000ec4:	bd38      	pop	{r3, r4, r5, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000000 	.word	0x20000000

08000ecc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ece:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ed4:	041b      	lsls	r3, r3, #16
 8000ed6:	0c1b      	lsrs	r3, r3, #16
 8000ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000edc:	0200      	lsls	r0, r0, #8
 8000ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000ee6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000ee8:	60d3      	str	r3, [r2, #12]
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef2:	b530      	push	{r4, r5, lr}
 8000ef4:	68dc      	ldr	r4, [r3, #12]
 8000ef6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000efa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	2b04      	cmp	r3, #4
 8000f02:	bf28      	it	cs
 8000f04:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f06:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	f04f 0501 	mov.w	r5, #1
 8000f0c:	fa05 f303 	lsl.w	r3, r5, r3
 8000f10:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f14:	bf8c      	ite	hi
 8000f16:	3c03      	subhi	r4, #3
 8000f18:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1a:	4019      	ands	r1, r3
 8000f1c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f1e:	fa05 f404 	lsl.w	r4, r5, r4
 8000f22:	3c01      	subs	r4, #1
 8000f24:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000f26:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	ea42 0201 	orr.w	r2, r2, r1
 8000f2c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f30:	bfad      	iteet	ge
 8000f32:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	f000 000f 	andlt.w	r0, r0, #15
 8000f3a:	4b06      	ldrlt	r3, [pc, #24]	; (8000f54 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f40:	bfb5      	itete	lt
 8000f42:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f44:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f46:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000f4c:	bd30      	pop	{r4, r5, pc}
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00
 8000f54:	e000ed14 	.word	0xe000ed14

08000f58 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f58:	2800      	cmp	r0, #0
 8000f5a:	db08      	blt.n	8000f6e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5c:	0942      	lsrs	r2, r0, #5
 8000f5e:	2301      	movs	r3, #1
 8000f60:	f000 001f 	and.w	r0, r0, #31
 8000f64:	fa03 f000 	lsl.w	r0, r3, r0
 8000f68:	4b01      	ldr	r3, [pc, #4]	; (8000f70 <HAL_NVIC_EnableIRQ+0x18>)
 8000f6a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000f6e:	4770      	bx	lr
 8000f70:	e000e100 	.word	0xe000e100

08000f74 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f74:	3801      	subs	r0, #1
 8000f76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f7a:	d20a      	bcs.n	8000f92 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f80:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f82:	21f0      	movs	r1, #240	; 0xf0
 8000f84:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f88:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f8c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f92:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000e010 	.word	0xe000e010
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8000fa0:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	b168      	cbz	r0, 8000fc2 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000fa6:	7903      	ldrb	r3, [r0, #4]
 8000fa8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000fac:	b913      	cbnz	r3, 8000fb4 <HAL_DAC_Init+0x14>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000fae:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000fb0:	f003 fff0 	bl	8004f94 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	7123      	strb	r3, [r4, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000fb8:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000fba:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000fbc:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8000fbe:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8000fc0:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8000fc2:	2001      	movs	r0, #1
}
 8000fc4:	bd10      	pop	{r4, pc}

08000fc6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000fc6:	4770      	bx	lr

08000fc8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8000fc8:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmp = 0U;
 8000fca:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8000fcc:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0U;
 8000fce:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t) (hdac->Instance);
 8000fd0:	9001      	str	r0, [sp, #4]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8000fd2:	b941      	cbnz	r1, 8000fe6 <HAL_DAC_SetValue+0x1e>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000fd4:	9901      	ldr	r1, [sp, #4]
 8000fd6:	3108      	adds	r1, #8
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000fd8:	440a      	add	r2, r1
 8000fda:	9201      	str	r2, [sp, #4]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000fdc:	9a01      	ldr	r2, [sp, #4]
  
  /* Return function status */
  return HAL_OK;
}
 8000fde:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8000fe0:	6013      	str	r3, [r2, #0]
}
 8000fe2:	b002      	add	sp, #8
 8000fe4:	bd10      	pop	{r4, pc}
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000fe6:	9901      	ldr	r1, [sp, #4]
 8000fe8:	3114      	adds	r1, #20
 8000fea:	e7f5      	b.n	8000fd8 <HAL_DAC_SetValue+0x10>

08000fec <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000fec:	7943      	ldrb	r3, [r0, #5]
 8000fee:	2b01      	cmp	r3, #1
{
 8000ff0:	b510      	push	{r4, lr}
 8000ff2:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 8000ff6:	d015      	beq.n	8001024 <HAL_DAC_Start+0x38>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000ff8:	7103      	strb	r3, [r0, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000ffa:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdac);
 8000ffc:	2201      	movs	r2, #1
  __HAL_DAC_ENABLE(hdac, Channel);
 8000ffe:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hdac);
 8001000:	7142      	strb	r2, [r0, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8001002:	408a      	lsls	r2, r1
 8001004:	4322      	orrs	r2, r4
 8001006:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001008:	681a      	ldr	r2, [r3, #0]
  if(Channel == DAC_CHANNEL_1)
 800100a:	b969      	cbnz	r1, 8001028 <HAL_DAC_Start+0x3c>
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 800100c:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 8001010:	2a3c      	cmp	r2, #60	; 0x3c
 8001012:	d103      	bne.n	800101c <HAL_DAC_Start+0x30>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	f042 0201 	orr.w	r2, r2, #1
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800101a:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800101c:	2301      	movs	r3, #1
 800101e:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001020:	2300      	movs	r3, #0
 8001022:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8001024:	4618      	mov	r0, r3
    
  /* Return function status */
  return HAL_OK;
}
 8001026:	bd10      	pop	{r4, pc}
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8001028:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 800102c:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 8001030:	d1f4      	bne.n	800101c <HAL_DAC_Start+0x30>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	f042 0202 	orr.w	r2, r2, #2
 8001038:	e7ef      	b.n	800101a <HAL_DAC_Start+0x2e>

0800103a <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800103a:	7943      	ldrb	r3, [r0, #5]
 800103c:	2b01      	cmp	r3, #1
{
 800103e:	b530      	push	{r4, r5, lr}
 8001040:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 8001044:	d017      	beq.n	8001076 <HAL_DAC_ConfigChannel+0x3c>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001046:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001048:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 800104a:	6823      	ldr	r3, [r4, #0]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800104c:	f640 75fe 	movw	r5, #4094	; 0xffe
 8001050:	4095      	lsls	r5, r2
 8001052:	ea23 0505 	bic.w	r5, r3, r5
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001056:	c90a      	ldmia	r1, {r1, r3}
 8001058:	430b      	orrs	r3, r1
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800105a:	4093      	lsls	r3, r2
 800105c:	432b      	orrs	r3, r5
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800105e:	6023      	str	r3, [r4, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001060:	6823      	ldr	r3, [r4, #0]
 8001062:	21c0      	movs	r1, #192	; 0xc0
 8001064:	fa01 f202 	lsl.w	r2, r1, r2
 8001068:	ea23 0202 	bic.w	r2, r3, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800106c:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800106e:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8001070:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001072:	2300      	movs	r3, #0
 8001074:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8001076:	4618      	mov	r0, r3
  
  /* Return function status */
  return HAL_OK;
}
 8001078:	bd30      	pop	{r4, r5, pc}

0800107a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800107a:	4770      	bx	lr

0800107c <HAL_DAC_IRQHandler>:
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800107c:	6803      	ldr	r3, [r0, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	0491      	lsls	r1, r2, #18
{
 8001082:	b510      	push	{r4, lr}
 8001084:	4604      	mov	r4, r0
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001086:	d511      	bpl.n	80010ac <HAL_DAC_IRQHandler+0x30>
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800108a:	0492      	lsls	r2, r2, #18
 800108c:	d50e      	bpl.n	80010ac <HAL_DAC_IRQHandler+0x30>
      hdac->State = HAL_DAC_STATE_ERROR;
 800108e:	2204      	movs	r2, #4
 8001090:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001092:	6902      	ldr	r2, [r0, #16]
 8001094:	f042 0201 	orr.w	r2, r2, #1
 8001098:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800109a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800109e:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010a6:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80010a8:	f7ff ff8d 	bl	8000fc6 <HAL_DAC_DMAUnderrunCallbackCh1>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80010ac:	6823      	ldr	r3, [r4, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	0091      	lsls	r1, r2, #2
 80010b2:	d512      	bpl.n	80010da <HAL_DAC_IRQHandler+0x5e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80010b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010b6:	0092      	lsls	r2, r2, #2
 80010b8:	d50f      	bpl.n	80010da <HAL_DAC_IRQHandler+0x5e>
      hdac->State = HAL_DAC_STATE_ERROR;
 80010ba:	2204      	movs	r2, #4
 80010bc:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80010be:	6922      	ldr	r2, [r4, #16]
 80010c0:	f042 0202 	orr.w	r2, r2, #2
 80010c4:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80010c6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80010ca:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80010d2:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80010d4:	4620      	mov	r0, r4
 80010d6:	f7ff ffd0 	bl	800107a <HAL_DACEx_DMAUnderrunCallbackCh2>
 80010da:	bd10      	pop	{r4, pc}

080010dc <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010dc:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 80010e0:	2a02      	cmp	r2, #2
{  
 80010e2:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010e4:	d003      	beq.n	80010ee <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010e6:	2204      	movs	r2, #4
 80010e8:	6382      	str	r2, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80010ea:	2001      	movs	r0, #1
 80010ec:	bd10      	pop	{r4, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010ee:	6802      	ldr	r2, [r0, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80010f0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010f2:	6811      	ldr	r1, [r2, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80010f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010f6:	f021 010e 	bic.w	r1, r1, #14
 80010fa:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010fc:	6811      	ldr	r1, [r2, #0]
 80010fe:	f021 0101 	bic.w	r1, r1, #1
 8001102:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001104:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001106:	2101      	movs	r1, #1
 8001108:	fa01 f202 	lsl.w	r2, r1, r2
 800110c:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800110e:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001110:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001114:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001118:	b113      	cbz	r3, 8001120 <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 800111a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800111c:	4620      	mov	r0, r4
 800111e:	bd10      	pop	{r4, pc}
 8001120:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8001122:	bd10      	pop	{r4, pc}

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001128:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112c:	f8df 9190 	ldr.w	r9, [pc, #400]	; 80012c0 <HAL_GPIO_Init+0x19c>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001130:	4a61      	ldr	r2, [pc, #388]	; (80012b8 <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00u;
 8001132:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001134:	fa38 f403 	lsrs.w	r4, r8, r3
 8001138:	d102      	bne.n	8001140 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800113a:	b003      	add	sp, #12
 800113c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001140:	f04f 0e01 	mov.w	lr, #1
 8001144:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 8001148:	ea18 060e 	ands.w	r6, r8, lr
 800114c:	f000 80a6 	beq.w	800129c <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001150:	684c      	ldr	r4, [r1, #4]
 8001152:	f024 0710 	bic.w	r7, r4, #16
 8001156:	2f02      	cmp	r7, #2
 8001158:	d116      	bne.n	8001188 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 800115a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800115e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001162:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001166:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800116a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800116e:	f04f 0c0f 	mov.w	ip, #15
 8001172:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001176:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800117a:	690d      	ldr	r5, [r1, #16]
 800117c:	fa05 f50b 	lsl.w	r5, r5, fp
 8001180:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001184:	f8ca 5020 	str.w	r5, [sl, #32]
 8001188:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800118c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800118e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001192:	fa05 f50a 	lsl.w	r5, r5, sl
 8001196:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001198:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800119c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011a0:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a4:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011a6:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011aa:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80011ac:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011b0:	d811      	bhi.n	80011d6 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80011b2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011b4:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011b8:	68cf      	ldr	r7, [r1, #12]
 80011ba:	fa07 fc0a 	lsl.w	ip, r7, sl
 80011be:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80011c2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80011c4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c6:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011ca:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80011ce:	409f      	lsls	r7, r3
 80011d0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80011d4:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80011d6:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011d8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011da:	688f      	ldr	r7, [r1, #8]
 80011dc:	fa07 f70a 	lsl.w	r7, r7, sl
 80011e0:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80011e2:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011e4:	00e5      	lsls	r5, r4, #3
 80011e6:	d559      	bpl.n	800129c <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e8:	f8d9 5018 	ldr.w	r5, [r9, #24]
 80011ec:	f045 0501 	orr.w	r5, r5, #1
 80011f0:	f8c9 5018 	str.w	r5, [r9, #24]
 80011f4:	f8d9 5018 	ldr.w	r5, [r9, #24]
 80011f8:	f023 0703 	bic.w	r7, r3, #3
 80011fc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001200:	f005 0501 	and.w	r5, r5, #1
 8001204:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001208:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800120a:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001210:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001212:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001216:	f04f 0e0f 	mov.w	lr, #15
 800121a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800121e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001222:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001226:	d03b      	beq.n	80012a0 <HAL_GPIO_Init+0x17c>
 8001228:	4d24      	ldr	r5, [pc, #144]	; (80012bc <HAL_GPIO_Init+0x198>)
 800122a:	42a8      	cmp	r0, r5
 800122c:	d03a      	beq.n	80012a4 <HAL_GPIO_Init+0x180>
 800122e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001232:	42a8      	cmp	r0, r5
 8001234:	d038      	beq.n	80012a8 <HAL_GPIO_Init+0x184>
 8001236:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800123a:	42a8      	cmp	r0, r5
 800123c:	d036      	beq.n	80012ac <HAL_GPIO_Init+0x188>
 800123e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001242:	42a8      	cmp	r0, r5
 8001244:	d034      	beq.n	80012b0 <HAL_GPIO_Init+0x18c>
 8001246:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800124a:	42a8      	cmp	r0, r5
 800124c:	d032      	beq.n	80012b4 <HAL_GPIO_Init+0x190>
 800124e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001252:	42a8      	cmp	r0, r5
 8001254:	bf14      	ite	ne
 8001256:	2507      	movne	r5, #7
 8001258:	2506      	moveq	r5, #6
 800125a:	fa05 f50c 	lsl.w	r5, r5, ip
 800125e:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001262:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001264:	6815      	ldr	r5, [r2, #0]
        temp &= ~(iocurrent);
 8001266:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001268:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 800126c:	bf0c      	ite	eq
 800126e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001270:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8001272:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001274:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001276:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 800127a:	bf0c      	ite	eq
 800127c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800127e:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8001280:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001282:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001284:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001288:	bf0c      	ite	eq
 800128a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800128c:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 800128e:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001290:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001292:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8001294:	bf54      	ite	pl
 8001296:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8001298:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 800129a:	60d5      	str	r5, [r2, #12]
    position++;
 800129c:	3301      	adds	r3, #1
 800129e:	e749      	b.n	8001134 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012a0:	2500      	movs	r5, #0
 80012a2:	e7da      	b.n	800125a <HAL_GPIO_Init+0x136>
 80012a4:	2501      	movs	r5, #1
 80012a6:	e7d8      	b.n	800125a <HAL_GPIO_Init+0x136>
 80012a8:	2502      	movs	r5, #2
 80012aa:	e7d6      	b.n	800125a <HAL_GPIO_Init+0x136>
 80012ac:	2503      	movs	r5, #3
 80012ae:	e7d4      	b.n	800125a <HAL_GPIO_Init+0x136>
 80012b0:	2504      	movs	r5, #4
 80012b2:	e7d2      	b.n	800125a <HAL_GPIO_Init+0x136>
 80012b4:	2505      	movs	r5, #5
 80012b6:	e7d0      	b.n	800125a <HAL_GPIO_Init+0x136>
 80012b8:	40010400 	.word	0x40010400
 80012bc:	48000400 	.word	0x48000400
 80012c0:	40021000 	.word	0x40021000

080012c4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012c4:	6903      	ldr	r3, [r0, #16]
 80012c6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80012c8:	bf14      	ite	ne
 80012ca:	2001      	movne	r0, #1
 80012cc:	2000      	moveq	r0, #0
 80012ce:	4770      	bx	lr

080012d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d0:	b10a      	cbz	r2, 80012d6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012d2:	6181      	str	r1, [r0, #24]
 80012d4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012d6:	6281      	str	r1, [r0, #40]	; 0x28
 80012d8:	4770      	bx	lr

080012da <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80012da:	6943      	ldr	r3, [r0, #20]
 80012dc:	420b      	tst	r3, r1
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012de:	bf18      	it	ne
 80012e0:	0409      	lslne	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012e2:	6181      	str	r1, [r0, #24]
 80012e4:	4770      	bx	lr
	...

080012e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012e8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012ea:	4b04      	ldr	r3, [pc, #16]	; (80012fc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80012ec:	6959      	ldr	r1, [r3, #20]
 80012ee:	4201      	tst	r1, r0
 80012f0:	d002      	beq.n	80012f8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012f2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012f4:	f003 fb22 	bl	800493c <HAL_GPIO_EXTI_Callback>
 80012f8:	bd08      	pop	{r3, pc}
 80012fa:	bf00      	nop
 80012fc:	40010400 	.word	0x40010400

08001300 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001300:	6803      	ldr	r3, [r0, #0]
 8001302:	699a      	ldr	r2, [r3, #24]
 8001304:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8001306:	bf44      	itt	mi
 8001308:	2200      	movmi	r2, #0
 800130a:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800130c:	699a      	ldr	r2, [r3, #24]
 800130e:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001310:	bf5e      	ittt	pl
 8001312:	699a      	ldrpl	r2, [r3, #24]
 8001314:	f042 0201 	orrpl.w	r2, r2, #1
 8001318:	619a      	strpl	r2, [r3, #24]
 800131a:	4770      	bx	lr

0800131c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800131c:	b530      	push	{r4, r5, lr}
 800131e:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001320:	6805      	ldr	r5, [r0, #0]
 8001322:	4323      	orrs	r3, r4
 8001324:	0d64      	lsrs	r4, r4, #21
 8001326:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 800132a:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800132e:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001332:	6868      	ldr	r0, [r5, #4]
 8001334:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001338:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 800133c:	4319      	orrs	r1, r3
 800133e:	f044 0403 	orr.w	r4, r4, #3
 8001342:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001346:	ea20 0404 	bic.w	r4, r0, r4
 800134a:	4321      	orrs	r1, r4
 800134c:	6069      	str	r1, [r5, #4]
 800134e:	bd30      	pop	{r4, r5, pc}

08001350 <I2C_WaitOnFlagUntilTimeout>:
{
 8001350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001354:	9f06      	ldr	r7, [sp, #24]
 8001356:	4604      	mov	r4, r0
 8001358:	4688      	mov	r8, r1
 800135a:	4616      	mov	r6, r2
 800135c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800135e:	6822      	ldr	r2, [r4, #0]
 8001360:	6993      	ldr	r3, [r2, #24]
 8001362:	ea38 0303 	bics.w	r3, r8, r3
 8001366:	bf0c      	ite	eq
 8001368:	2301      	moveq	r3, #1
 800136a:	2300      	movne	r3, #0
 800136c:	42b3      	cmp	r3, r6
 800136e:	d002      	beq.n	8001376 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001370:	2000      	movs	r0, #0
}
 8001372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001376:	1c6b      	adds	r3, r5, #1
 8001378:	d0f2      	beq.n	8001360 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800137a:	f7ff fd8d 	bl	8000e98 <HAL_GetTick>
 800137e:	1bc0      	subs	r0, r0, r7
 8001380:	4285      	cmp	r5, r0
 8001382:	d301      	bcc.n	8001388 <I2C_WaitOnFlagUntilTimeout+0x38>
 8001384:	2d00      	cmp	r5, #0
 8001386:	d1ea      	bne.n	800135e <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001388:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800138a:	f043 0320 	orr.w	r3, r3, #32
 800138e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001390:	2320      	movs	r3, #32
 8001392:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001396:	2300      	movs	r3, #0
 8001398:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800139c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80013a0:	2001      	movs	r0, #1
 80013a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080013a6 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013a6:	6803      	ldr	r3, [r0, #0]
{
 80013a8:	b570      	push	{r4, r5, r6, lr}
 80013aa:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013ac:	6998      	ldr	r0, [r3, #24]
 80013ae:	f010 0010 	ands.w	r0, r0, #16
{
 80013b2:	460d      	mov	r5, r1
 80013b4:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013b6:	d116      	bne.n	80013e6 <I2C_IsAcknowledgeFailed+0x40>
 80013b8:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 80013ba:	1c69      	adds	r1, r5, #1
 80013bc:	d014      	beq.n	80013e8 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013be:	f7ff fd6b 	bl	8000e98 <HAL_GetTick>
 80013c2:	1b80      	subs	r0, r0, r6
 80013c4:	4285      	cmp	r5, r0
 80013c6:	d300      	bcc.n	80013ca <I2C_IsAcknowledgeFailed+0x24>
 80013c8:	b96d      	cbnz	r5, 80013e6 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013cc:	f043 0320 	orr.w	r3, r3, #32
 80013d0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80013d2:	2320      	movs	r3, #32
 80013d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013d8:	2300      	movs	r3, #0
 80013da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80013de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80013e2:	2001      	movs	r0, #1
}
 80013e4:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013e6:	6823      	ldr	r3, [r4, #0]
 80013e8:	6999      	ldr	r1, [r3, #24]
 80013ea:	068a      	lsls	r2, r1, #26
 80013ec:	d5e5      	bpl.n	80013ba <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013ee:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013f0:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013f2:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80013f4:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013f6:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80013f8:	f7ff ff82 	bl	8001300 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80013fc:	6822      	ldr	r2, [r4, #0]
 80013fe:	6853      	ldr	r3, [r2, #4]
 8001400:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001404:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001408:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800140c:	f023 0301 	bic.w	r3, r3, #1
 8001410:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001412:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001414:	f043 0304 	orr.w	r3, r3, #4
 8001418:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800141a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 800141e:	e7db      	b.n	80013d8 <I2C_IsAcknowledgeFailed+0x32>

08001420 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001420:	b570      	push	{r4, r5, r6, lr}
 8001422:	4604      	mov	r4, r0
 8001424:	460d      	mov	r5, r1
 8001426:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001428:	6823      	ldr	r3, [r4, #0]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	079b      	lsls	r3, r3, #30
 800142e:	d501      	bpl.n	8001434 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8001430:	2000      	movs	r0, #0
 8001432:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001434:	4632      	mov	r2, r6
 8001436:	4629      	mov	r1, r5
 8001438:	4620      	mov	r0, r4
 800143a:	f7ff ffb4 	bl	80013a6 <I2C_IsAcknowledgeFailed>
 800143e:	b9a0      	cbnz	r0, 800146a <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8001440:	1c6a      	adds	r2, r5, #1
 8001442:	d0f1      	beq.n	8001428 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001444:	f7ff fd28 	bl	8000e98 <HAL_GetTick>
 8001448:	1b80      	subs	r0, r0, r6
 800144a:	4285      	cmp	r5, r0
 800144c:	d301      	bcc.n	8001452 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800144e:	2d00      	cmp	r5, #0
 8001450:	d1ea      	bne.n	8001428 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001452:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001454:	f043 0320 	orr.w	r3, r3, #32
 8001458:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800145a:	2320      	movs	r3, #32
 800145c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001460:	2300      	movs	r3, #0
 8001462:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001466:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800146a:	2001      	movs	r0, #1
}
 800146c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001470 <I2C_RequestMemoryWrite>:
{
 8001470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001472:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001474:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <I2C_RequestMemoryWrite+0x60>)
 8001478:	9300      	str	r3, [sp, #0]
{
 800147a:	4605      	mov	r5, r0
 800147c:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800147e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001482:	b2fa      	uxtb	r2, r7
 8001484:	f7ff ff4a 	bl	800131c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001488:	4632      	mov	r2, r6
 800148a:	9908      	ldr	r1, [sp, #32]
 800148c:	4628      	mov	r0, r5
 800148e:	f7ff ffc7 	bl	8001420 <I2C_WaitOnTXISFlagUntilTimeout>
 8001492:	b110      	cbz	r0, 800149a <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 8001494:	2001      	movs	r0, #1
}
 8001496:	b003      	add	sp, #12
 8001498:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800149a:	2f01      	cmp	r7, #1
 800149c:	682b      	ldr	r3, [r5, #0]
 800149e:	d10c      	bne.n	80014ba <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014a0:	b2e4      	uxtb	r4, r4
 80014a2:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80014a4:	9b08      	ldr	r3, [sp, #32]
 80014a6:	9600      	str	r6, [sp, #0]
 80014a8:	2200      	movs	r2, #0
 80014aa:	2180      	movs	r1, #128	; 0x80
 80014ac:	4628      	mov	r0, r5
 80014ae:	f7ff ff4f 	bl	8001350 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80014b2:	3000      	adds	r0, #0
 80014b4:	bf18      	it	ne
 80014b6:	2001      	movne	r0, #1
 80014b8:	e7ed      	b.n	8001496 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80014ba:	0a22      	lsrs	r2, r4, #8
 80014bc:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014be:	9908      	ldr	r1, [sp, #32]
 80014c0:	4632      	mov	r2, r6
 80014c2:	4628      	mov	r0, r5
 80014c4:	f7ff ffac 	bl	8001420 <I2C_WaitOnTXISFlagUntilTimeout>
 80014c8:	2800      	cmp	r0, #0
 80014ca:	d1e3      	bne.n	8001494 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014cc:	682b      	ldr	r3, [r5, #0]
 80014ce:	e7e7      	b.n	80014a0 <I2C_RequestMemoryWrite+0x30>
 80014d0:	80002000 	.word	0x80002000

080014d4 <I2C_RequestMemoryRead>:
{
 80014d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80014d8:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <I2C_RequestMemoryRead+0x60>)
 80014dc:	9300      	str	r3, [sp, #0]
{
 80014de:	4605      	mov	r5, r0
 80014e0:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80014e2:	2300      	movs	r3, #0
 80014e4:	b2fa      	uxtb	r2, r7
 80014e6:	f7ff ff19 	bl	800131c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014ea:	4632      	mov	r2, r6
 80014ec:	9908      	ldr	r1, [sp, #32]
 80014ee:	4628      	mov	r0, r5
 80014f0:	f7ff ff96 	bl	8001420 <I2C_WaitOnTXISFlagUntilTimeout>
 80014f4:	b110      	cbz	r0, 80014fc <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 80014f6:	2001      	movs	r0, #1
}
 80014f8:	b003      	add	sp, #12
 80014fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80014fc:	2f01      	cmp	r7, #1
 80014fe:	682b      	ldr	r3, [r5, #0]
 8001500:	d10c      	bne.n	800151c <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001502:	b2e4      	uxtb	r4, r4
 8001504:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001506:	9b08      	ldr	r3, [sp, #32]
 8001508:	9600      	str	r6, [sp, #0]
 800150a:	2200      	movs	r2, #0
 800150c:	2140      	movs	r1, #64	; 0x40
 800150e:	4628      	mov	r0, r5
 8001510:	f7ff ff1e 	bl	8001350 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8001514:	3000      	adds	r0, #0
 8001516:	bf18      	it	ne
 8001518:	2001      	movne	r0, #1
 800151a:	e7ed      	b.n	80014f8 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800151c:	0a22      	lsrs	r2, r4, #8
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001520:	9908      	ldr	r1, [sp, #32]
 8001522:	4632      	mov	r2, r6
 8001524:	4628      	mov	r0, r5
 8001526:	f7ff ff7b 	bl	8001420 <I2C_WaitOnTXISFlagUntilTimeout>
 800152a:	2800      	cmp	r0, #0
 800152c:	d1e3      	bne.n	80014f6 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800152e:	682b      	ldr	r3, [r5, #0]
 8001530:	e7e7      	b.n	8001502 <I2C_RequestMemoryRead+0x2e>
 8001532:	bf00      	nop
 8001534:	80002000 	.word	0x80002000

08001538 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001538:	b570      	push	{r4, r5, r6, lr}
 800153a:	4604      	mov	r4, r0
 800153c:	460d      	mov	r5, r1
 800153e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001540:	6823      	ldr	r3, [r4, #0]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	069b      	lsls	r3, r3, #26
 8001546:	d501      	bpl.n	800154c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8001548:	2000      	movs	r0, #0
 800154a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800154c:	4632      	mov	r2, r6
 800154e:	4629      	mov	r1, r5
 8001550:	4620      	mov	r0, r4
 8001552:	f7ff ff28 	bl	80013a6 <I2C_IsAcknowledgeFailed>
 8001556:	b990      	cbnz	r0, 800157e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001558:	f7ff fc9e 	bl	8000e98 <HAL_GetTick>
 800155c:	1b80      	subs	r0, r0, r6
 800155e:	4285      	cmp	r5, r0
 8001560:	d301      	bcc.n	8001566 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8001562:	2d00      	cmp	r5, #0
 8001564:	d1ec      	bne.n	8001540 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001566:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001568:	f043 0320 	orr.w	r3, r3, #32
 800156c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800156e:	2320      	movs	r3, #32
 8001570:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001574:	2300      	movs	r3, #0
 8001576:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800157a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800157e:	2001      	movs	r0, #1
}
 8001580:	bd70      	pop	{r4, r5, r6, pc}

08001582 <HAL_I2C_Init>:
{
 8001582:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001584:	4604      	mov	r4, r0
 8001586:	2800      	cmp	r0, #0
 8001588:	d04a      	beq.n	8001620 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800158a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800158e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001592:	b91b      	cbnz	r3, 800159c <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001594:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001598:	f003 fd32 	bl	8005000 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800159c:	2324      	movs	r3, #36	; 0x24
 800159e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80015a2:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015a4:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	f022 0201 	bic.w	r2, r2, #1
 80015ac:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015ae:	6862      	ldr	r2, [r4, #4]
 80015b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015b4:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015b6:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015b8:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015c2:	d124      	bne.n	800160e <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015c8:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015ca:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80015cc:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015ce:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80015d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015d6:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015d8:	68da      	ldr	r2, [r3, #12]
 80015da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015de:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80015e0:	6922      	ldr	r2, [r4, #16]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	69a1      	ldr	r1, [r4, #24]
 80015e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80015ea:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015ec:	6a21      	ldr	r1, [r4, #32]
 80015ee:	69e2      	ldr	r2, [r4, #28]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	f042 0201 	orr.w	r2, r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015fc:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80015fe:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001600:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001602:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001606:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001608:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 800160c:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800160e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001612:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001614:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001616:	bf04      	itt	eq
 8001618:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800161c:	605a      	streq	r2, [r3, #4]
 800161e:	e7d4      	b.n	80015ca <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001620:	2001      	movs	r0, #1
}
 8001622:	bd10      	pop	{r4, pc}

08001624 <HAL_I2C_Mem_Write>:
{
 8001624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001628:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800162a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800162e:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001630:	2b20      	cmp	r3, #32
{
 8001632:	4604      	mov	r4, r0
 8001634:	460f      	mov	r7, r1
 8001636:	9203      	str	r2, [sp, #12]
 8001638:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 800163c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001640:	f040 80a5 	bne.w	800178e <HAL_I2C_Mem_Write+0x16a>
    if ((pData == NULL) || (Size == 0U))
 8001644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001646:	b113      	cbz	r3, 800164e <HAL_I2C_Mem_Write+0x2a>
 8001648:	f1ba 0f00 	cmp.w	sl, #0
 800164c:	d106      	bne.n	800165c <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800164e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001652:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001654:	2001      	movs	r0, #1
}
 8001656:	b005      	add	sp, #20
 8001658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800165c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001660:	2b01      	cmp	r3, #1
 8001662:	f000 8094 	beq.w	800178e <HAL_I2C_Mem_Write+0x16a>
 8001666:	2501      	movs	r5, #1
 8001668:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800166c:	f7ff fc14 	bl	8000e98 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001670:	2319      	movs	r3, #25
 8001672:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001674:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001676:	462a      	mov	r2, r5
 8001678:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800167c:	4620      	mov	r0, r4
 800167e:	f7ff fe67 	bl	8001350 <I2C_WaitOnFlagUntilTimeout>
 8001682:	4681      	mov	r9, r0
 8001684:	2800      	cmp	r0, #0
 8001686:	d1e5      	bne.n	8001654 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001688:	2321      	movs	r3, #33	; 0x21
 800168a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800168e:	2340      	movs	r3, #64	; 0x40
 8001690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001694:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001696:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001698:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800169a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800169c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016a0:	9601      	str	r6, [sp, #4]
 80016a2:	f8cd 8000 	str.w	r8, [sp]
 80016a6:	465b      	mov	r3, fp
 80016a8:	9a03      	ldr	r2, [sp, #12]
 80016aa:	4639      	mov	r1, r7
 80016ac:	4620      	mov	r0, r4
 80016ae:	f7ff fedf 	bl	8001470 <I2C_RequestMemoryWrite>
 80016b2:	b110      	cbz	r0, 80016ba <HAL_I2C_Mem_Write+0x96>
      __HAL_UNLOCK(hi2c);
 80016b4:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 80016b8:	e7cc      	b.n	8001654 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016bc:	b29b      	uxth	r3, r3
 80016be:	2bff      	cmp	r3, #255	; 0xff
 80016c0:	d955      	bls.n	800176e <HAL_I2C_Mem_Write+0x14a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016c2:	22ff      	movs	r2, #255	; 0xff
 80016c4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80016c6:	9000      	str	r0, [sp, #0]
 80016c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016cc:	4639      	mov	r1, r7
 80016ce:	4620      	mov	r0, r4
 80016d0:	f7ff fe24 	bl	800131c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016d4:	4632      	mov	r2, r6
 80016d6:	4641      	mov	r1, r8
 80016d8:	4620      	mov	r0, r4
 80016da:	f7ff fea1 	bl	8001420 <I2C_WaitOnTXISFlagUntilTimeout>
 80016de:	2800      	cmp	r0, #0
 80016e0:	d1b8      	bne.n	8001654 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016e4:	6822      	ldr	r2, [r4, #0]
 80016e6:	f813 1b01 	ldrb.w	r1, [r3], #1
 80016ea:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80016ec:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80016ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80016f0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80016f2:	3b01      	subs	r3, #1
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80016fa:	3a01      	subs	r2, #1
 80016fc:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016fe:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001700:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001702:	b1ab      	cbz	r3, 8001730 <HAL_I2C_Mem_Write+0x10c>
 8001704:	b9a2      	cbnz	r2, 8001730 <HAL_I2C_Mem_Write+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001706:	9600      	str	r6, [sp, #0]
 8001708:	4643      	mov	r3, r8
 800170a:	2180      	movs	r1, #128	; 0x80
 800170c:	4620      	mov	r0, r4
 800170e:	f7ff fe1f 	bl	8001350 <I2C_WaitOnFlagUntilTimeout>
 8001712:	2800      	cmp	r0, #0
 8001714:	d19e      	bne.n	8001654 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001716:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001718:	b29b      	uxth	r3, r3
 800171a:	2bff      	cmp	r3, #255	; 0xff
 800171c:	d92f      	bls.n	800177e <HAL_I2C_Mem_Write+0x15a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800171e:	22ff      	movs	r2, #255	; 0xff
 8001720:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001722:	9000      	str	r0, [sp, #0]
 8001724:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001728:	4639      	mov	r1, r7
 800172a:	4620      	mov	r0, r4
 800172c:	f7ff fdf6 	bl	800131c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8001730:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001732:	b29b      	uxth	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1cd      	bne.n	80016d4 <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001738:	4632      	mov	r2, r6
 800173a:	4641      	mov	r1, r8
 800173c:	4620      	mov	r0, r4
 800173e:	f7ff fefb 	bl	8001538 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001742:	2800      	cmp	r0, #0
 8001744:	d186      	bne.n	8001654 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001746:	6823      	ldr	r3, [r4, #0]
 8001748:	2120      	movs	r1, #32
 800174a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001752:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001756:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800175a:	f022 0201 	bic.w	r2, r2, #1
 800175e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001760:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001764:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001768:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800176c:	e773      	b.n	8001656 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 800176e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001770:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001772:	b292      	uxth	r2, r2
 8001774:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001776:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	e7a6      	b.n	80016cc <HAL_I2C_Mem_Write+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 800177e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001780:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001782:	b292      	uxth	r2, r2
 8001784:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001786:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	e7cc      	b.n	8001728 <HAL_I2C_Mem_Write+0x104>
    return HAL_BUSY;
 800178e:	2002      	movs	r0, #2
 8001790:	e761      	b.n	8001656 <HAL_I2C_Mem_Write+0x32>
	...

08001794 <HAL_I2C_Mem_Read>:
{
 8001794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001798:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800179a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800179e:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 80017a0:	2b20      	cmp	r3, #32
{
 80017a2:	4604      	mov	r4, r0
 80017a4:	460f      	mov	r7, r1
 80017a6:	9203      	str	r2, [sp, #12]
 80017a8:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80017ac:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80017b0:	f040 80a9 	bne.w	8001906 <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 80017b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80017b6:	b113      	cbz	r3, 80017be <HAL_I2C_Mem_Read+0x2a>
 80017b8:	f1ba 0f00 	cmp.w	sl, #0
 80017bc:	d106      	bne.n	80017cc <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80017be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017c2:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80017c4:	2001      	movs	r0, #1
}
 80017c6:	b005      	add	sp, #20
 80017c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80017cc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	f000 8098 	beq.w	8001906 <HAL_I2C_Mem_Read+0x172>
 80017d6:	2501      	movs	r5, #1
 80017d8:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80017dc:	f7ff fb5c 	bl	8000e98 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017e0:	2319      	movs	r3, #25
 80017e2:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80017e4:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017e6:	462a      	mov	r2, r5
 80017e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ec:	4620      	mov	r0, r4
 80017ee:	f7ff fdaf 	bl	8001350 <I2C_WaitOnFlagUntilTimeout>
 80017f2:	4681      	mov	r9, r0
 80017f4:	2800      	cmp	r0, #0
 80017f6:	d1e5      	bne.n	80017c4 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80017f8:	2322      	movs	r3, #34	; 0x22
 80017fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017fe:	2340      	movs	r3, #64	; 0x40
 8001800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001804:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001806:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001808:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800180a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800180c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001810:	9601      	str	r6, [sp, #4]
 8001812:	f8cd 8000 	str.w	r8, [sp]
 8001816:	465b      	mov	r3, fp
 8001818:	9a03      	ldr	r2, [sp, #12]
 800181a:	4639      	mov	r1, r7
 800181c:	4620      	mov	r0, r4
 800181e:	f7ff fe59 	bl	80014d4 <I2C_RequestMemoryRead>
 8001822:	b110      	cbz	r0, 800182a <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 8001824:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8001828:	e7cc      	b.n	80017c4 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800182a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800182c:	b29b      	uxth	r3, r3
 800182e:	2bff      	cmp	r3, #255	; 0xff
 8001830:	4b36      	ldr	r3, [pc, #216]	; (800190c <HAL_I2C_Mem_Read+0x178>)
 8001832:	d958      	bls.n	80018e6 <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001834:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001836:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001838:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800183a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800183e:	4639      	mov	r1, r7
 8001840:	4620      	mov	r0, r4
 8001842:	f7ff fd6b 	bl	800131c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001846:	9600      	str	r6, [sp, #0]
 8001848:	4643      	mov	r3, r8
 800184a:	2200      	movs	r2, #0
 800184c:	2104      	movs	r1, #4
 800184e:	4620      	mov	r0, r4
 8001850:	f7ff fd7e 	bl	8001350 <I2C_WaitOnFlagUntilTimeout>
 8001854:	2800      	cmp	r0, #0
 8001856:	d1b5      	bne.n	80017c4 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001858:	6822      	ldr	r2, [r4, #0]
 800185a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800185c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800185e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001860:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001862:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001864:	3301      	adds	r3, #1
 8001866:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001868:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800186a:	3b01      	subs	r3, #1
 800186c:	b29b      	uxth	r3, r3
 800186e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001870:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001872:	3a01      	subs	r2, #1
 8001874:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001876:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001878:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800187a:	b1ab      	cbz	r3, 80018a8 <HAL_I2C_Mem_Read+0x114>
 800187c:	b9a2      	cbnz	r2, 80018a8 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800187e:	9600      	str	r6, [sp, #0]
 8001880:	4643      	mov	r3, r8
 8001882:	2180      	movs	r1, #128	; 0x80
 8001884:	4620      	mov	r0, r4
 8001886:	f7ff fd63 	bl	8001350 <I2C_WaitOnFlagUntilTimeout>
 800188a:	2800      	cmp	r0, #0
 800188c:	d19a      	bne.n	80017c4 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800188e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001890:	b29b      	uxth	r3, r3
 8001892:	2bff      	cmp	r3, #255	; 0xff
 8001894:	d92f      	bls.n	80018f6 <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001896:	22ff      	movs	r2, #255	; 0xff
 8001898:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800189a:	9000      	str	r0, [sp, #0]
 800189c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018a0:	4639      	mov	r1, r7
 80018a2:	4620      	mov	r0, r4
 80018a4:	f7ff fd3a 	bl	800131c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80018a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1ca      	bne.n	8001846 <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018b0:	4632      	mov	r2, r6
 80018b2:	4641      	mov	r1, r8
 80018b4:	4620      	mov	r0, r4
 80018b6:	f7ff fe3f 	bl	8001538 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018ba:	2800      	cmp	r0, #0
 80018bc:	d182      	bne.n	80017c4 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018be:	6823      	ldr	r3, [r4, #0]
 80018c0:	2120      	movs	r1, #32
 80018c2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80018ca:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80018ce:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80018d2:	f022 0201 	bic.w	r2, r2, #1
 80018d6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80018d8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80018dc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018e0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80018e4:	e76f      	b.n	80017c6 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80018e6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80018e8:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80018ea:	b292      	uxth	r2, r2
 80018ec:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80018ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	e7a3      	b.n	800183e <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 80018f6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018f8:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80018fa:	b292      	uxth	r2, r2
 80018fc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	e7cc      	b.n	80018a0 <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 8001906:	2002      	movs	r0, #2
 8001908:	e75d      	b.n	80017c6 <HAL_I2C_Mem_Read+0x32>
 800190a:	bf00      	nop
 800190c:	80002400 	.word	0x80002400

08001910 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001910:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	2a20      	cmp	r2, #32
{
 8001918:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800191a:	d11d      	bne.n	8001958 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800191c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001920:	2b01      	cmp	r3, #1
 8001922:	d019      	beq.n	8001958 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001924:	2324      	movs	r3, #36	; 0x24
 8001926:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800192a:	6803      	ldr	r3, [r0, #0]
 800192c:	681c      	ldr	r4, [r3, #0]
 800192e:	f024 0401 	bic.w	r4, r4, #1
 8001932:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001934:	681c      	ldr	r4, [r3, #0]
 8001936:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800193a:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800193c:	681c      	ldr	r4, [r3, #0]
 800193e:	4321      	orrs	r1, r4
 8001940:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001942:	6819      	ldr	r1, [r3, #0]
 8001944:	f041 0101 	orr.w	r1, r1, #1
 8001948:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800194a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800194c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001950:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001954:	4618      	mov	r0, r3
 8001956:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001958:	2002      	movs	r0, #2
  }
}
 800195a:	bd10      	pop	{r4, pc}

0800195c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800195c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800195e:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8001962:	b2e4      	uxtb	r4, r4
 8001964:	2c20      	cmp	r4, #32
 8001966:	d11c      	bne.n	80019a2 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001968:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800196c:	2b01      	cmp	r3, #1
 800196e:	d018      	beq.n	80019a2 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001970:	2324      	movs	r3, #36	; 0x24
 8001972:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001976:	6803      	ldr	r3, [r0, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	f022 0201 	bic.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001980:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001982:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001986:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800198a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	f042 0201 	orr.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001994:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001996:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800199a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800199e:	4618      	mov	r0, r3
 80019a0:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80019a2:	2002      	movs	r0, #2
  }
}
 80019a4:	bd10      	pop	{r4, pc}
	...

080019a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019ac:	4605      	mov	r5, r0
 80019ae:	b908      	cbnz	r0, 80019b4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80019b0:	2001      	movs	r0, #1
 80019b2:	e05b      	b.n	8001a6c <HAL_RCC_OscConfig+0xc4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b4:	6803      	ldr	r3, [r0, #0]
 80019b6:	07df      	lsls	r7, r3, #31
 80019b8:	d411      	bmi.n	80019de <HAL_RCC_OscConfig+0x36>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ba:	682b      	ldr	r3, [r5, #0]
 80019bc:	079e      	lsls	r6, r3, #30
 80019be:	f100 808a 	bmi.w	8001ad6 <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c2:	682b      	ldr	r3, [r5, #0]
 80019c4:	071c      	lsls	r4, r3, #28
 80019c6:	f100 80fe 	bmi.w	8001bc6 <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ca:	682b      	ldr	r3, [r5, #0]
 80019cc:	0758      	lsls	r0, r3, #29
 80019ce:	f100 8147 	bmi.w	8001c60 <HAL_RCC_OscConfig+0x2b8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d2:	69a8      	ldr	r0, [r5, #24]
 80019d4:	2800      	cmp	r0, #0
 80019d6:	f040 81de 	bne.w	8001d96 <HAL_RCC_OscConfig+0x3ee>
        }
      }
    }
  }

  return HAL_OK;
 80019da:	2000      	movs	r0, #0
 80019dc:	e046      	b.n	8001a6c <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019de:	4cbe      	ldr	r4, [pc, #760]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 80019e0:	6863      	ldr	r3, [r4, #4]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d00a      	beq.n	8001a00 <HAL_RCC_OscConfig+0x58>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019ea:	6863      	ldr	r3, [r4, #4]
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d119      	bne.n	8001a28 <HAL_RCC_OscConfig+0x80>
 80019f4:	6863      	ldr	r3, [r4, #4]
 80019f6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80019fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019fe:	d113      	bne.n	8001a28 <HAL_RCC_OscConfig+0x80>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a04:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a08:	6821      	ldr	r1, [r4, #0]
 8001a0a:	fa93 f3a3 	rbit	r3, r3
 8001a0e:	fab3 f383 	clz	r3, r3
 8001a12:	f003 031f 	and.w	r3, r3, #31
 8001a16:	2201      	movs	r2, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	420b      	tst	r3, r1
 8001a1e:	d0cc      	beq.n	80019ba <HAL_RCC_OscConfig+0x12>
 8001a20:	686b      	ldr	r3, [r5, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1c9      	bne.n	80019ba <HAL_RCC_OscConfig+0x12>
 8001a26:	e7c3      	b.n	80019b0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a28:	686b      	ldr	r3, [r5, #4]
 8001a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2e:	d120      	bne.n	8001a72 <HAL_RCC_OscConfig+0xca>
 8001a30:	6823      	ldr	r3, [r4, #0]
 8001a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a36:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a38:	f7ff fa2e 	bl	8000e98 <HAL_GetTick>
 8001a3c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001a40:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	2701      	movs	r7, #1
 8001a44:	fa96 f3a6 	rbit	r3, r6
 8001a48:	6822      	ldr	r2, [r4, #0]
 8001a4a:	fa96 f3a6 	rbit	r3, r6
 8001a4e:	fab3 f383 	clz	r3, r3
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	fa07 f303 	lsl.w	r3, r7, r3
 8001a5a:	4213      	tst	r3, r2
 8001a5c:	d1ad      	bne.n	80019ba <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a5e:	f7ff fa1b 	bl	8000e98 <HAL_GetTick>
 8001a62:	eba0 0008 	sub.w	r0, r0, r8
 8001a66:	2864      	cmp	r0, #100	; 0x64
 8001a68:	d9ec      	bls.n	8001a44 <HAL_RCC_OscConfig+0x9c>
            return HAL_TIMEOUT;
 8001a6a:	2003      	movs	r0, #3
}
 8001a6c:	b002      	add	sp, #8
 8001a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a72:	bb0b      	cbnz	r3, 8001ab8 <HAL_RCC_OscConfig+0x110>
 8001a74:	6823      	ldr	r3, [r4, #0]
 8001a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a7a:	6023      	str	r3, [r4, #0]
 8001a7c:	6823      	ldr	r3, [r4, #0]
 8001a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a82:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a84:	f7ff fa08 	bl	8000e98 <HAL_GetTick>
 8001a88:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001a8c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8e:	2701      	movs	r7, #1
 8001a90:	fa96 f3a6 	rbit	r3, r6
 8001a94:	6822      	ldr	r2, [r4, #0]
 8001a96:	fa96 f3a6 	rbit	r3, r6
 8001a9a:	fab3 f383 	clz	r3, r3
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	fa07 f303 	lsl.w	r3, r7, r3
 8001aa6:	4213      	tst	r3, r2
 8001aa8:	d087      	beq.n	80019ba <HAL_RCC_OscConfig+0x12>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aaa:	f7ff f9f5 	bl	8000e98 <HAL_GetTick>
 8001aae:	eba0 0008 	sub.w	r0, r0, r8
 8001ab2:	2864      	cmp	r0, #100	; 0x64
 8001ab4:	d9ec      	bls.n	8001a90 <HAL_RCC_OscConfig+0xe8>
 8001ab6:	e7d8      	b.n	8001a6a <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001abc:	6823      	ldr	r3, [r4, #0]
 8001abe:	d103      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x120>
 8001ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac4:	6023      	str	r3, [r4, #0]
 8001ac6:	e7b3      	b.n	8001a30 <HAL_RCC_OscConfig+0x88>
 8001ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001acc:	6023      	str	r3, [r4, #0]
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad4:	e7af      	b.n	8001a36 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ad6:	4c80      	ldr	r4, [pc, #512]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001ad8:	6863      	ldr	r3, [r4, #4]
 8001ada:	f013 0f0c 	tst.w	r3, #12
 8001ade:	d00a      	beq.n	8001af6 <HAL_RCC_OscConfig+0x14e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ae0:	6863      	ldr	r3, [r4, #4]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d125      	bne.n	8001b36 <HAL_RCC_OscConfig+0x18e>
 8001aea:	6863      	ldr	r3, [r4, #4]
 8001aec:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001af4:	d11f      	bne.n	8001b36 <HAL_RCC_OscConfig+0x18e>
 8001af6:	2302      	movs	r3, #2
 8001af8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afc:	6821      	ldr	r1, [r4, #0]
 8001afe:	fa93 f3a3 	rbit	r3, r3
 8001b02:	fab3 f383 	clz	r3, r3
 8001b06:	f003 031f 	and.w	r3, r3, #31
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	420b      	tst	r3, r1
 8001b12:	d003      	beq.n	8001b1c <HAL_RCC_OscConfig+0x174>
 8001b14:	68eb      	ldr	r3, [r5, #12]
 8001b16:	4293      	cmp	r3, r2
 8001b18:	f47f af4a 	bne.w	80019b0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1c:	6821      	ldr	r1, [r4, #0]
 8001b1e:	23f8      	movs	r3, #248	; 0xf8
 8001b20:	fa93 f3a3 	rbit	r3, r3
 8001b24:	fab3 f283 	clz	r2, r3
 8001b28:	692b      	ldr	r3, [r5, #16]
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001b30:	4313      	orrs	r3, r2
 8001b32:	6023      	str	r3, [r4, #0]
 8001b34:	e745      	b.n	80019c2 <HAL_RCC_OscConfig+0x1a>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b36:	68ea      	ldr	r2, [r5, #12]
 8001b38:	2601      	movs	r6, #1
 8001b3a:	b30a      	cbz	r2, 8001b80 <HAL_RCC_OscConfig+0x1d8>
 8001b3c:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8001b40:	fab3 f383 	clz	r3, r3
 8001b44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	2702      	movs	r7, #2
 8001b50:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001b52:	f7ff f9a1 	bl	8000e98 <HAL_GetTick>
 8001b56:	4680      	mov	r8, r0
 8001b58:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5c:	6822      	ldr	r2, [r4, #0]
 8001b5e:	fa97 f3a7 	rbit	r3, r7
 8001b62:	fab3 f383 	clz	r3, r3
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	fa06 f303 	lsl.w	r3, r6, r3
 8001b6e:	4213      	tst	r3, r2
 8001b70:	d1d4      	bne.n	8001b1c <HAL_RCC_OscConfig+0x174>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b72:	f7ff f991 	bl	8000e98 <HAL_GetTick>
 8001b76:	eba0 0008 	sub.w	r0, r0, r8
 8001b7a:	2802      	cmp	r0, #2
 8001b7c:	d9ec      	bls.n	8001b58 <HAL_RCC_OscConfig+0x1b0>
 8001b7e:	e774      	b.n	8001a6a <HAL_RCC_OscConfig+0xc2>
 8001b80:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8001b84:	fab3 f383 	clz	r3, r3
 8001b88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	2702      	movs	r7, #2
 8001b94:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b96:	f7ff f97f 	bl	8000e98 <HAL_GetTick>
 8001b9a:	4680      	mov	r8, r0
 8001b9c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba0:	6822      	ldr	r2, [r4, #0]
 8001ba2:	fa97 f3a7 	rbit	r3, r7
 8001ba6:	fab3 f383 	clz	r3, r3
 8001baa:	f003 031f 	and.w	r3, r3, #31
 8001bae:	fa06 f303 	lsl.w	r3, r6, r3
 8001bb2:	4213      	tst	r3, r2
 8001bb4:	f43f af05 	beq.w	80019c2 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bb8:	f7ff f96e 	bl	8000e98 <HAL_GetTick>
 8001bbc:	eba0 0008 	sub.w	r0, r0, r8
 8001bc0:	2802      	cmp	r0, #2
 8001bc2:	d9eb      	bls.n	8001b9c <HAL_RCC_OscConfig+0x1f4>
 8001bc4:	e751      	b.n	8001a6a <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bc6:	696a      	ldr	r2, [r5, #20]
 8001bc8:	4e43      	ldr	r6, [pc, #268]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001bca:	4944      	ldr	r1, [pc, #272]	; (8001cdc <HAL_RCC_OscConfig+0x334>)
 8001bcc:	2401      	movs	r4, #1
 8001bce:	b31a      	cbz	r2, 8001c18 <HAL_RCC_OscConfig+0x270>
 8001bd0:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8001bd4:	fab3 f383 	clz	r3, r3
 8001bd8:	440b      	add	r3, r1
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	2702      	movs	r7, #2
 8001bde:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8001be0:	f7ff f95a 	bl	8000e98 <HAL_GetTick>
 8001be4:	4680      	mov	r8, r0
 8001be6:	fa97 f3a7 	rbit	r3, r7
 8001bea:	fa97 f3a7 	rbit	r3, r7
 8001bee:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf2:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001bf4:	fa97 f3a7 	rbit	r3, r7
 8001bf8:	fab3 f383 	clz	r3, r3
 8001bfc:	f003 031f 	and.w	r3, r3, #31
 8001c00:	fa04 f303 	lsl.w	r3, r4, r3
 8001c04:	4213      	tst	r3, r2
 8001c06:	f47f aee0 	bne.w	80019ca <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c0a:	f7ff f945 	bl	8000e98 <HAL_GetTick>
 8001c0e:	eba0 0008 	sub.w	r0, r0, r8
 8001c12:	2802      	cmp	r0, #2
 8001c14:	d9e7      	bls.n	8001be6 <HAL_RCC_OscConfig+0x23e>
 8001c16:	e728      	b.n	8001a6a <HAL_RCC_OscConfig+0xc2>
 8001c18:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001c1c:	fab3 f383 	clz	r3, r3
 8001c20:	440b      	add	r3, r1
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	2702      	movs	r7, #2
 8001c26:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001c28:	f7ff f936 	bl	8000e98 <HAL_GetTick>
 8001c2c:	4680      	mov	r8, r0
 8001c2e:	fa97 f3a7 	rbit	r3, r7
 8001c32:	fa97 f3a7 	rbit	r3, r7
 8001c36:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c3a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001c3c:	fa97 f3a7 	rbit	r3, r7
 8001c40:	fab3 f383 	clz	r3, r3
 8001c44:	f003 031f 	and.w	r3, r3, #31
 8001c48:	fa04 f303 	lsl.w	r3, r4, r3
 8001c4c:	4213      	tst	r3, r2
 8001c4e:	f43f aebc 	beq.w	80019ca <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c52:	f7ff f921 	bl	8000e98 <HAL_GetTick>
 8001c56:	eba0 0008 	sub.w	r0, r0, r8
 8001c5a:	2802      	cmp	r0, #2
 8001c5c:	d9e7      	bls.n	8001c2e <HAL_RCC_OscConfig+0x286>
 8001c5e:	e704      	b.n	8001a6a <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c60:	4c1d      	ldr	r4, [pc, #116]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001c62:	69e3      	ldr	r3, [r4, #28]
 8001c64:	00d9      	lsls	r1, r3, #3
 8001c66:	d434      	bmi.n	8001cd2 <HAL_RCC_OscConfig+0x32a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c68:	69e3      	ldr	r3, [r4, #28]
 8001c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	61e3      	str	r3, [r4, #28]
 8001c70:	69e3      	ldr	r3, [r4, #28]
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c7a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7c:	4f18      	ldr	r7, [pc, #96]	; (8001ce0 <HAL_RCC_OscConfig+0x338>)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	05da      	lsls	r2, r3, #23
 8001c82:	d52f      	bpl.n	8001ce4 <HAL_RCC_OscConfig+0x33c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c84:	68ab      	ldr	r3, [r5, #8]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d13d      	bne.n	8001d06 <HAL_RCC_OscConfig+0x35e>
 8001c8a:	6a23      	ldr	r3, [r4, #32]
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001c92:	f7ff f901 	bl	8000e98 <HAL_GetTick>
 8001c96:	2702      	movs	r7, #2
 8001c98:	4682      	mov	sl, r0
 8001c9a:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9c:	f04f 0801 	mov.w	r8, #1
 8001ca0:	fa97 f3a7 	rbit	r3, r7
 8001ca4:	fa97 f3a7 	rbit	r3, r7
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d06c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x3de>
 8001cac:	6a22      	ldr	r2, [r4, #32]
 8001cae:	fa99 f3a9 	rbit	r3, r9
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	f003 031f 	and.w	r3, r3, #31
 8001cba:	fa08 f303 	lsl.w	r3, r8, r3
 8001cbe:	4213      	tst	r3, r2
 8001cc0:	d058      	beq.n	8001d74 <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 8001cc2:	2e00      	cmp	r6, #0
 8001cc4:	f43f ae85 	beq.w	80019d2 <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc8:	69e3      	ldr	r3, [r4, #28]
 8001cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cce:	61e3      	str	r3, [r4, #28]
 8001cd0:	e67f      	b.n	80019d2 <HAL_RCC_OscConfig+0x2a>
    FlagStatus       pwrclkchanged = RESET;
 8001cd2:	2600      	movs	r6, #0
 8001cd4:	e7d2      	b.n	8001c7c <HAL_RCC_OscConfig+0x2d4>
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	10908120 	.word	0x10908120
 8001ce0:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cea:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001cec:	f7ff f8d4 	bl	8000e98 <HAL_GetTick>
 8001cf0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	05db      	lsls	r3, r3, #23
 8001cf6:	d4c5      	bmi.n	8001c84 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf8:	f7ff f8ce 	bl	8000e98 <HAL_GetTick>
 8001cfc:	eba0 0008 	sub.w	r0, r0, r8
 8001d00:	2864      	cmp	r0, #100	; 0x64
 8001d02:	d9f6      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x34a>
 8001d04:	e6b1      	b.n	8001a6a <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d06:	bb3b      	cbnz	r3, 8001d58 <HAL_RCC_OscConfig+0x3b0>
 8001d08:	6a23      	ldr	r3, [r4, #32]
 8001d0a:	f023 0301 	bic.w	r3, r3, #1
 8001d0e:	6223      	str	r3, [r4, #32]
 8001d10:	6a23      	ldr	r3, [r4, #32]
 8001d12:	f023 0304 	bic.w	r3, r3, #4
 8001d16:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001d18:	f7ff f8be 	bl	8000e98 <HAL_GetTick>
 8001d1c:	2702      	movs	r7, #2
 8001d1e:	4682      	mov	sl, r0
 8001d20:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d22:	f04f 0801 	mov.w	r8, #1
 8001d26:	fa97 f3a7 	rbit	r3, r7
 8001d2a:	fa97 f3a7 	rbit	r3, r7
 8001d2e:	b373      	cbz	r3, 8001d8e <HAL_RCC_OscConfig+0x3e6>
 8001d30:	6a22      	ldr	r2, [r4, #32]
 8001d32:	fa99 f3a9 	rbit	r3, r9
 8001d36:	fab3 f383 	clz	r3, r3
 8001d3a:	f003 031f 	and.w	r3, r3, #31
 8001d3e:	fa08 f303 	lsl.w	r3, r8, r3
 8001d42:	4213      	tst	r3, r2
 8001d44:	d0bd      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x31a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d46:	f7ff f8a7 	bl	8000e98 <HAL_GetTick>
 8001d4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d4e:	eba0 000a 	sub.w	r0, r0, sl
 8001d52:	4298      	cmp	r0, r3
 8001d54:	d9e7      	bls.n	8001d26 <HAL_RCC_OscConfig+0x37e>
 8001d56:	e688      	b.n	8001a6a <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d58:	2b05      	cmp	r3, #5
 8001d5a:	6a23      	ldr	r3, [r4, #32]
 8001d5c:	d103      	bne.n	8001d66 <HAL_RCC_OscConfig+0x3be>
 8001d5e:	f043 0304 	orr.w	r3, r3, #4
 8001d62:	6223      	str	r3, [r4, #32]
 8001d64:	e791      	b.n	8001c8a <HAL_RCC_OscConfig+0x2e2>
 8001d66:	f023 0301 	bic.w	r3, r3, #1
 8001d6a:	6223      	str	r3, [r4, #32]
 8001d6c:	6a23      	ldr	r3, [r4, #32]
 8001d6e:	f023 0304 	bic.w	r3, r3, #4
 8001d72:	e78d      	b.n	8001c90 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d74:	f7ff f890 	bl	8000e98 <HAL_GetTick>
 8001d78:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d7c:	eba0 000a 	sub.w	r0, r0, sl
 8001d80:	4298      	cmp	r0, r3
 8001d82:	d98d      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x2f8>
 8001d84:	e671      	b.n	8001a6a <HAL_RCC_OscConfig+0xc2>
 8001d86:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d8c:	e78f      	b.n	8001cae <HAL_RCC_OscConfig+0x306>
 8001d8e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d92:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d94:	e7cd      	b.n	8001d32 <HAL_RCC_OscConfig+0x38a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d96:	4a51      	ldr	r2, [pc, #324]	; (8001edc <HAL_RCC_OscConfig+0x534>)
 8001d98:	6853      	ldr	r3, [r2, #4]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	4614      	mov	r4, r2
 8001da2:	f000 8082 	beq.w	8001eaa <HAL_RCC_OscConfig+0x502>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da6:	2802      	cmp	r0, #2
 8001da8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dac:	d158      	bne.n	8001e60 <HAL_RCC_OscConfig+0x4b8>
 8001dae:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001db2:	fab3 f383 	clz	r3, r3
 8001db6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001dc4:	f7ff f868 	bl	8000e98 <HAL_GetTick>
 8001dc8:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8001dcc:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dce:	2601      	movs	r6, #1
 8001dd0:	fa97 f3a7 	rbit	r3, r7
 8001dd4:	6822      	ldr	r2, [r4, #0]
 8001dd6:	fa97 f3a7 	rbit	r3, r7
 8001dda:	fab3 f383 	clz	r3, r3
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	fa06 f303 	lsl.w	r3, r6, r3
 8001de6:	4213      	tst	r3, r2
 8001de8:	d133      	bne.n	8001e52 <HAL_RCC_OscConfig+0x4aa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001dec:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001dee:	f023 030f 	bic.w	r3, r3, #15
 8001df2:	4313      	orrs	r3, r2
 8001df4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001df6:	6862      	ldr	r2, [r4, #4]
 8001df8:	6a2b      	ldr	r3, [r5, #32]
 8001dfa:	69e9      	ldr	r1, [r5, #28]
 8001dfc:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8001e00:	430b      	orrs	r3, r1
 8001e02:	4313      	orrs	r3, r2
 8001e04:	6063      	str	r3, [r4, #4]
 8001e06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e0a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001e0e:	fab3 f383 	clz	r3, r3
 8001e12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001e20:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001e22:	f7ff f839 	bl	8000e98 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e26:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8001e28:	4607      	mov	r7, r0
 8001e2a:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e2e:	6822      	ldr	r2, [r4, #0]
 8001e30:	fa95 f3a5 	rbit	r3, r5
 8001e34:	fab3 f383 	clz	r3, r3
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	fa06 f303 	lsl.w	r3, r6, r3
 8001e40:	4213      	tst	r3, r2
 8001e42:	f47f adca 	bne.w	80019da <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e46:	f7ff f827 	bl	8000e98 <HAL_GetTick>
 8001e4a:	1bc0      	subs	r0, r0, r7
 8001e4c:	2802      	cmp	r0, #2
 8001e4e:	d9ec      	bls.n	8001e2a <HAL_RCC_OscConfig+0x482>
 8001e50:	e60b      	b.n	8001a6a <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e52:	f7ff f821 	bl	8000e98 <HAL_GetTick>
 8001e56:	eba0 0008 	sub.w	r0, r0, r8
 8001e5a:	2802      	cmp	r0, #2
 8001e5c:	d9b8      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x428>
 8001e5e:	e604      	b.n	8001a6a <HAL_RCC_OscConfig+0xc2>
 8001e60:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001e64:	fab3 f383 	clz	r3, r3
 8001e68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e76:	f7ff f80f 	bl	8000e98 <HAL_GetTick>
 8001e7a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001e7e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e80:	2601      	movs	r6, #1
 8001e82:	fa95 f3a5 	rbit	r3, r5
 8001e86:	6822      	ldr	r2, [r4, #0]
 8001e88:	fa95 f3a5 	rbit	r3, r5
 8001e8c:	fab3 f383 	clz	r3, r3
 8001e90:	f003 031f 	and.w	r3, r3, #31
 8001e94:	fa06 f303 	lsl.w	r3, r6, r3
 8001e98:	4213      	tst	r3, r2
 8001e9a:	f43f ad9e 	beq.w	80019da <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e9e:	f7fe fffb 	bl	8000e98 <HAL_GetTick>
 8001ea2:	1bc0      	subs	r0, r0, r7
 8001ea4:	2802      	cmp	r0, #2
 8001ea6:	d9ec      	bls.n	8001e82 <HAL_RCC_OscConfig+0x4da>
 8001ea8:	e5df      	b.n	8001a6a <HAL_RCC_OscConfig+0xc2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eaa:	2801      	cmp	r0, #1
 8001eac:	f43f adde 	beq.w	8001a6c <HAL_RCC_OscConfig+0xc4>
        pll_config = RCC->CFGR;
 8001eb0:	6853      	ldr	r3, [r2, #4]
        pll_config2 = RCC->CFGR2;
 8001eb2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001eb4:	69ea      	ldr	r2, [r5, #28]
 8001eb6:	f403 31c0 	and.w	r1, r3, #98304	; 0x18000
 8001eba:	4291      	cmp	r1, r2
 8001ebc:	f47f ad78 	bne.w	80019b0 <HAL_RCC_OscConfig+0x8>
 8001ec0:	6a2a      	ldr	r2, [r5, #32]
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ec2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	f47f ad72 	bne.w	80019b0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ecc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001ece:	f000 000f 	and.w	r0, r0, #15
    return HAL_ERROR;
 8001ed2:	1ac0      	subs	r0, r0, r3
 8001ed4:	bf18      	it	ne
 8001ed6:	2001      	movne	r0, #1
 8001ed8:	e5c8      	b.n	8001a6c <HAL_RCC_OscConfig+0xc4>
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000

08001ee0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001ee0:	4911      	ldr	r1, [pc, #68]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x48>)
 8001ee2:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ee4:	f003 020c 	and.w	r2, r3, #12
 8001ee8:	2a08      	cmp	r2, #8
 8001eea:	d11a      	bne.n	8001f22 <HAL_RCC_GetSysClockFreq+0x42>
 8001eec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001ef0:	fa92 f2a2 	rbit	r2, r2
 8001ef4:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001ef6:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001efa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001efc:	fa90 f0a0 	rbit	r0, r0
 8001f00:	fab0 f080 	clz	r0, r0
 8001f04:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f08:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f0c:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f0e:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f10:	4a06      	ldr	r2, [pc, #24]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f12:	4807      	ldr	r0, [pc, #28]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x50>)
 8001f14:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f16:	4807      	ldr	r0, [pc, #28]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x54>)
 8001f18:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f1c:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f1e:	4348      	muls	r0, r1
 8001f20:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001f22:	4804      	ldr	r0, [pc, #16]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	08007654 	.word	0x08007654
 8001f30:	08007664 	.word	0x08007664
 8001f34:	007a1200 	.word	0x007a1200

08001f38 <HAL_RCC_ClockConfig>:
{
 8001f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f3c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001f3e:	4604      	mov	r4, r0
 8001f40:	b910      	cbnz	r0, 8001f48 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001f42:	2001      	movs	r0, #1
 8001f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f48:	4a4d      	ldr	r2, [pc, #308]	; (8002080 <HAL_RCC_ClockConfig+0x148>)
 8001f4a:	6813      	ldr	r3, [r2, #0]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	428b      	cmp	r3, r1
 8001f52:	d32f      	bcc.n	8001fb4 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f54:	6822      	ldr	r2, [r4, #0]
 8001f56:	0791      	lsls	r1, r2, #30
 8001f58:	d437      	bmi.n	8001fca <HAL_RCC_ClockConfig+0x92>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5a:	07d2      	lsls	r2, r2, #31
 8001f5c:	d43d      	bmi.n	8001fda <HAL_RCC_ClockConfig+0xa2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f5e:	4a48      	ldr	r2, [pc, #288]	; (8002080 <HAL_RCC_ClockConfig+0x148>)
 8001f60:	6813      	ldr	r3, [r2, #0]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	429d      	cmp	r5, r3
 8001f68:	d376      	bcc.n	8002058 <HAL_RCC_ClockConfig+0x120>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6a:	6822      	ldr	r2, [r4, #0]
 8001f6c:	4d45      	ldr	r5, [pc, #276]	; (8002084 <HAL_RCC_ClockConfig+0x14c>)
 8001f6e:	f012 0f04 	tst.w	r2, #4
 8001f72:	d17d      	bne.n	8002070 <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f74:	0713      	lsls	r3, r2, #28
 8001f76:	d506      	bpl.n	8001f86 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f78:	686b      	ldr	r3, [r5, #4]
 8001f7a:	6922      	ldr	r2, [r4, #16]
 8001f7c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001f80:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f84:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f86:	f7ff ffab 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 8001f8a:	686b      	ldr	r3, [r5, #4]
 8001f8c:	22f0      	movs	r2, #240	; 0xf0
 8001f8e:	fa92 f2a2 	rbit	r2, r2
 8001f92:	fab2 f282 	clz	r2, r2
 8001f96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f9a:	40d3      	lsrs	r3, r2
 8001f9c:	4a3a      	ldr	r2, [pc, #232]	; (8002088 <HAL_RCC_ClockConfig+0x150>)
 8001f9e:	5cd3      	ldrb	r3, [r2, r3]
 8001fa0:	40d8      	lsrs	r0, r3
 8001fa2:	4b3a      	ldr	r3, [pc, #232]	; (800208c <HAL_RCC_ClockConfig+0x154>)
 8001fa4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001fa6:	4b3a      	ldr	r3, [pc, #232]	; (8002090 <HAL_RCC_ClockConfig+0x158>)
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	f7fe ff33 	bl	8000e14 <HAL_InitTick>
  return HAL_OK;
 8001fae:	2000      	movs	r0, #0
 8001fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb4:	6813      	ldr	r3, [r2, #0]
 8001fb6:	f023 0307 	bic.w	r3, r3, #7
 8001fba:	430b      	orrs	r3, r1
 8001fbc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fbe:	6813      	ldr	r3, [r2, #0]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	4299      	cmp	r1, r3
 8001fc6:	d1bc      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xa>
 8001fc8:	e7c4      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fca:	492e      	ldr	r1, [pc, #184]	; (8002084 <HAL_RCC_ClockConfig+0x14c>)
 8001fcc:	68a0      	ldr	r0, [r4, #8]
 8001fce:	684b      	ldr	r3, [r1, #4]
 8001fd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fd4:	4303      	orrs	r3, r0
 8001fd6:	604b      	str	r3, [r1, #4]
 8001fd8:	e7bf      	b.n	8001f5a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fda:	6862      	ldr	r2, [r4, #4]
 8001fdc:	4e29      	ldr	r6, [pc, #164]	; (8002084 <HAL_RCC_ClockConfig+0x14c>)
 8001fde:	2a01      	cmp	r2, #1
 8001fe0:	d127      	bne.n	8002032 <HAL_RCC_ClockConfig+0xfa>
 8001fe2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fe6:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fea:	6831      	ldr	r1, [r6, #0]
 8001fec:	fa93 f3a3 	rbit	r3, r3
 8001ff0:	fab3 f383 	clz	r3, r3
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffe:	d0a0      	beq.n	8001f42 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002000:	6873      	ldr	r3, [r6, #4]
 8002002:	f023 0303 	bic.w	r3, r3, #3
 8002006:	431a      	orrs	r2, r3
 8002008:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 800200a:	f7fe ff45 	bl	8000e98 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800200e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002012:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002014:	6873      	ldr	r3, [r6, #4]
 8002016:	6862      	ldr	r2, [r4, #4]
 8002018:	f003 030c 	and.w	r3, r3, #12
 800201c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002020:	d09d      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002022:	f7fe ff39 	bl	8000e98 <HAL_GetTick>
 8002026:	1bc0      	subs	r0, r0, r7
 8002028:	4540      	cmp	r0, r8
 800202a:	d9f3      	bls.n	8002014 <HAL_RCC_ClockConfig+0xdc>
        return HAL_TIMEOUT;
 800202c:	2003      	movs	r0, #3
}
 800202e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002032:	2a02      	cmp	r2, #2
 8002034:	bf0c      	ite	eq
 8002036:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 800203a:	2302      	movne	r3, #2
 800203c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002040:	6830      	ldr	r0, [r6, #0]
 8002042:	fa93 f3a3 	rbit	r3, r3
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	f003 031f 	and.w	r3, r3, #31
 800204e:	2101      	movs	r1, #1
 8002050:	fa01 f303 	lsl.w	r3, r1, r3
 8002054:	4203      	tst	r3, r0
 8002056:	e7d2      	b.n	8001ffe <HAL_RCC_ClockConfig+0xc6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002058:	6813      	ldr	r3, [r2, #0]
 800205a:	f023 0307 	bic.w	r3, r3, #7
 800205e:	432b      	orrs	r3, r5
 8002060:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002062:	6813      	ldr	r3, [r2, #0]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	429d      	cmp	r5, r3
 800206a:	f47f af6a 	bne.w	8001f42 <HAL_RCC_ClockConfig+0xa>
 800206e:	e77c      	b.n	8001f6a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002070:	686b      	ldr	r3, [r5, #4]
 8002072:	68e1      	ldr	r1, [r4, #12]
 8002074:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002078:	430b      	orrs	r3, r1
 800207a:	606b      	str	r3, [r5, #4]
 800207c:	e77a      	b.n	8001f74 <HAL_RCC_ClockConfig+0x3c>
 800207e:	bf00      	nop
 8002080:	40022000 	.word	0x40022000
 8002084:	40021000 	.word	0x40021000
 8002088:	08008d02 	.word	0x08008d02
 800208c:	20000188 	.word	0x20000188
 8002090:	20000004 	.word	0x20000004

08002094 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002094:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002096:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	fa92 f2a2 	rbit	r2, r2
 80020a0:	fab2 f282 	clz	r2, r2
 80020a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020a8:	40d3      	lsrs	r3, r2
 80020aa:	4a04      	ldr	r2, [pc, #16]	; (80020bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80020ac:	5cd3      	ldrb	r3, [r2, r3]
 80020ae:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80020b0:	6810      	ldr	r0, [r2, #0]
}    
 80020b2:	40d8      	lsrs	r0, r3
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000
 80020bc:	08008d12 	.word	0x08008d12
 80020c0:	20000188 	.word	0x20000188

080020c4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80020c4:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020c6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	fa92 f2a2 	rbit	r2, r2
 80020d0:	fab2 f282 	clz	r2, r2
 80020d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80020d8:	40d3      	lsrs	r3, r2
 80020da:	4a04      	ldr	r2, [pc, #16]	; (80020ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80020dc:	5cd3      	ldrb	r3, [r2, r3]
 80020de:	4a04      	ldr	r2, [pc, #16]	; (80020f0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80020e0:	6810      	ldr	r0, [r2, #0]
} 
 80020e2:	40d8      	lsrs	r0, r3
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000
 80020ec:	08008d12 	.word	0x08008d12
 80020f0:	20000188 	.word	0x20000188

080020f4 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020f4:	6803      	ldr	r3, [r0, #0]
{
 80020f6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020fa:	03df      	lsls	r7, r3, #15
{
 80020fc:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020fe:	d523      	bpl.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002100:	4d9b      	ldr	r5, [pc, #620]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002102:	69eb      	ldr	r3, [r5, #28]
 8002104:	00de      	lsls	r6, r3, #3
 8002106:	f100 80d7 	bmi.w	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800210a:	69eb      	ldr	r3, [r5, #28]
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002110:	61eb      	str	r3, [r5, #28]
 8002112:	69eb      	ldr	r3, [r5, #28]
 8002114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002118:	9301      	str	r3, [sp, #4]
 800211a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800211c:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211e:	4f95      	ldr	r7, [pc, #596]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	05d8      	lsls	r0, r3, #23
 8002124:	f140 80ca 	bpl.w	80022bc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002128:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800212a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800212e:	f040 80da 	bne.w	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002132:	6a2b      	ldr	r3, [r5, #32]
 8002134:	6862      	ldr	r2, [r4, #4]
 8002136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800213a:	4313      	orrs	r3, r2
 800213c:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800213e:	b11e      	cbz	r6, 8002148 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002140:	69eb      	ldr	r3, [r5, #28]
 8002142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002146:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002148:	6820      	ldr	r0, [r4, #0]
 800214a:	07c3      	lsls	r3, r0, #31
 800214c:	d506      	bpl.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800214e:	4a88      	ldr	r2, [pc, #544]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002150:	68a1      	ldr	r1, [r4, #8]
 8002152:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002154:	f023 0303 	bic.w	r3, r3, #3
 8002158:	430b      	orrs	r3, r1
 800215a:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800215c:	0787      	lsls	r7, r0, #30
 800215e:	d506      	bpl.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002160:	4a83      	ldr	r2, [pc, #524]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002162:	68e1      	ldr	r1, [r4, #12]
 8002164:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002166:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800216a:	430b      	orrs	r3, r1
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800216e:	0746      	lsls	r6, r0, #29
 8002170:	d506      	bpl.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002172:	4a7f      	ldr	r2, [pc, #508]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002174:	6921      	ldr	r1, [r4, #16]
 8002176:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002178:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800217c:	430b      	orrs	r3, r1
 800217e:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002180:	0685      	lsls	r5, r0, #26
 8002182:	d506      	bpl.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002184:	4a7a      	ldr	r2, [pc, #488]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002186:	69e1      	ldr	r1, [r4, #28]
 8002188:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800218a:	f023 0310 	bic.w	r3, r3, #16
 800218e:	430b      	orrs	r3, r1
 8002190:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002192:	0381      	lsls	r1, r0, #14
 8002194:	d506      	bpl.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002196:	4a76      	ldr	r2, [pc, #472]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002198:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800219a:	6853      	ldr	r3, [r2, #4]
 800219c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80021a0:	430b      	orrs	r3, r1
 80021a2:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021a4:	0642      	lsls	r2, r0, #25
 80021a6:	d506      	bpl.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021a8:	4a71      	ldr	r2, [pc, #452]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80021aa:	6a21      	ldr	r1, [r4, #32]
 80021ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80021ae:	f023 0320 	bic.w	r3, r3, #32
 80021b2:	430b      	orrs	r3, r1
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021b6:	0343      	lsls	r3, r0, #13
 80021b8:	d506      	bpl.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021ba:	4a6d      	ldr	r2, [pc, #436]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80021bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80021be:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80021c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021c4:	430b      	orrs	r3, r1
 80021c6:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021c8:	0707      	lsls	r7, r0, #28
 80021ca:	d506      	bpl.n	80021da <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021cc:	4a68      	ldr	r2, [pc, #416]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80021ce:	6961      	ldr	r1, [r4, #20]
 80021d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80021d2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80021d6:	430b      	orrs	r3, r1
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021da:	06c6      	lsls	r6, r0, #27
 80021dc:	d506      	bpl.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021de:	4a64      	ldr	r2, [pc, #400]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80021e0:	69a1      	ldr	r1, [r4, #24]
 80021e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80021e4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80021e8:	430b      	orrs	r3, r1
 80021ea:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80021ec:	0585      	lsls	r5, r0, #22
 80021ee:	d506      	bpl.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021f0:	4a5f      	ldr	r2, [pc, #380]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80021f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80021f4:	6853      	ldr	r3, [r2, #4]
 80021f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021fa:	430b      	orrs	r3, r1
 80021fc:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80021fe:	0601      	lsls	r1, r0, #24
 8002200:	d506      	bpl.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002202:	4a5b      	ldr	r2, [pc, #364]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002204:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002206:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002208:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800220c:	430b      	orrs	r3, r1
 800220e:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002210:	05c2      	lsls	r2, r0, #23
 8002212:	d506      	bpl.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002214:	4a56      	ldr	r2, [pc, #344]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002216:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002218:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800221a:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 800221e:	430b      	orrs	r3, r1
 8002220:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002222:	04c3      	lsls	r3, r0, #19
 8002224:	d506      	bpl.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002226:	4a52      	ldr	r2, [pc, #328]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800222a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800222c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002230:	430b      	orrs	r3, r1
 8002232:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002234:	0487      	lsls	r7, r0, #18
 8002236:	d506      	bpl.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002238:	4a4d      	ldr	r2, [pc, #308]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800223a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800223c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800223e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002242:	430b      	orrs	r3, r1
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002246:	02c6      	lsls	r6, r0, #11
 8002248:	d506      	bpl.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800224a:	4a49      	ldr	r2, [pc, #292]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800224c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800224e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002250:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002254:	430b      	orrs	r3, r1
 8002256:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002258:	0285      	lsls	r5, r0, #10
 800225a:	d506      	bpl.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800225c:	4a44      	ldr	r2, [pc, #272]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800225e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002260:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002262:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002266:	430b      	orrs	r3, r1
 8002268:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800226a:	0241      	lsls	r1, r0, #9
 800226c:	d506      	bpl.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800226e:	4a40      	ldr	r2, [pc, #256]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002270:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002272:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002274:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002278:	430b      	orrs	r3, r1
 800227a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800227c:	0202      	lsls	r2, r0, #8
 800227e:	d506      	bpl.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002280:	4a3b      	ldr	r2, [pc, #236]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002282:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002284:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002286:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800228a:	430b      	orrs	r3, r1
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800228e:	01c3      	lsls	r3, r0, #7
 8002290:	d506      	bpl.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002292:	4a37      	ldr	r2, [pc, #220]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002294:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002296:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002298:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800229c:	430b      	orrs	r3, r1
 800229e:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80022a0:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80022a4:	d01c      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80022a6:	4a32      	ldr	r2, [pc, #200]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80022a8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80022aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80022b0:	430b      	orrs	r3, r1
 80022b2:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80022b4:	2000      	movs	r0, #0
 80022b6:	e013      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 80022b8:	2600      	movs	r6, #0
 80022ba:	e730      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80022c4:	f7fe fde8 	bl	8000e98 <HAL_GetTick>
 80022c8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	05d9      	lsls	r1, r3, #23
 80022ce:	f53f af2b 	bmi.w	8002128 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d2:	f7fe fde1 	bl	8000e98 <HAL_GetTick>
 80022d6:	eba0 0008 	sub.w	r0, r0, r8
 80022da:	2864      	cmp	r0, #100	; 0x64
 80022dc:	d9f5      	bls.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 80022de:	2003      	movs	r0, #3
}
 80022e0:	b002      	add	sp, #8
 80022e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022e6:	6862      	ldr	r2, [r4, #4]
 80022e8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80022ec:	4293      	cmp	r3, r2
 80022ee:	f43f af20 	beq.w	8002132 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022f2:	6a29      	ldr	r1, [r5, #32]
 80022f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022f8:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80022fc:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8002300:	f8df e074 	ldr.w	lr, [pc, #116]	; 8002378 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8002304:	fab2 f282 	clz	r2, r2
 8002308:	4472      	add	r2, lr
 800230a:	0092      	lsls	r2, r2, #2
 800230c:	2701      	movs	r7, #1
 800230e:	6017      	str	r7, [r2, #0]
 8002310:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002314:	fab3 f383 	clz	r3, r3
 8002318:	4473      	add	r3, lr
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002320:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8002322:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002324:	f57f af05 	bpl.w	8002132 <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8002328:	f7fe fdb6 	bl	8000e98 <HAL_GetTick>
 800232c:	f04f 0802 	mov.w	r8, #2
 8002330:	4682      	mov	sl, r0
 8002332:	46c1      	mov	r9, r8
 8002334:	fa98 f3a8 	rbit	r3, r8
 8002338:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233c:	b1a3      	cbz	r3, 8002368 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800233e:	6a2a      	ldr	r2, [r5, #32]
 8002340:	fa99 f3a9 	rbit	r3, r9
 8002344:	fab3 f383 	clz	r3, r3
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	fa07 f303 	lsl.w	r3, r7, r3
 8002350:	4213      	tst	r3, r2
 8002352:	f47f aeee 	bne.w	8002132 <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002356:	f7fe fd9f 	bl	8000e98 <HAL_GetTick>
 800235a:	f241 3388 	movw	r3, #5000	; 0x1388
 800235e:	eba0 000a 	sub.w	r0, r0, sl
 8002362:	4298      	cmp	r0, r3
 8002364:	d9e6      	bls.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002366:	e7ba      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002368:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800236e:	e7e7      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8002370:	40021000 	.word	0x40021000
 8002374:	40007000 	.word	0x40007000
 8002378:	10908100 	.word	0x10908100

0800237c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800237c:	6803      	ldr	r3, [r0, #0]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	f042 0201 	orr.w	r2, r2, #1
 8002384:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002386:	6899      	ldr	r1, [r3, #8]
 8002388:	4a06      	ldr	r2, [pc, #24]	; (80023a4 <HAL_TIM_Base_Start_IT+0x28>)
 800238a:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800238c:	2a06      	cmp	r2, #6
 800238e:	d006      	beq.n	800239e <HAL_TIM_Base_Start_IT+0x22>
 8002390:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 8002394:	bf1e      	ittt	ne
 8002396:	681a      	ldrne	r2, [r3, #0]
 8002398:	f042 0201 	orrne.w	r2, r2, #1
 800239c:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800239e:	2000      	movs	r0, #0
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	00010007 	.word	0x00010007

080023a8 <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80023a8:	6803      	ldr	r3, [r0, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	f022 0201 	bic.w	r2, r2, #1
 80023b0:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80023b2:	6a19      	ldr	r1, [r3, #32]
 80023b4:	f241 1211 	movw	r2, #4369	; 0x1111
 80023b8:	4211      	tst	r1, r2
 80023ba:	d108      	bne.n	80023ce <HAL_TIM_Base_Stop_IT+0x26>
 80023bc:	6a19      	ldr	r1, [r3, #32]
 80023be:	f240 4244 	movw	r2, #1092	; 0x444
 80023c2:	4211      	tst	r1, r2
 80023c4:	bf02      	ittt	eq
 80023c6:	681a      	ldreq	r2, [r3, #0]
 80023c8:	f022 0201 	biceq.w	r2, r2, #1
 80023cc:	601a      	streq	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80023ce:	2000      	movs	r0, #0
 80023d0:	4770      	bx	lr

080023d2 <HAL_TIM_OC_DelayElapsedCallback>:
 80023d2:	4770      	bx	lr

080023d4 <HAL_TIM_IC_CaptureCallback>:
 80023d4:	4770      	bx	lr

080023d6 <HAL_TIM_PWM_PulseFinishedCallback>:
 80023d6:	4770      	bx	lr

080023d8 <HAL_TIM_TriggerCallback>:
 80023d8:	4770      	bx	lr

080023da <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023da:	6803      	ldr	r3, [r0, #0]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	0791      	lsls	r1, r2, #30
{
 80023e0:	b510      	push	{r4, lr}
 80023e2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023e4:	d50f      	bpl.n	8002406 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	0792      	lsls	r2, r2, #30
 80023ea:	d50c      	bpl.n	8002406 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023ec:	f06f 0202 	mvn.w	r2, #2
 80023f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023f2:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023f4:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023f6:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023f8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023fa:	f000 8085 	beq.w	8002508 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023fe:	f7ff ffe9 	bl	80023d4 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002402:	2300      	movs	r3, #0
 8002404:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002406:	6823      	ldr	r3, [r4, #0]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	0752      	lsls	r2, r2, #29
 800240c:	d510      	bpl.n	8002430 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800240e:	68da      	ldr	r2, [r3, #12]
 8002410:	0750      	lsls	r0, r2, #29
 8002412:	d50d      	bpl.n	8002430 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002414:	f06f 0204 	mvn.w	r2, #4
 8002418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800241a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800241c:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800241e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002422:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002424:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002426:	d075      	beq.n	8002514 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002428:	f7ff ffd4 	bl	80023d4 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242c:	2300      	movs	r3, #0
 800242e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002430:	6823      	ldr	r3, [r4, #0]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	0711      	lsls	r1, r2, #28
 8002436:	d50f      	bpl.n	8002458 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	0712      	lsls	r2, r2, #28
 800243c:	d50c      	bpl.n	8002458 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800243e:	f06f 0208 	mvn.w	r2, #8
 8002442:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002444:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002446:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002448:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800244a:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800244c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800244e:	d067      	beq.n	8002520 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002450:	f7ff ffc0 	bl	80023d4 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002454:	2300      	movs	r3, #0
 8002456:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002458:	6823      	ldr	r3, [r4, #0]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	06d0      	lsls	r0, r2, #27
 800245e:	d510      	bpl.n	8002482 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	06d1      	lsls	r1, r2, #27
 8002464:	d50d      	bpl.n	8002482 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002466:	f06f 0210 	mvn.w	r2, #16
 800246a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800246c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800246e:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002470:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002474:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002476:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002478:	d058      	beq.n	800252c <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800247a:	f7ff ffab 	bl	80023d4 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247e:	2300      	movs	r3, #0
 8002480:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002482:	6823      	ldr	r3, [r4, #0]
 8002484:	691a      	ldr	r2, [r3, #16]
 8002486:	07d2      	lsls	r2, r2, #31
 8002488:	d508      	bpl.n	800249c <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	07d0      	lsls	r0, r2, #31
 800248e:	d505      	bpl.n	800249c <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002490:	f06f 0201 	mvn.w	r2, #1
 8002494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002496:	4620      	mov	r0, r4
 8002498:	f002 fac2 	bl	8004a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800249c:	6823      	ldr	r3, [r4, #0]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	0611      	lsls	r1, r2, #24
 80024a2:	d508      	bpl.n	80024b6 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	0612      	lsls	r2, r2, #24
 80024a8:	d505      	bpl.n	80024b6 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024b0:	4620      	mov	r0, r4
 80024b2:	f000 f914 	bl	80026de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80024b6:	6823      	ldr	r3, [r4, #0]
 80024b8:	691a      	ldr	r2, [r3, #16]
 80024ba:	05d0      	lsls	r0, r2, #23
 80024bc:	d508      	bpl.n	80024d0 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	0611      	lsls	r1, r2, #24
 80024c2:	d505      	bpl.n	80024d0 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024c4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80024c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80024ca:	4620      	mov	r0, r4
 80024cc:	f000 f908 	bl	80026e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024d0:	6823      	ldr	r3, [r4, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	0652      	lsls	r2, r2, #25
 80024d6:	d508      	bpl.n	80024ea <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	0650      	lsls	r0, r2, #25
 80024dc:	d505      	bpl.n	80024ea <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024e4:	4620      	mov	r0, r4
 80024e6:	f7ff ff77 	bl	80023d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024ea:	6823      	ldr	r3, [r4, #0]
 80024ec:	691a      	ldr	r2, [r3, #16]
 80024ee:	0691      	lsls	r1, r2, #26
 80024f0:	d522      	bpl.n	8002538 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	0692      	lsls	r2, r2, #26
 80024f6:	d51f      	bpl.n	8002538 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024f8:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024fc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024fe:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002504:	f000 b8ea 	b.w	80026dc <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002508:	f7ff ff63 	bl	80023d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800250c:	4620      	mov	r0, r4
 800250e:	f7ff ff62 	bl	80023d6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002512:	e776      	b.n	8002402 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002514:	f7ff ff5d 	bl	80023d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002518:	4620      	mov	r0, r4
 800251a:	f7ff ff5c 	bl	80023d6 <HAL_TIM_PWM_PulseFinishedCallback>
 800251e:	e785      	b.n	800242c <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002520:	f7ff ff57 	bl	80023d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002524:	4620      	mov	r0, r4
 8002526:	f7ff ff56 	bl	80023d6 <HAL_TIM_PWM_PulseFinishedCallback>
 800252a:	e793      	b.n	8002454 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800252c:	f7ff ff51 	bl	80023d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002530:	4620      	mov	r0, r4
 8002532:	f7ff ff50 	bl	80023d6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002536:	e7a2      	b.n	800247e <HAL_TIM_IRQHandler+0xa4>
 8002538:	bd10      	pop	{r4, pc}
	...

0800253c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800253c:	4a32      	ldr	r2, [pc, #200]	; (8002608 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 800253e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002540:	4290      	cmp	r0, r2
 8002542:	d012      	beq.n	800256a <TIM_Base_SetConfig+0x2e>
 8002544:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002548:	d00f      	beq.n	800256a <TIM_Base_SetConfig+0x2e>
 800254a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800254e:	4290      	cmp	r0, r2
 8002550:	d00b      	beq.n	800256a <TIM_Base_SetConfig+0x2e>
 8002552:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002556:	4290      	cmp	r0, r2
 8002558:	d007      	beq.n	800256a <TIM_Base_SetConfig+0x2e>
 800255a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800255e:	4290      	cmp	r0, r2
 8002560:	d003      	beq.n	800256a <TIM_Base_SetConfig+0x2e>
 8002562:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8002566:	4290      	cmp	r0, r2
 8002568:	d115      	bne.n	8002596 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800256a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800256c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002570:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002572:	4a25      	ldr	r2, [pc, #148]	; (8002608 <TIM_Base_SetConfig+0xcc>)
 8002574:	4290      	cmp	r0, r2
 8002576:	d01d      	beq.n	80025b4 <TIM_Base_SetConfig+0x78>
 8002578:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800257c:	d01a      	beq.n	80025b4 <TIM_Base_SetConfig+0x78>
 800257e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002582:	4290      	cmp	r0, r2
 8002584:	d016      	beq.n	80025b4 <TIM_Base_SetConfig+0x78>
 8002586:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800258a:	4290      	cmp	r0, r2
 800258c:	d012      	beq.n	80025b4 <TIM_Base_SetConfig+0x78>
 800258e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8002592:	4290      	cmp	r0, r2
 8002594:	d00e      	beq.n	80025b4 <TIM_Base_SetConfig+0x78>
 8002596:	4a1d      	ldr	r2, [pc, #116]	; (800260c <TIM_Base_SetConfig+0xd0>)
 8002598:	4290      	cmp	r0, r2
 800259a:	d00b      	beq.n	80025b4 <TIM_Base_SetConfig+0x78>
 800259c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025a0:	4290      	cmp	r0, r2
 80025a2:	d007      	beq.n	80025b4 <TIM_Base_SetConfig+0x78>
 80025a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025a8:	4290      	cmp	r0, r2
 80025aa:	d003      	beq.n	80025b4 <TIM_Base_SetConfig+0x78>
 80025ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025b0:	4290      	cmp	r0, r2
 80025b2:	d103      	bne.n	80025bc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025b4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80025b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ba:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025bc:	694a      	ldr	r2, [r1, #20]
 80025be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025c2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80025c4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025c6:	688b      	ldr	r3, [r1, #8]
 80025c8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025ca:	680b      	ldr	r3, [r1, #0]
 80025cc:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025ce:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <TIM_Base_SetConfig+0xcc>)
 80025d0:	4298      	cmp	r0, r3
 80025d2:	d013      	beq.n	80025fc <TIM_Base_SetConfig+0xc0>
 80025d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025d8:	4298      	cmp	r0, r3
 80025da:	d00f      	beq.n	80025fc <TIM_Base_SetConfig+0xc0>
 80025dc:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80025e0:	4298      	cmp	r0, r3
 80025e2:	d00b      	beq.n	80025fc <TIM_Base_SetConfig+0xc0>
 80025e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025e8:	4298      	cmp	r0, r3
 80025ea:	d007      	beq.n	80025fc <TIM_Base_SetConfig+0xc0>
 80025ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025f0:	4298      	cmp	r0, r3
 80025f2:	d003      	beq.n	80025fc <TIM_Base_SetConfig+0xc0>
 80025f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025f8:	4298      	cmp	r0, r3
 80025fa:	d101      	bne.n	8002600 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025fc:	690b      	ldr	r3, [r1, #16]
 80025fe:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002600:	2301      	movs	r3, #1
 8002602:	6143      	str	r3, [r0, #20]
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40012c00 	.word	0x40012c00
 800260c:	40014000 	.word	0x40014000

08002610 <HAL_TIM_Base_Init>:
{
 8002610:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002612:	4604      	mov	r4, r0
 8002614:	b1a0      	cbz	r0, 8002640 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002616:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800261a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800261e:	b91b      	cbnz	r3, 8002628 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002620:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002624:	f002 fd20 	bl	8005068 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	2302      	movs	r3, #2
 800262a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800262e:	6820      	ldr	r0, [r4, #0]
 8002630:	1d21      	adds	r1, r4, #4
 8002632:	f7ff ff83 	bl	800253c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002636:	2301      	movs	r3, #1
 8002638:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800263c:	2000      	movs	r0, #0
 800263e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002640:	2001      	movs	r0, #1
}
 8002642:	bd10      	pop	{r4, pc}

08002644 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002644:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002648:	2b01      	cmp	r3, #1
{
 800264a:	b530      	push	{r4, r5, lr}
 800264c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002650:	d040      	beq.n	80026d4 <HAL_TIMEx_MasterConfigSynchronization+0x90>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002652:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002656:	4d20      	ldr	r5, [pc, #128]	; (80026d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
  tmpcr2 = htim->Instance->CR2;
 8002658:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 800265a:	2201      	movs	r2, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800265c:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 800265e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 = htim->Instance->CR2;
 8002662:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002664:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002666:	d007      	beq.n	8002678 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8002668:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800266c:	42ab      	cmp	r3, r5
 800266e:	d003      	beq.n	8002678 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8002670:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8002674:	42ab      	cmp	r3, r5
 8002676:	d103      	bne.n	8002680 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002678:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800267a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800267e:	432a      	orrs	r2, r5
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002680:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002682:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002686:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002688:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800268a:	4a13      	ldr	r2, [pc, #76]	; (80026d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d016      	beq.n	80026be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002694:	d013      	beq.n	80026be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002696:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800269a:	4293      	cmp	r3, r2
 800269c:	d00f      	beq.n	80026be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800269e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00b      	beq.n	80026be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026a6:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d007      	beq.n	80026be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026ae:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d003      	beq.n	80026be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d104      	bne.n	80026c8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026be:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026c0:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026c4:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026c8:	2301      	movs	r3, #1
 80026ca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026ce:	2300      	movs	r3, #0
 80026d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80026d4:	4618      	mov	r0, r3

  return HAL_OK;
}
 80026d6:	bd30      	pop	{r4, r5, pc}
 80026d8:	40012c00 	.word	0x40012c00

080026dc <HAL_TIMEx_CommutCallback>:
 80026dc:	4770      	bx	lr

080026de <HAL_TIMEx_BreakCallback>:
 80026de:	4770      	bx	lr

080026e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80026e0:	4770      	bx	lr

080026e2 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026e2:	6803      	ldr	r3, [r0, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80026ea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	f022 0201 	bic.w	r2, r2, #1
 80026f2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026f4:	2320      	movs	r3, #32
 80026f6:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	6603      	str	r3, [r0, #96]	; 0x60
 80026fc:	4770      	bx	lr

080026fe <HAL_UART_TxCpltCallback>:
 80026fe:	4770      	bx	lr

08002700 <HAL_UART_ErrorCallback>:
 8002700:	4770      	bx	lr
	...

08002704 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002704:	6803      	ldr	r3, [r0, #0]
 8002706:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002708:	6819      	ldr	r1, [r3, #0]
{
 800270a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 800270c:	f640 060f 	movw	r6, #2063	; 0x80f
 8002710:	4232      	tst	r2, r6
{
 8002712:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002714:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 8002716:	d10a      	bne.n	800272e <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002718:	0696      	lsls	r6, r2, #26
 800271a:	d570      	bpl.n	80027fe <HAL_UART_IRQHandler+0xfa>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800271c:	068e      	lsls	r6, r1, #26
 800271e:	d56e      	bpl.n	80027fe <HAL_UART_IRQHandler+0xfa>
      if (huart->RxISR != NULL)
 8002720:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 808e 	beq.w	8002844 <HAL_UART_IRQHandler+0x140>
}
 8002728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800272c:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != 0U)
 800272e:	f015 0001 	ands.w	r0, r5, #1
 8002732:	d102      	bne.n	800273a <HAL_UART_IRQHandler+0x36>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002734:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002738:	d061      	beq.n	80027fe <HAL_UART_IRQHandler+0xfa>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800273a:	07d6      	lsls	r6, r2, #31
 800273c:	d507      	bpl.n	800274e <HAL_UART_IRQHandler+0x4a>
 800273e:	05cd      	lsls	r5, r1, #23
 8002740:	d505      	bpl.n	800274e <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002742:	2501      	movs	r5, #1
 8002744:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002746:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8002748:	f045 0501 	orr.w	r5, r5, #1
 800274c:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800274e:	0796      	lsls	r6, r2, #30
 8002750:	d506      	bpl.n	8002760 <HAL_UART_IRQHandler+0x5c>
 8002752:	b128      	cbz	r0, 8002760 <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002754:	2502      	movs	r5, #2
 8002756:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002758:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800275a:	f045 0504 	orr.w	r5, r5, #4
 800275e:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002760:	0755      	lsls	r5, r2, #29
 8002762:	d506      	bpl.n	8002772 <HAL_UART_IRQHandler+0x6e>
 8002764:	b128      	cbz	r0, 8002772 <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002766:	2504      	movs	r5, #4
 8002768:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800276a:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800276c:	f045 0502 	orr.w	r5, r5, #2
 8002770:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002772:	0716      	lsls	r6, r2, #28
 8002774:	d508      	bpl.n	8002788 <HAL_UART_IRQHandler+0x84>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002776:	068d      	lsls	r5, r1, #26
 8002778:	d400      	bmi.n	800277c <HAL_UART_IRQHandler+0x78>
 800277a:	b128      	cbz	r0, 8002788 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800277c:	2008      	movs	r0, #8
 800277e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002780:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002782:	f040 0008 	orr.w	r0, r0, #8
 8002786:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002788:	0510      	lsls	r0, r2, #20
 800278a:	d508      	bpl.n	800279e <HAL_UART_IRQHandler+0x9a>
 800278c:	014e      	lsls	r6, r1, #5
 800278e:	d506      	bpl.n	800279e <HAL_UART_IRQHandler+0x9a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002790:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002794:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002796:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002798:	f043 0320 	orr.w	r3, r3, #32
 800279c:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800279e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d04f      	beq.n	8002844 <HAL_UART_IRQHandler+0x140>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80027a4:	0695      	lsls	r5, r2, #26
 80027a6:	d505      	bpl.n	80027b4 <HAL_UART_IRQHandler+0xb0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027a8:	0688      	lsls	r0, r1, #26
 80027aa:	d503      	bpl.n	80027b4 <HAL_UART_IRQHandler+0xb0>
        if (huart->RxISR != NULL)
 80027ac:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80027ae:	b10b      	cbz	r3, 80027b4 <HAL_UART_IRQHandler+0xb0>
          huart->RxISR(huart);
 80027b0:	4620      	mov	r0, r4
 80027b2:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027b4:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 80027b6:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027b8:	6892      	ldr	r2, [r2, #8]
 80027ba:	0651      	lsls	r1, r2, #25
        UART_EndRxTransfer(huart);
 80027bc:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027be:	d402      	bmi.n	80027c6 <HAL_UART_IRQHandler+0xc2>
 80027c0:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 80027c4:	d017      	beq.n	80027f6 <HAL_UART_IRQHandler+0xf2>
        UART_EndRxTransfer(huart);
 80027c6:	f7ff ff8c 	bl	80026e2 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ca:	6823      	ldr	r3, [r4, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	0652      	lsls	r2, r2, #25
 80027d0:	d50d      	bpl.n	80027ee <HAL_UART_IRQHandler+0xea>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027d2:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80027d4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027da:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80027dc:	b138      	cbz	r0, 80027ee <HAL_UART_IRQHandler+0xea>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027de:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <HAL_UART_IRQHandler+0x144>)
 80027e0:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027e2:	f7fe fc7b 	bl	80010dc <HAL_DMA_Abort_IT>
 80027e6:	b368      	cbz	r0, 8002844 <HAL_UART_IRQHandler+0x140>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027e8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80027ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80027ec:	e79c      	b.n	8002728 <HAL_UART_IRQHandler+0x24>
            HAL_UART_ErrorCallback(huart);
 80027ee:	4620      	mov	r0, r4
 80027f0:	f7ff ff86 	bl	8002700 <HAL_UART_ErrorCallback>
 80027f4:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80027f6:	f7ff ff83 	bl	8002700 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027fa:	67e5      	str	r5, [r4, #124]	; 0x7c
 80027fc:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80027fe:	02d6      	lsls	r6, r2, #11
 8002800:	d509      	bpl.n	8002816 <HAL_UART_IRQHandler+0x112>
 8002802:	0268      	lsls	r0, r5, #9
 8002804:	d507      	bpl.n	8002816 <HAL_UART_IRQHandler+0x112>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002806:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800280a:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800280c:	621a      	str	r2, [r3, #32]
}
 800280e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8002812:	f000 ba81 	b.w	8002d18 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002816:	0616      	lsls	r6, r2, #24
 8002818:	d505      	bpl.n	8002826 <HAL_UART_IRQHandler+0x122>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800281a:	060d      	lsls	r5, r1, #24
 800281c:	d503      	bpl.n	8002826 <HAL_UART_IRQHandler+0x122>
    if (huart->TxISR != NULL)
 800281e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002820:	b183      	cbz	r3, 8002844 <HAL_UART_IRQHandler+0x140>
      huart->TxISR(huart);
 8002822:	4620      	mov	r0, r4
 8002824:	e780      	b.n	8002728 <HAL_UART_IRQHandler+0x24>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002826:	0650      	lsls	r0, r2, #25
 8002828:	d50c      	bpl.n	8002844 <HAL_UART_IRQHandler+0x140>
 800282a:	064a      	lsls	r2, r1, #25
 800282c:	d50a      	bpl.n	8002844 <HAL_UART_IRQHandler+0x140>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002834:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002836:	2320      	movs	r3, #32
 8002838:	6763      	str	r3, [r4, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800283a:	2300      	movs	r3, #0
 800283c:	6663      	str	r3, [r4, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800283e:	4620      	mov	r0, r4
 8002840:	f7ff ff5d 	bl	80026fe <HAL_UART_TxCpltCallback>
 8002844:	bd70      	pop	{r4, r5, r6, pc}
 8002846:	bf00      	nop
 8002848:	0800284d 	.word	0x0800284d

0800284c <UART_DMAAbortOnError>:
{
 800284c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800284e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002856:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 800285a:	f7ff ff51 	bl	8002700 <HAL_UART_ErrorCallback>
 800285e:	bd08      	pop	{r3, pc}

08002860 <UART_SetConfig>:
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002860:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002862:	6881      	ldr	r1, [r0, #8]
{
 8002864:	b538      	push	{r3, r4, r5, lr}
 8002866:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002868:	69c3      	ldr	r3, [r0, #28]
 800286a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800286c:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800286e:	4301      	orrs	r1, r0
 8002870:	6960      	ldr	r0, [r4, #20]
 8002872:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002874:	487a      	ldr	r0, [pc, #488]	; (8002a60 <UART_SetConfig+0x200>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002876:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002878:	4028      	ands	r0, r5
 800287a:	4301      	orrs	r1, r0
 800287c:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800287e:	6851      	ldr	r1, [r2, #4]
 8002880:	68e0      	ldr	r0, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8002882:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002884:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002888:	4301      	orrs	r1, r0
 800288a:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800288c:	6890      	ldr	r0, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800288e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002890:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8002894:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002896:	4301      	orrs	r1, r0
 8002898:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800289a:	4972      	ldr	r1, [pc, #456]	; (8002a64 <UART_SetConfig+0x204>)
 800289c:	428a      	cmp	r2, r1
 800289e:	d111      	bne.n	80028c4 <UART_SetConfig+0x64>
 80028a0:	4a71      	ldr	r2, [pc, #452]	; (8002a68 <UART_SetConfig+0x208>)
 80028a2:	4972      	ldr	r1, [pc, #456]	; (8002a6c <UART_SetConfig+0x20c>)
 80028a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028a6:	f002 0203 	and.w	r2, r2, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028ae:	5c8a      	ldrb	r2, [r1, r2]
 80028b0:	d05a      	beq.n	8002968 <UART_SetConfig+0x108>
    switch (clocksource)
 80028b2:	2a08      	cmp	r2, #8
 80028b4:	d826      	bhi.n	8002904 <UART_SetConfig+0xa4>
 80028b6:	e8df f002 	tbb	[pc, r2]
 80028ba:	a7a1      	.short	0xa7a1
 80028bc:	25bd25aa 	.word	0x25bd25aa
 80028c0:	2525      	.short	0x2525
 80028c2:	c0          	.byte	0xc0
 80028c3:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028c4:	496a      	ldr	r1, [pc, #424]	; (8002a70 <UART_SetConfig+0x210>)
 80028c6:	428a      	cmp	r2, r1
 80028c8:	d12a      	bne.n	8002920 <UART_SetConfig+0xc0>
 80028ca:	4a67      	ldr	r2, [pc, #412]	; (8002a68 <UART_SetConfig+0x208>)
 80028cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028ce:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80028d2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80028d6:	f000 80b5 	beq.w	8002a44 <UART_SetConfig+0x1e4>
 80028da:	d815      	bhi.n	8002908 <UART_SetConfig+0xa8>
 80028dc:	b9da      	cbnz	r2, 8002916 <UART_SetConfig+0xb6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028e2:	f040 808b 	bne.w	80029fc <UART_SetConfig+0x19c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80028e6:	f7ff fbd5 	bl	8002094 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80028ea:	6862      	ldr	r2, [r4, #4]
 80028ec:	0853      	lsrs	r3, r2, #1
 80028ee:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80028f2:	fbb0 f0f2 	udiv	r0, r0, r2
 80028f6:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028f8:	f1a0 0210 	sub.w	r2, r0, #16
 80028fc:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002900:	429a      	cmp	r2, r3
 8002902:	d96f      	bls.n	80029e4 <UART_SetConfig+0x184>
      ret = HAL_ERROR;
 8002904:	2001      	movs	r0, #1
 8002906:	e075      	b.n	80029f4 <UART_SetConfig+0x194>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002908:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800290c:	f000 80a0 	beq.w	8002a50 <UART_SetConfig+0x1f0>
 8002910:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8002914:	d046      	beq.n	80029a4 <UART_SetConfig+0x144>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002916:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800291a:	d0f3      	beq.n	8002904 <UART_SetConfig+0xa4>
 800291c:	2210      	movs	r2, #16
 800291e:	e7c8      	b.n	80028b2 <UART_SetConfig+0x52>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002920:	4954      	ldr	r1, [pc, #336]	; (8002a74 <UART_SetConfig+0x214>)
 8002922:	428a      	cmp	r2, r1
 8002924:	d10f      	bne.n	8002946 <UART_SetConfig+0xe6>
 8002926:	4a50      	ldr	r2, [pc, #320]	; (8002a68 <UART_SetConfig+0x208>)
 8002928:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800292a:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 800292e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8002932:	f000 8087 	beq.w	8002a44 <UART_SetConfig+0x1e4>
 8002936:	d9d1      	bls.n	80028dc <UART_SetConfig+0x7c>
 8002938:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 800293c:	f000 8088 	beq.w	8002a50 <UART_SetConfig+0x1f0>
 8002940:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8002944:	e7e6      	b.n	8002914 <UART_SetConfig+0xb4>
 8002946:	494c      	ldr	r1, [pc, #304]	; (8002a78 <UART_SetConfig+0x218>)
 8002948:	428a      	cmp	r2, r1
 800294a:	d137      	bne.n	80029bc <UART_SetConfig+0x15c>
 800294c:	4a46      	ldr	r2, [pc, #280]	; (8002a68 <UART_SetConfig+0x208>)
 800294e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002950:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8002954:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002958:	d074      	beq.n	8002a44 <UART_SetConfig+0x1e4>
 800295a:	d81d      	bhi.n	8002998 <UART_SetConfig+0x138>
 800295c:	2a00      	cmp	r2, #0
 800295e:	d0be      	beq.n	80028de <UART_SetConfig+0x7e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002964:	d1ce      	bne.n	8002904 <UART_SetConfig+0xa4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002966:	2210      	movs	r2, #16
    switch (clocksource)
 8002968:	2a08      	cmp	r2, #8
 800296a:	d8cb      	bhi.n	8002904 <UART_SetConfig+0xa4>
 800296c:	a301      	add	r3, pc, #4	; (adr r3, 8002974 <UART_SetConfig+0x114>)
 800296e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8002972:	bf00      	nop
 8002974:	080028e7 	.word	0x080028e7
 8002978:	080029df 	.word	0x080029df
 800297c:	080029ab 	.word	0x080029ab
 8002980:	08002905 	.word	0x08002905
 8002984:	08002a4b 	.word	0x08002a4b
 8002988:	08002905 	.word	0x08002905
 800298c:	08002905 	.word	0x08002905
 8002990:	08002905 	.word	0x08002905
 8002994:	08002a57 	.word	0x08002a57
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002998:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800299c:	d058      	beq.n	8002a50 <UART_SetConfig+0x1f0>
 800299e:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80029a2:	d1dd      	bne.n	8002960 <UART_SetConfig+0x100>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029a8:	d131      	bne.n	8002a0e <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80029aa:	6863      	ldr	r3, [r4, #4]
 80029ac:	0858      	lsrs	r0, r3, #1
 80029ae:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 80029b2:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80029b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80029ba:	e79c      	b.n	80028f6 <UART_SetConfig+0x96>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029bc:	492f      	ldr	r1, [pc, #188]	; (8002a7c <UART_SetConfig+0x21c>)
 80029be:	428a      	cmp	r2, r1
 80029c0:	d1a0      	bne.n	8002904 <UART_SetConfig+0xa4>
 80029c2:	4a29      	ldr	r2, [pc, #164]	; (8002a68 <UART_SetConfig+0x208>)
 80029c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80029c6:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 80029ca:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80029ce:	d039      	beq.n	8002a44 <UART_SetConfig+0x1e4>
 80029d0:	d984      	bls.n	80028dc <UART_SetConfig+0x7c>
 80029d2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80029d6:	d03b      	beq.n	8002a50 <UART_SetConfig+0x1f0>
 80029d8:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 80029dc:	e79a      	b.n	8002914 <UART_SetConfig+0xb4>
        pclk = HAL_RCC_GetPCLK2Freq();
 80029de:	f7ff fb71 	bl	80020c4 <HAL_RCC_GetPCLK2Freq>
 80029e2:	e782      	b.n	80028ea <UART_SetConfig+0x8a>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029e4:	f020 030f 	bic.w	r3, r0, #15
      huart->Instance->BRR = brrtemp;
 80029e8:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029ea:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 80029ee:	4318      	orrs	r0, r3
 80029f0:	60d0      	str	r0, [r2, #12]
 80029f2:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80029f8:	6663      	str	r3, [r4, #100]	; 0x64
}
 80029fa:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 80029fc:	f7ff fb4a 	bl	8002094 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a00:	6863      	ldr	r3, [r4, #4]
 8002a02:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002a06:	e008      	b.n	8002a1a <UART_SetConfig+0x1ba>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a08:	f7ff fb5c 	bl	80020c4 <HAL_RCC_GetPCLK2Freq>
 8002a0c:	e7f8      	b.n	8002a00 <UART_SetConfig+0x1a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002a0e:	6863      	ldr	r3, [r4, #4]
 8002a10:	0858      	lsrs	r0, r3, #1
 8002a12:	f500 00f4 	add.w	r0, r0, #7995392	; 0x7a0000
 8002a16:	f500 5090 	add.w	r0, r0, #4608	; 0x1200
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002a1a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a1e:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a20:	f1a0 0210 	sub.w	r2, r0, #16
 8002a24:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	f63f af6b 	bhi.w	8002904 <UART_SetConfig+0xa4>
      huart->Instance->BRR = usartdiv;
 8002a2e:	6823      	ldr	r3, [r4, #0]
 8002a30:	60d8      	str	r0, [r3, #12]
 8002a32:	e7de      	b.n	80029f2 <UART_SetConfig+0x192>
        pclk = HAL_RCC_GetSysClockFreq();
 8002a34:	f7ff fa54 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 8002a38:	e7e2      	b.n	8002a00 <UART_SetConfig+0x1a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002a3a:	6863      	ldr	r3, [r4, #4]
 8002a3c:	0858      	lsrs	r0, r3, #1
 8002a3e:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8002a42:	e7ea      	b.n	8002a1a <UART_SetConfig+0x1ba>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a48:	d1f4      	bne.n	8002a34 <UART_SetConfig+0x1d4>
        pclk = HAL_RCC_GetSysClockFreq();
 8002a4a:	f7ff fa49 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 8002a4e:	e74c      	b.n	80028ea <UART_SetConfig+0x8a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a54:	d1f1      	bne.n	8002a3a <UART_SetConfig+0x1da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002a56:	6863      	ldr	r3, [r4, #4]
 8002a58:	0858      	lsrs	r0, r3, #1
 8002a5a:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8002a5e:	e7aa      	b.n	80029b6 <UART_SetConfig+0x156>
 8002a60:	efff69f3 	.word	0xefff69f3
 8002a64:	40013800 	.word	0x40013800
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	08007674 	.word	0x08007674
 8002a70:	40004400 	.word	0x40004400
 8002a74:	40004800 	.word	0x40004800
 8002a78:	40004c00 	.word	0x40004c00
 8002a7c:	40005000 	.word	0x40005000

08002a80 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a82:	07da      	lsls	r2, r3, #31
{
 8002a84:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a86:	d506      	bpl.n	8002a96 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a88:	6801      	ldr	r1, [r0, #0]
 8002a8a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002a8c:	684a      	ldr	r2, [r1, #4]
 8002a8e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002a92:	4322      	orrs	r2, r4
 8002a94:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a96:	079c      	lsls	r4, r3, #30
 8002a98:	d506      	bpl.n	8002aa8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a9a:	6801      	ldr	r1, [r0, #0]
 8002a9c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002a9e:	684a      	ldr	r2, [r1, #4]
 8002aa0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002aa4:	4322      	orrs	r2, r4
 8002aa6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002aa8:	0759      	lsls	r1, r3, #29
 8002aaa:	d506      	bpl.n	8002aba <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002aac:	6801      	ldr	r1, [r0, #0]
 8002aae:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002ab0:	684a      	ldr	r2, [r1, #4]
 8002ab2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ab6:	4322      	orrs	r2, r4
 8002ab8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002aba:	071a      	lsls	r2, r3, #28
 8002abc:	d506      	bpl.n	8002acc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002abe:	6801      	ldr	r1, [r0, #0]
 8002ac0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002ac2:	684a      	ldr	r2, [r1, #4]
 8002ac4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ac8:	4322      	orrs	r2, r4
 8002aca:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002acc:	06dc      	lsls	r4, r3, #27
 8002ace:	d506      	bpl.n	8002ade <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ad0:	6801      	ldr	r1, [r0, #0]
 8002ad2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002ad4:	688a      	ldr	r2, [r1, #8]
 8002ad6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ada:	4322      	orrs	r2, r4
 8002adc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ade:	0699      	lsls	r1, r3, #26
 8002ae0:	d506      	bpl.n	8002af0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ae2:	6801      	ldr	r1, [r0, #0]
 8002ae4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002ae6:	688a      	ldr	r2, [r1, #8]
 8002ae8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aec:	4322      	orrs	r2, r4
 8002aee:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002af0:	065a      	lsls	r2, r3, #25
 8002af2:	d50f      	bpl.n	8002b14 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002af4:	6801      	ldr	r1, [r0, #0]
 8002af6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002af8:	684a      	ldr	r2, [r1, #4]
 8002afa:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002afe:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b00:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b04:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b06:	d105      	bne.n	8002b14 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b08:	684a      	ldr	r2, [r1, #4]
 8002b0a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002b0c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002b10:	4322      	orrs	r2, r4
 8002b12:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b14:	061b      	lsls	r3, r3, #24
 8002b16:	d506      	bpl.n	8002b26 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b18:	6802      	ldr	r2, [r0, #0]
 8002b1a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002b1c:	6853      	ldr	r3, [r2, #4]
 8002b1e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002b22:	430b      	orrs	r3, r1
 8002b24:	6053      	str	r3, [r2, #4]
 8002b26:	bd10      	pop	{r4, pc}

08002b28 <UART_WaitOnFlagUntilTimeout>:
{
 8002b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b2c:	9d06      	ldr	r5, [sp, #24]
 8002b2e:	4604      	mov	r4, r0
 8002b30:	460f      	mov	r7, r1
 8002b32:	4616      	mov	r6, r2
 8002b34:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b36:	6821      	ldr	r1, [r4, #0]
 8002b38:	69ca      	ldr	r2, [r1, #28]
 8002b3a:	ea37 0302 	bics.w	r3, r7, r2
 8002b3e:	bf0c      	ite	eq
 8002b40:	2201      	moveq	r2, #1
 8002b42:	2200      	movne	r2, #0
 8002b44:	42b2      	cmp	r2, r6
 8002b46:	d002      	beq.n	8002b4e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002b48:	2000      	movs	r0, #0
}
 8002b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002b4e:	1c68      	adds	r0, r5, #1
 8002b50:	d0f2      	beq.n	8002b38 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b52:	f7fe f9a1 	bl	8000e98 <HAL_GetTick>
 8002b56:	eba0 0008 	sub.w	r0, r0, r8
 8002b5a:	4285      	cmp	r5, r0
 8002b5c:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b5e:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b60:	d300      	bcc.n	8002b64 <UART_WaitOnFlagUntilTimeout+0x3c>
 8002b62:	b97d      	cbnz	r5, 8002b84 <UART_WaitOnFlagUntilTimeout+0x5c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b68:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b6a:	6883      	ldr	r3, [r0, #8]
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002b72:	2320      	movs	r3, #32
 8002b74:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002b76:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 8002b7e:	2003      	movs	r0, #3
 8002b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b84:	075a      	lsls	r2, r3, #29
 8002b86:	d5d6      	bpl.n	8002b36 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b88:	69c3      	ldr	r3, [r0, #28]
 8002b8a:	051b      	lsls	r3, r3, #20
 8002b8c:	d5d3      	bpl.n	8002b36 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b92:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b94:	6803      	ldr	r3, [r0, #0]
 8002b96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b9a:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b9c:	6883      	ldr	r3, [r0, #8]
 8002b9e:	f023 0301 	bic.w	r3, r3, #1
 8002ba2:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002ba4:	2320      	movs	r3, #32
 8002ba6:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002ba8:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002baa:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002bac:	e7e4      	b.n	8002b78 <UART_WaitOnFlagUntilTimeout+0x50>

08002bae <HAL_UART_Transmit>:
{
 8002bae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002bb2:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002bb4:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002bb6:	2b20      	cmp	r3, #32
{
 8002bb8:	4604      	mov	r4, r0
 8002bba:	460e      	mov	r6, r1
 8002bbc:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002bbe:	d14b      	bne.n	8002c58 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8002bc0:	2900      	cmp	r1, #0
 8002bc2:	d047      	beq.n	8002c54 <HAL_UART_Transmit+0xa6>
 8002bc4:	2a00      	cmp	r2, #0
 8002bc6:	d045      	beq.n	8002c54 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8002bc8:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d043      	beq.n	8002c58 <HAL_UART_Transmit+0xaa>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd6:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bd8:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bda:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bdc:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8002bde:	f7fe f95b 	bl	8000e98 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002be2:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8002be4:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002bec:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 8002bee:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bf2:	d103      	bne.n	8002bfc <HAL_UART_Transmit+0x4e>
 8002bf4:	6923      	ldr	r3, [r4, #16]
 8002bf6:	b90b      	cbnz	r3, 8002bfc <HAL_UART_Transmit+0x4e>
 8002bf8:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002bfa:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8002bfc:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c00:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8002c04:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c06:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 8002c08:	b94a      	cbnz	r2, 8002c1e <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c0a:	2140      	movs	r1, #64	; 0x40
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	f7ff ff8b 	bl	8002b28 <UART_WaitOnFlagUntilTimeout>
 8002c12:	b950      	cbnz	r0, 8002c2a <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 8002c14:	2320      	movs	r3, #32
 8002c16:	6763      	str	r3, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 8002c18:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8002c1c:	e006      	b.n	8002c2c <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2180      	movs	r1, #128	; 0x80
 8002c22:	4620      	mov	r0, r4
 8002c24:	f7ff ff80 	bl	8002b28 <UART_WaitOnFlagUntilTimeout>
 8002c28:	b118      	cbz	r0, 8002c32 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8002c2a:	2003      	movs	r0, #3
}
 8002c2c:	b003      	add	sp, #12
 8002c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c32:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002c34:	b95e      	cbnz	r6, 8002c4e <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c36:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c3e:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002c40:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8002c4c:	e7d6      	b.n	8002bfc <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c4e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8002c52:	e7f4      	b.n	8002c3e <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8002c54:	2001      	movs	r0, #1
 8002c56:	e7e9      	b.n	8002c2c <HAL_UART_Transmit+0x7e>
    return HAL_BUSY;
 8002c58:	2002      	movs	r0, #2
 8002c5a:	e7e7      	b.n	8002c2c <HAL_UART_Transmit+0x7e>

08002c5c <UART_CheckIdleState>:
{
 8002c5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002c5e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c60:	2600      	movs	r6, #0
 8002c62:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002c64:	f7fe f918 	bl	8000e98 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002c6e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c70:	d415      	bmi.n	8002c9e <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c72:	6823      	ldr	r3, [r4, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	075b      	lsls	r3, r3, #29
 8002c78:	d50a      	bpl.n	8002c90 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	2200      	movs	r2, #0
 8002c82:	462b      	mov	r3, r5
 8002c84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c88:	4620      	mov	r0, r4
 8002c8a:	f7ff ff4d 	bl	8002b28 <UART_WaitOnFlagUntilTimeout>
 8002c8e:	b990      	cbnz	r0, 8002cb6 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8002c90:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002c92:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002c94:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8002c96:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8002c9a:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8002c9c:	e00c      	b.n	8002cb8 <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	4632      	mov	r2, r6
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002cac:	4620      	mov	r0, r4
 8002cae:	f7ff ff3b 	bl	8002b28 <UART_WaitOnFlagUntilTimeout>
 8002cb2:	2800      	cmp	r0, #0
 8002cb4:	d0dd      	beq.n	8002c72 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002cb6:	2003      	movs	r0, #3
}
 8002cb8:	b002      	add	sp, #8
 8002cba:	bd70      	pop	{r4, r5, r6, pc}

08002cbc <HAL_UART_Init>:
{
 8002cbc:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002cbe:	4604      	mov	r4, r0
 8002cc0:	b340      	cbz	r0, 8002d14 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002cc2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002cc4:	b91b      	cbnz	r3, 8002cce <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8002cc6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002cca:	f002 fa2d 	bl	8005128 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002cce:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002cd0:	2324      	movs	r3, #36	; 0x24
 8002cd2:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002cd4:	6813      	ldr	r3, [r2, #0]
 8002cd6:	f023 0301 	bic.w	r3, r3, #1
 8002cda:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cdc:	4620      	mov	r0, r4
 8002cde:	f7ff fdbf 	bl	8002860 <UART_SetConfig>
 8002ce2:	2801      	cmp	r0, #1
 8002ce4:	d016      	beq.n	8002d14 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ce8:	b113      	cbz	r3, 8002cf0 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8002cea:	4620      	mov	r0, r4
 8002cec:	f7ff fec8 	bl	8002a80 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cf8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d00:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002d08:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002d0a:	601a      	str	r2, [r3, #0]
}
 8002d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002d10:	f7ff bfa4 	b.w	8002c5c <UART_CheckIdleState>
}
 8002d14:	2001      	movs	r0, #1
 8002d16:	bd10      	pop	{r4, pc}

08002d18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002d18:	4770      	bx	lr

08002d1a <eMBFuncReadCoils>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002d1a:	880b      	ldrh	r3, [r1, #0]
 8002d1c:	2b05      	cmp	r3, #5
{
 8002d1e:	b570      	push	{r4, r5, r6, lr}
 8002d20:	460d      	mov	r5, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002d22:	d12e      	bne.n	8002d82 <eMBFuncReadCoils+0x68>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8002d24:	78c3      	ldrb	r3, [r0, #3]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8002d26:	7902      	ldrb	r2, [r0, #4]
 8002d28:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8002d2c:	1e53      	subs	r3, r2, #1
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8002d34:	428b      	cmp	r3, r1
 8002d36:	d824      	bhi.n	8002d82 <eMBFuncReadCoils+0x68>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
 8002d38:	2300      	movs	r3, #0
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002d3a:	7846      	ldrb	r6, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002d3c:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8002d3e:	802b      	strh	r3, [r5, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8002d40:	2301      	movs	r3, #1
 8002d42:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8002d44:	882b      	ldrh	r3, [r5, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 8002d46:	f012 0f07 	tst.w	r2, #7
 8002d4a:	ea4f 04d2 	mov.w	r4, r2, lsr #3
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8002d4e:	bf18      	it	ne
 8002d50:	3401      	addne	r4, #1
            *usLen += 1;
 8002d52:	3301      	adds	r3, #1
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8002d54:	b2e4      	uxtb	r4, r4
            *usLen += 1;
 8002d56:	802b      	strh	r3, [r5, #0]
            }
            *pucFrameCur++ = ucNBytes;
 8002d58:	7044      	strb	r4, [r0, #1]
            *usLen += 1;
 8002d5a:	882b      	ldrh	r3, [r5, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002d5c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
            *usLen += 1;
 8002d60:	3301      	adds	r3, #1
        usRegAddress++;
 8002d62:	3101      	adds	r1, #1
            *usLen += 1;
 8002d64:	802b      	strh	r3, [r5, #0]

            eRegStatus =
 8002d66:	b289      	uxth	r1, r1
 8002d68:	2300      	movs	r3, #0
 8002d6a:	3002      	adds	r0, #2
 8002d6c:	f001 ff38 	bl	8004be0 <eMBRegCoilsCB>
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002d70:	b118      	cbz	r0, 8002d7a <eMBFuncReadCoils+0x60>
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002d72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002d76:	f000 b981 	b.w	800307c <prveMBError2Exception>
                *usLen += ucNBytes;;
 8002d7a:	882a      	ldrh	r2, [r5, #0]
 8002d7c:	4414      	add	r4, r2
 8002d7e:	802c      	strh	r4, [r5, #0]
 8002d80:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002d82:	2003      	movs	r0, #3
}
 8002d84:	bd70      	pop	{r4, r5, r6, pc}

08002d86 <eMBFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002d86:	880b      	ldrh	r3, [r1, #0]
 8002d88:	2b05      	cmp	r3, #5
{
 8002d8a:	b513      	push	{r0, r1, r4, lr}
    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002d8c:	d11d      	bne.n	8002dca <eMBFuncWriteCoil+0x44>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8002d8e:	7903      	ldrb	r3, [r0, #4]
 8002d90:	b9db      	cbnz	r3, 8002dca <eMBFuncWriteCoil+0x44>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8002d92:	78c4      	ldrb	r4, [r0, #3]
 8002d94:	1e62      	subs	r2, r4, #1
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	2afd      	cmp	r2, #253	; 0xfd
 8002d9a:	d916      	bls.n	8002dca <eMBFuncWriteCoil+0x44>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8002d9c:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002d9e:	7881      	ldrb	r1, [r0, #2]
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
 8002da0:	f88d 3005 	strb.w	r3, [sp, #5]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8002da4:	2cff      	cmp	r4, #255	; 0xff
            {
                ucBuf[0] = 1;
 8002da6:	bf08      	it	eq
 8002da8:	2301      	moveq	r3, #1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002daa:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
            }
            else
            {
                ucBuf[0] = 0;
 8002dae:	f88d 3004 	strb.w	r3, [sp, #4]
        usRegAddress++;
 8002db2:	3101      	adds	r1, #1
            }
            eRegStatus =
 8002db4:	2301      	movs	r3, #1
 8002db6:	461a      	mov	r2, r3
 8002db8:	b289      	uxth	r1, r1
 8002dba:	a801      	add	r0, sp, #4
 8002dbc:	f001 ff10 	bl	8004be0 <eMBRegCoilsCB>
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002dc0:	b128      	cbz	r0, 8002dce <eMBFuncWriteCoil+0x48>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002dc2:	f000 f95b 	bl	800307c <prveMBError2Exception>
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002dc6:	b002      	add	sp, #8
 8002dc8:	bd10      	pop	{r4, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002dca:	2003      	movs	r0, #3
 8002dcc:	e7fb      	b.n	8002dc6 <eMBFuncWriteCoil+0x40>
 8002dce:	e7fa      	b.n	8002dc6 <eMBFuncWriteCoil+0x40>

08002dd0 <eMBFuncWriteMultipleCoils>:
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002dd0:	880b      	ldrh	r3, [r1, #0]
 8002dd2:	2b05      	cmp	r3, #5
{
 8002dd4:	b510      	push	{r4, lr}
 8002dd6:	460c      	mov	r4, r1
    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002dd8:	d924      	bls.n	8002e24 <eMBFuncWriteMultipleCoils+0x54>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8002dda:	78c3      	ldrb	r3, [r0, #3]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8002ddc:	7902      	ldrb	r2, [r0, #4]
 8002dde:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8002de2:	f012 0f07 	tst.w	r2, #7
 8002de6:	ea4f 03d2 	mov.w	r3, r2, lsr #3
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) &&
 8002dea:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8002dee:	bf18      	it	ne
 8002df0:	3301      	addne	r3, #1
        if( ( usCoilCnt >= 1 ) &&
 8002df2:	f5b1 6ff6 	cmp.w	r1, #1968	; 0x7b0
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8002df6:	b2db      	uxtb	r3, r3
        if( ( usCoilCnt >= 1 ) &&
 8002df8:	d214      	bcs.n	8002e24 <eMBFuncWriteMultipleCoils+0x54>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8002dfa:	7941      	ldrb	r1, [r0, #5]
 8002dfc:	4299      	cmp	r1, r3
 8002dfe:	d111      	bne.n	8002e24 <eMBFuncWriteMultipleCoils+0x54>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8002e00:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8002e02:	7881      	ldrb	r1, [r0, #2]
 8002e04:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8002e08:	3101      	adds	r1, #1
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	b289      	uxth	r1, r1
 8002e0e:	3006      	adds	r0, #6
 8002e10:	f001 fee6 	bl	8004be0 <eMBRegCoilsCB>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002e14:	b118      	cbz	r0, 8002e1e <eMBFuncWriteMultipleCoils+0x4e>
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002e1a:	f000 b92f 	b.w	800307c <prveMBError2Exception>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8002e1e:	2205      	movs	r2, #5
 8002e20:	8022      	strh	r2, [r4, #0]
 8002e22:	bd10      	pop	{r4, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002e24:	2003      	movs	r0, #3
}
 8002e26:	bd10      	pop	{r4, pc}

08002e28 <eMBFuncReadDiscreteInputs>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002e28:	880b      	ldrh	r3, [r1, #0]
 8002e2a:	2b05      	cmp	r3, #5
{
 8002e2c:	b570      	push	{r4, r5, r6, lr}
 8002e2e:	460d      	mov	r5, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002e30:	d12d      	bne.n	8002e8e <eMBFuncReadDiscreteInputs+0x66>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8002e32:	78c3      	ldrb	r3, [r0, #3]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8002e34:	7902      	ldrb	r2, [r0, #4]
 8002e36:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8002e3a:	1e53      	subs	r3, r2, #1
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8002e42:	428b      	cmp	r3, r1
 8002e44:	d823      	bhi.n	8002e8e <eMBFuncReadDiscreteInputs+0x66>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
 8002e46:	2300      	movs	r3, #0
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002e48:	7846      	ldrb	r6, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002e4a:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8002e4c:	802b      	strh	r3, [r5, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8002e52:	882b      	ldrh	r3, [r5, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8002e54:	f012 0f07 	tst.w	r2, #7
 8002e58:	ea4f 04d2 	mov.w	r4, r2, lsr #3
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8002e5c:	bf18      	it	ne
 8002e5e:	3401      	addne	r4, #1
            *usLen += 1;
 8002e60:	3301      	adds	r3, #1
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8002e62:	b2e4      	uxtb	r4, r4
            *usLen += 1;
 8002e64:	802b      	strh	r3, [r5, #0]
            }
            *pucFrameCur++ = ucNBytes;
 8002e66:	7044      	strb	r4, [r0, #1]
            *usLen += 1;
 8002e68:	882b      	ldrh	r3, [r5, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002e6a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
            *usLen += 1;
 8002e6e:	3301      	adds	r3, #1
        usRegAddress++;
 8002e70:	3101      	adds	r1, #1
            *usLen += 1;
 8002e72:	802b      	strh	r3, [r5, #0]

            eRegStatus =
 8002e74:	b289      	uxth	r1, r1
 8002e76:	3002      	adds	r0, #2
 8002e78:	f001 feb4 	bl	8004be4 <eMBRegDiscreteCB>
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002e7c:	b118      	cbz	r0, 8002e86 <eMBFuncReadDiscreteInputs+0x5e>
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002e7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002e82:	f000 b8fb 	b.w	800307c <prveMBError2Exception>
                *usLen += ucNBytes;;
 8002e86:	882a      	ldrh	r2, [r5, #0]
 8002e88:	4414      	add	r4, r2
 8002e8a:	802c      	strh	r4, [r5, #0]
 8002e8c:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002e8e:	2003      	movs	r0, #3
}
 8002e90:	bd70      	pop	{r4, r5, r6, pc}

08002e92 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002e92:	b508      	push	{r3, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002e94:	880b      	ldrh	r3, [r1, #0]
 8002e96:	2b05      	cmp	r3, #5
 8002e98:	d10f      	bne.n	8002eba <eMBFuncWriteHoldingRegister+0x28>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8002e9a:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002e9c:	7881      	ldrb	r1, [r0, #2]
 8002e9e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8002ea2:	3101      	adds	r1, #1

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	b289      	uxth	r1, r1
 8002eaa:	3003      	adds	r0, #3
 8002eac:	f001 fe64 	bl	8004b78 <eMBRegHoldingCB>
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8002eb0:	b128      	cbz	r0, 8002ebe <eMBFuncWriteHoldingRegister+0x2c>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002eb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            eStatus = prveMBError2Exception( eRegStatus );
 8002eb6:	f000 b8e1 	b.w	800307c <prveMBError2Exception>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002eba:	2003      	movs	r0, #3
 8002ebc:	bd08      	pop	{r3, pc}
}
 8002ebe:	bd08      	pop	{r3, pc}

08002ec0 <eMBFuncWriteMultipleHoldingRegister>:
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002ec0:	880b      	ldrh	r3, [r1, #0]
 8002ec2:	2b05      	cmp	r3, #5
{
 8002ec4:	b510      	push	{r4, lr}
 8002ec6:	460c      	mov	r4, r1
    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002ec8:	d91d      	bls.n	8002f06 <eMBFuncWriteMultipleHoldingRegister+0x46>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8002eca:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8002ecc:	7902      	ldrb	r2, [r0, #4]
 8002ece:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        if( ( usRegCount >= 1 ) &&
 8002ed2:	1e53      	subs	r3, r2, #1
 8002ed4:	2b77      	cmp	r3, #119	; 0x77
 8002ed6:	d816      	bhi.n	8002f06 <eMBFuncWriteMultipleHoldingRegister+0x46>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8002ed8:	0053      	lsls	r3, r2, #1
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8002eda:	7941      	ldrb	r1, [r0, #5]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	4299      	cmp	r1, r3
 8002ee0:	d111      	bne.n	8002f06 <eMBFuncWriteMultipleHoldingRegister+0x46>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8002ee2:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8002ee4:	7881      	ldrb	r1, [r0, #2]
 8002ee6:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8002eea:	3101      	adds	r1, #1
        {
            /* Make callback to update the register values. */
            eRegStatus =
 8002eec:	2301      	movs	r3, #1
 8002eee:	b289      	uxth	r1, r1
 8002ef0:	3006      	adds	r0, #6
 8002ef2:	f001 fe41 	bl	8004b78 <eMBRegHoldingCB>
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002ef6:	b118      	cbz	r0, 8002f00 <eMBFuncWriteMultipleHoldingRegister+0x40>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002efc:	f000 b8be 	b.w	800307c <prveMBError2Exception>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8002f00:	2205      	movs	r2, #5
 8002f02:	8022      	strh	r2, [r4, #0]
 8002f04:	bd10      	pop	{r4, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002f06:	2003      	movs	r0, #3
}
 8002f08:	bd10      	pop	{r4, pc}

08002f0a <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002f0c:	880b      	ldrh	r3, [r1, #0]
 8002f0e:	2b05      	cmp	r3, #5
{
 8002f10:	460c      	mov	r4, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002f12:	d124      	bne.n	8002f5e <eMBFuncReadHoldingRegister+0x54>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8002f14:	7902      	ldrb	r2, [r0, #4]
 8002f16:	b295      	uxth	r5, r2

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8002f18:	1e6b      	subs	r3, r5, #1
 8002f1a:	2b7c      	cmp	r3, #124	; 0x7c
 8002f1c:	d81f      	bhi.n	8002f5e <eMBFuncReadHoldingRegister+0x54>
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8002f1e:	2603      	movs	r6, #3
            *usLen = MB_PDU_FUNC_OFF;
 8002f20:	2300      	movs	r3, #0
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002f22:	7847      	ldrb	r7, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002f24:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8002f26:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8002f28:	7006      	strb	r6, [r0, #0]
            *usLen += 1;
 8002f2a:	8826      	ldrh	r6, [r4, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8002f2c:	0052      	lsls	r2, r2, #1
            *usLen += 1;
 8002f2e:	3601      	adds	r6, #1
 8002f30:	8026      	strh	r6, [r4, #0]
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8002f32:	7042      	strb	r2, [r0, #1]
            *usLen += 1;
 8002f34:	8822      	ldrh	r2, [r4, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002f36:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
            *usLen += 1;
 8002f3a:	3201      	adds	r2, #1
        usRegAddress++;
 8002f3c:	3101      	adds	r1, #1
            *usLen += 1;
 8002f3e:	8022      	strh	r2, [r4, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8002f40:	b289      	uxth	r1, r1
 8002f42:	462a      	mov	r2, r5
 8002f44:	3002      	adds	r0, #2
 8002f46:	f001 fe17 	bl	8004b78 <eMBRegHoldingCB>
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002f4a:	b118      	cbz	r0, 8002f54 <eMBFuncReadHoldingRegister+0x4a>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002f4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002f50:	f000 b894 	b.w	800307c <prveMBError2Exception>
                *usLen += usRegCount * 2;
 8002f54:	8822      	ldrh	r2, [r4, #0]
 8002f56:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8002f5a:	8025      	strh	r5, [r4, #0]
 8002f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002f5e:	2003      	movs	r0, #3
}
 8002f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f62 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002f62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002f66:	880b      	ldrh	r3, [r1, #0]
 8002f68:	2b09      	cmp	r3, #9
{
 8002f6a:	4604      	mov	r4, r0
 8002f6c:	460d      	mov	r5, r1
    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002f6e:	d93c      	bls.n	8002fea <eMBFuncReadWriteMultipleHoldingRegister+0x88>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8002f70:	78c3      	ldrb	r3, [r0, #3]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8002f72:	7907      	ldrb	r7, [r0, #4]
 8002f74:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8002f78:	1e7b      	subs	r3, r7, #1
 8002f7a:	2b7c      	cmp	r3, #124	; 0x7c
 8002f7c:	d838      	bhi.n	8002ff0 <eMBFuncReadWriteMultipleHoldingRegister+0x8e>
        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8002f7e:	79c3      	ldrb	r3, [r0, #7]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8002f80:	7a02      	ldrb	r2, [r0, #8]
 8002f82:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8002f86:	1e53      	subs	r3, r2, #1
 8002f88:	2b78      	cmp	r3, #120	; 0x78
 8002f8a:	d831      	bhi.n	8002ff0 <eMBFuncReadWriteMultipleHoldingRegister+0x8e>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8002f8c:	7a43      	ldrb	r3, [r0, #9]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8002f8e:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8002f92:	d12d      	bne.n	8002ff0 <eMBFuncReadWriteMultipleHoldingRegister+0x8e>
        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8002f94:	7943      	ldrb	r3, [r0, #5]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8002f96:	7981      	ldrb	r1, [r0, #6]
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8002f98:	f890 9001 	ldrb.w	r9, [r0, #1]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8002f9c:	7886      	ldrb	r6, [r0, #2]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8002f9e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegWriteAddress++;
 8002fa2:	3101      	adds	r1, #1
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	b289      	uxth	r1, r1
 8002fa8:	300a      	adds	r0, #10
 8002faa:	f001 fde5 	bl	8004b78 <eMBRegHoldingCB>
 8002fae:	4603      	mov	r3, r0
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 8002fb0:	bb08      	cbnz	r0, 8002ff6 <eMBFuncReadWriteMultipleHoldingRegister+0x94>
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
                *usLen = MB_PDU_FUNC_OFF;

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8002fb2:	2217      	movs	r2, #23
                *usLen = MB_PDU_FUNC_OFF;
 8002fb4:	8028      	strh	r0, [r5, #0]
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8002fb6:	7022      	strb	r2, [r4, #0]
                *usLen += 1;
 8002fb8:	882a      	ldrh	r2, [r5, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8002fba:	ea4f 0847 	mov.w	r8, r7, lsl #1
                *usLen += 1;
 8002fbe:	3201      	adds	r2, #1
 8002fc0:	802a      	strh	r2, [r5, #0]
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8002fc2:	f884 8001 	strb.w	r8, [r4, #1]
                *usLen += 1;
 8002fc6:	882a      	ldrh	r2, [r5, #0]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8002fc8:	ea46 2109 	orr.w	r1, r6, r9, lsl #8
                *usLen += 1;
 8002fcc:	3201      	adds	r2, #1
        usRegReadAddress++;
 8002fce:	3101      	adds	r1, #1
                *usLen += 1;
 8002fd0:	802a      	strh	r2, [r5, #0]

                /* Make the read callback. */
                eRegStatus =
 8002fd2:	b289      	uxth	r1, r1
 8002fd4:	463a      	mov	r2, r7
 8002fd6:	1ca0      	adds	r0, r4, #2
 8002fd8:	f001 fdce 	bl	8004b78 <eMBRegHoldingCB>
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
                if( eRegStatus == MB_ENOERR )
 8002fdc:	b958      	cbnz	r0, 8002ff6 <eMBFuncReadWriteMultipleHoldingRegister+0x94>
                {
                    *usLen += 2 * usRegReadCount;
 8002fde:	882b      	ldrh	r3, [r5, #0]
 8002fe0:	4498      	add	r8, r3
 8002fe2:	f8a5 8000 	strh.w	r8, [r5]
 8002fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    eMBException    eStatus = MB_EX_NONE;
 8002fea:	2000      	movs	r0, #0
 8002fec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002ff0:	2003      	movs	r0, #3
        }
    }
    return eStatus;
 8002ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}
 8002ff6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002ffa:	f000 b83f 	b.w	800307c <prveMBError2Exception>

08002ffe <eMBFuncReadInputRegister>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002ffe:	880b      	ldrh	r3, [r1, #0]
 8003000:	2b05      	cmp	r3, #5
{
 8003002:	b570      	push	{r4, r5, r6, lr}
 8003004:	460c      	mov	r4, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003006:	d124      	bne.n	8003052 <eMBFuncReadInputRegister+0x54>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8003008:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800300a:	7902      	ldrb	r2, [r0, #4]
 800300c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 8003010:	1e53      	subs	r3, r2, #1
 8003012:	2b7b      	cmp	r3, #123	; 0x7b
 8003014:	d81d      	bhi.n	8003052 <eMBFuncReadInputRegister+0x54>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
 8003016:	2300      	movs	r3, #0
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8003018:	7846      	ldrb	r6, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800301a:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 800301c:	8023      	strh	r3, [r4, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 800301e:	2304      	movs	r3, #4
 8003020:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8003022:	8823      	ldrh	r3, [r4, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8003024:	0055      	lsls	r5, r2, #1
            *usLen += 1;
 8003026:	3301      	adds	r3, #1
 8003028:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 800302a:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 800302c:	8823      	ldrh	r3, [r4, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800302e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
            *usLen += 1;
 8003032:	3301      	adds	r3, #1
        usRegAddress++;
 8003034:	3101      	adds	r1, #1
            *usLen += 1;
 8003036:	8023      	strh	r3, [r4, #0]

            eRegStatus =
 8003038:	b289      	uxth	r1, r1
 800303a:	3002      	adds	r0, #2
 800303c:	f001 fd7c 	bl	8004b38 <eMBRegInputCB>
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003040:	b118      	cbz	r0, 800304a <eMBFuncReadInputRegister+0x4c>
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8003042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8003046:	f000 b819 	b.w	800307c <prveMBError2Exception>
                *usLen += usRegCount * 2;
 800304a:	8822      	ldrh	r2, [r4, #0]
 800304c:	4415      	add	r5, r2
 800304e:	8025      	strh	r5, [r4, #0]
 8003050:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003052:	2003      	movs	r0, #3
}
 8003054:	bd70      	pop	{r4, r5, r6, pc}
	...

08003058 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8003058:	b538      	push	{r3, r4, r5, lr}
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 800305a:	4b06      	ldr	r3, [pc, #24]	; (8003074 <eMBFuncReportSlaveID+0x1c>)
 800305c:	881c      	ldrh	r4, [r3, #0]
{
 800305e:	460d      	mov	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8003060:	4622      	mov	r2, r4
 8003062:	4905      	ldr	r1, [pc, #20]	; (8003078 <eMBFuncReportSlaveID+0x20>)
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8003064:	3401      	adds	r4, #1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8003066:	3001      	adds	r0, #1
 8003068:	f002 fd48 	bl	8005afc <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 800306c:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 800306e:	2000      	movs	r0, #0
 8003070:	bd38      	pop	{r3, r4, r5, pc}
 8003072:	bf00      	nop
 8003074:	20000838 	.word	0x20000838
 8003078:	20000818 	.word	0x20000818

0800307c <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 800307c:	2807      	cmp	r0, #7
 800307e:	bf9a      	itte	ls
 8003080:	4b01      	ldrls	r3, [pc, #4]	; (8003088 <prveMBError2Exception+0xc>)
 8003082:	5c18      	ldrbls	r0, [r3, r0]
 8003084:	2004      	movhi	r0, #4
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
 8003086:	4770      	bx	lr
 8003088:	08007678 	.word	0x08007678

0800308c <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800308c:	b538      	push	{r3, r4, r5, lr}
 800308e:	4604      	mov	r4, r0
 8003090:	4608      	mov	r0, r1
 8003092:	4611      	mov	r1, r2
 8003094:	461a      	mov	r2, r3
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 8003096:	1e43      	subs	r3, r0, #1
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2bf6      	cmp	r3, #246	; 0xf6
 800309c:	d827      	bhi.n	80030ee <eMBInit+0x62>
    {
        eStatus = MB_EINVAL;
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 800309e:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <eMBInit+0x6c>)
 80030a0:	7018      	strb	r0, [r3, #0]

        switch ( eMode )
 80030a2:	bb24      	cbnz	r4, 80030ee <eMBInit+0x62>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 80030a4:	4b15      	ldr	r3, [pc, #84]	; (80030fc <eMBInit+0x70>)
 80030a6:	4d16      	ldr	r5, [pc, #88]	; (8003100 <eMBInit+0x74>)
 80030a8:	601d      	str	r5, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 80030aa:	4b16      	ldr	r3, [pc, #88]	; (8003104 <eMBInit+0x78>)
 80030ac:	4d16      	ldr	r5, [pc, #88]	; (8003108 <eMBInit+0x7c>)
 80030ae:	601d      	str	r5, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 80030b0:	4b16      	ldr	r3, [pc, #88]	; (800310c <eMBInit+0x80>)
 80030b2:	4d17      	ldr	r5, [pc, #92]	; (8003110 <eMBInit+0x84>)
 80030b4:	601d      	str	r5, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 80030b6:	4b17      	ldr	r3, [pc, #92]	; (8003114 <eMBInit+0x88>)
 80030b8:	4d17      	ldr	r5, [pc, #92]	; (8003118 <eMBInit+0x8c>)
 80030ba:	601d      	str	r5, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 80030bc:	4b17      	ldr	r3, [pc, #92]	; (800311c <eMBInit+0x90>)
 80030be:	601c      	str	r4, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 80030c0:	4b17      	ldr	r3, [pc, #92]	; (8003120 <eMBInit+0x94>)
 80030c2:	4c18      	ldr	r4, [pc, #96]	; (8003124 <eMBInit+0x98>)
 80030c4:	601c      	str	r4, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 80030c6:	4b18      	ldr	r3, [pc, #96]	; (8003128 <eMBInit+0x9c>)
 80030c8:	4c18      	ldr	r4, [pc, #96]	; (800312c <eMBInit+0xa0>)
 80030ca:	601c      	str	r4, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 80030cc:	4b18      	ldr	r3, [pc, #96]	; (8003130 <eMBInit+0xa4>)
 80030ce:	4c19      	ldr	r4, [pc, #100]	; (8003134 <eMBInit+0xa8>)
 80030d0:	601c      	str	r4, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 80030d2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80030d6:	f000 f967 	bl	80033a8 <eMBRTUInit>
#endif
        default:
            eStatus = MB_EINVAL;
        }

        if( eStatus == MB_ENOERR )
 80030da:	4604      	mov	r4, r0
 80030dc:	b928      	cbnz	r0, 80030ea <eMBInit+0x5e>
        {
            if( !xMBPortEventInit(  ) )
 80030de:	f000 f8b5 	bl	800324c <xMBPortEventInit>
 80030e2:	b130      	cbz	r0, 80030f2 <eMBInit+0x66>
                eStatus = MB_EPORTERR;
            }
            else
            {
                eMBCurrentMode = eMode;
                eMBState = STATE_DISABLED;
 80030e4:	4b14      	ldr	r3, [pc, #80]	; (8003138 <eMBInit+0xac>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
}
 80030ea:	4620      	mov	r0, r4
 80030ec:	bd38      	pop	{r3, r4, r5, pc}
            eStatus = MB_EINVAL;
 80030ee:	2402      	movs	r4, #2
 80030f0:	e7fb      	b.n	80030ea <eMBInit+0x5e>
                eStatus = MB_EPORTERR;
 80030f2:	2403      	movs	r4, #3
 80030f4:	e7f9      	b.n	80030ea <eMBInit+0x5e>
 80030f6:	bf00      	nop
 80030f8:	20000851 	.word	0x20000851
 80030fc:	20000848 	.word	0x20000848
 8003100:	080033e1 	.word	0x080033e1
 8003104:	2000084c 	.word	0x2000084c
 8003108:	080033fd 	.word	0x080033fd
 800310c:	20000840 	.word	0x20000840
 8003110:	08003479 	.word	0x08003479
 8003114:	2000083c 	.word	0x2000083c
 8003118:	08003411 	.word	0x08003411
 800311c:	20000844 	.word	0x20000844
 8003120:	20001fe0 	.word	0x20001fe0
 8003124:	080034f1 	.word	0x080034f1
 8003128:	20001fd8 	.word	0x20001fd8
 800312c:	08003585 	.word	0x08003585
 8003130:	20001fdc 	.word	0x20001fdc
 8003134:	0800360d 	.word	0x0800360d
 8003138:	20000008 	.word	0x20000008

0800313c <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 800313c:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 800313e:	4c06      	ldr	r4, [pc, #24]	; (8003158 <eMBEnable+0x1c>)
 8003140:	7823      	ldrb	r3, [r4, #0]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d105      	bne.n	8003152 <eMBEnable+0x16>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 8003146:	4b05      	ldr	r3, [pc, #20]	; (800315c <eMBEnable+0x20>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 800314c:	2000      	movs	r0, #0
 800314e:	7020      	strb	r0, [r4, #0]
 8003150:	bd10      	pop	{r4, pc}
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8003152:	2006      	movs	r0, #6
    }
    return eStatus;
}
 8003154:	bd10      	pop	{r4, pc}
 8003156:	bf00      	nop
 8003158:	20000008 	.word	0x20000008
 800315c:	20000848 	.word	0x20000848

08003160 <eMBPoll>:
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8003160:	4b30      	ldr	r3, [pc, #192]	; (8003224 <eMBPoll+0xc4>)
{
 8003162:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( eMBState != STATE_ENABLED )
 8003164:	781c      	ldrb	r4, [r3, #0]
 8003166:	2c00      	cmp	r4, #0
 8003168:	d159      	bne.n	800321e <eMBPoll+0xbe>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 800316a:	f10d 0007 	add.w	r0, sp, #7
 800316e:	f000 f881 	bl	8003274 <xMBPortEventGet>
 8003172:	2801      	cmp	r0, #1
 8003174:	4603      	mov	r3, r0
 8003176:	d001      	beq.n	800317c <eMBPoll+0x1c>

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
 8003178:	2400      	movs	r4, #0
 800317a:	e005      	b.n	8003188 <eMBPoll+0x28>
        switch ( eEvent )
 800317c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003180:	2a01      	cmp	r2, #1
 8003182:	d004      	beq.n	800318e <eMBPoll+0x2e>
 8003184:	2a02      	cmp	r2, #2
 8003186:	d017      	beq.n	80031b8 <eMBPoll+0x58>
}
 8003188:	4620      	mov	r0, r4
 800318a:	b003      	add	sp, #12
 800318c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 800318e:	4d26      	ldr	r5, [pc, #152]	; (8003228 <eMBPoll+0xc8>)
 8003190:	4b26      	ldr	r3, [pc, #152]	; (800322c <eMBPoll+0xcc>)
 8003192:	4a27      	ldr	r2, [pc, #156]	; (8003230 <eMBPoll+0xd0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4927      	ldr	r1, [pc, #156]	; (8003234 <eMBPoll+0xd4>)
 8003198:	4628      	mov	r0, r5
 800319a:	4798      	blx	r3
            if( eStatus == MB_ENOERR )
 800319c:	4604      	mov	r4, r0
 800319e:	2800      	cmp	r0, #0
 80031a0:	d1ea      	bne.n	8003178 <eMBPoll+0x18>
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 80031a2:	4a25      	ldr	r2, [pc, #148]	; (8003238 <eMBPoll+0xd8>)
 80031a4:	782b      	ldrb	r3, [r5, #0]
 80031a6:	7812      	ldrb	r2, [r2, #0]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d001      	beq.n	80031b0 <eMBPoll+0x50>
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1e3      	bne.n	8003178 <eMBPoll+0x18>
                    ( void )xMBPortEventPost( EV_EXECUTE );
 80031b0:	2002      	movs	r0, #2
 80031b2:	f000 f853 	bl	800325c <xMBPortEventPost>
 80031b6:	e7e7      	b.n	8003188 <eMBPoll+0x28>
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80031b8:	4d1e      	ldr	r5, [pc, #120]	; (8003234 <eMBPoll+0xd4>)
            eException = MB_EX_ILLEGAL_FUNCTION;
 80031ba:	4e20      	ldr	r6, [pc, #128]	; (800323c <eMBPoll+0xdc>)
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80031bc:	6828      	ldr	r0, [r5, #0]
 80031be:	4f20      	ldr	r7, [pc, #128]	; (8003240 <eMBPoll+0xe0>)
 80031c0:	7802      	ldrb	r2, [r0, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 80031c2:	7033      	strb	r3, [r6, #0]
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 80031c4:	4b1f      	ldr	r3, [pc, #124]	; (8003244 <eMBPoll+0xe4>)
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80031c6:	703a      	strb	r2, [r7, #0]
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 80031c8:	f813 1034 	ldrb.w	r1, [r3, r4, lsl #3]
 80031cc:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
 80031d0:	b131      	cbz	r1, 80031e0 <eMBPoll+0x80>
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 80031d2:	428a      	cmp	r2, r1
 80031d4:	d11f      	bne.n	8003216 <eMBPoll+0xb6>
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 80031d6:	4473      	add	r3, lr
 80031d8:	4915      	ldr	r1, [pc, #84]	; (8003230 <eMBPoll+0xd0>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	4798      	blx	r3
 80031de:	7030      	strb	r0, [r6, #0]
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 80031e0:	4b11      	ldr	r3, [pc, #68]	; (8003228 <eMBPoll+0xc8>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0c7      	beq.n	8003178 <eMBPoll+0x18>
                if( eException != MB_EX_NONE )
 80031e8:	7831      	ldrb	r1, [r6, #0]
 80031ea:	4b11      	ldr	r3, [pc, #68]	; (8003230 <eMBPoll+0xd0>)
 80031ec:	b159      	cbz	r1, 8003206 <eMBPoll+0xa6>
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 80031ee:	2201      	movs	r2, #1
 80031f0:	801a      	strh	r2, [r3, #0]
 80031f2:	783a      	ldrb	r2, [r7, #0]
 80031f4:	6828      	ldr	r0, [r5, #0]
 80031f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031fa:	7002      	strb	r2, [r0, #0]
                    ucMBFrame[usLength++] = eException;
 80031fc:	881a      	ldrh	r2, [r3, #0]
 80031fe:	6828      	ldr	r0, [r5, #0]
 8003200:	1c54      	adds	r4, r2, #1
 8003202:	801c      	strh	r4, [r3, #0]
 8003204:	5481      	strb	r1, [r0, r2]
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8003206:	4a10      	ldr	r2, [pc, #64]	; (8003248 <eMBPoll+0xe8>)
 8003208:	6829      	ldr	r1, [r5, #0]
 800320a:	6814      	ldr	r4, [r2, #0]
 800320c:	881a      	ldrh	r2, [r3, #0]
 800320e:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <eMBPoll+0xd8>)
 8003210:	7818      	ldrb	r0, [r3, #0]
 8003212:	47a0      	blx	r4
 8003214:	e7b0      	b.n	8003178 <eMBPoll+0x18>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8003216:	3401      	adds	r4, #1
 8003218:	2c10      	cmp	r4, #16
 800321a:	d1d5      	bne.n	80031c8 <eMBPoll+0x68>
 800321c:	e7e0      	b.n	80031e0 <eMBPoll+0x80>
        return MB_EILLSTATE;
 800321e:	2406      	movs	r4, #6
 8003220:	e7b2      	b.n	8003188 <eMBPoll+0x28>
 8003222:	bf00      	nop
 8003224:	20000008 	.word	0x20000008
 8003228:	20000858 	.word	0x20000858
 800322c:	2000083c 	.word	0x2000083c
 8003230:	2000085a 	.word	0x2000085a
 8003234:	20000854 	.word	0x20000854
 8003238:	20000851 	.word	0x20000851
 800323c:	2000083a 	.word	0x2000083a
 8003240:	20000850 	.word	0x20000850
 8003244:	2000000c 	.word	0x2000000c
 8003248:	20000840 	.word	0x20000840

0800324c <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
 800324c:	4b02      	ldr	r3, [pc, #8]	; (8003258 <xMBPortEventInit+0xc>)
 800324e:	2200      	movs	r2, #0
 8003250:	701a      	strb	r2, [r3, #0]
    return TRUE;
}
 8003252:	2001      	movs	r0, #1
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	2000085d 	.word	0x2000085d

0800325c <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
 800325c:	4a03      	ldr	r2, [pc, #12]	; (800326c <xMBPortEventPost+0x10>)
 800325e:	2301      	movs	r3, #1
 8003260:	7013      	strb	r3, [r2, #0]
    eQueuedEvent = eEvent;
 8003262:	4a03      	ldr	r2, [pc, #12]	; (8003270 <xMBPortEventPost+0x14>)
 8003264:	7010      	strb	r0, [r2, #0]
    return TRUE;
}
 8003266:	4618      	mov	r0, r3
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	2000085d 	.word	0x2000085d
 8003270:	2000085c 	.word	0x2000085c

08003274 <xMBPortEventGet>:
BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
 8003274:	4a05      	ldr	r2, [pc, #20]	; (800328c <xMBPortEventGet+0x18>)
 8003276:	7813      	ldrb	r3, [r2, #0]
 8003278:	b12b      	cbz	r3, 8003286 <xMBPortEventGet+0x12>
    {
        *eEvent = eQueuedEvent;
 800327a:	4b05      	ldr	r3, [pc, #20]	; (8003290 <xMBPortEventGet+0x1c>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	7003      	strb	r3, [r0, #0]
        xEventInQueue = FALSE;
 8003280:	2300      	movs	r3, #0
 8003282:	7013      	strb	r3, [r2, #0]
        xEventHappened = TRUE;
 8003284:	2301      	movs	r3, #1
    }
    return xEventHappened;
}
 8003286:	4618      	mov	r0, r3
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	2000085d 	.word	0x2000085d
 8003290:	2000085c 	.word	0x2000085c

08003294 <vMBPortSerialEnable>:
extern UART_HandleTypeDef huart1;

/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8003294:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <vMBPortSerialEnable+0x2c>)
    /* If xRXEnable enable serial receive interrupts. If xTxENable enable
     * transmitter empty interrupts.
     */
	if (xRxEnable) {
 8003296:	b158      	cbz	r0, 80032b0 <vMBPortSerialEnable+0x1c>
	  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	6802      	ldr	r2, [r0, #0]
 800329c:	f042 0220 	orr.w	r2, r2, #32
	} else {
	  __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 80032a0:	6002      	str	r2, [r0, #0]
	}

	if (xTxEnable) {
	  __HAL_UART_ENABLE_IT(&huart1, UART_IT_TXE);
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	6813      	ldr	r3, [r2, #0]
	if (xTxEnable) {
 80032a6:	b141      	cbz	r1, 80032ba <vMBPortSerialEnable+0x26>
	  __HAL_UART_ENABLE_IT(&huart1, UART_IT_TXE);
 80032a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	} else {
	  __HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE);
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	4770      	bx	lr
	  __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	6802      	ldr	r2, [r0, #0]
 80032b4:	f022 0220 	bic.w	r2, r2, #32
 80032b8:	e7f2      	b.n	80032a0 <vMBPortSerialEnable+0xc>
	  __HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE);
 80032ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032be:	e7f5      	b.n	80032ac <vMBPortSerialEnable+0x18>
 80032c0:	200021b4 	.word	0x200021b4

080032c4 <xMBPortSerialInit>:
	/*
	  Do nothing, Initialization is handled by MX_USART1_UART_Init()
	  Fixed port, baudrate, databit and parity
	  */
	return TRUE;
}
 80032c4:	2001      	movs	r0, #1
 80032c6:	4770      	bx	lr

080032c8 <xMBPortSerialPutByte>:

BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 80032c8:	b507      	push	{r0, r1, r2, lr}
 80032ca:	a902      	add	r1, sp, #8
    /* Put a byte in the UARTs transmit buffer. This function is called
     * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
     * called. */
	return (HAL_OK == HAL_UART_Transmit(&huart1, (uint8_t*)&ucByte, 1, 10));
 80032cc:	230a      	movs	r3, #10
{
 80032ce:	f801 0d01 	strb.w	r0, [r1, #-1]!
	return (HAL_OK == HAL_UART_Transmit(&huart1, (uint8_t*)&ucByte, 1, 10));
 80032d2:	2201      	movs	r2, #1
 80032d4:	4804      	ldr	r0, [pc, #16]	; (80032e8 <xMBPortSerialPutByte+0x20>)
 80032d6:	f7ff fc6a 	bl	8002bae <HAL_UART_Transmit>
}
 80032da:	fab0 f080 	clz	r0, r0
 80032de:	0940      	lsrs	r0, r0, #5
 80032e0:	b003      	add	sp, #12
 80032e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80032e6:	bf00      	nop
 80032e8:	200021b4 	.word	0x200021b4

080032ec <xMBPortSerialGetByte>:
xMBPortSerialGetByte( CHAR * pucByte )
{
    /* Return the byte in the UARTs receive buffer. This function is called
     * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
     */
	*pucByte = (uint8_t)(huart1.Instance->RDR & (uint8_t)0x00FF);
 80032ec:	4b02      	ldr	r3, [pc, #8]	; (80032f8 <xMBPortSerialGetByte+0xc>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80032f2:	7003      	strb	r3, [r0, #0]
    return TRUE;
}
 80032f4:	2001      	movs	r0, #1
 80032f6:	4770      	bx	lr
 80032f8:	200021b4 	.word	0x200021b4

080032fc <xMBPortTimersInit>:
uint16_t downcounter = 0;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 80032fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	TIM_MasterConfigTypeDef sMasterConfig;

	htim7.Instance = TIM7;
 80032fe:	4d11      	ldr	r5, [pc, #68]	; (8003344 <xMBPortTimersInit+0x48>)
 8003300:	4b11      	ldr	r3, [pc, #68]	; (8003348 <xMBPortTimersInit+0x4c>)
 8003302:	602b      	str	r3, [r5, #0]
{
 8003304:	4606      	mov	r6, r0
	htim7.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / 1000000) - 1;
 8003306:	f7fe fec5 	bl	8002094 <HAL_RCC_GetPCLK1Freq>
 800330a:	4b10      	ldr	r3, [pc, #64]	; (800334c <xMBPortTimersInit+0x50>)
 800330c:	fbb0 f0f3 	udiv	r0, r0, r3
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim7.Init.Period = 50 - 1;
 8003310:	2331      	movs	r3, #49	; 0x31
	htim7.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / 1000000) - 1;
 8003312:	3801      	subs	r0, #1
	htim7.Init.Period = 50 - 1;
 8003314:	60eb      	str	r3, [r5, #12]

	timeout = usTim1Timerout50us;
 8003316:	4b0e      	ldr	r3, [pc, #56]	; (8003350 <xMBPortTimersInit+0x54>)
	htim7.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / 1000000) - 1;
 8003318:	6068      	str	r0, [r5, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800331a:	2400      	movs	r4, #0

	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800331c:	4628      	mov	r0, r5
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800331e:	60ac      	str	r4, [r5, #8]
	timeout = usTim1Timerout50us;
 8003320:	801e      	strh	r6, [r3, #0]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003322:	f7ff f975 	bl	8002610 <HAL_TIM_Base_Init>
 8003326:	b958      	cbnz	r0, 8003340 <xMBPortTimersInit+0x44>
	{
	  return FALSE;
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003328:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800332a:	9003      	str	r0, [sp, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800332c:	a901      	add	r1, sp, #4
 800332e:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003330:	9301      	str	r3, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003332:	f7ff f987 	bl	8002644 <HAL_TIMEx_MasterConfigSynchronization>
	  return FALSE;
 8003336:	fab0 f080 	clz	r0, r0
 800333a:	0940      	lsrs	r0, r0, #5
	{
	  return FALSE;
	}

	return TRUE;
}
 800333c:	b004      	add	sp, #16
 800333e:	bd70      	pop	{r4, r5, r6, pc}
	  return FALSE;
 8003340:	4620      	mov	r0, r4
 8003342:	e7fb      	b.n	800333c <xMBPortTimersInit+0x40>
 8003344:	20003494 	.word	0x20003494
 8003348:	40001400 	.word	0x40001400
 800334c:	000f4240 	.word	0x000f4240
 8003350:	20000860 	.word	0x20000860

08003354 <vMBPortTimersEnable>:

inline void
vMBPortTimersEnable(  )
{
	/* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
	downcounter = timeout;
 8003354:	4b03      	ldr	r3, [pc, #12]	; (8003364 <vMBPortTimersEnable+0x10>)
	HAL_TIM_Base_Start_IT(&htim7);
 8003356:	4804      	ldr	r0, [pc, #16]	; (8003368 <vMBPortTimersEnable+0x14>)
	downcounter = timeout;
 8003358:	881a      	ldrh	r2, [r3, #0]
 800335a:	4b04      	ldr	r3, [pc, #16]	; (800336c <vMBPortTimersEnable+0x18>)
 800335c:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7);
 800335e:	f7ff b80d 	b.w	800237c <HAL_TIM_Base_Start_IT>
 8003362:	bf00      	nop
 8003364:	20000860 	.word	0x20000860
 8003368:	20003494 	.word	0x20003494
 800336c:	2000085e 	.word	0x2000085e

08003370 <vMBPortTimersDisable>:

inline void
vMBPortTimersDisable(  )
{
    /* Disable any pending timers. */
	HAL_TIM_Base_Stop_IT(&htim7);
 8003370:	4801      	ldr	r0, [pc, #4]	; (8003378 <vMBPortTimersDisable+0x8>)
 8003372:	f7ff b819 	b.w	80023a8 <HAL_TIM_Base_Stop_IT>
 8003376:	bf00      	nop
 8003378:	20003494 	.word	0x20003494

0800337c <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 800337c:	b570      	push	{r4, r5, r6, lr}
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
 800337e:	23ff      	movs	r3, #255	; 0xff
    int             iIndex;

    while( usLen-- )
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8003380:	4d07      	ldr	r5, [pc, #28]	; (80033a0 <usMBCRC16+0x24>)
        ucCRCHi = aucCRCLo[iIndex];
 8003382:	4e08      	ldr	r6, [pc, #32]	; (80033a4 <usMBCRC16+0x28>)
 8003384:	4401      	add	r1, r0
    UCHAR           ucCRCHi = 0xFF;
 8003386:	461c      	mov	r4, r3
    while( usLen-- )
 8003388:	4288      	cmp	r0, r1
 800338a:	d102      	bne.n	8003392 <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
}
 800338c:	ea43 2004 	orr.w	r0, r3, r4, lsl #8
 8003390:	bd70      	pop	{r4, r5, r6, pc}
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8003392:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003396:	405a      	eors	r2, r3
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8003398:	5cab      	ldrb	r3, [r5, r2]
 800339a:	4063      	eors	r3, r4
        ucCRCHi = aucCRCLo[iIndex];
 800339c:	5cb4      	ldrb	r4, [r6, r2]
 800339e:	e7f3      	b.n	8003388 <usMBCRC16+0xc>
 80033a0:	08007680 	.word	0x08007680
 80033a4:	08007780 	.word	0x08007780

080033a8 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 80033a8:	b510      	push	{r4, lr}
 80033aa:	4614      	mov	r4, r2
 80033ac:	4608      	mov	r0, r1

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 80033ae:	2208      	movs	r2, #8
 80033b0:	4621      	mov	r1, r4
 80033b2:	f7ff ff87 	bl	80032c4 <xMBPortSerialInit>
 80033b6:	2801      	cmp	r0, #1
 80033b8:	d10c      	bne.n	80033d4 <eMBRTUInit+0x2c>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 80033ba:	f5b4 4f96 	cmp.w	r4, #19200	; 0x4b00
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 80033be:	bf97      	itett	ls
 80033c0:	4806      	ldrls	r0, [pc, #24]	; (80033dc <eMBRTUInit+0x34>)
            usTimerT35_50us = 35;       /* 1800us. */
 80033c2:	2023      	movhi	r0, #35	; 0x23
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 80033c4:	0064      	lslls	r4, r4, #1
 80033c6:	fbb0 f0f4 	udivls	r0, r0, r4
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 80033ca:	b280      	uxth	r0, r0
 80033cc:	f7ff ff96 	bl	80032fc <xMBPortTimersInit>
 80033d0:	2801      	cmp	r0, #1
 80033d2:	d001      	beq.n	80033d8 <eMBRTUInit+0x30>
        {
            eStatus = MB_EPORTERR;
 80033d4:	2003      	movs	r0, #3
 80033d6:	bd10      	pop	{r4, pc}
    eMBErrorCode    eStatus = MB_ENOERR;
 80033d8:	2000      	movs	r0, #0
        }
    }
    EXIT_CRITICAL_SECTION(  );

    return eStatus;
}
 80033da:	bd10      	pop	{r4, pc}
 80033dc:	00177fa0 	.word	0x00177fa0

080033e0 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 80033e0:	b508      	push	{r3, lr}
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 80033e2:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <eMBRTUStart+0x18>)
 80033e4:	2100      	movs	r1, #0
    vMBPortSerialEnable( TRUE, FALSE );
 80033e6:	2001      	movs	r0, #1
    eRcvState = STATE_RX_INIT;
 80033e8:	7019      	strb	r1, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 80033ea:	f7ff ff53 	bl	8003294 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );

    EXIT_CRITICAL_SECTION(  );
}
 80033ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    vMBPortTimersEnable(  );
 80033f2:	f7ff bfaf 	b.w	8003354 <vMBPortTimersEnable>
 80033f6:	bf00      	nop
 80033f8:	20000862 	.word	0x20000862

080033fc <eMBRTUStop>:

void
eMBRTUStop( void )
{
 80033fc:	b508      	push	{r3, lr}
    ENTER_CRITICAL_SECTION(  );
    vMBPortSerialEnable( FALSE, FALSE );
 80033fe:	2100      	movs	r1, #0
 8003400:	4608      	mov	r0, r1
 8003402:	f7ff ff47 	bl	8003294 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
    EXIT_CRITICAL_SECTION(  );
}
 8003406:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    vMBPortTimersDisable(  );
 800340a:	f7ff bfb1 	b.w	8003370 <vMBPortTimersDisable>
	...

08003410 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8003410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8003414:	4d13      	ldr	r5, [pc, #76]	; (8003464 <eMBRTUReceive+0x54>)
 8003416:	882b      	ldrh	r3, [r5, #0]
 8003418:	b29b      	uxth	r3, r3
 800341a:	2bff      	cmp	r3, #255	; 0xff
{
 800341c:	4680      	mov	r8, r0
 800341e:	460e      	mov	r6, r1
 8003420:	4617      	mov	r7, r2
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8003422:	d905      	bls.n	8003430 <eMBRTUReceive+0x20>
 8003424:	4b10      	ldr	r3, [pc, #64]	; (8003468 <eMBRTUReceive+0x58>)
 8003426:	4a11      	ldr	r2, [pc, #68]	; (800346c <eMBRTUReceive+0x5c>)
 8003428:	4811      	ldr	r0, [pc, #68]	; (8003470 <eMBRTUReceive+0x60>)
 800342a:	219c      	movs	r1, #156	; 0x9c
 800342c:	f002 f804 	bl	8005438 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8003430:	882b      	ldrh	r3, [r5, #0]
 8003432:	b29b      	uxth	r3, r3
 8003434:	2b03      	cmp	r3, #3
 8003436:	d802      	bhi.n	800343e <eMBRTUReceive+0x2e>
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
        xFrameReceived = TRUE;
    }
    else
    {
        eStatus = MB_EIO;
 8003438:	2005      	movs	r0, #5
 800343a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 800343e:	8829      	ldrh	r1, [r5, #0]
 8003440:	4c0c      	ldr	r4, [pc, #48]	; (8003474 <eMBRTUReceive+0x64>)
 8003442:	b289      	uxth	r1, r1
 8003444:	4620      	mov	r0, r4
 8003446:	f7ff ff99 	bl	800337c <usMBCRC16>
 800344a:	2800      	cmp	r0, #0
 800344c:	d1f4      	bne.n	8003438 <eMBRTUReceive+0x28>
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 800344e:	f814 2b01 	ldrb.w	r2, [r4], #1
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8003452:	8829      	ldrh	r1, [r5, #0]
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8003454:	f888 2000 	strb.w	r2, [r8]
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8003458:	3903      	subs	r1, #3
 800345a:	8039      	strh	r1, [r7, #0]
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 800345c:	6034      	str	r4, [r6, #0]
    }

    EXIT_CRITICAL_SECTION(  );
    return eStatus;
}
 800345e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003462:	bf00      	nop
 8003464:	20000868 	.word	0x20000868
 8003468:	080078c7 	.word	0x080078c7
 800346c:	08007880 	.word	0x08007880
 8003470:	080078ec 	.word	0x080078ec
 8003474:	20001fec 	.word	0x20001fec

08003478 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8003478:	b538      	push	{r3, r4, r5, lr}
 800347a:	4603      	mov	r3, r0

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 800347c:	4817      	ldr	r0, [pc, #92]	; (80034dc <eMBRTUSend+0x64>)
 800347e:	7805      	ldrb	r5, [r0, #0]
 8003480:	b2ed      	uxtb	r5, r5
 8003482:	2d01      	cmp	r5, #1
 8003484:	d127      	bne.n	80034d6 <eMBRTUSend+0x5e>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8003486:	4c16      	ldr	r4, [pc, #88]	; (80034e0 <eMBRTUSend+0x68>)
 8003488:	1e48      	subs	r0, r1, #1
 800348a:	6020      	str	r0, [r4, #0]
        usSndBufferCount = 1;
 800348c:	4c15      	ldr	r4, [pc, #84]	; (80034e4 <eMBRTUSend+0x6c>)
 800348e:	8025      	strh	r5, [r4, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8003490:	f801 3c01 	strb.w	r3, [r1, #-1]
        usSndBufferCount += usLength;
 8003494:	8823      	ldrh	r3, [r4, #0]
 8003496:	fa12 f283 	uxtah	r2, r2, r3
 800349a:	b292      	uxth	r2, r2
 800349c:	8022      	strh	r2, [r4, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 800349e:	8821      	ldrh	r1, [r4, #0]
 80034a0:	b289      	uxth	r1, r1
 80034a2:	f7ff ff6b 	bl	800337c <usMBCRC16>
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 80034a6:	8823      	ldrh	r3, [r4, #0]
 80034a8:	490f      	ldr	r1, [pc, #60]	; (80034e8 <eMBRTUSend+0x70>)
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	b292      	uxth	r2, r2
 80034b0:	8022      	strh	r2, [r4, #0]
 80034b2:	b2c2      	uxtb	r2, r0
 80034b4:	54ca      	strb	r2, [r1, r3]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 80034b6:	8823      	ldrh	r3, [r4, #0]
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	b292      	uxth	r2, r2
 80034be:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80034c2:	8022      	strh	r2, [r4, #0]
 80034c4:	54c8      	strb	r0, [r1, r3]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 80034c6:	4b09      	ldr	r3, [pc, #36]	; (80034ec <eMBRTUSend+0x74>)
        vMBPortSerialEnable( FALSE, TRUE );
 80034c8:	4629      	mov	r1, r5
 80034ca:	2000      	movs	r0, #0
        eSndState = STATE_TX_XMIT;
 80034cc:	701d      	strb	r5, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 80034ce:	f7ff fee1 	bl	8003294 <vMBPortSerialEnable>
    eMBErrorCode    eStatus = MB_ENOERR;
 80034d2:	2000      	movs	r0, #0
 80034d4:	bd38      	pop	{r3, r4, r5, pc}
    }
    else
    {
        eStatus = MB_EIO;
 80034d6:	2005      	movs	r0, #5
    }
    EXIT_CRITICAL_SECTION(  );
    return eStatus;
}
 80034d8:	bd38      	pop	{r3, r4, r5, pc}
 80034da:	bf00      	nop
 80034dc:	20000862 	.word	0x20000862
 80034e0:	20000864 	.word	0x20000864
 80034e4:	2000086a 	.word	0x2000086a
 80034e8:	20001fec 	.word	0x20001fec
 80034ec:	20000863 	.word	0x20000863

080034f0 <xMBRTUReceiveFSM>:
xMBRTUReceiveFSM( void )
{
    BOOL            xTaskNeedSwitch = FALSE;
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 80034f0:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <xMBRTUReceiveFSM+0x78>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
{
 80034f4:	b507      	push	{r0, r1, r2, lr}
    assert( eSndState == STATE_TX_IDLE );
 80034f6:	b12b      	cbz	r3, 8003504 <xMBRTUReceiveFSM+0x14>
 80034f8:	4b1c      	ldr	r3, [pc, #112]	; (800356c <xMBRTUReceiveFSM+0x7c>)
 80034fa:	4a1d      	ldr	r2, [pc, #116]	; (8003570 <xMBRTUReceiveFSM+0x80>)
 80034fc:	481d      	ldr	r0, [pc, #116]	; (8003574 <xMBRTUReceiveFSM+0x84>)
 80034fe:	21e6      	movs	r1, #230	; 0xe6
 8003500:	f001 ff9a 	bl	8005438 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 8003504:	f10d 0007 	add.w	r0, sp, #7
 8003508:	f7ff fef0 	bl	80032ec <xMBPortSerialGetByte>

    switch ( eRcvState )
 800350c:	4b1a      	ldr	r3, [pc, #104]	; (8003578 <xMBRTUReceiveFSM+0x88>)
 800350e:	781a      	ldrb	r2, [r3, #0]
 8003510:	2a03      	cmp	r2, #3
 8003512:	d822      	bhi.n	800355a <xMBRTUReceiveFSM+0x6a>
 8003514:	e8df f002 	tbb	[pc, r2]
 8003518:	1f11021f 	.word	0x1f11021f
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 800351c:	4917      	ldr	r1, [pc, #92]	; (800357c <xMBRTUReceiveFSM+0x8c>)
 800351e:	2200      	movs	r2, #0
 8003520:	800a      	strh	r2, [r1, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 8003522:	880a      	ldrh	r2, [r1, #0]
 8003524:	b292      	uxth	r2, r2
 8003526:	1c50      	adds	r0, r2, #1
 8003528:	b280      	uxth	r0, r0
 800352a:	8008      	strh	r0, [r1, #0]
 800352c:	4914      	ldr	r1, [pc, #80]	; (8003580 <xMBRTUReceiveFSM+0x90>)
 800352e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003532:	5488      	strb	r0, [r1, r2]
        eRcvState = STATE_RX_RCV;
 8003534:	2202      	movs	r2, #2
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 8003536:	701a      	strb	r2, [r3, #0]
 8003538:	e00d      	b.n	8003556 <xMBRTUReceiveFSM+0x66>
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 800353a:	4a10      	ldr	r2, [pc, #64]	; (800357c <xMBRTUReceiveFSM+0x8c>)
 800353c:	8811      	ldrh	r1, [r2, #0]
 800353e:	b289      	uxth	r1, r1
 8003540:	29ff      	cmp	r1, #255	; 0xff
 8003542:	d80e      	bhi.n	8003562 <xMBRTUReceiveFSM+0x72>
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 8003544:	8813      	ldrh	r3, [r2, #0]
 8003546:	b29b      	uxth	r3, r3
 8003548:	1c59      	adds	r1, r3, #1
 800354a:	b289      	uxth	r1, r1
 800354c:	8011      	strh	r1, [r2, #0]
 800354e:	4a0c      	ldr	r2, [pc, #48]	; (8003580 <xMBRTUReceiveFSM+0x90>)
 8003550:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8003554:	54d1      	strb	r1, [r2, r3]
        }
        vMBPortTimersEnable(  );
 8003556:	f7ff fefd 	bl	8003354 <vMBPortTimersEnable>
        break;
    }
    return xTaskNeedSwitch;
}
 800355a:	2000      	movs	r0, #0
 800355c:	b003      	add	sp, #12
 800355e:	f85d fb04 	ldr.w	pc, [sp], #4
            eRcvState = STATE_RX_ERROR;
 8003562:	2203      	movs	r2, #3
 8003564:	e7e7      	b.n	8003536 <xMBRTUReceiveFSM+0x46>
 8003566:	bf00      	nop
 8003568:	20000863 	.word	0x20000863
 800356c:	0800790d 	.word	0x0800790d
 8003570:	0800788e 	.word	0x0800788e
 8003574:	080078ec 	.word	0x080078ec
 8003578:	20000862 	.word	0x20000862
 800357c:	20000868 	.word	0x20000868
 8003580:	20001fec 	.word	0x20001fec

08003584 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8003584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BOOL            xNeedPoll = FALSE;

    assert( eRcvState == STATE_RX_IDLE );
 8003586:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <xMBRTUTransmitFSM+0x6c>)
 8003588:	7818      	ldrb	r0, [r3, #0]
 800358a:	b2c0      	uxtb	r0, r0
 800358c:	2801      	cmp	r0, #1
 800358e:	d006      	beq.n	800359e <xMBRTUTransmitFSM+0x1a>
 8003590:	4b18      	ldr	r3, [pc, #96]	; (80035f4 <xMBRTUTransmitFSM+0x70>)
 8003592:	4a19      	ldr	r2, [pc, #100]	; (80035f8 <xMBRTUTransmitFSM+0x74>)
 8003594:	4819      	ldr	r0, [pc, #100]	; (80035fc <xMBRTUTransmitFSM+0x78>)
 8003596:	f240 1121 	movw	r1, #289	; 0x121
 800359a:	f001 ff4d 	bl	8005438 <__assert_func>

    switch ( eSndState )
 800359e:	4f18      	ldr	r7, [pc, #96]	; (8003600 <xMBRTUTransmitFSM+0x7c>)
 80035a0:	783b      	ldrb	r3, [r7, #0]
 80035a2:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 80035a6:	b11b      	cbz	r3, 80035b0 <xMBRTUTransmitFSM+0x2c>
 80035a8:	2e01      	cmp	r6, #1
 80035aa:	d005      	beq.n	80035b8 <xMBRTUTransmitFSM+0x34>
    BOOL            xNeedPoll = FALSE;
 80035ac:	2500      	movs	r5, #0
 80035ae:	e01d      	b.n	80035ec <xMBRTUTransmitFSM+0x68>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 80035b0:	4631      	mov	r1, r6
 80035b2:	f7ff fe6f 	bl	8003294 <vMBPortSerialEnable>
 80035b6:	e7f9      	b.n	80035ac <xMBRTUTransmitFSM+0x28>
        break;

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 80035b8:	4d12      	ldr	r5, [pc, #72]	; (8003604 <xMBRTUTransmitFSM+0x80>)
 80035ba:	882c      	ldrh	r4, [r5, #0]
 80035bc:	b2a4      	uxth	r4, r4
 80035be:	b164      	cbz	r4, 80035da <xMBRTUTransmitFSM+0x56>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 80035c0:	4c11      	ldr	r4, [pc, #68]	; (8003608 <xMBRTUTransmitFSM+0x84>)
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	7818      	ldrb	r0, [r3, #0]
 80035c6:	f7ff fe7f 	bl	80032c8 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	3301      	adds	r3, #1
 80035ce:	6023      	str	r3, [r4, #0]
            usSndBufferCount--;
 80035d0:	882b      	ldrh	r3, [r5, #0]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	802b      	strh	r3, [r5, #0]
 80035d8:	e7e8      	b.n	80035ac <xMBRTUTransmitFSM+0x28>
        }
        else
        {
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 80035da:	2003      	movs	r0, #3
 80035dc:	f7ff fe3e 	bl	800325c <xMBPortEventPost>
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
 80035e0:	4621      	mov	r1, r4
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 80035e2:	4605      	mov	r5, r0
            vMBPortSerialEnable( TRUE, FALSE );
 80035e4:	4630      	mov	r0, r6
 80035e6:	f7ff fe55 	bl	8003294 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 80035ea:	703c      	strb	r4, [r7, #0]
        }
        break;
    }

    return xNeedPoll;
}
 80035ec:	4628      	mov	r0, r5
 80035ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035f0:	20000862 	.word	0x20000862
 80035f4:	0800798b 	.word	0x0800798b
 80035f8:	0800789f 	.word	0x0800789f
 80035fc:	080078ec 	.word	0x080078ec
 8003600:	20000863 	.word	0x20000863
 8003604:	2000086a 	.word	0x2000086a
 8003608:	20000864 	.word	0x20000864

0800360c <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 800360c:	b538      	push	{r3, r4, r5, lr}
    BOOL            xNeedPoll = FALSE;

    switch ( eRcvState )
 800360e:	4b14      	ldr	r3, [pc, #80]	; (8003660 <xMBRTUTimerT35Expired+0x54>)
 8003610:	7818      	ldrb	r0, [r3, #0]
 8003612:	b2c0      	uxtb	r0, r0
 8003614:	2802      	cmp	r0, #2
 8003616:	461d      	mov	r5, r3
 8003618:	d00b      	beq.n	8003632 <xMBRTUTimerT35Expired+0x26>
 800361a:	2803      	cmp	r0, #3
 800361c:	d01d      	beq.n	800365a <xMBRTUTimerT35Expired+0x4e>
 800361e:	b950      	cbnz	r0, 8003636 <xMBRTUTimerT35Expired+0x2a>
        break;

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8003620:	f7ff fe1c 	bl	800325c <xMBPortEventPost>
 8003624:	4604      	mov	r4, r0
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 8003626:	f7ff fea3 	bl	8003370 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 800362a:	2301      	movs	r3, #1
 800362c:	702b      	strb	r3, [r5, #0]

    return xNeedPoll;
}
 800362e:	4620      	mov	r0, r4
 8003630:	bd38      	pop	{r3, r4, r5, pc}
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8003632:	2001      	movs	r0, #1
 8003634:	e7f4      	b.n	8003620 <xMBRTUTimerT35Expired+0x14>
        assert( ( eRcvState == STATE_RX_INIT ) ||
 8003636:	781a      	ldrb	r2, [r3, #0]
 8003638:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800363c:	2a00      	cmp	r2, #0
 800363e:	d0f2      	beq.n	8003626 <xMBRTUTimerT35Expired+0x1a>
 8003640:	781a      	ldrb	r2, [r3, #0]
 8003642:	2a02      	cmp	r2, #2
 8003644:	d009      	beq.n	800365a <xMBRTUTimerT35Expired+0x4e>
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b03      	cmp	r3, #3
 800364a:	d006      	beq.n	800365a <xMBRTUTimerT35Expired+0x4e>
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <xMBRTUTimerT35Expired+0x58>)
 800364e:	4a06      	ldr	r2, [pc, #24]	; (8003668 <xMBRTUTimerT35Expired+0x5c>)
 8003650:	4806      	ldr	r0, [pc, #24]	; (800366c <xMBRTUTimerT35Expired+0x60>)
 8003652:	f240 115b 	movw	r1, #347	; 0x15b
 8003656:	f001 feef 	bl	8005438 <__assert_func>
    BOOL            xNeedPoll = FALSE;
 800365a:	2400      	movs	r4, #0
 800365c:	e7e3      	b.n	8003626 <xMBRTUTimerT35Expired+0x1a>
 800365e:	bf00      	nop
 8003660:	20000862 	.word	0x20000862
 8003664:	08007928 	.word	0x08007928
 8003668:	080078b1 	.word	0x080078b1
 800366c:	080078ec 	.word	0x080078ec

08003670 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003670:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8003672:	f000 fb5f 	bl	8003d34 <vTaskStartScheduler>
  
  return osOK;
}
 8003676:	2000      	movs	r0, #0
 8003678:	bd08      	pop	{r3, pc}

0800367a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800367a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800367c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8003680:	6986      	ldr	r6, [r0, #24]
 8003682:	6902      	ldr	r2, [r0, #16]
{
 8003684:	460b      	mov	r3, r1
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003686:	e890 0022 	ldmia.w	r0, {r1, r5}
  if (priority != osPriorityError) {
 800368a:	2c84      	cmp	r4, #132	; 0x84
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800368c:	9602      	str	r6, [sp, #8]
 800368e:	6940      	ldr	r0, [r0, #20]
 8003690:	9001      	str	r0, [sp, #4]
    fpriority += (priority - osPriorityIdle);
 8003692:	bf14      	ite	ne
 8003694:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003696:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003698:	9400      	str	r4, [sp, #0]
 800369a:	4628      	mov	r0, r5
 800369c:	f000 fa5c 	bl	8003b58 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 80036a0:	b004      	add	sp, #16
 80036a2:	bd70      	pop	{r4, r5, r6, pc}

080036a4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80036a4:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80036a6:	2800      	cmp	r0, #0
 80036a8:	bf08      	it	eq
 80036aa:	2001      	moveq	r0, #1
 80036ac:	f000 fc92 	bl	8003fd4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80036b0:	2000      	movs	r0, #0
 80036b2:	bd08      	pop	{r3, pc}

080036b4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036b4:	f100 0308 	add.w	r3, r0, #8
 80036b8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036be:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036c0:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036c2:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036c4:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036c6:	6003      	str	r3, [r0, #0]
 80036c8:	4770      	bx	lr

080036ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	6103      	str	r3, [r0, #16]
 80036ce:	4770      	bx	lr

080036d0 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80036d0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036d2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036dc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80036de:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80036e0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80036e2:	3301      	adds	r3, #1
 80036e4:	6003      	str	r3, [r0, #0]
 80036e6:	4770      	bx	lr

080036e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036e8:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036ea:	1c53      	adds	r3, r2, #1
{
 80036ec:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80036ee:	d10a      	bne.n	8003706 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036f0:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036f6:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036f8:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80036fa:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80036fc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80036fe:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003700:	3301      	adds	r3, #1
 8003702:	6003      	str	r3, [r0, #0]
 8003704:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003706:	f100 0308 	add.w	r3, r0, #8
 800370a:	685c      	ldr	r4, [r3, #4]
 800370c:	6825      	ldr	r5, [r4, #0]
 800370e:	42aa      	cmp	r2, r5
 8003710:	d3ef      	bcc.n	80036f2 <vListInsert+0xa>
 8003712:	4623      	mov	r3, r4
 8003714:	e7f9      	b.n	800370a <vListInsert+0x22>

08003716 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003716:	6841      	ldr	r1, [r0, #4]
 8003718:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800371a:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800371c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800371e:	6882      	ldr	r2, [r0, #8]
 8003720:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003722:	6859      	ldr	r1, [r3, #4]
 8003724:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003726:	bf08      	it	eq
 8003728:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800372a:	2200      	movs	r2, #0
 800372c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	3a01      	subs	r2, #1
 8003732:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003734:	6818      	ldr	r0, [r3, #0]
}
 8003736:	4770      	bx	lr

08003738 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003738:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800373e:	4b0d      	ldr	r3, [pc, #52]	; (8003774 <prvTaskExitError+0x3c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3301      	adds	r3, #1
 8003744:	d008      	beq.n	8003758 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374a:	f383 8811 	msr	BASEPRI, r3
 800374e:	f3bf 8f6f 	isb	sy
 8003752:	f3bf 8f4f 	dsb	sy
 8003756:	e7fe      	b.n	8003756 <prvTaskExitError+0x1e>
 8003758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003768:	9b01      	ldr	r3, [sp, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0fc      	beq.n	8003768 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800376e:	b002      	add	sp, #8
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	2000008c 	.word	0x2000008c

08003778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003778:	4808      	ldr	r0, [pc, #32]	; (800379c <prvPortStartFirstTask+0x24>)
 800377a:	6800      	ldr	r0, [r0, #0]
 800377c:	6800      	ldr	r0, [r0, #0]
 800377e:	f380 8808 	msr	MSP, r0
 8003782:	f04f 0000 	mov.w	r0, #0
 8003786:	f380 8814 	msr	CONTROL, r0
 800378a:	b662      	cpsie	i
 800378c:	b661      	cpsie	f
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	f3bf 8f6f 	isb	sy
 8003796:	df00      	svc	0
 8003798:	bf00      	nop
 800379a:	0000      	.short	0x0000
 800379c:	e000ed08 	.word	0xe000ed08

080037a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80037a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80037b0 <vPortEnableVFP+0x10>
 80037a4:	6801      	ldr	r1, [r0, #0]
 80037a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80037aa:	6001      	str	r1, [r0, #0]
 80037ac:	4770      	bx	lr
 80037ae:	0000      	.short	0x0000
 80037b0:	e000ed88 	.word	0xe000ed88

080037b4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80037b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037b8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80037bc:	4b07      	ldr	r3, [pc, #28]	; (80037dc <pxPortInitialiseStack+0x28>)
 80037be:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80037c2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80037c6:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80037ca:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80037ce:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80037d2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80037d6:	3844      	subs	r0, #68	; 0x44
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	08003739 	.word	0x08003739

080037e0 <SVC_Handler>:
	__asm volatile (
 80037e0:	4b07      	ldr	r3, [pc, #28]	; (8003800 <pxCurrentTCBConst2>)
 80037e2:	6819      	ldr	r1, [r3, #0]
 80037e4:	6808      	ldr	r0, [r1, #0]
 80037e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ea:	f380 8809 	msr	PSP, r0
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f04f 0000 	mov.w	r0, #0
 80037f6:	f380 8811 	msr	BASEPRI, r0
 80037fa:	4770      	bx	lr
 80037fc:	f3af 8000 	nop.w

08003800 <pxCurrentTCBConst2>:
 8003800:	20000874 	.word	0x20000874

08003804 <vPortEnterCritical>:
 8003804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003808:	f383 8811 	msr	BASEPRI, r3
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8003814:	4a0a      	ldr	r2, [pc, #40]	; (8003840 <vPortEnterCritical+0x3c>)
 8003816:	6813      	ldr	r3, [r2, #0]
 8003818:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800381a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800381c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800381e:	d10d      	bne.n	800383c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003820:	4b08      	ldr	r3, [pc, #32]	; (8003844 <vPortEnterCritical+0x40>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003828:	d008      	beq.n	800383c <vPortEnterCritical+0x38>
 800382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	e7fe      	b.n	800383a <vPortEnterCritical+0x36>
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	2000008c 	.word	0x2000008c
 8003844:	e000ed04 	.word	0xe000ed04

08003848 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8003848:	4a08      	ldr	r2, [pc, #32]	; (800386c <vPortExitCritical+0x24>)
 800384a:	6813      	ldr	r3, [r2, #0]
 800384c:	b943      	cbnz	r3, 8003860 <vPortExitCritical+0x18>
 800384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003852:	f383 8811 	msr	BASEPRI, r3
 8003856:	f3bf 8f6f 	isb	sy
 800385a:	f3bf 8f4f 	dsb	sy
 800385e:	e7fe      	b.n	800385e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003860:	3b01      	subs	r3, #1
 8003862:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003864:	b90b      	cbnz	r3, 800386a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003866:	f383 8811 	msr	BASEPRI, r3
 800386a:	4770      	bx	lr
 800386c:	2000008c 	.word	0x2000008c

08003870 <PendSV_Handler>:
	__asm volatile
 8003870:	f3ef 8009 	mrs	r0, PSP
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <pxCurrentTCBConst>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	f01e 0f10 	tst.w	lr, #16
 8003880:	bf08      	it	eq
 8003882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800388a:	6010      	str	r0, [r2, #0]
 800388c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003890:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003894:	f380 8811 	msr	BASEPRI, r0
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	f3bf 8f6f 	isb	sy
 80038a0:	f000 fbbc 	bl	800401c <vTaskSwitchContext>
 80038a4:	f04f 0000 	mov.w	r0, #0
 80038a8:	f380 8811 	msr	BASEPRI, r0
 80038ac:	bc09      	pop	{r0, r3}
 80038ae:	6819      	ldr	r1, [r3, #0]
 80038b0:	6808      	ldr	r0, [r1, #0]
 80038b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b6:	f01e 0f10 	tst.w	lr, #16
 80038ba:	bf08      	it	eq
 80038bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80038c0:	f380 8809 	msr	PSP, r0
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	f3af 8000 	nop.w

080038d0 <pxCurrentTCBConst>:
 80038d0:	20000874 	.word	0x20000874

080038d4 <xPortSysTickHandler>:
{
 80038d4:	b508      	push	{r3, lr}
	__asm volatile
 80038d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038da:	f383 8811 	msr	BASEPRI, r3
 80038de:	f3bf 8f6f 	isb	sy
 80038e2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80038e6:	f000 fa6b 	bl	8003dc0 <xTaskIncrementTick>
 80038ea:	b118      	cbz	r0, 80038f4 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80038ec:	4b03      	ldr	r3, [pc, #12]	; (80038fc <xPortSysTickHandler+0x28>)
 80038ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038f2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80038f4:	2300      	movs	r3, #0
 80038f6:	f383 8811 	msr	BASEPRI, r3
 80038fa:	bd08      	pop	{r3, pc}
 80038fc:	e000ed04 	.word	0xe000ed04

08003900 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003900:	4a08      	ldr	r2, [pc, #32]	; (8003924 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003902:	4909      	ldr	r1, [pc, #36]	; (8003928 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003904:	2300      	movs	r3, #0
 8003906:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003908:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800390a:	4b08      	ldr	r3, [pc, #32]	; (800392c <vPortSetupTimerInterrupt+0x2c>)
 800390c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	fbb3 f3f1 	udiv	r3, r3, r1
 8003916:	4906      	ldr	r1, [pc, #24]	; (8003930 <vPortSetupTimerInterrupt+0x30>)
 8003918:	3b01      	subs	r3, #1
 800391a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800391c:	2307      	movs	r3, #7
 800391e:	6013      	str	r3, [r2, #0]
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	e000e010 	.word	0xe000e010
 8003928:	e000e018 	.word	0xe000e018
 800392c:	20000188 	.word	0x20000188
 8003930:	e000e014 	.word	0xe000e014

08003934 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003934:	4b39      	ldr	r3, [pc, #228]	; (8003a1c <xPortStartScheduler+0xe8>)
 8003936:	4a3a      	ldr	r2, [pc, #232]	; (8003a20 <xPortStartScheduler+0xec>)
{
 8003938:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800393a:	6819      	ldr	r1, [r3, #0]
 800393c:	4291      	cmp	r1, r2
 800393e:	d108      	bne.n	8003952 <xPortStartScheduler+0x1e>
	__asm volatile
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	e7fe      	b.n	8003950 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	4b33      	ldr	r3, [pc, #204]	; (8003a24 <xPortStartScheduler+0xf0>)
 8003956:	429a      	cmp	r2, r3
 8003958:	d108      	bne.n	800396c <xPortStartScheduler+0x38>
 800395a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395e:	f383 8811 	msr	BASEPRI, r3
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	e7fe      	b.n	800396a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800396c:	4b2e      	ldr	r3, [pc, #184]	; (8003a28 <xPortStartScheduler+0xf4>)
 800396e:	781a      	ldrb	r2, [r3, #0]
 8003970:	b2d2      	uxtb	r2, r2
 8003972:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003974:	22ff      	movs	r2, #255	; 0xff
 8003976:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003978:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800397a:	4a2c      	ldr	r2, [pc, #176]	; (8003a2c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800397c:	b2db      	uxtb	r3, r3
 800397e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003982:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003986:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800398a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800398c:	4b28      	ldr	r3, [pc, #160]	; (8003a30 <xPortStartScheduler+0xfc>)
 800398e:	2207      	movs	r2, #7
 8003990:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003992:	2100      	movs	r1, #0
 8003994:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003998:	0600      	lsls	r0, r0, #24
 800399a:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 800399e:	d40d      	bmi.n	80039bc <xPortStartScheduler+0x88>
 80039a0:	b101      	cbz	r1, 80039a4 <xPortStartScheduler+0x70>
 80039a2:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	2a03      	cmp	r2, #3
 80039a8:	d011      	beq.n	80039ce <xPortStartScheduler+0x9a>
 80039aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ae:	f383 8811 	msr	BASEPRI, r3
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	e7fe      	b.n	80039ba <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039bc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80039c0:	0052      	lsls	r2, r2, #1
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	f88d 2003 	strb.w	r2, [sp, #3]
 80039c8:	2101      	movs	r1, #1
 80039ca:	4622      	mov	r2, r4
 80039cc:	e7e2      	b.n	8003994 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80039ce:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80039d0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80039d4:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80039d6:	9b01      	ldr	r3, [sp, #4]
 80039d8:	4a13      	ldr	r2, [pc, #76]	; (8003a28 <xPortStartScheduler+0xf4>)
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80039de:	4b15      	ldr	r3, [pc, #84]	; (8003a34 <xPortStartScheduler+0x100>)
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80039e6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80039ee:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80039f0:	f7ff ff86 	bl	8003900 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80039f4:	4b10      	ldr	r3, [pc, #64]	; (8003a38 <xPortStartScheduler+0x104>)
 80039f6:	2400      	movs	r4, #0
 80039f8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80039fa:	f7ff fed1 	bl	80037a0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80039fe:	4a0f      	ldr	r2, [pc, #60]	; (8003a3c <xPortStartScheduler+0x108>)
 8003a00:	6813      	ldr	r3, [r2, #0]
 8003a02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003a06:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8003a08:	f7ff feb6 	bl	8003778 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8003a0c:	f000 fb06 	bl	800401c <vTaskSwitchContext>
	prvTaskExitError();
 8003a10:	f7ff fe92 	bl	8003738 <prvTaskExitError>
}
 8003a14:	4620      	mov	r0, r4
 8003a16:	b002      	add	sp, #8
 8003a18:	bd10      	pop	{r4, pc}
 8003a1a:	bf00      	nop
 8003a1c:	e000ed00 	.word	0xe000ed00
 8003a20:	410fc271 	.word	0x410fc271
 8003a24:	410fc270 	.word	0x410fc270
 8003a28:	e000e400 	.word	0xe000e400
 8003a2c:	2000086c 	.word	0x2000086c
 8003a30:	20000870 	.word	0x20000870
 8003a34:	e000ed20 	.word	0xe000ed20
 8003a38:	2000008c 	.word	0x2000008c
 8003a3c:	e000ef34 	.word	0xe000ef34

08003a40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a40:	b580      	push	{r7, lr}
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 8003a42:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8003aa4 <prvIdleTask+0x64>
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003a46:	4f13      	ldr	r7, [pc, #76]	; (8003a94 <prvIdleTask+0x54>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a48:	4c13      	ldr	r4, [pc, #76]	; (8003a98 <prvIdleTask+0x58>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
				--uxCurrentNumberOfTasks;
 8003a4a:	4d14      	ldr	r5, [pc, #80]	; (8003a9c <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a4c:	6823      	ldr	r3, [r4, #0]
 8003a4e:	b963      	cbnz	r3, 8003a6a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a50:	4b13      	ldr	r3, [pc, #76]	; (8003aa0 <prvIdleTask+0x60>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d9f8      	bls.n	8003a4a <prvIdleTask+0xa>
				taskYIELD();
 8003a58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003a5c:	f8c8 3000 	str.w	r3, [r8]
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	f3bf 8f6f 	isb	sy
 8003a68:	e7ee      	b.n	8003a48 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8003a6a:	f7ff fecb 	bl	8003804 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a72:	1d30      	adds	r0, r6, #4
 8003a74:	f7ff fe4f 	bl	8003716 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a78:	682b      	ldr	r3, [r5, #0]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a7e:	6823      	ldr	r3, [r4, #0]
 8003a80:	3b01      	subs	r3, #1
 8003a82:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
 8003a84:	f7ff fee0 	bl	8003848 <vPortExitCritical>

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003a88:	f106 004c 	add.w	r0, r6, #76	; 0x4c
 8003a8c:	f002 f864 	bl	8005b58 <_reclaim_reent>
 8003a90:	e7dc      	b.n	8003a4c <prvIdleTask+0xc>
 8003a92:	bf00      	nop
 8003a94:	20000980 	.word	0x20000980
 8003a98:	20000910 	.word	0x20000910
 8003a9c:	2000090c 	.word	0x2000090c
 8003aa0:	20000880 	.word	0x20000880
 8003aa4:	e000ed04 	.word	0xe000ed04

08003aa8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aa8:	4a06      	ldr	r2, [pc, #24]	; (8003ac4 <prvResetNextTaskUnblockTime+0x1c>)
 8003aaa:	6813      	ldr	r3, [r2, #0]
 8003aac:	6819      	ldr	r1, [r3, #0]
 8003aae:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <prvResetNextTaskUnblockTime+0x20>)
 8003ab0:	b919      	cbnz	r1, 8003aba <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ab2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003abe:	68d2      	ldr	r2, [r2, #12]
 8003ac0:	6852      	ldr	r2, [r2, #4]
 8003ac2:	e7f8      	b.n	8003ab6 <prvResetNextTaskUnblockTime+0xe>
 8003ac4:	20000878 	.word	0x20000878
 8003ac8:	2000094c 	.word	0x2000094c

08003acc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ace:	4b1b      	ldr	r3, [pc, #108]	; (8003b3c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ad0:	4e1b      	ldr	r6, [pc, #108]	; (8003b40 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8003ad2:	681d      	ldr	r5, [r3, #0]
{
 8003ad4:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ad6:	6830      	ldr	r0, [r6, #0]
 8003ad8:	3004      	adds	r0, #4
{
 8003ada:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003adc:	f7ff fe1b 	bl	8003716 <uxListRemove>
 8003ae0:	4633      	mov	r3, r6
 8003ae2:	b940      	cbnz	r0, 8003af6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003ae4:	6831      	ldr	r1, [r6, #0]
 8003ae6:	4e17      	ldr	r6, [pc, #92]	; (8003b44 <prvAddCurrentTaskToDelayedList+0x78>)
 8003ae8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003aea:	6832      	ldr	r2, [r6, #0]
 8003aec:	2001      	movs	r0, #1
 8003aee:	4088      	lsls	r0, r1
 8003af0:	ea22 0200 	bic.w	r2, r2, r0
 8003af4:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003af6:	1c62      	adds	r2, r4, #1
 8003af8:	d107      	bne.n	8003b0a <prvAddCurrentTaskToDelayedList+0x3e>
 8003afa:	b137      	cbz	r7, 8003b0a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003afc:	6819      	ldr	r1, [r3, #0]
 8003afe:	4812      	ldr	r0, [pc, #72]	; (8003b48 <prvAddCurrentTaskToDelayedList+0x7c>)
 8003b00:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b06:	f7ff bde3 	b.w	80036d0 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b0a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b0c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8003b0e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b10:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8003b12:	d907      	bls.n	8003b24 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b14:	4a0d      	ldr	r2, [pc, #52]	; (8003b4c <prvAddCurrentTaskToDelayedList+0x80>)
 8003b16:	6810      	ldr	r0, [r2, #0]
 8003b18:	6819      	ldr	r1, [r3, #0]
}
 8003b1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b1e:	3104      	adds	r1, #4
 8003b20:	f7ff bde2 	b.w	80036e8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b24:	4a0a      	ldr	r2, [pc, #40]	; (8003b50 <prvAddCurrentTaskToDelayedList+0x84>)
 8003b26:	6810      	ldr	r0, [r2, #0]
 8003b28:	6819      	ldr	r1, [r3, #0]
 8003b2a:	3104      	adds	r1, #4
 8003b2c:	f7ff fddc 	bl	80036e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b30:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <prvAddCurrentTaskToDelayedList+0x88>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8003b36:	bf38      	it	cc
 8003b38:	601c      	strcc	r4, [r3, #0]
 8003b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b3c:	20000994 	.word	0x20000994
 8003b40:	20000874 	.word	0x20000874
 8003b44:	20000920 	.word	0x20000920
 8003b48:	2000096c 	.word	0x2000096c
 8003b4c:	2000087c 	.word	0x2000087c
 8003b50:	20000878 	.word	0x20000878
 8003b54:	2000094c 	.word	0x2000094c

08003b58 <xTaskCreateStatic>:
	{
 8003b58:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b5c:	4680      	mov	r8, r0
 8003b5e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003b60:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003b62:	4699      	mov	r9, r3
		configASSERT( puxStackBuffer != NULL );
 8003b64:	b940      	cbnz	r0, 8003b78 <xTaskCreateStatic+0x20>
 8003b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	e7fe      	b.n	8003b76 <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 8003b78:	b944      	cbnz	r4, 8003b8c <xTaskCreateStatic+0x34>
 8003b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	e7fe      	b.n	8003b8a <xTaskCreateStatic+0x32>
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b8c:	f44f 73a2 	mov.w	r3, #324	; 0x144
 8003b90:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b92:	9b01      	ldr	r3, [sp, #4]
 8003b94:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8003b98:	d008      	beq.n	8003bac <xTaskCreateStatic+0x54>
 8003b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9e:	f383 8811 	msr	BASEPRI, r3
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	e7fe      	b.n	8003baa <xTaskCreateStatic+0x52>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003bac:	f102 4a80 	add.w	sl, r2, #1073741824	; 0x40000000
 8003bb0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003bb4:	6320      	str	r0, [r4, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003bb6:	eb00 008a 	add.w	r0, r0, sl, lsl #2
 8003bba:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003bbc:	f020 0a07 	bic.w	sl, r0, #7
 8003bc0:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8003bc4:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bc6:	7858      	ldrb	r0, [r3, #1]
 8003bc8:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8003bcc:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8003bd0:	b108      	cbz	r0, 8003bd6 <xTaskCreateStatic+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bd2:	428b      	cmp	r3, r1
 8003bd4:	d1f7      	bne.n	8003bc6 <xTaskCreateStatic+0x6e>
 8003bd6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003bd8:	2d06      	cmp	r5, #6
 8003bda:	bf28      	it	cs
 8003bdc:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003bde:	2600      	movs	r6, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003be0:	1d27      	adds	r7, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003be2:	f884 6043 	strb.w	r6, [r4, #67]	; 0x43
	pxNewTCB->uxPriority = uxPriority;
 8003be6:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003be8:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003bea:	64a6      	str	r6, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003bec:	4638      	mov	r0, r7
 8003bee:	f7ff fd6c 	bl	80036ca <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bf2:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003bf6:	f104 0018 	add.w	r0, r4, #24
 8003bfa:	f7ff fd66 	bl	80036ca <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8003bfe:	f8c4 613c 	str.w	r6, [r4, #316]	; 0x13c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003c02:	4631      	mov	r1, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c04:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c06:	f884 6140 	strb.w	r6, [r4, #320]	; 0x140
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003c0a:	22f0      	movs	r2, #240	; 0xf0
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c0c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c0e:	6264      	str	r4, [r4, #36]	; 0x24
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003c10:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8003c14:	f001 ff7d 	bl	8005b12 <memset>
 8003c18:	4b35      	ldr	r3, [pc, #212]	; (8003cf0 <xTaskCreateStatic+0x198>)
 8003c1a:	6523      	str	r3, [r4, #80]	; 0x50
 8003c1c:	4b35      	ldr	r3, [pc, #212]	; (8003cf4 <xTaskCreateStatic+0x19c>)
 8003c1e:	6563      	str	r3, [r4, #84]	; 0x54
 8003c20:	4b35      	ldr	r3, [pc, #212]	; (8003cf8 <xTaskCreateStatic+0x1a0>)
 8003c22:	65a3      	str	r3, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c24:	464a      	mov	r2, r9
 8003c26:	4641      	mov	r1, r8
 8003c28:	4650      	mov	r0, sl
 8003c2a:	f7ff fdc3 	bl	80037b4 <pxPortInitialiseStack>
 8003c2e:	6020      	str	r0, [r4, #0]
	taskENTER_CRITICAL();
 8003c30:	f7ff fde8 	bl	8003804 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003c34:	4b31      	ldr	r3, [pc, #196]	; (8003cfc <xTaskCreateStatic+0x1a4>)
		if( pxCurrentTCB == NULL )
 8003c36:	4d32      	ldr	r5, [pc, #200]	; (8003d00 <xTaskCreateStatic+0x1a8>)
		uxCurrentNumberOfTasks++;
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8003d2c <xTaskCreateStatic+0x1d4>
 8003c3e:	3201      	adds	r2, #1
 8003c40:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003c42:	682e      	ldr	r6, [r5, #0]
 8003c44:	2e00      	cmp	r6, #0
 8003c46:	d148      	bne.n	8003cda <xTaskCreateStatic+0x182>
			pxCurrentTCB = pxNewTCB;
 8003c48:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d11d      	bne.n	8003c8c <xTaskCreateStatic+0x134>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c50:	eb08 0006 	add.w	r0, r8, r6
 8003c54:	3614      	adds	r6, #20
 8003c56:	f7ff fd2d 	bl	80036b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c5a:	2e8c      	cmp	r6, #140	; 0x8c
 8003c5c:	d1f8      	bne.n	8003c50 <xTaskCreateStatic+0xf8>
	vListInitialise( &xDelayedTaskList1 );
 8003c5e:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8003d30 <xTaskCreateStatic+0x1d8>
	vListInitialise( &xDelayedTaskList2 );
 8003c62:	4e28      	ldr	r6, [pc, #160]	; (8003d04 <xTaskCreateStatic+0x1ac>)
	vListInitialise( &xDelayedTaskList1 );
 8003c64:	4648      	mov	r0, r9
 8003c66:	f7ff fd25 	bl	80036b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c6a:	4630      	mov	r0, r6
 8003c6c:	f7ff fd22 	bl	80036b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c70:	4825      	ldr	r0, [pc, #148]	; (8003d08 <xTaskCreateStatic+0x1b0>)
 8003c72:	f7ff fd1f 	bl	80036b4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003c76:	4825      	ldr	r0, [pc, #148]	; (8003d0c <xTaskCreateStatic+0x1b4>)
 8003c78:	f7ff fd1c 	bl	80036b4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8003c7c:	4824      	ldr	r0, [pc, #144]	; (8003d10 <xTaskCreateStatic+0x1b8>)
 8003c7e:	f7ff fd19 	bl	80036b4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c82:	4b24      	ldr	r3, [pc, #144]	; (8003d14 <xTaskCreateStatic+0x1bc>)
 8003c84:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c88:	4b23      	ldr	r3, [pc, #140]	; (8003d18 <xTaskCreateStatic+0x1c0>)
 8003c8a:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 8003c8c:	4a23      	ldr	r2, [pc, #140]	; (8003d1c <xTaskCreateStatic+0x1c4>)
		prvAddTaskToReadyList( pxNewTCB );
 8003c8e:	4924      	ldr	r1, [pc, #144]	; (8003d20 <xTaskCreateStatic+0x1c8>)
		uxTaskNumber++;
 8003c90:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003c92:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8003c94:	3301      	adds	r3, #1
 8003c96:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003c98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	4093      	lsls	r3, r2
 8003c9e:	4303      	orrs	r3, r0
 8003ca0:	2014      	movs	r0, #20
 8003ca2:	600b      	str	r3, [r1, #0]
 8003ca4:	fb00 8002 	mla	r0, r0, r2, r8
 8003ca8:	4639      	mov	r1, r7
 8003caa:	f7ff fd11 	bl	80036d0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003cae:	f7ff fdcb 	bl	8003848 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003cb2:	4b1c      	ldr	r3, [pc, #112]	; (8003d24 <xTaskCreateStatic+0x1cc>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	b163      	cbz	r3, 8003cd2 <xTaskCreateStatic+0x17a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003cb8:	682b      	ldr	r3, [r5, #0]
 8003cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d207      	bcs.n	8003cd2 <xTaskCreateStatic+0x17a>
			taskYIELD_IF_USING_PREEMPTION();
 8003cc2:	4b19      	ldr	r3, [pc, #100]	; (8003d28 <xTaskCreateStatic+0x1d0>)
 8003cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	f3bf 8f6f 	isb	sy
	}
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	b002      	add	sp, #8
 8003cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if( xSchedulerRunning == pdFALSE )
 8003cda:	4b12      	ldr	r3, [pc, #72]	; (8003d24 <xTaskCreateStatic+0x1cc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1d4      	bne.n	8003c8c <xTaskCreateStatic+0x134>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ce2:	682b      	ldr	r3, [r5, #0]
 8003ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003ce8:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8003cea:	bf98      	it	ls
 8003cec:	602c      	strls	r4, [r5, #0]
 8003cee:	e7cd      	b.n	8003c8c <xTaskCreateStatic+0x134>
 8003cf0:	08008d78 	.word	0x08008d78
 8003cf4:	08008d98 	.word	0x08008d98
 8003cf8:	08008d58 	.word	0x08008d58
 8003cfc:	2000090c 	.word	0x2000090c
 8003d00:	20000874 	.word	0x20000874
 8003d04:	20000938 	.word	0x20000938
 8003d08:	20000954 	.word	0x20000954
 8003d0c:	20000980 	.word	0x20000980
 8003d10:	2000096c 	.word	0x2000096c
 8003d14:	20000878 	.word	0x20000878
 8003d18:	2000087c 	.word	0x2000087c
 8003d1c:	2000091c 	.word	0x2000091c
 8003d20:	20000920 	.word	0x20000920
 8003d24:	20000968 	.word	0x20000968
 8003d28:	e000ed04 	.word	0xe000ed04
 8003d2c:	20000880 	.word	0x20000880
 8003d30:	20000924 	.word	0x20000924

08003d34 <vTaskStartScheduler>:
{
 8003d34:	b510      	push	{r4, lr}
 8003d36:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d38:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d3a:	aa07      	add	r2, sp, #28
 8003d3c:	a906      	add	r1, sp, #24
 8003d3e:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d40:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d42:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d44:	f000 fb6a 	bl	800441c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d48:	9b05      	ldr	r3, [sp, #20]
 8003d4a:	9302      	str	r3, [sp, #8]
 8003d4c:	9b06      	ldr	r3, [sp, #24]
 8003d4e:	9301      	str	r3, [sp, #4]
 8003d50:	9400      	str	r4, [sp, #0]
 8003d52:	4623      	mov	r3, r4
 8003d54:	9a07      	ldr	r2, [sp, #28]
 8003d56:	490f      	ldr	r1, [pc, #60]	; (8003d94 <vTaskStartScheduler+0x60>)
 8003d58:	480f      	ldr	r0, [pc, #60]	; (8003d98 <vTaskStartScheduler+0x64>)
 8003d5a:	f7ff fefd 	bl	8003b58 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8003d5e:	b1b8      	cbz	r0, 8003d90 <vTaskStartScheduler+0x5c>
 8003d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d70:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <vTaskStartScheduler+0x68>)
 8003d72:	4a0b      	ldr	r2, [pc, #44]	; (8003da0 <vTaskStartScheduler+0x6c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	334c      	adds	r3, #76	; 0x4c
 8003d78:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d7a:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <vTaskStartScheduler+0x70>)
 8003d7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d82:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <vTaskStartScheduler+0x74>)
 8003d84:	2201      	movs	r2, #1
 8003d86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d88:	4b08      	ldr	r3, [pc, #32]	; (8003dac <vTaskStartScheduler+0x78>)
 8003d8a:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003d8c:	f7ff fdd2 	bl	8003934 <xPortStartScheduler>
}
 8003d90:	b008      	add	sp, #32
 8003d92:	bd10      	pop	{r4, pc}
 8003d94:	080079a1 	.word	0x080079a1
 8003d98:	08003a41 	.word	0x08003a41
 8003d9c:	20000874 	.word	0x20000874
 8003da0:	2000018c 	.word	0x2000018c
 8003da4:	2000094c 	.word	0x2000094c
 8003da8:	20000968 	.word	0x20000968
 8003dac:	20000994 	.word	0x20000994

08003db0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003db0:	4a02      	ldr	r2, [pc, #8]	; (8003dbc <vTaskSuspendAll+0xc>)
 8003db2:	6813      	ldr	r3, [r2, #0]
 8003db4:	3301      	adds	r3, #1
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	20000918 	.word	0x20000918

08003dc0 <xTaskIncrementTick>:
{
 8003dc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dc4:	4b3c      	ldr	r3, [pc, #240]	; (8003eb8 <xTaskIncrementTick+0xf8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d153      	bne.n	8003e74 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003dcc:	4b3b      	ldr	r3, [pc, #236]	; (8003ebc <xTaskIncrementTick+0xfc>)
 8003dce:	681c      	ldr	r4, [r3, #0]
 8003dd0:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003dd2:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003dd4:	b9bc      	cbnz	r4, 8003e06 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003dd6:	4b3a      	ldr	r3, [pc, #232]	; (8003ec0 <xTaskIncrementTick+0x100>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	6812      	ldr	r2, [r2, #0]
 8003ddc:	b142      	cbz	r2, 8003df0 <xTaskIncrementTick+0x30>
 8003dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de2:	f383 8811 	msr	BASEPRI, r3
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	e7fe      	b.n	8003dee <xTaskIncrementTick+0x2e>
 8003df0:	4a34      	ldr	r2, [pc, #208]	; (8003ec4 <xTaskIncrementTick+0x104>)
 8003df2:	6819      	ldr	r1, [r3, #0]
 8003df4:	6810      	ldr	r0, [r2, #0]
 8003df6:	6018      	str	r0, [r3, #0]
 8003df8:	6011      	str	r1, [r2, #0]
 8003dfa:	4a33      	ldr	r2, [pc, #204]	; (8003ec8 <xTaskIncrementTick+0x108>)
 8003dfc:	6813      	ldr	r3, [r2, #0]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	f7ff fe51 	bl	8003aa8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e06:	4d31      	ldr	r5, [pc, #196]	; (8003ecc <xTaskIncrementTick+0x10c>)
 8003e08:	4f31      	ldr	r7, [pc, #196]	; (8003ed0 <xTaskIncrementTick+0x110>)
 8003e0a:	682b      	ldr	r3, [r5, #0]
 8003e0c:	429c      	cmp	r4, r3
 8003e0e:	f04f 0b00 	mov.w	fp, #0
 8003e12:	d33e      	bcc.n	8003e92 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e14:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003ec0 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8003e18:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003ee0 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e1c:	f8d8 2000 	ldr.w	r2, [r8]
 8003e20:	6812      	ldr	r2, [r2, #0]
 8003e22:	bb72      	cbnz	r2, 8003e82 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e28:	602a      	str	r2, [r5, #0]
					break;
 8003e2a:	e032      	b.n	8003e92 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e2c:	f106 0a04 	add.w	sl, r6, #4
 8003e30:	4650      	mov	r0, sl
 8003e32:	f7ff fc70 	bl	8003716 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e36:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003e38:	b119      	cbz	r1, 8003e42 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e3a:	f106 0018 	add.w	r0, r6, #24
 8003e3e:	f7ff fc6a 	bl	8003716 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e42:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003e44:	f8d9 3000 	ldr.w	r3, [r9]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	fa02 f100 	lsl.w	r1, r2, r0
 8003e4e:	4319      	orrs	r1, r3
 8003e50:	4b20      	ldr	r3, [pc, #128]	; (8003ed4 <xTaskIncrementTick+0x114>)
 8003e52:	f8c9 1000 	str.w	r1, [r9]
 8003e56:	f04f 0e14 	mov.w	lr, #20
 8003e5a:	4651      	mov	r1, sl
 8003e5c:	fb0e 3000 	mla	r0, lr, r0, r3
 8003e60:	f7ff fc36 	bl	80036d0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e64:	6838      	ldr	r0, [r7, #0]
 8003e66:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8003e68:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8003e6a:	4291      	cmp	r1, r2
 8003e6c:	bf28      	it	cs
 8003e6e:	f04f 0b01 	movcs.w	fp, #1
 8003e72:	e7d3      	b.n	8003e1c <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8003e74:	4a18      	ldr	r2, [pc, #96]	; (8003ed8 <xTaskIncrementTick+0x118>)
 8003e76:	6813      	ldr	r3, [r2, #0]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8003e7c:	f04f 0b00 	mov.w	fp, #0
 8003e80:	e011      	b.n	8003ea6 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e82:	f8d8 2000 	ldr.w	r2, [r8]
 8003e86:	68d2      	ldr	r2, [r2, #12]
 8003e88:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e8a:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003e8c:	428c      	cmp	r4, r1
 8003e8e:	d2cd      	bcs.n	8003e2c <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8003e90:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	4b0f      	ldr	r3, [pc, #60]	; (8003ed4 <xTaskIncrementTick+0x114>)
 8003e96:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e98:	2214      	movs	r2, #20
 8003e9a:	434a      	muls	r2, r1
 8003e9c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8003e9e:	2a02      	cmp	r2, #2
 8003ea0:	bf28      	it	cs
 8003ea2:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8003ea6:	4a0d      	ldr	r2, [pc, #52]	; (8003edc <xTaskIncrementTick+0x11c>)
 8003ea8:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8003eaa:	2a00      	cmp	r2, #0
 8003eac:	bf18      	it	ne
 8003eae:	f04f 0b01 	movne.w	fp, #1
}
 8003eb2:	4658      	mov	r0, fp
 8003eb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eb8:	20000918 	.word	0x20000918
 8003ebc:	20000994 	.word	0x20000994
 8003ec0:	20000878 	.word	0x20000878
 8003ec4:	2000087c 	.word	0x2000087c
 8003ec8:	20000950 	.word	0x20000950
 8003ecc:	2000094c 	.word	0x2000094c
 8003ed0:	20000874 	.word	0x20000874
 8003ed4:	20000880 	.word	0x20000880
 8003ed8:	20000914 	.word	0x20000914
 8003edc:	20000998 	.word	0x20000998
 8003ee0:	20000920 	.word	0x20000920

08003ee4 <xTaskResumeAll>:
{
 8003ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8003ee8:	4c31      	ldr	r4, [pc, #196]	; (8003fb0 <xTaskResumeAll+0xcc>)
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	b943      	cbnz	r3, 8003f00 <xTaskResumeAll+0x1c>
 8003eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	e7fe      	b.n	8003efe <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8003f00:	f7ff fc80 	bl	8003804 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003f04:	6823      	ldr	r3, [r4, #0]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f0a:	6824      	ldr	r4, [r4, #0]
 8003f0c:	b12c      	cbz	r4, 8003f1a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8003f0e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003f10:	f7ff fc9a 	bl	8003848 <vPortExitCritical>
}
 8003f14:	4620      	mov	r0, r4
 8003f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f1a:	4b26      	ldr	r3, [pc, #152]	; (8003fb4 <xTaskResumeAll+0xd0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f5      	beq.n	8003f0e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f22:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003fcc <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8003f26:	4f24      	ldr	r7, [pc, #144]	; (8003fb8 <xTaskResumeAll+0xd4>)
 8003f28:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003fd0 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f2c:	f8d9 3000 	ldr.w	r3, [r9]
 8003f30:	b9e3      	cbnz	r3, 8003f6c <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8003f32:	b10c      	cbz	r4, 8003f38 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8003f34:	f7ff fdb8 	bl	8003aa8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003f38:	4d20      	ldr	r5, [pc, #128]	; (8003fbc <xTaskResumeAll+0xd8>)
 8003f3a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003f3c:	b144      	cbz	r4, 8003f50 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8003f3e:	4e20      	ldr	r6, [pc, #128]	; (8003fc0 <xTaskResumeAll+0xdc>)
 8003f40:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003f42:	f7ff ff3d 	bl	8003dc0 <xTaskIncrementTick>
 8003f46:	b100      	cbz	r0, 8003f4a <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8003f48:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003f4a:	3c01      	subs	r4, #1
 8003f4c:	d1f9      	bne.n	8003f42 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8003f4e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003f50:	4b1b      	ldr	r3, [pc, #108]	; (8003fc0 <xTaskResumeAll+0xdc>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0da      	beq.n	8003f0e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8003f58:	4b1a      	ldr	r3, [pc, #104]	; (8003fc4 <xTaskResumeAll+0xe0>)
 8003f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003f68:	2401      	movs	r4, #1
 8003f6a:	e7d1      	b.n	8003f10 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003f6c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8003f70:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f72:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f74:	f104 0018 	add.w	r0, r4, #24
 8003f78:	f7ff fbcd 	bl	8003716 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f7c:	4630      	mov	r0, r6
 8003f7e:	f7ff fbca 	bl	8003716 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f82:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003f84:	6839      	ldr	r1, [r7, #0]
 8003f86:	2501      	movs	r5, #1
 8003f88:	fa05 f302 	lsl.w	r3, r5, r2
 8003f8c:	2014      	movs	r0, #20
 8003f8e:	430b      	orrs	r3, r1
 8003f90:	fb00 8002 	mla	r0, r0, r2, r8
 8003f94:	4631      	mov	r1, r6
 8003f96:	603b      	str	r3, [r7, #0]
 8003f98:	f7ff fb9a 	bl	80036d0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f9c:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <xTaskResumeAll+0xe4>)
 8003f9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa4:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8003fa6:	bf24      	itt	cs
 8003fa8:	4b05      	ldrcs	r3, [pc, #20]	; (8003fc0 <xTaskResumeAll+0xdc>)
 8003faa:	601d      	strcs	r5, [r3, #0]
 8003fac:	e7be      	b.n	8003f2c <xTaskResumeAll+0x48>
 8003fae:	bf00      	nop
 8003fb0:	20000918 	.word	0x20000918
 8003fb4:	2000090c 	.word	0x2000090c
 8003fb8:	20000920 	.word	0x20000920
 8003fbc:	20000914 	.word	0x20000914
 8003fc0:	20000998 	.word	0x20000998
 8003fc4:	e000ed04 	.word	0xe000ed04
 8003fc8:	20000874 	.word	0x20000874
 8003fcc:	20000954 	.word	0x20000954
 8003fd0:	20000880 	.word	0x20000880

08003fd4 <vTaskDelay>:
	{
 8003fd4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003fd6:	b940      	cbnz	r0, 8003fea <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003fd8:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <vTaskDelay+0x40>)
 8003fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	f3bf 8f6f 	isb	sy
 8003fe8:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8003fea:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <vTaskDelay+0x44>)
 8003fec:	6819      	ldr	r1, [r3, #0]
 8003fee:	b141      	cbz	r1, 8004002 <vTaskDelay+0x2e>
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	e7fe      	b.n	8004000 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004002:	f7ff fed5 	bl	8003db0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004006:	f7ff fd61 	bl	8003acc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800400a:	f7ff ff6b 	bl	8003ee4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800400e:	2800      	cmp	r0, #0
 8004010:	d0e2      	beq.n	8003fd8 <vTaskDelay+0x4>
 8004012:	bd08      	pop	{r3, pc}
 8004014:	e000ed04 	.word	0xe000ed04
 8004018:	20000918 	.word	0x20000918

0800401c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800401c:	4b19      	ldr	r3, [pc, #100]	; (8004084 <vTaskSwitchContext+0x68>)
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4b19      	ldr	r3, [pc, #100]	; (8004088 <vTaskSwitchContext+0x6c>)
{
 8004022:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004024:	b112      	cbz	r2, 800402c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8004026:	2201      	movs	r2, #1
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800402c:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800402e:	4b17      	ldr	r3, [pc, #92]	; (800408c <vTaskSwitchContext+0x70>)
 8004030:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004032:	fab3 f383 	clz	r3, r3
 8004036:	b2db      	uxtb	r3, r3
 8004038:	f1c3 031f 	rsb	r3, r3, #31
 800403c:	2214      	movs	r2, #20
 800403e:	4914      	ldr	r1, [pc, #80]	; (8004090 <vTaskSwitchContext+0x74>)
 8004040:	435a      	muls	r2, r3
 8004042:	1888      	adds	r0, r1, r2
 8004044:	588c      	ldr	r4, [r1, r2]
 8004046:	b944      	cbnz	r4, 800405a <vTaskSwitchContext+0x3e>
	__asm volatile
 8004048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	e7fe      	b.n	8004058 <vTaskSwitchContext+0x3c>
 800405a:	6844      	ldr	r4, [r0, #4]
 800405c:	3208      	adds	r2, #8
 800405e:	6864      	ldr	r4, [r4, #4]
 8004060:	6044      	str	r4, [r0, #4]
 8004062:	440a      	add	r2, r1
 8004064:	4294      	cmp	r4, r2
 8004066:	bf04      	itt	eq
 8004068:	6862      	ldreq	r2, [r4, #4]
 800406a:	6042      	streq	r2, [r0, #4]
 800406c:	2214      	movs	r2, #20
 800406e:	fb02 1303 	mla	r3, r2, r3, r1
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	4b07      	ldr	r3, [pc, #28]	; (8004094 <vTaskSwitchContext+0x78>)
 8004078:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a06      	ldr	r2, [pc, #24]	; (8004098 <vTaskSwitchContext+0x7c>)
 800407e:	334c      	adds	r3, #76	; 0x4c
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	bd10      	pop	{r4, pc}
 8004084:	20000918 	.word	0x20000918
 8004088:	20000998 	.word	0x20000998
 800408c:	20000920 	.word	0x20000920
 8004090:	20000880 	.word	0x20000880
 8004094:	20000874 	.word	0x20000874
 8004098:	2000018c 	.word	0x2000018c

0800409c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800409c:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <xTaskGetSchedulerState+0x18>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	b133      	cbz	r3, 80040b0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040a2:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <xTaskGetSchedulerState+0x1c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80040a8:	bf0c      	ite	eq
 80040aa:	2002      	moveq	r0, #2
 80040ac:	2000      	movne	r0, #0
 80040ae:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040b0:	2001      	movs	r0, #1
	}
 80040b2:	4770      	bx	lr
 80040b4:	20000968 	.word	0x20000968
 80040b8:	20000918 	.word	0x20000918

080040bc <LTC2990_ConfigureControlReg>:
#include "adc.h"

/*
 *	Configure control register
 */
HAL_StatusTypeDef LTC2990_ConfigureControlReg(I2C_HandleTypeDef *hi2c) {
 80040bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_StatusTypeDef retStatus;

	uint8_t controlBuffer[1];
	controlBuffer[0] = 0x1F; //All modes per measurement, V1-V2 (measures current in and out of battery), V3 measures battery voltage (currently disconnected in schematic), V4 measures battery temperature (currently disconnected in schematic)
 80040be:	aa06      	add	r2, sp, #24
 80040c0:	231f      	movs	r3, #31
 80040c2:	f802 3d04 	strb.w	r3, [r2, #-4]!

	retStatus = HAL_I2C_Mem_Write(hi2c, 0b10011000, 0x1, I2C_MEMADD_SIZE_8BIT,
 80040c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80040ca:	9302      	str	r3, [sp, #8]
 80040cc:	2301      	movs	r3, #1
 80040ce:	e88d 000c 	stmia.w	sp, {r2, r3}
 80040d2:	2198      	movs	r1, #152	; 0x98
 80040d4:	461a      	mov	r2, r3
 80040d6:	f7fd faa5 	bl	8001624 <HAL_I2C_Mem_Write>
			controlBuffer, I2C_MEMADD_SIZE_8BIT, 500);

	return retStatus;
}
 80040da:	b007      	add	sp, #28
 80040dc:	f85d fb04 	ldr.w	pc, [sp], #4

080040e0 <LTC2990_Trigger>:

/*
 * Trigger new ADC conversion
 */
HAL_StatusTypeDef LTC2990_Trigger(I2C_HandleTypeDef *hi2c) {
 80040e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_StatusTypeDef retStatus;
	uint8_t triggerVal = 0x0;
 80040e2:	aa06      	add	r2, sp, #24
 80040e4:	2300      	movs	r3, #0
 80040e6:	f802 3d01 	strb.w	r3, [r2, #-1]!

	retStatus = HAL_I2C_Mem_Write(hi2c, 0b10011000, 0x02,
 80040ea:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80040ee:	9302      	str	r3, [sp, #8]
 80040f0:	2301      	movs	r3, #1
 80040f2:	e88d 000c 	stmia.w	sp, {r2, r3}
 80040f6:	2198      	movs	r1, #152	; 0x98
 80040f8:	2202      	movs	r2, #2
 80040fa:	f7fd fa93 	bl	8001624 <HAL_I2C_Mem_Write>
			I2C_MEMADD_SIZE_8BIT, &triggerVal, I2C_MEMADD_SIZE_8BIT, 1500);

	return retStatus;
}
 80040fe:	b007      	add	sp, #28
 8004100:	f85d fb04 	ldr.w	pc, [sp], #4

08004104 <LTC2990_WaitForConversion>:

/*
 * Wait for new ADC conversion
 */
HAL_StatusTypeDef LTC2990_WaitForConversion(I2C_HandleTypeDef *hi2c,
		uint16_t timeout_ms) {
 8004104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004108:	b086      	sub	sp, #24
	HAL_StatusTypeDef retStatus;

	uint8_t statusBuffer = 0;
 800410a:	ae06      	add	r6, sp, #24
 800410c:	2400      	movs	r4, #0
 800410e:	f806 4d01 	strb.w	r4, [r6, #-1]!
		uint16_t timeout_ms) {
 8004112:	4680      	mov	r8, r0
 8004114:	460d      	mov	r5, r1
	uint8_t vccReady = 0;

	while ((timeout_ms != 0) && (vccReady == 0)) {
 8004116:	4627      	mov	r7, r4
		retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x00,
 8004118:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
 800411c:	f04f 0a01 	mov.w	sl, #1
	while ((timeout_ms != 0) && (vccReady == 0)) {
 8004120:	b105      	cbz	r5, 8004124 <LTC2990_WaitForConversion+0x20>
 8004122:	b11c      	cbz	r4, 800412c <LTC2990_WaitForConversion+0x28>
		HAL_Delay(10);
		timeout_ms -= 10;
	}

	return retStatus;
}
 8004124:	4638      	mov	r0, r7
 8004126:	b006      	add	sp, #24
 8004128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x00,
 800412c:	4622      	mov	r2, r4
 800412e:	2301      	movs	r3, #1
 8004130:	2198      	movs	r1, #152	; 0x98
 8004132:	f8cd 9008 	str.w	r9, [sp, #8]
 8004136:	e88d 0440 	stmia.w	sp, {r6, sl}
 800413a:	4640      	mov	r0, r8
 800413c:	f7fd fb2a 	bl	8001794 <HAL_I2C_Mem_Read>
		vccReady = (statusBuffer & 0b00000100);
 8004140:	f89d 4017 	ldrb.w	r4, [sp, #23]
		retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x00,
 8004144:	4607      	mov	r7, r0
		timeout_ms -= 10;
 8004146:	3d0a      	subs	r5, #10
		HAL_Delay(10);
 8004148:	200a      	movs	r0, #10
		vccReady = (statusBuffer & 0b00000100);
 800414a:	f004 0404 	and.w	r4, r4, #4
		HAL_Delay(10);
 800414e:	f7fc fea9 	bl	8000ea4 <HAL_Delay>
		timeout_ms -= 10;
 8004152:	b2ad      	uxth	r5, r5
 8004154:	e7e4      	b.n	8004120 <LTC2990_WaitForConversion+0x1c>
	...

08004158 <LTC2990_ReadVcc>:


/*
 * Read Vcc voltage
 */
HAL_StatusTypeDef LTC2990_ReadVcc(I2C_HandleTypeDef *hi2c, float* Vcc_V) {
 8004158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800415c:	b086      	sub	sp, #24
	HAL_StatusTypeDef retStatus;
	uint16_t Vcc_regData;
	uint8_t VccReadBuffer[2];

	//Read MSB of Vcc ()
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x0E, I2C_MEMADD_SIZE_8BIT,
 800415e:	2501      	movs	r5, #1
 8004160:	ab05      	add	r3, sp, #20
 8004162:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8004166:	9300      	str	r3, [sp, #0]
HAL_StatusTypeDef LTC2990_ReadVcc(I2C_HandleTypeDef *hi2c, float* Vcc_V) {
 8004168:	460f      	mov	r7, r1
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x0E, I2C_MEMADD_SIZE_8BIT,
 800416a:	9602      	str	r6, [sp, #8]
 800416c:	9501      	str	r5, [sp, #4]
 800416e:	462b      	mov	r3, r5
 8004170:	220e      	movs	r2, #14
 8004172:	2198      	movs	r1, #152	; 0x98
HAL_StatusTypeDef LTC2990_ReadVcc(I2C_HandleTypeDef *hi2c, float* Vcc_V) {
 8004174:	4680      	mov	r8, r0
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x0E, I2C_MEMADD_SIZE_8BIT,
 8004176:	f7fd fb0d 	bl	8001794 <HAL_I2C_Mem_Read>
			&VccReadBuffer[0], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 800417a:	4604      	mov	r4, r0
 800417c:	bb38      	cbnz	r0, 80041ce <LTC2990_ReadVcc+0x76>
		return retStatus;
	}

	//Read LSB of Vcc ()
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x0F, I2C_MEMADD_SIZE_8BIT,
 800417e:	f10d 0315 	add.w	r3, sp, #21
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	9602      	str	r6, [sp, #8]
 8004186:	9501      	str	r5, [sp, #4]
 8004188:	462b      	mov	r3, r5
 800418a:	220f      	movs	r2, #15
 800418c:	2198      	movs	r1, #152	; 0x98
 800418e:	4640      	mov	r0, r8
 8004190:	f7fd fb00 	bl	8001794 <HAL_I2C_Mem_Read>
			&VccReadBuffer[1], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 8004194:	4604      	mov	r4, r0
 8004196:	b9d0      	cbnz	r0, 80041ce <LTC2990_ReadVcc+0x76>
		return retStatus;
	}

	//Convert register contents to Vcc
	Vcc_regData = ((VccReadBuffer[0] << 8) | VccReadBuffer[1]) & ~0xC000; //D[13:0]
 8004198:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800419c:	f89d 0015 	ldrb.w	r0, [sp, #21]
 80041a0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	*Vcc_V = 2.5 + ((Vcc_regData * 305.18) / 1000000);
 80041a4:	f3c0 000d 	ubfx	r0, r0, #0, #14
 80041a8:	f7fc f9c4 	bl	8000534 <__aeabi_i2d>
 80041ac:	a30b      	add	r3, pc, #44	; (adr r3, 80041dc <LTC2990_ReadVcc+0x84>)
 80041ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b2:	f7fc fa25 	bl	8000600 <__aeabi_dmul>
 80041b6:	a30b      	add	r3, pc, #44	; (adr r3, 80041e4 <LTC2990_ReadVcc+0x8c>)
 80041b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041bc:	f7fc fb4a 	bl	8000854 <__aeabi_ddiv>
 80041c0:	2200      	movs	r2, #0
 80041c2:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <LTC2990_ReadVcc+0x80>)
 80041c4:	f7fc f86a 	bl	800029c <__adddf3>
 80041c8:	f7fc fc4c 	bl	8000a64 <__aeabi_d2f>
 80041cc:	6038      	str	r0, [r7, #0]

	return retStatus;
}
 80041ce:	4620      	mov	r0, r4
 80041d0:	b006      	add	sp, #24
 80041d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041d6:	bf00      	nop
 80041d8:	40040000 	.word	0x40040000
 80041dc:	47ae147b 	.word	0x47ae147b
 80041e0:	407312e1 	.word	0x407312e1
 80041e4:	00000000 	.word	0x00000000
 80041e8:	412e8480 	.word	0x412e8480
 80041ec:	00000000 	.word	0x00000000

080041f0 <LTC2990_ReadV2>:
}

/*
 * Read V2 voltage
 */
HAL_StatusTypeDef LTC2990_ReadV2(I2C_HandleTypeDef *hi2c, float* V2_V) {
 80041f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041f4:	b086      	sub	sp, #24
	HAL_StatusTypeDef retStatus;
	uint16_t V2_regData;
	uint8_t V2ReadBuffer[2];

	//Read MSB of V2
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x08, I2C_MEMADD_SIZE_8BIT,
 80041f6:	2501      	movs	r5, #1
 80041f8:	ab05      	add	r3, sp, #20
 80041fa:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80041fe:	9300      	str	r3, [sp, #0]
HAL_StatusTypeDef LTC2990_ReadV2(I2C_HandleTypeDef *hi2c, float* V2_V) {
 8004200:	460f      	mov	r7, r1
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x08, I2C_MEMADD_SIZE_8BIT,
 8004202:	9602      	str	r6, [sp, #8]
 8004204:	9501      	str	r5, [sp, #4]
 8004206:	462b      	mov	r3, r5
 8004208:	2208      	movs	r2, #8
 800420a:	2198      	movs	r1, #152	; 0x98
HAL_StatusTypeDef LTC2990_ReadV2(I2C_HandleTypeDef *hi2c, float* V2_V) {
 800420c:	4680      	mov	r8, r0
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x08, I2C_MEMADD_SIZE_8BIT,
 800420e:	f7fd fac1 	bl	8001794 <HAL_I2C_Mem_Read>
			&V2ReadBuffer[0], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 8004212:	4604      	mov	r4, r0
 8004214:	bb38      	cbnz	r0, 8004266 <LTC2990_ReadV2+0x76>
		return retStatus;
	}

	//Read LSB of V2
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x09, I2C_MEMADD_SIZE_8BIT,
 8004216:	f10d 0315 	add.w	r3, sp, #21
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	9602      	str	r6, [sp, #8]
 800421e:	9501      	str	r5, [sp, #4]
 8004220:	462b      	mov	r3, r5
 8004222:	2209      	movs	r2, #9
 8004224:	2198      	movs	r1, #152	; 0x98
 8004226:	4640      	mov	r0, r8
 8004228:	f7fd fab4 	bl	8001794 <HAL_I2C_Mem_Read>
			&V2ReadBuffer[1], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 800422c:	4604      	mov	r4, r0
 800422e:	b9d0      	cbnz	r0, 8004266 <LTC2990_ReadV2+0x76>
		return retStatus;
	}

	//Convert register contents to V4
	V2_regData = ((V2ReadBuffer[0] << 8) | V2ReadBuffer[1]) & ~0xC000; //D[13:0]
 8004230:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8004234:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8004238:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	*V2_V = (((V2_regData * 305.18) / 1000000)* vdividerFactor);
 800423c:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8004240:	f7fc f978 	bl	8000534 <__aeabi_i2d>
 8004244:	a30a      	add	r3, pc, #40	; (adr r3, 8004270 <LTC2990_ReadV2+0x80>)
 8004246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424a:	f7fc f9d9 	bl	8000600 <__aeabi_dmul>
 800424e:	a30a      	add	r3, pc, #40	; (adr r3, 8004278 <LTC2990_ReadV2+0x88>)
 8004250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004254:	f7fc fafe 	bl	8000854 <__aeabi_ddiv>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	f7fc f81e 	bl	800029c <__adddf3>
 8004260:	f7fc fc00 	bl	8000a64 <__aeabi_d2f>
 8004264:	6038      	str	r0, [r7, #0]

	return retStatus;
}
 8004266:	4620      	mov	r0, r4
 8004268:	b006      	add	sp, #24
 800426a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800426e:	bf00      	nop
 8004270:	47ae147b 	.word	0x47ae147b
 8004274:	407312e1 	.word	0x407312e1
 8004278:	00000000 	.word	0x00000000
 800427c:	412e8480 	.word	0x412e8480

08004280 <LTC2990_ReadV1>:

/*
 * Read V1 voltage
 */
HAL_StatusTypeDef LTC2990_ReadV1(I2C_HandleTypeDef *hi2c, float* V1_V) {
 8004280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004284:	b086      	sub	sp, #24
	HAL_StatusTypeDef retStatus;
	uint16_t V1_regData;
	uint8_t V1ReadBuffer[2];

	//Read MSB of V1
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x06, I2C_MEMADD_SIZE_8BIT,
 8004286:	2501      	movs	r5, #1
 8004288:	ab05      	add	r3, sp, #20
 800428a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800428e:	9300      	str	r3, [sp, #0]
HAL_StatusTypeDef LTC2990_ReadV1(I2C_HandleTypeDef *hi2c, float* V1_V) {
 8004290:	460f      	mov	r7, r1
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x06, I2C_MEMADD_SIZE_8BIT,
 8004292:	9602      	str	r6, [sp, #8]
 8004294:	9501      	str	r5, [sp, #4]
 8004296:	462b      	mov	r3, r5
 8004298:	2206      	movs	r2, #6
 800429a:	2198      	movs	r1, #152	; 0x98
HAL_StatusTypeDef LTC2990_ReadV1(I2C_HandleTypeDef *hi2c, float* V1_V) {
 800429c:	4680      	mov	r8, r0
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x06, I2C_MEMADD_SIZE_8BIT,
 800429e:	f7fd fa79 	bl	8001794 <HAL_I2C_Mem_Read>
			&V1ReadBuffer[0], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 80042a2:	4604      	mov	r4, r0
 80042a4:	bb38      	cbnz	r0, 80042f6 <LTC2990_ReadV1+0x76>
		return retStatus;
	}

	//Read LSB of V1
	retStatus = HAL_I2C_Mem_Read(hi2c, 0b10011000, 0x07, I2C_MEMADD_SIZE_8BIT,
 80042a6:	f10d 0315 	add.w	r3, sp, #21
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	9602      	str	r6, [sp, #8]
 80042ae:	9501      	str	r5, [sp, #4]
 80042b0:	462b      	mov	r3, r5
 80042b2:	2207      	movs	r2, #7
 80042b4:	2198      	movs	r1, #152	; 0x98
 80042b6:	4640      	mov	r0, r8
 80042b8:	f7fd fa6c 	bl	8001794 <HAL_I2C_Mem_Read>
			&V1ReadBuffer[1], I2C_MEMADD_SIZE_8BIT, 1000);

	if (retStatus != HAL_OK) {
 80042bc:	4604      	mov	r4, r0
 80042be:	b9d0      	cbnz	r0, 80042f6 <LTC2990_ReadV1+0x76>
		return retStatus;
	}

	//Convert register contents to V4
	V1_regData = ((V1ReadBuffer[0] << 8) | V1ReadBuffer[1]) & ~0xC000; //D[13:0]
 80042c0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80042c4:	f89d 0015 	ldrb.w	r0, [sp, #21]
 80042c8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	*V1_V = (((V1_regData * 305.18) / 1000000) * vdividerFactor);
 80042cc:	f3c0 000d 	ubfx	r0, r0, #0, #14
 80042d0:	f7fc f930 	bl	8000534 <__aeabi_i2d>
 80042d4:	a30a      	add	r3, pc, #40	; (adr r3, 8004300 <LTC2990_ReadV1+0x80>)
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	f7fc f991 	bl	8000600 <__aeabi_dmul>
 80042de:	a30a      	add	r3, pc, #40	; (adr r3, 8004308 <LTC2990_ReadV1+0x88>)
 80042e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e4:	f7fc fab6 	bl	8000854 <__aeabi_ddiv>
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	f7fb ffd6 	bl	800029c <__adddf3>
 80042f0:	f7fc fbb8 	bl	8000a64 <__aeabi_d2f>
 80042f4:	6038      	str	r0, [r7, #0]

	return retStatus;
}
 80042f6:	4620      	mov	r0, r4
 80042f8:	b006      	add	sp, #24
 80042fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042fe:	bf00      	nop
 8004300:	47ae147b 	.word	0x47ae147b
 8004304:	407312e1 	.word	0x407312e1
 8004308:	00000000 	.word	0x00000000
 800430c:	412e8480 	.word	0x412e8480

08004310 <LTC2990_ReadCurrent>:
 * Charging gives negative current value when V1_V < V4_V
 * Discharging gives positive current value when V1_V > V4_V
 */
HAL_StatusTypeDef LTC2990_ReadCurrent(I2C_HandleTypeDef *hi2c, float V1_V, float V4_V, float* current_value)
{
	*current_value = (V1_V - V4_V)*1000.0/shuntR;
 8004310:	ee70 7a60 	vsub.f32	s15, s0, s1
{
 8004314:	b510      	push	{r4, lr}
	*current_value = (V1_V - V4_V)*1000.0/shuntR;
 8004316:	ee17 0a90 	vmov	r0, s15
{
 800431a:	460c      	mov	r4, r1
	*current_value = (V1_V - V4_V)*1000.0/shuntR;
 800431c:	f7fc f91c 	bl	8000558 <__aeabi_f2d>
 8004320:	2200      	movs	r2, #0
 8004322:	4b09      	ldr	r3, [pc, #36]	; (8004348 <LTC2990_ReadCurrent+0x38>)
 8004324:	f7fc f96c 	bl	8000600 <__aeabi_dmul>
 8004328:	a305      	add	r3, pc, #20	; (adr r3, 8004340 <LTC2990_ReadCurrent+0x30>)
 800432a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432e:	f7fc fa91 	bl	8000854 <__aeabi_ddiv>
 8004332:	f7fc fb97 	bl	8000a64 <__aeabi_d2f>
 8004336:	6020      	str	r0, [r4, #0]
}
 8004338:	bd10      	pop	{r4, pc}
 800433a:	bf00      	nop
 800433c:	f3af 8000 	nop.w
 8004340:	40000000 	.word	0x40000000
 8004344:	3fc3d70a 	.word	0x3fc3d70a
 8004348:	408f4000 	.word	0x408f4000

0800434c <LTC2990_ReadVoltage>:
 */
HAL_StatusTypeDef LTC2990_ReadVoltage(I2C_HandleTypeDef *hi2c, ADC_CHANNEL ch, float* voltage_value)
{
	HAL_StatusTypeDef retStatus;

	if(ch == VCC)
 800434c:	b911      	cbnz	r1, 8004354 <LTC2990_ReadVoltage+0x8>
	{
		//Vcc
		retStatus = LTC2990_ReadVcc(hi2c, voltage_value);
 800434e:	4611      	mov	r1, r2
 8004350:	f7ff bf02 	b.w	8004158 <LTC2990_ReadVcc>
	}
	else if(ch == BATTV)
 8004354:	2901      	cmp	r1, #1
 8004356:	d102      	bne.n	800435e <LTC2990_ReadVoltage+0x12>
	{
		//Vbatt
		retStatus = LTC2990_ReadV1(hi2c, voltage_value);
 8004358:	4611      	mov	r1, r2
 800435a:	f7ff bf91 	b.w	8004280 <LTC2990_ReadV1>
	}
	else if(ch == BATTV_2)
 800435e:	2904      	cmp	r1, #4
 8004360:	d102      	bne.n	8004368 <LTC2990_ReadVoltage+0x1c>
	{
		//Vbatt2
		retStatus = LTC2990_ReadV2(hi2c, voltage_value);
 8004362:	4611      	mov	r1, r2
 8004364:	f7ff bf44 	b.w	80041f0 <LTC2990_ReadV2>
	}
	else
	{
		//default case
		*voltage_value = 0;
 8004368:	2300      	movs	r3, #0
 800436a:	6013      	str	r3, [r2, #0]
		retStatus = HAL_OK;
	}

	return retStatus;
}
 800436c:	2000      	movs	r0, #0
 800436e:	4770      	bx	lr

08004370 <performDischargeStep>:
#include "sochelper.h"

int performDischargeStep (float currentSOC){

	//Perform a simulated discharge
	float newCellAh = ((currentSOC/100) * fullCellAh) - simulatedAhStep; 		//Ah
 8004370:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80043c8 <performDischargeStep+0x58>
 8004374:	eddf 7a15 	vldr	s15, [pc, #84]	; 80043cc <performDischargeStep+0x5c>
	simulatedSOC = (newCellAh / fullCellAh) * 100.0;							//%
	float newBattV = lookupSOCByOCV(simulatedSOC, &defaultOcvTable, defaultTableSize, &defaultSocTable);	//V
 8004378:	4815      	ldr	r0, [pc, #84]	; (80043d0 <performDischargeStep+0x60>)
 800437a:	4a16      	ldr	r2, [pc, #88]	; (80043d4 <performDischargeStep+0x64>)
	float newCellAh = ((currentSOC/100) * fullCellAh) - simulatedAhStep; 		//Ah
 800437c:	ee80 0a07 	vdiv.f32	s0, s0, s14
int performDischargeStep (float currentSOC){
 8004380:	b508      	push	{r3, lr}
	simulatedSOC = (newCellAh / fullCellAh) * 100.0;							//%
 8004382:	4b15      	ldr	r3, [pc, #84]	; (80043d8 <performDischargeStep+0x68>)
	float newBattV = lookupSOCByOCV(simulatedSOC, &defaultOcvTable, defaultTableSize, &defaultSocTable);	//V
 8004384:	210f      	movs	r1, #15
	float newCellAh = ((currentSOC/100) * fullCellAh) - simulatedAhStep; 		//Ah
 8004386:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800438a:	eee0 7a26 	vfma.f32	s15, s0, s13
	simulatedSOC = (newCellAh / fullCellAh) * 100.0;							//%
 800438e:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 8004392:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004396:	ed83 0a00 	vstr	s0, [r3]
	float newBattV = lookupSOCByOCV(simulatedSOC, &defaultOcvTable, defaultTableSize, &defaultSocTable);	//V
 800439a:	f000 fd99 	bl	8004ed0 <lookupSOCByOCV>

	if(newBattV <= undervoltage){
 800439e:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80043dc <performDischargeStep+0x6c>
 80043a2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80043a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr

	//Calculate energy consumed - V*I*t
	float energy = newBattV*simulatedAhStep;	//Wh

	//Aggregate the energy
	energyAvailableDischarge += energy;
 80043aa:	bf81      	itttt	hi
 80043ac:	4b0c      	ldrhi	r3, [pc, #48]	; (80043e0 <performDischargeStep+0x70>)
 80043ae:	ed9f 7a0d 	vldrhi	s14, [pc, #52]	; 80043e4 <performDischargeStep+0x74>
 80043b2:	edd3 7a00 	vldrhi	s15, [r3]
 80043b6:	eee0 7a07 	vfmahi.f32	s15, s0, s14

	return 1;
 80043ba:	bf8a      	itet	hi
 80043bc:	2001      	movhi	r0, #1
		return 0;
 80043be:	2000      	movls	r0, #0
	energyAvailableDischarge += energy;
 80043c0:	edc3 7a00 	vstrhi	s15, [r3]
}
 80043c4:	bd08      	pop	{r3, pc}
 80043c6:	bf00      	nop
 80043c8:	42c80000 	.word	0x42c80000
 80043cc:	bdcccccd 	.word	0xbdcccccd
 80043d0:	20000090 	.word	0x20000090
 80043d4:	200000cc 	.word	0x200000cc
 80043d8:	200009a0 	.word	0x200009a0
 80043dc:	40333333 	.word	0x40333333
 80043e0:	2000099c 	.word	0x2000099c
 80043e4:	3dcccccd 	.word	0x3dcccccd

080043e8 <setupEnergyAvailableDischarge>:

//This function is called once when setting up a new iteration of the energy available calculation
void setupEnergyAvailableDischarge(float soc){

	energyAvailableDischarge = 0;
 80043e8:	4b02      	ldr	r3, [pc, #8]	; (80043f4 <setupEnergyAvailableDischarge+0xc>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]
	performDischargeStep(soc);
 80043ee:	f7ff bfbf 	b.w	8004370 <performDischargeStep>
 80043f2:	bf00      	nop
 80043f4:	2000099c 	.word	0x2000099c

080043f8 <calculateEnergyAvailableDischarge>:
}

//Recursive call to find the energyAvailable for discharge
//When caller receives a return value of 1, it can read the energyAvailableDischarge
int calculateEnergyAvailableDischarge(){
 80043f8:	b510      	push	{r4, lr}

	//Exit condition
	if(performDischargeStep(simulatedSOC) == 0)
 80043fa:	4c04      	ldr	r4, [pc, #16]	; (800440c <calculateEnergyAvailableDischarge+0x14>)
 80043fc:	ed94 0a00 	vldr	s0, [r4]
 8004400:	f7ff ffb6 	bl	8004370 <performDischargeStep>
 8004404:	2800      	cmp	r0, #0
 8004406:	d1f9      	bne.n	80043fc <calculateEnergyAvailableDischarge+0x4>
		return 1;

	//Recursive call
	calculateEnergyAvailableDischarge();

}
 8004408:	2001      	movs	r0, #1
 800440a:	bd10      	pop	{r4, pc}
 800440c:	200009a0 	.word	0x200009a0

08004410 <getEnergyAvaialbelDischarge>:

float getEnergyAvaialbelDischarge(){

	return energyAvailableDischarge;

}
 8004410:	4b01      	ldr	r3, [pc, #4]	; (8004418 <getEnergyAvaialbelDischarge+0x8>)
 8004412:	ed93 0a00 	vldr	s0, [r3]
 8004416:	4770      	bx	lr
 8004418:	2000099c 	.word	0x2000099c

0800441c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800441c:	4b03      	ldr	r3, [pc, #12]	; (800442c <vApplicationGetIdleTaskMemory+0x10>)
 800441e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004420:	4b03      	ldr	r3, [pc, #12]	; (8004430 <vApplicationGetIdleTaskMemory+0x14>)
 8004422:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	4770      	bx	lr
 800442c:	200019a4 	.word	0x200019a4
 8004430:	200009a4 	.word	0x200009a4

08004434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004434:	b530      	push	{r4, r5, lr}
 8004436:	b0a7      	sub	sp, #156	; 0x9c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004438:	2228      	movs	r2, #40	; 0x28
 800443a:	2100      	movs	r1, #0
 800443c:	a806      	add	r0, sp, #24
 800443e:	f001 fb68 	bl	8005b12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004442:	2214      	movs	r2, #20
 8004444:	2100      	movs	r1, #0
 8004446:	a801      	add	r0, sp, #4
 8004448:	f001 fb63 	bl	8005b12 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800444c:	2258      	movs	r2, #88	; 0x58
 800444e:	2100      	movs	r1, #0
 8004450:	a810      	add	r0, sp, #64	; 0x40
 8004452:	f001 fb5e 	bl	8005b12 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004456:	2301      	movs	r3, #1
 8004458:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800445a:	2310      	movs	r3, #16
 800445c:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800445e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004462:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004464:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004466:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004468:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800446c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800446e:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004470:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004472:	f7fd fa99 	bl	80019a8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004476:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004478:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800447a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800447c:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800447e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004482:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004484:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004486:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004488:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800448a:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800448c:	f7fd fd54 	bl	8001f38 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8004490:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <SystemClock_Config+0x74>)
 8004492:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004494:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004496:	9412      	str	r4, [sp, #72]	; 0x48
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004498:	9413      	str	r4, [sp, #76]	; 0x4c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800449a:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 800449c:	9422      	str	r4, [sp, #136]	; 0x88
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 800449e:	9423      	str	r4, [sp, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044a0:	f7fd fe28 	bl	80020f4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80044a4:	b027      	add	sp, #156	; 0x9c
 80044a6:	bd30      	pop	{r4, r5, pc}
 80044a8:	01800023 	.word	0x01800023

080044ac <main>:
{
 80044ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b0:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 80044b2:	f7fc fcd3 	bl	8000e5c <HAL_Init>
  SystemClock_Config();
 80044b6:	f7ff ffbd 	bl	8004434 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ba:	2214      	movs	r2, #20
 80044bc:	2100      	movs	r1, #0
 80044be:	a807      	add	r0, sp, #28
 80044c0:	f001 fb27 	bl	8005b12 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044c4:	4b9c      	ldr	r3, [pc, #624]	; (8004738 <main+0x28c>)
  hdac1.Instance = DAC1;
 80044c6:	4d9d      	ldr	r5, [pc, #628]	; (800473c <main+0x290>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044c8:	695a      	ldr	r2, [r3, #20]
  htim6.Instance = TIM6;
 80044ca:	4e9d      	ldr	r6, [pc, #628]	; (8004740 <main+0x294>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044cc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80044d0:	615a      	str	r2, [r3, #20]
 80044d2:	695a      	ldr	r2, [r3, #20]
 80044d4:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80044d8:	9203      	str	r2, [sp, #12]
 80044da:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80044dc:	695a      	ldr	r2, [r3, #20]
 80044de:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80044e2:	615a      	str	r2, [r3, #20]
 80044e4:	695a      	ldr	r2, [r3, #20]
 80044e6:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80044ea:	9204      	str	r2, [sp, #16]
 80044ec:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ee:	695a      	ldr	r2, [r3, #20]
 80044f0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80044f4:	615a      	str	r2, [r3, #20]
 80044f6:	695a      	ldr	r2, [r3, #20]
 80044f8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80044fc:	9205      	str	r2, [sp, #20]
 80044fe:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004500:	695a      	ldr	r2, [r3, #20]
 8004502:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004506:	615a      	str	r2, [r3, #20]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800450e:	9306      	str	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_USR2_Pin, GPIO_PIN_RESET);
 8004510:	2200      	movs	r2, #0
 8004512:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800451a:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_USR2_Pin, GPIO_PIN_RESET);
 800451c:	f7fc fed8 	bl	80012d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CHG_EN_Pin|LED_USR1_Pin, GPIO_PIN_RESET);
 8004520:	2200      	movs	r2, #0
 8004522:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8004526:	4887      	ldr	r0, [pc, #540]	; (8004744 <main+0x298>)
 8004528:	f7fc fed2 	bl	80012d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800452c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004530:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8004532:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004534:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004536:	4b84      	ldr	r3, [pc, #528]	; (8004748 <main+0x29c>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004538:	4884      	ldr	r0, [pc, #528]	; (800474c <main+0x2a0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800453a:	9308      	str	r3, [sp, #32]

  /*Configure GPIO pins : LD2_Pin LED_USR2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_USR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800453c:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004540:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004542:	f7fc fdef 	bl	8001124 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|LED_USR2_Pin;
 8004546:	f44f 6384 	mov.w	r3, #1056	; 0x420
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800454a:	a907      	add	r1, sp, #28
 800454c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LD2_Pin|LED_USR2_Pin;
 8004550:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004552:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004556:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004558:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800455a:	f7fc fde3 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHG_EN_Pin LED_USR1_Pin */
  GPIO_InitStruct.Pin = CHG_EN_Pin|LED_USR1_Pin;
 800455e:	f44f 6381 	mov.w	r3, #1032	; 0x408
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004562:	a907      	add	r1, sp, #28
 8004564:	4877      	ldr	r0, [pc, #476]	; (8004744 <main+0x298>)
  GPIO_InitStruct.Pin = CHG_EN_Pin|LED_USR1_Pin;
 8004566:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004568:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800456c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800456e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004570:	f7fc fdd8 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_INTERRUPT_Pin S1_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = S2_INTERRUPT_Pin|S1_INTERRUPT_Pin;
 8004574:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004578:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800457a:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800457c:	4b74      	ldr	r3, [pc, #464]	; (8004750 <main+0x2a4>)
 800457e:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004584:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004588:	f7fc fdcc 	bl	8001124 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800458c:	4622      	mov	r2, r4
 800458e:	2105      	movs	r1, #5
 8004590:	2017      	movs	r0, #23
 8004592:	f7fc fcad 	bl	8000ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004596:	2017      	movs	r0, #23
 8004598:	f7fc fcde 	bl	8000f58 <HAL_NVIC_EnableIRQ>
  hdac1.Instance = DAC1;
 800459c:	4b6d      	ldr	r3, [pc, #436]	; (8004754 <main+0x2a8>)
 800459e:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80045a0:	4628      	mov	r0, r5
  DAC_ChannelConfTypeDef sConfig = {0};
 80045a2:	9407      	str	r4, [sp, #28]
 80045a4:	9408      	str	r4, [sp, #32]
 80045a6:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80045a8:	f7fc fcfa 	bl	8000fa0 <HAL_DAC_Init>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80045ac:	a907      	add	r1, sp, #28
 80045ae:	4622      	mov	r2, r4
 80045b0:	4628      	mov	r0, r5
  hi2c1.Instance = I2C1;
 80045b2:	4d69      	ldr	r5, [pc, #420]	; (8004758 <main+0x2ac>)
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80045b4:	9407      	str	r4, [sp, #28]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80045b6:	9408      	str	r4, [sp, #32]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80045b8:	f7fc fd3f 	bl	800103a <HAL_DAC_ConfigChannel>
  hi2c1.Init.Timing = 0x2000090E;
 80045bc:	4a67      	ldr	r2, [pc, #412]	; (800475c <main+0x2b0>)
 80045be:	4b68      	ldr	r3, [pc, #416]	; (8004760 <main+0x2b4>)
  hi2c1.Init.OwnAddress1 = 0;
 80045c0:	60ac      	str	r4, [r5, #8]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80045c2:	4628      	mov	r0, r5
  hi2c1.Init.Timing = 0x2000090E;
 80045c4:	e885 000c 	stmia.w	r5, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80045c8:	f8c5 800c 	str.w	r8, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80045cc:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80045ce:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80045d0:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80045d2:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80045d4:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80045d6:	f7fc ffd4 	bl	8001582 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80045da:	4621      	mov	r1, r4
 80045dc:	4628      	mov	r0, r5
 80045de:	f7fd f997 	bl	8001910 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80045e2:	4621      	mov	r1, r4
 80045e4:	4628      	mov	r0, r5
 80045e6:	f7fd f9b9 	bl	800195c <HAL_I2CEx_ConfigDigitalFilter>
  htim6.Init.Prescaler = 36000;
 80045ea:	4b5e      	ldr	r3, [pc, #376]	; (8004764 <main+0x2b8>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045ec:	60b4      	str	r4, [r6, #8]
  htim6.Init.Prescaler = 36000;
 80045ee:	f648 4ba0 	movw	fp, #36000	; 0x8ca0
  htim6.Init.Period = 2500;
 80045f2:	f640 19c4 	movw	r9, #2500	; 0x9c4
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80045f6:	4630      	mov	r0, r6
  htim6.Init.Prescaler = 36000;
 80045f8:	e886 0808 	stmia.w	r6, {r3, fp}
  htim6.Init.Period = 2500;
 80045fc:	f8c6 900c 	str.w	r9, [r6, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004600:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004602:	9407      	str	r4, [sp, #28]
 8004604:	9408      	str	r4, [sp, #32]
 8004606:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004608:	f7fe f802 	bl	8002610 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800460c:	a907      	add	r1, sp, #28
 800460e:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004610:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004612:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004614:	f7fe f816 	bl	8002644 <HAL_TIMEx_MasterConfigSynchronization>
  huart2.Instance = USART2;
 8004618:	4853      	ldr	r0, [pc, #332]	; (8004768 <main+0x2bc>)
  huart2.Init.BaudRate = 38400;
 800461a:	4b54      	ldr	r3, [pc, #336]	; (800476c <main+0x2c0>)
  htim7.Instance = TIM7;
 800461c:	4e54      	ldr	r6, [pc, #336]	; (8004770 <main+0x2c4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800461e:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 38400;
 8004620:	f44f 4716 	mov.w	r7, #38400	; 0x9600
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004624:	f04f 0a0c 	mov.w	sl, #12
  huart2.Init.BaudRate = 38400;
 8004628:	e880 0088 	stmia.w	r0, {r3, r7}
  huart2.Init.StopBits = UART_STOPBITS_1;
 800462c:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800462e:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004630:	f8c0 a014 	str.w	sl, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004634:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004636:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004638:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800463a:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800463c:	f7fe fb3e 	bl	8002cbc <HAL_UART_Init>
  htim7.Instance = TIM7;
 8004640:	4b4c      	ldr	r3, [pc, #304]	; (8004774 <main+0x2c8>)
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004642:	60b4      	str	r4, [r6, #8]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004644:	4630      	mov	r0, r6
  htim7.Init.Prescaler = 0;
 8004646:	e886 0018 	stmia.w	r6, {r3, r4}
  htim7.Init.Period = 0;
 800464a:	60f4      	str	r4, [r6, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800464c:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800464e:	9407      	str	r4, [sp, #28]
 8004650:	9408      	str	r4, [sp, #32]
 8004652:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004654:	f7fd ffdc 	bl	8002610 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004658:	a907      	add	r1, sp, #28
 800465a:	4630      	mov	r0, r6
  htim16.Instance = TIM16;
 800465c:	4e46      	ldr	r6, [pc, #280]	; (8004778 <main+0x2cc>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800465e:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004660:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004662:	f7fd ffef 	bl	8002644 <HAL_TIMEx_MasterConfigSynchronization>
  htim16.Instance = TIM16;
 8004666:	4b45      	ldr	r3, [pc, #276]	; (800477c <main+0x2d0>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004668:	60b4      	str	r4, [r6, #8]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800466a:	4630      	mov	r0, r6
  htim16.Init.Prescaler = 36000;
 800466c:	e886 0808 	stmia.w	r6, {r3, fp}
  htim16.Init.Period = 2500;
 8004670:	f8c6 900c 	str.w	r9, [r6, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004674:	6134      	str	r4, [r6, #16]
  htim16.Init.RepetitionCounter = 0;
 8004676:	6174      	str	r4, [r6, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004678:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800467a:	f7fd ffc9 	bl	8002610 <HAL_TIM_Base_Init>
  htim17.Instance = TIM17;
 800467e:	4840      	ldr	r0, [pc, #256]	; (8004780 <main+0x2d4>)
 8004680:	4b40      	ldr	r3, [pc, #256]	; (8004784 <main+0x2d8>)
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004682:	6084      	str	r4, [r0, #8]
  htim17.Init.Prescaler = 36000;
 8004684:	e880 0808 	stmia.w	r0, {r3, fp}
  htim17.Init.Period = 2500;
 8004688:	f8c0 900c 	str.w	r9, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800468c:	6104      	str	r4, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 800468e:	6144      	str	r4, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004690:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004692:	f7fd ffbd 	bl	8002610 <HAL_TIM_Base_Init>
  huart1.Instance = USART1;
 8004696:	483c      	ldr	r0, [pc, #240]	; (8004788 <main+0x2dc>)
 8004698:	4b3c      	ldr	r3, [pc, #240]	; (800478c <main+0x2e0>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800469a:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 38400;
 800469c:	e880 0088 	stmia.w	r0, {r3, r7}
  huart1.Init.StopBits = UART_STOPBITS_1;
 80046a0:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80046a2:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80046a4:	f8c0 a014 	str.w	sl, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046a8:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80046aa:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80046ac:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80046ae:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80046b0:	f7fe fb04 	bl	8002cbc <HAL_UART_Init>
  ssd1306_Init();
 80046b4:	f000 fae0 	bl	8004c78 <ssd1306_Init>
  ssd1306_Fill(Black);
 80046b8:	4620      	mov	r0, r4
 80046ba:	f000 faa9 	bl	8004c10 <ssd1306_Fill>
  ssd1306_SetCursor(15,04);
 80046be:	2104      	movs	r1, #4
 80046c0:	200f      	movs	r0, #15
 80046c2:	f000 fbc7 	bl	8004e54 <ssd1306_SetCursor>
  ssd1306_WriteString("BMS", Font_16x26, White);
 80046c6:	4a32      	ldr	r2, [pc, #200]	; (8004790 <main+0x2e4>)
 80046c8:	4832      	ldr	r0, [pc, #200]	; (8004794 <main+0x2e8>)
 80046ca:	ca06      	ldmia	r2, {r1, r2}
 80046cc:	4643      	mov	r3, r8
 80046ce:	f000 fbab 	bl	8004e28 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80046d2:	f000 faab 	bl	8004c2c <ssd1306_UpdateScreen>
  LTC2990_ConfigureControlReg(&hi2c1);
 80046d6:	4628      	mov	r0, r5
 80046d8:	f7ff fcf0 	bl	80040bc <LTC2990_ConfigureControlReg>
  HAL_TIM_Base_Start_IT(&htim16);
 80046dc:	4630      	mov	r0, r6
 80046de:	f7fd fe4d 	bl	800237c <HAL_TIM_Base_Start_IT>
  usRegInputBuf[0] = 11;
 80046e2:	4b2d      	ldr	r3, [pc, #180]	; (8004798 <main+0x2ec>)
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024, defaultTaskBuffer, &defaultTaskControlBlock);
 80046e4:	4e2d      	ldr	r6, [pc, #180]	; (800479c <main+0x2f0>)
  usRegInputBuf[0] = 11;
 80046e6:	220b      	movs	r2, #11
 80046e8:	801a      	strh	r2, [r3, #0]
  usRegInputBuf[1] = 22;
 80046ea:	2216      	movs	r2, #22
 80046ec:	805a      	strh	r2, [r3, #2]
  usRegInputBuf[2] = 33;
 80046ee:	2221      	movs	r2, #33	; 0x21
 80046f0:	809a      	strh	r2, [r3, #4]
  usRegInputBuf[3] = 44;
 80046f2:	222c      	movs	r2, #44	; 0x2c
 80046f4:	80da      	strh	r2, [r3, #6]
  usRegInputBuf[4] = 55;
 80046f6:	2237      	movs	r2, #55	; 0x37
 80046f8:	811a      	strh	r2, [r3, #8]
  usRegInputBuf[5] = 66;
 80046fa:	2242      	movs	r2, #66	; 0x42
 80046fc:	815a      	strh	r2, [r3, #10]
  usRegInputBuf[6] = 77;
 80046fe:	224d      	movs	r2, #77	; 0x4d
 8004700:	819a      	strh	r2, [r3, #12]
  usRegInputBuf[7] = 88;
 8004702:	2258      	movs	r2, #88	; 0x58
 8004704:	81da      	strh	r2, [r3, #14]
  eStatus = eMBInit( MB_RTU, 0x0A, 0, 38400, MB_PAR_NONE );
 8004706:	210a      	movs	r1, #10
 8004708:	463b      	mov	r3, r7
 800470a:	4622      	mov	r2, r4
 800470c:	9400      	str	r4, [sp, #0]
 800470e:	4620      	mov	r0, r4
 8004710:	f7fe fcbc 	bl	800308c <eMBInit>
  eStatus = eMBEnable();
 8004714:	f7fe fd12 	bl	800313c <eMBEnable>
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024, defaultTaskBuffer, &defaultTaskControlBlock);
 8004718:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800471a:	ad07      	add	r5, sp, #28
 800471c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800471e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004722:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004726:	4621      	mov	r1, r4
 8004728:	a807      	add	r0, sp, #28
 800472a:	f7fe ffa6 	bl	800367a <osThreadCreate>
 800472e:	4b1c      	ldr	r3, [pc, #112]	; (80047a0 <main+0x2f4>)
 8004730:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8004732:	f7fe ff9d 	bl	8003670 <osKernelStart>
 8004736:	e7fe      	b.n	8004736 <main+0x28a>
 8004738:	40021000 	.word	0x40021000
 800473c:	200020f4 	.word	0x200020f4
 8004740:	20002244 	.word	0x20002244
 8004744:	48000400 	.word	0x48000400
 8004748:	10110000 	.word	0x10110000
 800474c:	48000800 	.word	0x48000800
 8004750:	10210000 	.word	0x10210000
 8004754:	40007400 	.word	0x40007400
 8004758:	20002108 	.word	0x20002108
 800475c:	40005400 	.word	0x40005400
 8004760:	2000090e 	.word	0x2000090e
 8004764:	40001000 	.word	0x40001000
 8004768:	200033d4 	.word	0x200033d4
 800476c:	40004400 	.word	0x40004400
 8004770:	20003494 	.word	0x20003494
 8004774:	40001400 	.word	0x40001400
 8004778:	20003454 	.word	0x20003454
 800477c:	40014400 	.word	0x40014400
 8004780:	20002160 	.word	0x20002160
 8004784:	40014800 	.word	0x40014800
 8004788:	200021b4 	.word	0x200021b4
 800478c:	40013800 	.word	0x40013800
 8004790:	20000108 	.word	0x20000108
 8004794:	08008cf2 	.word	0x08008cf2
 8004798:	20001b14 	.word	0x20001b14
 800479c:	08007638 	.word	0x08007638
 80047a0:	200020f0 	.word	0x200020f0

080047a4 <getLatestADCValues>:
		//If state is idle
		//Start counting rest time
	}
}

void getLatestADCValues(){
 80047a4:	b537      	push	{r0, r1, r2, r4, r5, lr}

	float battV_2 = 0;
	float voltageADCVcc = 0;

	//Trigger a new conversion
	LTC2990_Trigger(&hi2c1);
 80047a6:	4c13      	ldr	r4, [pc, #76]	; (80047f4 <getLatestADCValues+0x50>)
	float voltageADCVcc = 0;
 80047a8:	ad02      	add	r5, sp, #8
	float battV_2 = 0;
 80047aa:	2300      	movs	r3, #0
	float voltageADCVcc = 0;
 80047ac:	f845 3d04 	str.w	r3, [r5, #-4]!
	LTC2990_Trigger(&hi2c1);
 80047b0:	4620      	mov	r0, r4
	float battV_2 = 0;
 80047b2:	9300      	str	r3, [sp, #0]
	LTC2990_Trigger(&hi2c1);
 80047b4:	f7ff fc94 	bl	80040e0 <LTC2990_Trigger>
	LTC2990_WaitForConversion(&hi2c1, 100);
 80047b8:	2164      	movs	r1, #100	; 0x64
 80047ba:	4620      	mov	r0, r4
 80047bc:	f7ff fca2 	bl	8004104 <LTC2990_WaitForConversion>

	//Quick ADC test - Read Vcc
	LTC2990_ReadVoltage(&hi2c1, VCC, &voltageADCVcc);
 80047c0:	462a      	mov	r2, r5

	//Current reading
	LTC2990_ReadVoltage(&hi2c1, BATTV, &lastReadBattV);
 80047c2:	4d0d      	ldr	r5, [pc, #52]	; (80047f8 <getLatestADCValues+0x54>)
	LTC2990_ReadVoltage(&hi2c1, VCC, &voltageADCVcc);
 80047c4:	2100      	movs	r1, #0
 80047c6:	4620      	mov	r0, r4
 80047c8:	f7ff fdc0 	bl	800434c <LTC2990_ReadVoltage>
	LTC2990_ReadVoltage(&hi2c1, BATTV, &lastReadBattV);
 80047cc:	462a      	mov	r2, r5
 80047ce:	2101      	movs	r1, #1
 80047d0:	4620      	mov	r0, r4
 80047d2:	f7ff fdbb 	bl	800434c <LTC2990_ReadVoltage>
	LTC2990_ReadVoltage(&hi2c1, BATTV_2, &battV_2);
 80047d6:	466a      	mov	r2, sp
 80047d8:	2104      	movs	r1, #4
 80047da:	4620      	mov	r0, r4
 80047dc:	f7ff fdb6 	bl	800434c <LTC2990_ReadVoltage>
    LTC2990_ReadCurrent(&hi2c1, lastReadBattV, battV_2, &lastReadCurr_mA);
 80047e0:	4906      	ldr	r1, [pc, #24]	; (80047fc <getLatestADCValues+0x58>)
 80047e2:	eddd 0a00 	vldr	s1, [sp]
 80047e6:	ed95 0a00 	vldr	s0, [r5]
 80047ea:	4620      	mov	r0, r4
 80047ec:	f7ff fd90 	bl	8004310 <LTC2990_ReadCurrent>
}
 80047f0:	b003      	add	sp, #12
 80047f2:	bd30      	pop	{r4, r5, pc}
 80047f4:	20002108 	.word	0x20002108
 80047f8:	20001afc 	.word	0x20001afc
 80047fc:	20001b00 	.word	0x20001b00

08004800 <updateModbusInputRegisters>:
}

void updateModbusInputRegisters()
{
	/* ABCDEF */
	powerData.asFloat = lastComputedPower;
 8004800:	4b14      	ldr	r3, [pc, #80]	; (8004854 <updateModbusInputRegisters+0x54>)
{
 8004802:	b570      	push	{r4, r5, r6, lr}
	powerData.asFloat = lastComputedPower;
 8004804:	681d      	ldr	r5, [r3, #0]
 8004806:	4b14      	ldr	r3, [pc, #80]	; (8004858 <updateModbusInputRegisters+0x58>)
	socData.asFloat = currentCellSOC;
	currentData.asFloat = lastReadCurr_mA;
	battVData.asFloat = lastReadBattV;
	energyData.asFloat = lastComputedEnergy;

	usRegInputBuf[0] = currentState;
 8004808:	4e14      	ldr	r6, [pc, #80]	; (800485c <updateModbusInputRegisters+0x5c>)
	powerData.asFloat = lastComputedPower;
 800480a:	601d      	str	r5, [r3, #0]
	socData.asFloat = currentCellSOC;
 800480c:	4b14      	ldr	r3, [pc, #80]	; (8004860 <updateModbusInputRegisters+0x60>)
	usRegInputBuf[0] = currentState;
 800480e:	7836      	ldrb	r6, [r6, #0]
	socData.asFloat = currentCellSOC;
 8004810:	681c      	ldr	r4, [r3, #0]
 8004812:	4b14      	ldr	r3, [pc, #80]	; (8004864 <updateModbusInputRegisters+0x64>)
 8004814:	601c      	str	r4, [r3, #0]
	currentData.asFloat = lastReadCurr_mA;
 8004816:	4b14      	ldr	r3, [pc, #80]	; (8004868 <updateModbusInputRegisters+0x68>)
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	4b14      	ldr	r3, [pc, #80]	; (800486c <updateModbusInputRegisters+0x6c>)
 800481c:	6018      	str	r0, [r3, #0]
	battVData.asFloat = lastReadBattV;
 800481e:	4b14      	ldr	r3, [pc, #80]	; (8004870 <updateModbusInputRegisters+0x70>)
 8004820:	6819      	ldr	r1, [r3, #0]
 8004822:	4b14      	ldr	r3, [pc, #80]	; (8004874 <updateModbusInputRegisters+0x74>)
 8004824:	6019      	str	r1, [r3, #0]
	energyData.asFloat = lastComputedEnergy;
 8004826:	4b14      	ldr	r3, [pc, #80]	; (8004878 <updateModbusInputRegisters+0x78>)
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	4b14      	ldr	r3, [pc, #80]	; (800487c <updateModbusInputRegisters+0x7c>)
 800482c:	601a      	str	r2, [r3, #0]
	usRegInputBuf[0] = currentState;
 800482e:	4b14      	ldr	r3, [pc, #80]	; (8004880 <updateModbusInputRegisters+0x80>)
 8004830:	801e      	strh	r6, [r3, #0]
	usRegInputBuf[1] = powerData.asUInt32 >> 16;
	usRegInputBuf[2] = powerData.asUInt32;
 8004832:	809d      	strh	r5, [r3, #4]
	usRegInputBuf[1] = powerData.asUInt32 >> 16;
 8004834:	0c2e      	lsrs	r6, r5, #16
	usRegInputBuf[3] = socData.asUInt32 >> 16;
	usRegInputBuf[4] = socData.asUInt32;
 8004836:	811c      	strh	r4, [r3, #8]
	usRegInputBuf[3] = socData.asUInt32 >> 16;
 8004838:	0c25      	lsrs	r5, r4, #16
	usRegInputBuf[5] = currentData.asUInt32 >> 16;
	usRegInputBuf[6] = currentData.asUInt32;
 800483a:	8198      	strh	r0, [r3, #12]
	usRegInputBuf[5] = currentData.asUInt32 >> 16;
 800483c:	0c04      	lsrs	r4, r0, #16
	usRegInputBuf[7] = battVData.asUInt32 >> 16;
	usRegInputBuf[8] = battVData.asUInt32;
 800483e:	8219      	strh	r1, [r3, #16]
	usRegInputBuf[7] = battVData.asUInt32 >> 16;
 8004840:	0c08      	lsrs	r0, r1, #16
	usRegInputBuf[9] = energyData.asUInt32 >> 16;
 8004842:	0c11      	lsrs	r1, r2, #16
	usRegInputBuf[1] = powerData.asUInt32 >> 16;
 8004844:	805e      	strh	r6, [r3, #2]
	usRegInputBuf[3] = socData.asUInt32 >> 16;
 8004846:	80dd      	strh	r5, [r3, #6]
	usRegInputBuf[5] = currentData.asUInt32 >> 16;
 8004848:	815c      	strh	r4, [r3, #10]
	usRegInputBuf[7] = battVData.asUInt32 >> 16;
 800484a:	81d8      	strh	r0, [r3, #14]
	usRegInputBuf[9] = energyData.asUInt32 >> 16;
 800484c:	8259      	strh	r1, [r3, #18]
	usRegInputBuf[10] = energyData.asUInt32;
 800484e:	829a      	strh	r2, [r3, #20]
 8004850:	bd70      	pop	{r4, r5, r6, pc}
 8004852:	bf00      	nop
 8004854:	20001af8 	.word	0x20001af8
 8004858:	20002234 	.word	0x20002234
 800485c:	20001af1 	.word	0x20001af1
 8004860:	20001aec 	.word	0x20001aec
 8004864:	200034d4 	.word	0x200034d4
 8004868:	20001b00 	.word	0x20001b00
 800486c:	200021b0 	.word	0x200021b0
 8004870:	20001afc 	.word	0x20001afc
 8004874:	200020ec 	.word	0x200020ec
 8004878:	20001af4 	.word	0x20001af4
 800487c:	200021a0 	.word	0x200021a0
 8004880:	20001b14 	.word	0x20001b14

08004884 <calcSOC>:
}

void calcSOC(float ocv_V, float charrgeRemain_Ah){
 8004884:	b538      	push	{r3, r4, r5, lr}
	//Simple switch to start with
	if(currentState == IDLE){
 8004886:	4b10      	ldr	r3, [pc, #64]	; (80048c8 <calcSOC+0x44>)
 8004888:	4c10      	ldr	r4, [pc, #64]	; (80048cc <calcSOC+0x48>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	4d10      	ldr	r5, [pc, #64]	; (80048d0 <calcSOC+0x4c>)
void calcSOC(float ocv_V, float charrgeRemain_Ah){
 800488e:	ed2d 8b02 	vpush	{d8}
 8004892:	ed9f 8a10 	vldr	s16, [pc, #64]	; 80048d4 <calcSOC+0x50>
 8004896:	eef0 8a08 	vmov.f32	s17, #8	; 0x40400000  3.0
	if(currentState == IDLE){
 800489a:	b963      	cbnz	r3, 80048b6 <calcSOC+0x32>
		//If cell is not polarized.
		currentCellSOC = socByOCV(ocv_V);
 800489c:	f000 fb0e 	bl	8004ebc <socByOCV>
		currChargeRemaining = (currentCellSOC / 100) * fullChargeCapacity;
 80048a0:	eec0 7a08 	vdiv.f32	s15, s0, s16
		currentCellSOC = socByOCV(ocv_V);
 80048a4:	ed84 0a00 	vstr	s0, [r4]
		currChargeRemaining = (currentCellSOC / 100) * fullChargeCapacity;
 80048a8:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80048ac:	edc5 7a00 	vstr	s15, [r5]
	} else {
		//If cell is polarized
		currentCellSOC = (currChargeRemaining/fullChargeCapacity) * 100;
	}
}
 80048b0:	ecbd 8b02 	vpop	{d8}
 80048b4:	bd38      	pop	{r3, r4, r5, pc}
		currentCellSOC = (currChargeRemaining/fullChargeCapacity) * 100;
 80048b6:	ed95 7a00 	vldr	s14, [r5]
 80048ba:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80048be:	ee67 7a88 	vmul.f32	s15, s15, s16
 80048c2:	edc4 7a00 	vstr	s15, [r4]
}
 80048c6:	e7f3      	b.n	80048b0 <calcSOC+0x2c>
 80048c8:	20001af1 	.word	0x20001af1
 80048cc:	20001aec 	.word	0x20001aec
 80048d0:	20001ae8 	.word	0x20001ae8
 80048d4:	42c80000 	.word	0x42c80000

080048d8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80048d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  getLatestADCValues();
	  calcSOC(lastReadBattV, currChargeRemaining);
 80048da:	4d13      	ldr	r5, [pc, #76]	; (8004928 <StartDefaultTask+0x50>)
 80048dc:	4c13      	ldr	r4, [pc, #76]	; (800492c <StartDefaultTask+0x54>)
	  lastComputedPower = computePower(lastReadBattV);
 80048de:	4e14      	ldr	r6, [pc, #80]	; (8004930 <StartDefaultTask+0x58>)
	  getLatestADCValues();
 80048e0:	f7ff ff60 	bl	80047a4 <getLatestADCValues>
	  calcSOC(lastReadBattV, currChargeRemaining);
 80048e4:	edd5 0a00 	vldr	s1, [r5]
 80048e8:	ed94 0a00 	vldr	s0, [r4]
 80048ec:	f7ff ffca 	bl	8004884 <calcSOC>
	  lastComputedPower = computePower(lastReadBattV);
 80048f0:	ed94 0a00 	vldr	s0, [r4]
 80048f4:	f000 fab4 	bl	8004e60 <computePower>

	  setupEnergyAvailableDischarge(currentCellSOC);
 80048f8:	4b0e      	ldr	r3, [pc, #56]	; (8004934 <StartDefaultTask+0x5c>)
	  lastComputedPower = computePower(lastReadBattV);
 80048fa:	ed86 0a00 	vstr	s0, [r6]
	  setupEnergyAvailableDischarge(currentCellSOC);
 80048fe:	ed93 0a00 	vldr	s0, [r3]
 8004902:	f7ff fd71 	bl	80043e8 <setupEnergyAvailableDischarge>

	  if(calculateEnergyAvailableDischarge() == 1)
 8004906:	f7ff fd77 	bl	80043f8 <calculateEnergyAvailableDischarge>
 800490a:	2801      	cmp	r0, #1
 800490c:	d104      	bne.n	8004918 <StartDefaultTask+0x40>
		  lastComputedEnergy = getEnergyAvaialbelDischarge();
 800490e:	f7ff fd7f 	bl	8004410 <getEnergyAvaialbelDischarge>
 8004912:	4b09      	ldr	r3, [pc, #36]	; (8004938 <StartDefaultTask+0x60>)
 8004914:	ed83 0a00 	vstr	s0, [r3]

	  //updateOLED();
	  updateModbusInputRegisters();
 8004918:	f7ff ff72 	bl	8004800 <updateModbusInputRegisters>
	  //updateSerialPort();
	  //HAL_Delay(1000); //Update rate to 1s
	  //Modbus Poll routine
	  eMBPoll();
 800491c:	f7fe fc20 	bl	8003160 <eMBPoll>
    osDelay(1);
 8004920:	2001      	movs	r0, #1
 8004922:	f7fe febf 	bl	80036a4 <osDelay>
	  getLatestADCValues();
 8004926:	e7db      	b.n	80048e0 <StartDefaultTask+0x8>
 8004928:	20001ae8 	.word	0x20001ae8
 800492c:	20001afc 	.word	0x20001afc
 8004930:	20001af8 	.word	0x20001af8
 8004934:	20001aec 	.word	0x20001aec
 8004938:	20001af4 	.word	0x20001af4

0800493c <HAL_GPIO_EXTI_Callback>:
	if(GPIO_Pin == S2_INTERRUPT_Pin || GPIO_Pin == S1_INTERRUPT_Pin)
 800493c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8004940:	d002      	beq.n	8004948 <HAL_GPIO_EXTI_Callback+0xc>
 8004942:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004946:	d102      	bne.n	800494e <HAL_GPIO_EXTI_Callback+0x12>
		HAL_TIM_Base_Start_IT(&htim6);
 8004948:	4801      	ldr	r0, [pc, #4]	; (8004950 <HAL_GPIO_EXTI_Callback+0x14>)
 800494a:	f7fd bd17 	b.w	800237c <HAL_TIM_Base_Start_IT>
 800494e:	4770      	bx	lr
 8004950:	20002244 	.word	0x20002244
 8004954:	00000000 	.word	0x00000000

08004958 <Discharging_Set>:
{
 8004958:	2864      	cmp	r0, #100	; 0x64
 800495a:	b538      	push	{r3, r4, r5, lr}
 800495c:	bf28      	it	cs
 800495e:	2064      	movcs	r0, #100	; 0x64
 8004960:	4605      	mov	r5, r0
	uint32_t dacCode = (uint32_t)(( pct / 100.0 ) * 4095.0);
 8004962:	f7fb fde7 	bl	8000534 <__aeabi_i2d>
 8004966:	2200      	movs	r2, #0
 8004968:	4b0f      	ldr	r3, [pc, #60]	; (80049a8 <Discharging_Set+0x50>)
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacCode);
 800496a:	4c10      	ldr	r4, [pc, #64]	; (80049ac <Discharging_Set+0x54>)
	uint32_t dacCode = (uint32_t)(( pct / 100.0 ) * 4095.0);
 800496c:	f7fb ff72 	bl	8000854 <__aeabi_ddiv>
 8004970:	a30b      	add	r3, pc, #44	; (adr r3, 80049a0 <Discharging_Set+0x48>)
 8004972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004976:	f7fb fe43 	bl	8000600 <__aeabi_dmul>
 800497a:	f7fc f853 	bl	8000a24 <__aeabi_d2uiz>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacCode);
 800497e:	2200      	movs	r2, #0
 8004980:	4603      	mov	r3, r0
 8004982:	4611      	mov	r1, r2
 8004984:	4620      	mov	r0, r4
 8004986:	f7fc fb1f 	bl	8000fc8 <HAL_DAC_SetValue>
	currentDchgPct = pct;
 800498a:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <Discharging_Set+0x58>)
 800498c:	701d      	strb	r5, [r3, #0]
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800498e:	4620      	mov	r0, r4
 8004990:	2100      	movs	r1, #0
}
 8004992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8004996:	f7fc bb29 	b.w	8000fec <HAL_DAC_Start>
 800499a:	bf00      	nop
 800499c:	f3af 8000 	nop.w
 80049a0:	00000000 	.word	0x00000000
 80049a4:	40affe00 	.word	0x40affe00
 80049a8:	40590000 	.word	0x40590000
 80049ac:	200020f4 	.word	0x200020f4
 80049b0:	20001af0 	.word	0x20001af0

080049b4 <Change_State.part.2>:
void Change_State(STATE new_state)
 80049b4:	b508      	push	{r3, lr}
		HAL_GPIO_WritePin(GPIOB, CHG_EN_Pin, GPIO_PIN_SET);
 80049b6:	4805      	ldr	r0, [pc, #20]	; (80049cc <Change_State.part.2+0x18>)
 80049b8:	2201      	movs	r2, #1
 80049ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80049be:	f7fc fc87 	bl	80012d0 <HAL_GPIO_WritePin>
		Discharging_Set(0); //Set discharge current to 0A
 80049c2:	2000      	movs	r0, #0
}
 80049c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Discharging_Set(0); //Set discharge current to 0A
 80049c8:	f7ff bfc6 	b.w	8004958 <Discharging_Set>
 80049cc:	48000400 	.word	0x48000400

080049d0 <Charging_Enable>:
	if(chg_en == CHG_ENABLE)
 80049d0:	2801      	cmp	r0, #1
{
 80049d2:	4602      	mov	r2, r0
		HAL_GPIO_WritePin(GPIOB, CHG_EN_Pin, GPIO_PIN_RESET);
 80049d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80049d8:	bf18      	it	ne
 80049da:	2200      	movne	r2, #0
 80049dc:	4801      	ldr	r0, [pc, #4]	; (80049e4 <Charging_Enable+0x14>)
 80049de:	f7fc bc77 	b.w	80012d0 <HAL_GPIO_WritePin>
 80049e2:	bf00      	nop
 80049e4:	48000400 	.word	0x48000400

080049e8 <Change_State>:
	currentState = new_state;
 80049e8:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <Change_State+0x34>)
{
 80049ea:	b510      	push	{r4, lr}
 80049ec:	4604      	mov	r4, r0
	currentState = new_state;
 80049ee:	7018      	strb	r0, [r3, #0]
	if(currentState == IDLE)
 80049f0:	b930      	cbnz	r0, 8004a00 <Change_State+0x18>
		Charging_Enable(CHG_DISABLE);
 80049f2:	f7ff ffed 	bl	80049d0 <Charging_Enable>
		Discharging_Set(0); //Set discharge current to 0A
 80049f6:	4620      	mov	r0, r4
}
 80049f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Discharging_Set(10); //Set discharge current to 10%
 80049fc:	f7ff bfac 	b.w	8004958 <Discharging_Set>
	else if(currentState == CHG)
 8004a00:	2801      	cmp	r0, #1
 8004a02:	d103      	bne.n	8004a0c <Change_State+0x24>
}
 8004a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a08:	f7ff bfd4 	b.w	80049b4 <Change_State.part.2>
	else if (currentState == DCHG)
 8004a0c:	2802      	cmp	r0, #2
 8004a0e:	d104      	bne.n	8004a1a <Change_State+0x32>
		Charging_Enable(CHG_DISABLE);
 8004a10:	2000      	movs	r0, #0
 8004a12:	f7ff ffdd 	bl	80049d0 <Charging_Enable>
		Discharging_Set(10); //Set discharge current to 10%
 8004a16:	200a      	movs	r0, #10
 8004a18:	e7ee      	b.n	80049f8 <Change_State+0x10>
 8004a1a:	bd10      	pop	{r4, pc}
 8004a1c:	20001af1 	.word	0x20001af1

08004a20 <HAL_TIM_PeriodElapsedCallback>:
{
 8004a20:	b538      	push	{r3, r4, r5, lr}
	if(htim == &htim6){
 8004a22:	4b3d      	ldr	r3, [pc, #244]	; (8004b18 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8004a24:	4298      	cmp	r0, r3
 8004a26:	d15c      	bne.n	8004ae2 <HAL_TIM_PeriodElapsedCallback+0xc2>
		HAL_GPIO_TogglePin(LED_USR1_GPIO_Port, LED_USR1_Pin); //LED1 toggles every 0.5 seconds
 8004a28:	2108      	movs	r1, #8
 8004a2a:	483c      	ldr	r0, [pc, #240]	; (8004b1c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004a2c:	4c3c      	ldr	r4, [pc, #240]	; (8004b20 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004a2e:	f7fc fc54 	bl	80012da <HAL_GPIO_TogglePin>
		if(HAL_GPIO_ReadPin(GPIOA, S1_INTERRUPT_Pin) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOA, S2_INTERRUPT_Pin) == GPIO_PIN_RESET)
 8004a32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a3a:	f7fc fc43 	bl	80012c4 <HAL_GPIO_ReadPin>
 8004a3e:	bb80      	cbnz	r0, 8004aa2 <HAL_TIM_PeriodElapsedCallback+0x82>
 8004a40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a48:	f7fc fc3c 	bl	80012c4 <HAL_GPIO_ReadPin>
 8004a4c:	4605      	mov	r5, r0
 8004a4e:	bb40      	cbnz	r0, 8004aa2 <HAL_TIM_PeriodElapsedCallback+0x82>
			if(currentState == IDLE)
 8004a50:	7822      	ldrb	r2, [r4, #0]
 8004a52:	b97a      	cbnz	r2, 8004a74 <HAL_TIM_PeriodElapsedCallback+0x54>
				HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_USR2_Pin, GPIO_PIN_SET);
 8004a54:	2201      	movs	r2, #1
 8004a56:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a5e:	f7fc fc37 	bl	80012d0 <HAL_GPIO_WritePin>
	currentState = new_state;
 8004a62:	2301      	movs	r3, #1
 8004a64:	7023      	strb	r3, [r4, #0]
 8004a66:	f7ff ffa5 	bl	80049b4 <Change_State.part.2>
		HAL_TIM_Base_Stop_IT(&htim6);
 8004a6a:	482b      	ldr	r0, [pc, #172]	; (8004b18 <HAL_TIM_PeriodElapsedCallback+0xf8>)
}
 8004a6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_TIM_Base_Stop_IT(&htim6);
 8004a70:	f7fd bc9a 	b.w	80023a8 <HAL_TIM_Base_Stop_IT>
			else if(currentState == CHG)
 8004a74:	2a01      	cmp	r2, #1
 8004a76:	d109      	bne.n	8004a8c <HAL_TIM_PeriodElapsedCallback+0x6c>
				HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_USR2_Pin, GPIO_PIN_SET);
 8004a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a7c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004a80:	f7fc fc26 	bl	80012d0 <HAL_GPIO_WritePin>
				Change_State(DCHG);
 8004a84:	2002      	movs	r0, #2
				Change_State(IDLE);
 8004a86:	f7ff ffaf 	bl	80049e8 <Change_State>
 8004a8a:	e7ee      	b.n	8004a6a <HAL_TIM_PeriodElapsedCallback+0x4a>
			else if(currentState == DCHG)
 8004a8c:	2a02      	cmp	r2, #2
 8004a8e:	d1fa      	bne.n	8004a86 <HAL_TIM_PeriodElapsedCallback+0x66>
				HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_USR2_Pin, GPIO_PIN_RESET);
 8004a90:	4602      	mov	r2, r0
 8004a92:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a9a:	f7fc fc19 	bl	80012d0 <HAL_GPIO_WritePin>
				Change_State(IDLE);
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	e7f1      	b.n	8004a86 <HAL_TIM_PeriodElapsedCallback+0x66>
		else if(currentState == DCHG && HAL_GPIO_ReadPin(GPIOA, S1_INTERRUPT_Pin) == GPIO_PIN_RESET)
 8004aa2:	7823      	ldrb	r3, [r4, #0]
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d10d      	bne.n	8004ac4 <HAL_TIM_PeriodElapsedCallback+0xa4>
 8004aa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ab0:	f7fc fc08 	bl	80012c4 <HAL_GPIO_ReadPin>
 8004ab4:	b930      	cbnz	r0, 8004ac4 <HAL_TIM_PeriodElapsedCallback+0xa4>
			uint8_t newDchgPct = currentDchgPct + 10;
 8004ab6:	4b1b      	ldr	r3, [pc, #108]	; (8004b24 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004ab8:	7818      	ldrb	r0, [r3, #0]
 8004aba:	300a      	adds	r0, #10
			Discharging_Set(newDchgPct);
 8004abc:	b2c0      	uxtb	r0, r0
 8004abe:	f7ff ff4b 	bl	8004958 <Discharging_Set>
 8004ac2:	e7d2      	b.n	8004a6a <HAL_TIM_PeriodElapsedCallback+0x4a>
		else if(currentState == DCHG && HAL_GPIO_ReadPin(GPIOA, S2_INTERRUPT_Pin) == GPIO_PIN_RESET)
 8004ac4:	7823      	ldrb	r3, [r4, #0]
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d1cf      	bne.n	8004a6a <HAL_TIM_PeriodElapsedCallback+0x4a>
 8004aca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ad2:	f7fc fbf7 	bl	80012c4 <HAL_GPIO_ReadPin>
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	d1c7      	bne.n	8004a6a <HAL_TIM_PeriodElapsedCallback+0x4a>
			uint8_t newDchgPct = currentDchgPct - 10;
 8004ada:	4b12      	ldr	r3, [pc, #72]	; (8004b24 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004adc:	7818      	ldrb	r0, [r3, #0]
 8004ade:	380a      	subs	r0, #10
 8004ae0:	e7ec      	b.n	8004abc <HAL_TIM_PeriodElapsedCallback+0x9c>
	else if(htim == &htim16){ //This timer ticks every one second and is used for charge remaning calculation
 8004ae2:	4b11      	ldr	r3, [pc, #68]	; (8004b28 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8004ae4:	4298      	cmp	r0, r3
 8004ae6:	d116      	bne.n	8004b16 <HAL_TIM_PeriodElapsedCallback+0xf6>
		if(currentState == DCHG || currentState == CHG){
 8004ae8:	4b0d      	ldr	r3, [pc, #52]	; (8004b20 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d811      	bhi.n	8004b16 <HAL_TIM_PeriodElapsedCallback+0xf6>
			currChargeRemaining += calcdeltaAh(1, lastReadCurr_mA / 1000.0);
 8004af2:	4b0e      	ldr	r3, [pc, #56]	; (8004b2c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8004af4:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8004b30 <HAL_TIM_PeriodElapsedCallback+0x110>
 8004af8:	edd3 0a00 	vldr	s1, [r3]
 8004afc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004b00:	eec0 0aa7 	vdiv.f32	s1, s1, s15
 8004b04:	f000 f9d0 	bl	8004ea8 <calcdeltaAh>
 8004b08:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8004b0a:	edd3 7a00 	vldr	s15, [r3]
 8004b0e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004b12:	ed83 0a00 	vstr	s0, [r3]
 8004b16:	bd38      	pop	{r3, r4, r5, pc}
 8004b18:	20002244 	.word	0x20002244
 8004b1c:	48000400 	.word	0x48000400
 8004b20:	20001af1 	.word	0x20001af1
 8004b24:	20001af0 	.word	0x20001af0
 8004b28:	20003454 	.word	0x20003454
 8004b2c:	20001b00 	.word	0x20001b00
 8004b30:	447a0000 	.word	0x447a0000
 8004b34:	20001ae8 	.word	0x20001ae8

08004b38 <eMBRegInputCB>:
    if( ( usAddress >= REG_INPUT_START )
 8004b38:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
{
 8004b3c:	b510      	push	{r4, lr}
    if( ( usAddress >= REG_INPUT_START )
 8004b3e:	d316      	bcc.n	8004b6e <eMBRegInputCB+0x36>
        && ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
 8004b40:	188b      	adds	r3, r1, r2
 8004b42:	f5b3 6f85 	cmp.w	r3, #1064	; 0x428
 8004b46:	dc12      	bgt.n	8004b6e <eMBRegInputCB+0x36>
 8004b48:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <eMBRegInputCB+0x3c>)
 8004b4a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8004b4e:	f2a1 71d2 	subw	r1, r1, #2002	; 0x7d2
 8004b52:	3002      	adds	r0, #2
        while( usNRegs > 0 )
 8004b54:	b90a      	cbnz	r2, 8004b5a <eMBRegInputCB+0x22>
    eMBErrorCode    eStatus = MB_ENOERR;
 8004b56:	4610      	mov	r0, r2
 8004b58:	bd10      	pop	{r4, pc}
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 8004b5a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
                ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
 8004b5e:	f800 3c01 	strb.w	r3, [r0, #-1]
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 8004b62:	0a1c      	lsrs	r4, r3, #8
            usNRegs--;
 8004b64:	3a01      	subs	r2, #1
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 8004b66:	f800 4c02 	strb.w	r4, [r0, #-2]
            usNRegs--;
 8004b6a:	b292      	uxth	r2, r2
 8004b6c:	e7f1      	b.n	8004b52 <eMBRegInputCB+0x1a>
        eStatus = MB_ENOREG;
 8004b6e:	2001      	movs	r0, #1
}
 8004b70:	bd10      	pop	{r4, pc}
 8004b72:	bf00      	nop
 8004b74:	20001b14 	.word	0x20001b14

08004b78 <eMBRegHoldingCB>:
    if( ( usAddress >= REG_HOLDING_START ) &&
 8004b78:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
{
 8004b7c:	b510      	push	{r4, lr}
    if( ( usAddress >= REG_HOLDING_START ) &&
 8004b7e:	d32b      	bcc.n	8004bd8 <eMBRegHoldingCB+0x60>
        ( usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS ) )
 8004b80:	188c      	adds	r4, r1, r2
    if( ( usAddress >= REG_HOLDING_START ) &&
 8004b82:	f5b4 6ffb 	cmp.w	r4, #2008	; 0x7d8
 8004b86:	dc27      	bgt.n	8004bd8 <eMBRegHoldingCB+0x60>
        switch ( eMode )
 8004b88:	b19b      	cbz	r3, 8004bb2 <eMBRegHoldingCB+0x3a>
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d118      	bne.n	8004bc0 <eMBRegHoldingCB+0x48>
 8004b8e:	4b13      	ldr	r3, [pc, #76]	; (8004bdc <eMBRegHoldingCB+0x64>)
 8004b90:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8004b94:	f6a1 71a2 	subw	r1, r1, #4002	; 0xfa2
 8004b98:	3002      	adds	r0, #2
            while( usNRegs > 0 )
 8004b9a:	b18a      	cbz	r2, 8004bc0 <eMBRegHoldingCB+0x48>
                usRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8004b9c:	f810 4c02 	ldrb.w	r4, [r0, #-2]
                usRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 8004ba0:	f810 3c01 	ldrb.w	r3, [r0, #-1]
                usNRegs--;
 8004ba4:	3a01      	subs	r2, #1
                usRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 8004ba6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8004baa:	f821 3f02 	strh.w	r3, [r1, #2]!
                usNRegs--;
 8004bae:	b292      	uxth	r2, r2
 8004bb0:	e7f2      	b.n	8004b98 <eMBRegHoldingCB+0x20>
 8004bb2:	4b0a      	ldr	r3, [pc, #40]	; (8004bdc <eMBRegHoldingCB+0x64>)
 8004bb4:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8004bb8:	f6a1 71a2 	subw	r1, r1, #4002	; 0xfa2
 8004bbc:	3002      	adds	r0, #2
            while( usNRegs > 0 )
 8004bbe:	b90a      	cbnz	r2, 8004bc4 <eMBRegHoldingCB+0x4c>
    eMBErrorCode    eStatus = MB_ENOERR;
 8004bc0:	2000      	movs	r0, #0
}
 8004bc2:	bd10      	pop	{r4, pc}
                *pucRegBuffer++ = ( UCHAR ) ( usRegHoldingBuf[iRegIndex] >> 8 );
 8004bc4:	f831 3f02 	ldrh.w	r3, [r1, #2]!
                *pucRegBuffer++ = ( UCHAR ) ( usRegHoldingBuf[iRegIndex] & 0xFF );
 8004bc8:	f800 3c01 	strb.w	r3, [r0, #-1]
                *pucRegBuffer++ = ( UCHAR ) ( usRegHoldingBuf[iRegIndex] >> 8 );
 8004bcc:	0a1c      	lsrs	r4, r3, #8
                usNRegs--;
 8004bce:	3a01      	subs	r2, #1
                *pucRegBuffer++ = ( UCHAR ) ( usRegHoldingBuf[iRegIndex] >> 8 );
 8004bd0:	f800 4c02 	strb.w	r4, [r0, #-2]
                usNRegs--;
 8004bd4:	b292      	uxth	r2, r2
 8004bd6:	e7f1      	b.n	8004bbc <eMBRegHoldingCB+0x44>
        eStatus = MB_ENOREG;
 8004bd8:	2001      	movs	r0, #1
 8004bda:	bd10      	pop	{r4, pc}
 8004bdc:	20001b04 	.word	0x20001b04

08004be0 <eMBRegCoilsCB>:
}
 8004be0:	2001      	movs	r0, #1
 8004be2:	4770      	bx	lr

08004be4 <eMBRegDiscreteCB>:
}
 8004be4:	2001      	movs	r0, #1
 8004be6:	4770      	bx	lr

08004be8 <ssd1306_WriteCommand>:


static SSD1306_t SSD1306;

void ssd1306_WriteCommand(uint8_t command)
{
 8004be8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004bea:	aa06      	add	r2, sp, #24
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8004bec:	230a      	movs	r3, #10
{
 8004bee:	f802 0d01 	strb.w	r0, [r2, #-1]!
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8004bf2:	9302      	str	r3, [sp, #8]
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e88d 000c 	stmia.w	sp, {r2, r3}
 8004bfa:	2178      	movs	r1, #120	; 0x78
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	4803      	ldr	r0, [pc, #12]	; (8004c0c <ssd1306_WriteCommand+0x24>)
 8004c00:	f7fc fd10 	bl	8001624 <HAL_I2C_Mem_Write>
}
 8004c04:	b007      	add	sp, #28
 8004c06:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c0a:	bf00      	nop
 8004c0c:	20002108 	.word	0x20002108

08004c10 <ssd1306_Fill>:
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004c10:	4905      	ldr	r1, [pc, #20]	; (8004c28 <ssd1306_Fill+0x18>)
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8004c12:	2300      	movs	r3, #0
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004c14:	1c02      	adds	r2, r0, #0
 8004c16:	bf18      	it	ne
 8004c18:	2201      	movne	r2, #1
 8004c1a:	4252      	negs	r2, r2
 8004c1c:	545a      	strb	r2, [r3, r1]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8004c1e:	3301      	adds	r3, #1
 8004c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c24:	d1f6      	bne.n	8004c14 <ssd1306_Fill+0x4>
	}
}
 8004c26:	4770      	bx	lr
 8004c28:	20001b9a 	.word	0x20001b9a

08004c2c <ssd1306_UpdateScreen>:

void ssd1306_UpdateScreen(void)
{
 8004c2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	for (i = 0; i < 8; i++) {
		ssd1306_WriteCommand(0xB0 + i);
		ssd1306_WriteCommand(0x00);
		ssd1306_WriteCommand(0x10);

		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 8004c2e:	4e10      	ldr	r6, [pc, #64]	; (8004c70 <ssd1306_UpdateScreen+0x44>)
 8004c30:	4d10      	ldr	r5, [pc, #64]	; (8004c74 <ssd1306_UpdateScreen+0x48>)
{
 8004c32:	2400      	movs	r4, #0
		ssd1306_WriteCommand(0xB0 + i);
 8004c34:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 8004c38:	b2c0      	uxtb	r0, r0
 8004c3a:	f7ff ffd5 	bl	8004be8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8004c3e:	2000      	movs	r0, #0
 8004c40:	f7ff ffd2 	bl	8004be8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8004c44:	2010      	movs	r0, #16
 8004c46:	f7ff ffcf 	bl	8004be8 <ssd1306_WriteCommand>
		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 8004c4a:	2364      	movs	r3, #100	; 0x64
 8004c4c:	9302      	str	r3, [sp, #8]
 8004c4e:	2380      	movs	r3, #128	; 0x80
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	eb06 13c4 	add.w	r3, r6, r4, lsl #7
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	2240      	movs	r2, #64	; 0x40
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	2178      	movs	r1, #120	; 0x78
 8004c5e:	4628      	mov	r0, r5
 8004c60:	3401      	adds	r4, #1
 8004c62:	f7fc fcdf 	bl	8001624 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8004c66:	2c08      	cmp	r4, #8
 8004c68:	d1e4      	bne.n	8004c34 <ssd1306_UpdateScreen+0x8>
	}
}
 8004c6a:	b004      	add	sp, #16
 8004c6c:	bd70      	pop	{r4, r5, r6, pc}
 8004c6e:	bf00      	nop
 8004c70:	20001b9a 	.word	0x20001b9a
 8004c74:	20002108 	.word	0x20002108

08004c78 <ssd1306_Init>:
{
 8004c78:	b508      	push	{r3, lr}
	HAL_Delay(100);
 8004c7a:	2064      	movs	r0, #100	; 0x64
 8004c7c:	f7fc f912 	bl	8000ea4 <HAL_Delay>
	ssd1306_WriteCommand(0xAE); //display off
 8004c80:	20ae      	movs	r0, #174	; 0xae
 8004c82:	f7ff ffb1 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004c86:	2020      	movs	r0, #32
 8004c88:	f7ff ffae 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8004c8c:	2010      	movs	r0, #16
 8004c8e:	f7ff ffab 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004c92:	20b0      	movs	r0, #176	; 0xb0
 8004c94:	f7ff ffa8 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004c98:	20c8      	movs	r0, #200	; 0xc8
 8004c9a:	f7ff ffa5 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	f7ff ffa2 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8004ca4:	2010      	movs	r0, #16
 8004ca6:	f7ff ff9f 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8004caa:	2040      	movs	r0, #64	; 0x40
 8004cac:	f7ff ff9c 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8004cb0:	2081      	movs	r0, #129	; 0x81
 8004cb2:	f7ff ff99 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8004cb6:	20ff      	movs	r0, #255	; 0xff
 8004cb8:	f7ff ff96 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8004cbc:	20a1      	movs	r0, #161	; 0xa1
 8004cbe:	f7ff ff93 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8004cc2:	20a6      	movs	r0, #166	; 0xa6
 8004cc4:	f7ff ff90 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8004cc8:	20a8      	movs	r0, #168	; 0xa8
 8004cca:	f7ff ff8d 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8004cce:	203f      	movs	r0, #63	; 0x3f
 8004cd0:	f7ff ff8a 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004cd4:	20a4      	movs	r0, #164	; 0xa4
 8004cd6:	f7ff ff87 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8004cda:	20d3      	movs	r0, #211	; 0xd3
 8004cdc:	f7ff ff84 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	f7ff ff81 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004ce6:	20d5      	movs	r0, #213	; 0xd5
 8004ce8:	f7ff ff7e 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004cec:	20f0      	movs	r0, #240	; 0xf0
 8004cee:	f7ff ff7b 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004cf2:	20d9      	movs	r0, #217	; 0xd9
 8004cf4:	f7ff ff78 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8004cf8:	2022      	movs	r0, #34	; 0x22
 8004cfa:	f7ff ff75 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8004cfe:	20da      	movs	r0, #218	; 0xda
 8004d00:	f7ff ff72 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8004d04:	2012      	movs	r0, #18
 8004d06:	f7ff ff6f 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8004d0a:	20db      	movs	r0, #219	; 0xdb
 8004d0c:	f7ff ff6c 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004d10:	2020      	movs	r0, #32
 8004d12:	f7ff ff69 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004d16:	208d      	movs	r0, #141	; 0x8d
 8004d18:	f7ff ff66 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8004d1c:	2014      	movs	r0, #20
 8004d1e:	f7ff ff63 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8004d22:	20af      	movs	r0, #175	; 0xaf
 8004d24:	f7ff ff60 	bl	8004be8 <ssd1306_WriteCommand>
	ssd1306_Fill(Black);
 8004d28:	2000      	movs	r0, #0
 8004d2a:	f7ff ff71 	bl	8004c10 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8004d2e:	f7ff ff7d 	bl	8004c2c <ssd1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8004d32:	4b03      	ldr	r3, [pc, #12]	; (8004d40 <ssd1306_Init+0xc8>)
	SSD1306.Initialized = 1;
 8004d34:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 8004d36:	2200      	movs	r2, #0
	SSD1306.Initialized = 1;
 8004d38:	7158      	strb	r0, [r3, #5]
	SSD1306.CurrentX = 0;
 8004d3a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8004d3c:	805a      	strh	r2, [r3, #2]
}
 8004d3e:	bd08      	pop	{r3, pc}
 8004d40:	20001b94 	.word	0x20001b94

08004d44 <ssd1306_DrawPixel>:

void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8004d44:	0603      	lsls	r3, r0, #24
{
 8004d46:	b530      	push	{r4, r5, lr}
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8004d48:	d41b      	bmi.n	8004d82 <ssd1306_DrawPixel+0x3e>
 8004d4a:	293f      	cmp	r1, #63	; 0x3f
 8004d4c:	d819      	bhi.n	8004d82 <ssd1306_DrawPixel+0x3e>
	{
		return;
	}

	if (SSD1306.Inverted)
 8004d4e:	4b0d      	ldr	r3, [pc, #52]	; (8004d84 <ssd1306_DrawPixel+0x40>)
 8004d50:	791b      	ldrb	r3, [r3, #4]
 8004d52:	b113      	cbz	r3, 8004d5a <ssd1306_DrawPixel+0x16>
	{
		color = (SSD1306_COLOR)!color;
 8004d54:	fab2 f282 	clz	r2, r2
 8004d58:	0952      	lsrs	r2, r2, #5
 8004d5a:	08cb      	lsrs	r3, r1, #3
 8004d5c:	2580      	movs	r5, #128	; 0x80
	}

	if (color == White)
 8004d5e:	2a01      	cmp	r2, #1
 8004d60:	4c09      	ldr	r4, [pc, #36]	; (8004d88 <ssd1306_DrawPixel+0x44>)
 8004d62:	f001 0107 	and.w	r1, r1, #7
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004d66:	fb05 0003 	mla	r0, r5, r3, r0
	if (color == White)
 8004d6a:	d104      	bne.n	8004d76 <ssd1306_DrawPixel+0x32>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004d6c:	408a      	lsls	r2, r1
 8004d6e:	5c21      	ldrb	r1, [r4, r0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	5422      	strb	r2, [r4, r0]
 8004d74:	bd30      	pop	{r4, r5, pc}
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004d76:	2201      	movs	r2, #1
 8004d78:	408a      	lsls	r2, r1
 8004d7a:	5c21      	ldrb	r1, [r4, r0]
 8004d7c:	ea21 0102 	bic.w	r1, r1, r2
 8004d80:	5421      	strb	r1, [r4, r0]
 8004d82:	bd30      	pop	{r4, r5, pc}
 8004d84:	20001b94 	.word	0x20001b94
 8004d88:	20001b9a 	.word	0x20001b9a

08004d8c <ssd1306_WriteChar>:
	}
}

//	color 	=> Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8004d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d90:	b087      	sub	sp, #28
 8004d92:	4607      	mov	r7, r0
 8004d94:	a806      	add	r0, sp, #24
 8004d96:	e900 0006 	stmdb	r0, {r1, r2}
 8004d9a:	469b      	mov	fp, r3
	uint32_t i, b, j;

	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8004d9c:	4b21      	ldr	r3, [pc, #132]	; (8004e24 <ssd1306_WriteChar+0x98>)
 8004d9e:	f89d 9010 	ldrb.w	r9, [sp, #16]
 8004da2:	881c      	ldrh	r4, [r3, #0]
 8004da4:	9301      	str	r3, [sp, #4]
 8004da6:	eb04 0209 	add.w	r2, r4, r9
 8004daa:	2a7f      	cmp	r2, #127	; 0x7f
 8004dac:	dc37      	bgt.n	8004e1e <ssd1306_WriteChar+0x92>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8004dae:	885b      	ldrh	r3, [r3, #2]
 8004db0:	f89d a011 	ldrb.w	sl, [sp, #17]
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	eb03 020a 	add.w	r2, r3, sl
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8004dba:	2a3f      	cmp	r2, #63	; 0x3f
 8004dbc:	dc2f      	bgt.n	8004e1e <ssd1306_WriteChar+0x92>
		return 0;
	}

	for (i = 0; i < Font.FontHeight; i++)
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004dbe:	f1a7 0220 	sub.w	r2, r7, #32
 8004dc2:	fb0a f302 	mul.w	r3, sl, r2
 8004dc6:	9303      	str	r3, [sp, #12]
 8004dc8:	2600      	movs	r6, #0
	for (i = 0; i < Font.FontHeight; i++)
 8004dca:	4556      	cmp	r6, sl
 8004dcc:	d306      	bcc.n	8004ddc <ssd1306_WriteChar+0x50>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
			}
		}
	}

	SSD1306.CurrentX += Font.FontWidth;
 8004dce:	9b01      	ldr	r3, [sp, #4]
 8004dd0:	444c      	add	r4, r9
 8004dd2:	801c      	strh	r4, [r3, #0]


	return ch;
}
 8004dd4:	4638      	mov	r0, r7
 8004dd6:	b007      	add	sp, #28
 8004dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004ddc:	9b03      	ldr	r3, [sp, #12]
 8004dde:	9905      	ldr	r1, [sp, #20]
 8004de0:	18f2      	adds	r2, r6, r3
		for (j = 0; j < Font.FontWidth; j++)
 8004de2:	2500      	movs	r5, #0
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004de4:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8004de8:	9302      	str	r3, [sp, #8]
 8004dea:	9b00      	ldr	r3, [sp, #0]
 8004dec:	eb03 0806 	add.w	r8, r3, r6
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004df0:	fa5f f888 	uxtb.w	r8, r8
		for (j = 0; j < Font.FontWidth; j++)
 8004df4:	454d      	cmp	r5, r9
 8004df6:	d301      	bcc.n	8004dfc <ssd1306_WriteChar+0x70>
	for (i = 0; i < Font.FontHeight; i++)
 8004df8:	3601      	adds	r6, #1
 8004dfa:	e7e6      	b.n	8004dca <ssd1306_WriteChar+0x3e>
			if ((b << j) & 0x8000)
 8004dfc:	9b02      	ldr	r3, [sp, #8]
 8004dfe:	fa03 f205 	lsl.w	r2, r3, r5
 8004e02:	0413      	lsls	r3, r2, #16
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004e04:	eb05 0004 	add.w	r0, r5, r4
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004e08:	bf56      	itet	pl
 8004e0a:	fabb f28b 	clzpl	r2, fp
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004e0e:	465a      	movmi	r2, fp
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004e10:	0952      	lsrpl	r2, r2, #5
 8004e12:	4641      	mov	r1, r8
 8004e14:	b2c0      	uxtb	r0, r0
 8004e16:	f7ff ff95 	bl	8004d44 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8004e1a:	3501      	adds	r5, #1
 8004e1c:	e7ea      	b.n	8004df4 <ssd1306_WriteChar+0x68>
		return 0;
 8004e1e:	2700      	movs	r7, #0
 8004e20:	e7d8      	b.n	8004dd4 <ssd1306_WriteChar+0x48>
 8004e22:	bf00      	nop
 8004e24:	20001b94 	.word	0x20001b94

08004e28 <ssd1306_WriteString>:

char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8004e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e2a:	e88d 0006 	stmia.w	sp, {r1, r2}
 8004e2e:	466d      	mov	r5, sp
 8004e30:	461f      	mov	r7, r3
 8004e32:	1e46      	subs	r6, r0, #1

	while (*str)
 8004e34:	7874      	ldrb	r4, [r6, #1]
 8004e36:	b14c      	cbz	r4, 8004e4c <ssd1306_WriteString+0x24>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8004e38:	4620      	mov	r0, r4
 8004e3a:	463b      	mov	r3, r7
 8004e3c:	e895 0006 	ldmia.w	r5, {r1, r2}
 8004e40:	f7ff ffa4 	bl	8004d8c <ssd1306_WriteChar>
 8004e44:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 8004e48:	42a0      	cmp	r0, r4
 8004e4a:	d0f3      	beq.n	8004e34 <ssd1306_WriteString+0xc>
		str++;
	}


	return *str;
}
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	b003      	add	sp, #12
 8004e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004e54 <ssd1306_SetCursor>:

void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8004e54:	4b01      	ldr	r3, [pc, #4]	; (8004e5c <ssd1306_SetCursor+0x8>)
 8004e56:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8004e58:	8059      	strh	r1, [r3, #2]
 8004e5a:	4770      	bx	lr
 8004e5c:	20001b94 	.word	0x20001b94

08004e60 <computePower>:

	// Need to compute the number of A cell can discharge

	// Simple ohms law V = I*R

	float voltageDiff = cellV - uv_samsung25R;
 8004e60:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8004e9c <computePower+0x3c>
	if(voltageDiff < 0){ //Quick check cellV should never be below UV
		voltageDiff = 0;
 8004e64:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004ea0 <computePower+0x40>
	}

	float current = voltageDiff/ (ir_samsung25R / 1000);
 8004e68:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8004ea4 <computePower+0x44>
	float voltageDiff = cellV - uv_samsung25R;
 8004e6c:	ee70 7a67 	vsub.f32	s15, s0, s15
		voltageDiff = 0;
 8004e70:	eef4 7a47 	vcmp.f32	s15, s14
 8004e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e78:	bf48      	it	mi
 8004e7a:	eef0 7a47 	vmovmi.f32	s15, s14
	float current = voltageDiff/ (ir_samsung25R / 1000);
 8004e7e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	//Eg: if 0.7 / 20m = 35A

	//Since our cell samsung25R can do 100A < 1s and 20A continous

	if(current > maxConstCellCurr_samsung25R)
 8004e82:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
	{
		current = maxConstCellCurr_samsung25R;
 8004e86:	eeb4 7a67 	vcmp.f32	s14, s15
 8004e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e8e:	bfc8      	it	gt
 8004e90:	eeb0 7a67 	vmovgt.f32	s14, s15
	}

	return cellV * current; //Watts


}
 8004e94:	ee27 0a00 	vmul.f32	s0, s14, s0
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	40333333 	.word	0x40333333
 8004ea0:	00000000 	.word	0x00000000
 8004ea4:	3ca3d70a 	.word	0x3ca3d70a

08004ea8 <calcdeltaAh>:
 * based on timeInterval in seconds and current in amps
 */
float calcdeltaAh(float timeInterval_s, float current_A){

	//Ah = A * hours
	float deltaAh = (-current_A * timeInterval_s / 3600.0);
 8004ea8:	ee20 0ac0 	vnmul.f32	s0, s1, s0

	return deltaAh;
}
 8004eac:	eddf 7a02 	vldr	s15, [pc, #8]	; 8004eb8 <calcdeltaAh+0x10>
 8004eb0:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	45610000 	.word	0x45610000

08004ebc <socByOCV>:

float socByOCV(float ocv){

	return lookupSOCByOCV(ocv, defaultOcvTable, defaultTableSize, defaultSocTable);
 8004ebc:	4a02      	ldr	r2, [pc, #8]	; (8004ec8 <socByOCV+0xc>)
 8004ebe:	4803      	ldr	r0, [pc, #12]	; (8004ecc <socByOCV+0x10>)
 8004ec0:	210f      	movs	r1, #15
 8004ec2:	f000 b805 	b.w	8004ed0 <lookupSOCByOCV>
 8004ec6:	bf00      	nop
 8004ec8:	2000014c 	.word	0x2000014c
 8004ecc:	20000110 	.word	0x20000110

08004ed0 <lookupSOCByOCV>:
	int count = tableSize;

	int i;
	float dx, dy;

	if (restedOcvInput < ocvTable[0]) {
 8004ed0:	edd0 7a00 	vldr	s15, [r0]
 8004ed4:	eef4 7ac0 	vcmpe.f32	s15, s0
 8004ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8004edc:	b510      	push	{r4, lr}
	if (restedOcvInput < ocvTable[0]) {
 8004ede:	dd02      	ble.n	8004ee6 <lookupSOCByOCV+0x16>
		 * handle error here if you want */
		return socTable[0]; /* return minimum element */
	}

	if (restedOcvInput > ocvTable[count - 1]) {
		return socTable[count - 1]; /* return maximum */
 8004ee0:	ed92 0a00 	vldr	s0, [r2]
 8004ee4:	bd10      	pop	{r4, pc}
	if (restedOcvInput > ocvTable[count - 1]) {
 8004ee6:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
 8004eea:	3c01      	subs	r4, #1
 8004eec:	00a4      	lsls	r4, r4, #2
 8004eee:	1903      	adds	r3, r0, r4
 8004ef0:	edd3 7a00 	vldr	s15, [r3]
 8004ef4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004efc:	dc28      	bgt.n	8004f50 <lookupSOCByOCV+0x80>
 8004efe:	1d04      	adds	r4, r0, #4
 8004f00:	2300      	movs	r3, #0
	}

	/* find i, such that ocvTable[i] <= x < ocvTable[i+1] */
	for (i = 0; i < count - 1; i++) {
 8004f02:	3901      	subs	r1, #1
 8004f04:	428b      	cmp	r3, r1
 8004f06:	f103 0301 	add.w	r3, r3, #1
 8004f0a:	da06      	bge.n	8004f1a <lookupSOCByOCV+0x4a>
		if (ocvTable[i + 1] > restedOcvInput) {
 8004f0c:	ecf4 7a01 	vldmia	r4!, {s15}
 8004f10:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f18:	d5f4      	bpl.n	8004f04 <lookupSOCByOCV+0x34>
			break;
		}
	}

	/* interpolate */
	dx = ocvTable[i + 1] - ocvTable[i];
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	1f19      	subs	r1, r3, #4
 8004f1e:	1844      	adds	r4, r0, r1
	dy = socTable[i + 1] - socTable[i];
 8004f20:	4411      	add	r1, r2
 8004f22:	441a      	add	r2, r3
	dx = ocvTable[i + 1] - ocvTable[i];
 8004f24:	ed94 6a00 	vldr	s12, [r4]
	dy = socTable[i + 1] - socTable[i];
 8004f28:	edd1 6a00 	vldr	s13, [r1]
 8004f2c:	edd2 7a00 	vldr	s15, [r2]
	dx = ocvTable[i + 1] - ocvTable[i];
 8004f30:	4403      	add	r3, r0
	float socByOcv = socTable[i] + (restedOcvInput - ocvTable[i]) * dy / dx;
 8004f32:	ee30 0a46 	vsub.f32	s0, s0, s12
	dy = socTable[i + 1] - socTable[i];
 8004f36:	ee77 7ae6 	vsub.f32	s15, s15, s13
	dx = ocvTable[i + 1] - ocvTable[i];
 8004f3a:	ed93 7a00 	vldr	s14, [r3]
	float socByOcv = socTable[i] + (restedOcvInput - ocvTable[i]) * dy / dx;
 8004f3e:	ee67 7a80 	vmul.f32	s15, s15, s0
	dx = ocvTable[i + 1] - ocvTable[i];
 8004f42:	ee37 7a46 	vsub.f32	s14, s14, s12
	float socByOcv = socTable[i] + (restedOcvInput - ocvTable[i]) * dy / dx;
 8004f46:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8004f4a:	ee30 0a26 	vadd.f32	s0, s0, s13
	return socByOcv;
 8004f4e:	bd10      	pop	{r4, pc}
		return socTable[count - 1]; /* return maximum */
 8004f50:	4422      	add	r2, r4
 8004f52:	e7c5      	b.n	8004ee0 <lookupSOCByOCV+0x10>

08004f54 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f54:	4b0e      	ldr	r3, [pc, #56]	; (8004f90 <HAL_MspInit+0x3c>)
{
 8004f56:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f58:	699a      	ldr	r2, [r3, #24]
 8004f5a:	f042 0201 	orr.w	r2, r2, #1
 8004f5e:	619a      	str	r2, [r3, #24]
 8004f60:	699a      	ldr	r2, [r3, #24]
 8004f62:	f002 0201 	and.w	r2, r2, #1
 8004f66:	9200      	str	r2, [sp, #0]
 8004f68:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f6a:	69da      	ldr	r2, [r3, #28]
 8004f6c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004f70:	61da      	str	r2, [r3, #28]
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f78:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	210f      	movs	r1, #15
 8004f7e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f82:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004f84:	f7fb ffb4 	bl	8000ef0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f88:	b003      	add	sp, #12
 8004f8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f8e:	bf00      	nop
 8004f90:	40021000 	.word	0x40021000

08004f94 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004f94:	b510      	push	{r4, lr}
 8004f96:	4604      	mov	r4, r0
 8004f98:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f9a:	2214      	movs	r2, #20
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	a803      	add	r0, sp, #12
 8004fa0:	f000 fdb7 	bl	8005b12 <memset>
  if(hdac->Instance==DAC1)
 8004fa4:	6822      	ldr	r2, [r4, #0]
 8004fa6:	4b15      	ldr	r3, [pc, #84]	; (8004ffc <HAL_DAC_MspInit+0x68>)
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d124      	bne.n	8004ff6 <HAL_DAC_MspInit+0x62>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8004fac:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = DCHG_SET_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(DCHG_SET_GPIO_Port, &GPIO_InitStruct);
 8004fb0:	a903      	add	r1, sp, #12
    __HAL_RCC_DAC1_CLK_ENABLE();
 8004fb2:	69da      	ldr	r2, [r3, #28]
 8004fb4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004fb8:	61da      	str	r2, [r3, #28]
 8004fba:	69da      	ldr	r2, [r3, #28]
 8004fbc:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8004fc0:	9201      	str	r2, [sp, #4]
 8004fc2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fc4:	695a      	ldr	r2, [r3, #20]
 8004fc6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004fca:	615a      	str	r2, [r3, #20]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd2:	9302      	str	r3, [sp, #8]
 8004fd4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DCHG_SET_Pin;
 8004fd6:	2310      	movs	r3, #16
 8004fd8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(DCHG_SET_GPIO_Port, &GPIO_InitStruct);
 8004fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(DCHG_SET_GPIO_Port, &GPIO_InitStruct);
 8004fe2:	f7fc f89f 	bl	8001124 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8004fe6:	2036      	movs	r0, #54	; 0x36
 8004fe8:	2200      	movs	r2, #0
 8004fea:	2105      	movs	r1, #5
 8004fec:	f7fb ff80 	bl	8000ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004ff0:	2036      	movs	r0, #54	; 0x36
 8004ff2:	f7fb ffb1 	bl	8000f58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8004ff6:	b008      	add	sp, #32
 8004ff8:	bd10      	pop	{r4, pc}
 8004ffa:	bf00      	nop
 8004ffc:	40007400 	.word	0x40007400

08005000 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005000:	b510      	push	{r4, lr}
 8005002:	4604      	mov	r4, r0
 8005004:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005006:	2214      	movs	r2, #20
 8005008:	2100      	movs	r1, #0
 800500a:	a803      	add	r0, sp, #12
 800500c:	f000 fd81 	bl	8005b12 <memset>
  if(hi2c->Instance==I2C1)
 8005010:	6822      	ldr	r2, [r4, #0]
 8005012:	4b12      	ldr	r3, [pc, #72]	; (800505c <HAL_I2C_MspInit+0x5c>)
 8005014:	429a      	cmp	r2, r3
 8005016:	d11f      	bne.n	8005058 <HAL_I2C_MspInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005018:	4c11      	ldr	r4, [pc, #68]	; (8005060 <HAL_I2C_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800501a:	4812      	ldr	r0, [pc, #72]	; (8005064 <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800501c:	6963      	ldr	r3, [r4, #20]
 800501e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005022:	6163      	str	r3, [r4, #20]
 8005024:	6963      	ldr	r3, [r4, #20]
 8005026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800502a:	9301      	str	r3, [sp, #4]
 800502c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800502e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005032:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005034:	2312      	movs	r3, #18
 8005036:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005038:	2303      	movs	r3, #3
 800503a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800503c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800503e:	2304      	movs	r3, #4
 8005040:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005042:	f7fc f86f 	bl	8001124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005046:	69e3      	ldr	r3, [r4, #28]
 8005048:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800504c:	61e3      	str	r3, [r4, #28]
 800504e:	69e3      	ldr	r3, [r4, #28]
 8005050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005054:	9302      	str	r3, [sp, #8]
 8005056:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005058:	b008      	add	sp, #32
 800505a:	bd10      	pop	{r4, pc}
 800505c:	40005400 	.word	0x40005400
 8005060:	40021000 	.word	0x40021000
 8005064:	48000400 	.word	0x48000400

08005068 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(htim_base->Instance==TIM6)
 800506a:	6803      	ldr	r3, [r0, #0]
 800506c:	4a29      	ldr	r2, [pc, #164]	; (8005114 <HAL_TIM_Base_MspInit+0xac>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d114      	bne.n	800509c <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005072:	4b29      	ldr	r3, [pc, #164]	; (8005118 <HAL_TIM_Base_MspInit+0xb0>)
 8005074:	69da      	ldr	r2, [r3, #28]
 8005076:	f042 0210 	orr.w	r2, r2, #16
 800507a:	61da      	str	r2, [r3, #28]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	9300      	str	r3, [sp, #0]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8005084:	2036      	movs	r0, #54	; 0x36
 8005086:	2200      	movs	r2, #0
 8005088:	2105      	movs	r1, #5
    __HAL_RCC_TIM6_CLK_ENABLE();
 800508a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800508c:	f7fb ff30 	bl	8000ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005090:	2036      	movs	r0, #54	; 0x36
  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8005092:	f7fb ff61 	bl	8000f58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8005096:	b005      	add	sp, #20
 8005098:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM7)
 800509c:	4a1f      	ldr	r2, [pc, #124]	; (800511c <HAL_TIM_Base_MspInit+0xb4>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d110      	bne.n	80050c4 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80050a2:	4b1d      	ldr	r3, [pc, #116]	; (8005118 <HAL_TIM_Base_MspInit+0xb0>)
 80050a4:	69da      	ldr	r2, [r3, #28]
 80050a6:	f042 0220 	orr.w	r2, r2, #32
 80050aa:	61da      	str	r2, [r3, #28]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80050b4:	2037      	movs	r0, #55	; 0x37
 80050b6:	2200      	movs	r2, #0
 80050b8:	2105      	movs	r1, #5
    __HAL_RCC_TIM7_CLK_ENABLE();
 80050ba:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80050bc:	f7fb ff18 	bl	8000ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80050c0:	2037      	movs	r0, #55	; 0x37
 80050c2:	e7e6      	b.n	8005092 <HAL_TIM_Base_MspInit+0x2a>
  else if(htim_base->Instance==TIM16)
 80050c4:	4a16      	ldr	r2, [pc, #88]	; (8005120 <HAL_TIM_Base_MspInit+0xb8>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d110      	bne.n	80050ec <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80050ca:	4b13      	ldr	r3, [pc, #76]	; (8005118 <HAL_TIM_Base_MspInit+0xb0>)
 80050cc:	699a      	ldr	r2, [r3, #24]
 80050ce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80050d2:	619a      	str	r2, [r3, #24]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050da:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 80050dc:	2019      	movs	r0, #25
 80050de:	2200      	movs	r2, #0
 80050e0:	2105      	movs	r1, #5
    __HAL_RCC_TIM16_CLK_ENABLE();
 80050e2:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 80050e4:	f7fb ff04 	bl	8000ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80050e8:	2019      	movs	r0, #25
 80050ea:	e7d2      	b.n	8005092 <HAL_TIM_Base_MspInit+0x2a>
  else if(htim_base->Instance==TIM17)
 80050ec:	4a0d      	ldr	r2, [pc, #52]	; (8005124 <HAL_TIM_Base_MspInit+0xbc>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d1d1      	bne.n	8005096 <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80050f2:	4b09      	ldr	r3, [pc, #36]	; (8005118 <HAL_TIM_Base_MspInit+0xb0>)
 80050f4:	699a      	ldr	r2, [r3, #24]
 80050f6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80050fa:	619a      	str	r2, [r3, #24]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005102:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8005104:	201a      	movs	r0, #26
 8005106:	2200      	movs	r2, #0
 8005108:	2105      	movs	r1, #5
    __HAL_RCC_TIM17_CLK_ENABLE();
 800510a:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 800510c:	f7fb fef0 	bl	8000ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8005110:	201a      	movs	r0, #26
 8005112:	e7be      	b.n	8005092 <HAL_TIM_Base_MspInit+0x2a>
 8005114:	40001000 	.word	0x40001000
 8005118:	40021000 	.word	0x40021000
 800511c:	40001400 	.word	0x40001400
 8005120:	40014400 	.word	0x40014400
 8005124:	40014800 	.word	0x40014800

08005128 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005128:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800512a:	2214      	movs	r2, #20
{
 800512c:	b08a      	sub	sp, #40	; 0x28
 800512e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005130:	2100      	movs	r1, #0
 8005132:	eb0d 0002 	add.w	r0, sp, r2
 8005136:	f000 fcec 	bl	8005b12 <memset>
  if(huart->Instance==USART1)
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	4a27      	ldr	r2, [pc, #156]	; (80051dc <HAL_UART_MspInit+0xb4>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d128      	bne.n	8005194 <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005142:	4b27      	ldr	r3, [pc, #156]	; (80051e0 <HAL_UART_MspInit+0xb8>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005144:	4827      	ldr	r0, [pc, #156]	; (80051e4 <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8005146:	699a      	ldr	r2, [r3, #24]
 8005148:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800514c:	619a      	str	r2, [r3, #24]
 800514e:	699a      	ldr	r2, [r3, #24]
 8005150:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005154:	9201      	str	r2, [sp, #4]
 8005156:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005158:	695a      	ldr	r2, [r3, #20]
 800515a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800515e:	615a      	str	r2, [r3, #20]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005166:	9302      	str	r3, [sp, #8]
 8005168:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800516a:	2330      	movs	r3, #48	; 0x30
 800516c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800516e:	2302      	movs	r3, #2
 8005170:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005172:	2303      	movs	r3, #3
 8005174:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005176:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005178:	2307      	movs	r3, #7
 800517a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800517c:	f7fb ffd2 	bl	8001124 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005180:	2025      	movs	r0, #37	; 0x25
 8005182:	2200      	movs	r2, #0
 8005184:	2105      	movs	r1, #5
 8005186:	f7fb feb3 	bl	8000ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800518a:	2025      	movs	r0, #37	; 0x25
 800518c:	f7fb fee4 	bl	8000f58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005190:	b00a      	add	sp, #40	; 0x28
 8005192:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 8005194:	4a14      	ldr	r2, [pc, #80]	; (80051e8 <HAL_UART_MspInit+0xc0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d1fa      	bne.n	8005190 <HAL_UART_MspInit+0x68>
    __HAL_RCC_USART2_CLK_ENABLE();
 800519a:	4b11      	ldr	r3, [pc, #68]	; (80051e0 <HAL_UART_MspInit+0xb8>)
 800519c:	69da      	ldr	r2, [r3, #28]
 800519e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80051a2:	61da      	str	r2, [r3, #28]
 80051a4:	69da      	ldr	r2, [r3, #28]
 80051a6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80051aa:	9203      	str	r2, [sp, #12]
 80051ac:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051ae:	695a      	ldr	r2, [r3, #20]
 80051b0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80051b4:	615a      	str	r2, [r3, #20]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051bc:	9304      	str	r3, [sp, #16]
 80051be:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80051c0:	230c      	movs	r3, #12
 80051c2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051c4:	2302      	movs	r3, #2
 80051c6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80051c8:	2303      	movs	r3, #3
 80051ca:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051cc:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80051ce:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80051d4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051d6:	f7fb ffa5 	bl	8001124 <HAL_GPIO_Init>
}
 80051da:	e7d9      	b.n	8005190 <HAL_UART_MspInit+0x68>
 80051dc:	40013800 	.word	0x40013800
 80051e0:	40021000 	.word	0x40021000
 80051e4:	48000800 	.word	0x48000800
 80051e8:	40004400 	.word	0x40004400

080051ec <NMI_Handler>:
 80051ec:	4770      	bx	lr

080051ee <HardFault_Handler>:
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

	__asm volatile
 80051ee:	f01e 0f04 	tst.w	lr, #4
 80051f2:	bf0c      	ite	eq
 80051f4:	f3ef 8008 	mrseq	r0, MSP
 80051f8:	f3ef 8009 	mrsne	r0, PSP
 80051fc:	6981      	ldr	r1, [r0, #24]
 80051fe:	4a00      	ldr	r2, [pc, #0]	; (8005200 <HardFault_Handler+0x12>)
 8005200:	4710      	bx	r2

08005202 <handler2_address_const>:
 8005202:	5301      	.short	0x5301
 8005204:	0800      	.short	0x0800
 8005206:	e7fe      	b.n	8005206 <handler2_address_const+0x4>

08005208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005208:	e7fe      	b.n	8005208 <MemManage_Handler>

0800520a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800520a:	e7fe      	b.n	800520a <BusFault_Handler>

0800520c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800520c:	e7fe      	b.n	800520c <UsageFault_Handler>

0800520e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800520e:	4770      	bx	lr

08005210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005210:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005212:	f7fb fe35 	bl	8000e80 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005216:	f7fe ff41 	bl	800409c <xTaskGetSchedulerState>
 800521a:	2801      	cmp	r0, #1
 800521c:	d003      	beq.n	8005226 <SysTick_Handler+0x16>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800521e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 8005222:	f7fe bb57 	b.w	80038d4 <xPortSysTickHandler>
 8005226:	bd08      	pop	{r3, pc}

08005228 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005228:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800522a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800522e:	f7fc f85b 	bl	80012e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8005232:	f44f 7000 	mov.w	r0, #512	; 0x200
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800523a:	f7fc b855 	b.w	80012e8 <HAL_GPIO_EXTI_IRQHandler>
	...

08005240 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005240:	4801      	ldr	r0, [pc, #4]	; (8005248 <TIM1_UP_TIM16_IRQHandler+0x8>)
 8005242:	f7fd b8ca 	b.w	80023da <HAL_TIM_IRQHandler>
 8005246:	bf00      	nop
 8005248:	20003454 	.word	0x20003454

0800524c <TIM1_TRG_COM_TIM17_IRQHandler>:
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800524c:	4801      	ldr	r0, [pc, #4]	; (8005254 <TIM1_TRG_COM_TIM17_IRQHandler+0x8>)
 800524e:	f7fd b8c4 	b.w	80023da <HAL_TIM_IRQHandler>
 8005252:	bf00      	nop
 8005254:	20002160 	.word	0x20002160

08005258 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8005258:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  uint32_t tmp_flag = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE);
 800525a:	4c0f      	ldr	r4, [pc, #60]	; (8005298 <USART1_IRQHandler+0x40>)
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	69d9      	ldr	r1, [r3, #28]
  uint32_t tmp_it_source = __HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_RXNE);
 8005260:	681a      	ldr	r2, [r3, #0]

  if((tmp_flag != RESET) && (tmp_it_source != RESET)) {
 8005262:	0688      	lsls	r0, r1, #26
 8005264:	d508      	bpl.n	8005278 <USART1_IRQHandler+0x20>
 8005266:	0691      	lsls	r1, r2, #26
 8005268:	d506      	bpl.n	8005278 <USART1_IRQHandler+0x20>
    pxMBFrameCBByteReceived();
 800526a:	4b0c      	ldr	r3, [pc, #48]	; (800529c <USART1_IRQHandler+0x44>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4798      	blx	r3
	  //xMBRTUReceiveFSM();
    __HAL_UART_CLEAR_PEFLAG(&huart1);
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	2201      	movs	r2, #1
 8005274:	621a      	str	r2, [r3, #32]
    return;
 8005276:	bd10      	pop	{r4, pc}
  }

  if((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_TXE) != RESET)) {
 8005278:	69da      	ldr	r2, [r3, #28]
 800527a:	0612      	lsls	r2, r2, #24
 800527c:	d507      	bpl.n	800528e <USART1_IRQHandler+0x36>
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	061b      	lsls	r3, r3, #24
 8005282:	d504      	bpl.n	800528e <USART1_IRQHandler+0x36>
    pxMBFrameCBTransmitterEmpty();
 8005284:	4b06      	ldr	r3, [pc, #24]	; (80052a0 <USART1_IRQHandler+0x48>)
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    pxMBFrameCBTransmitterEmpty();
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4718      	bx	r3
  HAL_UART_IRQHandler(&huart1);
 800528e:	4802      	ldr	r0, [pc, #8]	; (8005298 <USART1_IRQHandler+0x40>)
}
 8005290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_IRQHandler(&huart1);
 8005294:	f7fd ba36 	b.w	8002704 <HAL_UART_IRQHandler>
 8005298:	200021b4 	.word	0x200021b4
 800529c:	20001fe0 	.word	0x20001fe0
 80052a0:	20001fd8 	.word	0x20001fd8

080052a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80052a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80052a6:	4804      	ldr	r0, [pc, #16]	; (80052b8 <TIM6_DAC_IRQHandler+0x14>)
 80052a8:	f7fd f897 	bl	80023da <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80052ac:	4803      	ldr	r0, [pc, #12]	; (80052bc <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80052ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DAC_IRQHandler(&hdac1);
 80052b2:	f7fb bee3 	b.w	800107c <HAL_DAC_IRQHandler>
 80052b6:	bf00      	nop
 80052b8:	20002244 	.word	0x20002244
 80052bc:	200020f4 	.word	0x200020f4

080052c0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80052c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  if(__HAL_TIM_GET_FLAG(&htim7, TIM_FLAG_UPDATE) != RESET && __HAL_TIM_GET_IT_SOURCE(&htim7, TIM_IT_UPDATE) !=RESET)
 80052c2:	4b0c      	ldr	r3, [pc, #48]	; (80052f4 <TIM7_IRQHandler+0x34>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	07d1      	lsls	r1, r2, #31
 80052ca:	d50e      	bpl.n	80052ea <TIM7_IRQHandler+0x2a>
 80052cc:	68da      	ldr	r2, [r3, #12]
 80052ce:	07d2      	lsls	r2, r2, #31
 80052d0:	d50b      	bpl.n	80052ea <TIM7_IRQHandler+0x2a>
  {
	__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 80052d2:	f06f 0201 	mvn.w	r2, #1
 80052d6:	611a      	str	r2, [r3, #16]
	if (!--downcounter)
 80052d8:	4a07      	ldr	r2, [pc, #28]	; (80052f8 <TIM7_IRQHandler+0x38>)
 80052da:	8813      	ldrh	r3, [r2, #0]
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29b      	uxth	r3, r3
 80052e0:	8013      	strh	r3, [r2, #0]
 80052e2:	b913      	cbnz	r3, 80052ea <TIM7_IRQHandler+0x2a>
	{
		pxMBPortCBTimerExpired();
 80052e4:	4b05      	ldr	r3, [pc, #20]	; (80052fc <TIM7_IRQHandler+0x3c>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4798      	blx	r3
	}
  }

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80052ea:	4802      	ldr	r0, [pc, #8]	; (80052f4 <TIM7_IRQHandler+0x34>)
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80052ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim7);
 80052f0:	f7fd b873 	b.w	80023da <HAL_TIM_IRQHandler>
 80052f4:	20003494 	.word	0x20003494
 80052f8:	2000085e 	.word	0x2000085e
 80052fc:	20001fdc 	.word	0x20001fdc

08005300 <prvGetRegistersFromStack>:

/* USER CODE BEGIN 1 */

void prvGetRegistersFromStack( uint32_t *pulFaultStackAddress )
{
 8005300:	b088      	sub	sp, #32
	volatile uint32_t r12;
	volatile uint32_t lr; /* Link register. */
	volatile uint32_t pc; /* Program counter. */
	volatile uint32_t psr;/* Program status register. */

    r0 = pulFaultStackAddress[ 0 ];
 8005302:	6803      	ldr	r3, [r0, #0]
 8005304:	9300      	str	r3, [sp, #0]
    r1 = pulFaultStackAddress[ 1 ];
 8005306:	6843      	ldr	r3, [r0, #4]
 8005308:	9301      	str	r3, [sp, #4]
    r2 = pulFaultStackAddress[ 2 ];
 800530a:	6883      	ldr	r3, [r0, #8]
 800530c:	9302      	str	r3, [sp, #8]
    r3 = pulFaultStackAddress[ 3 ];
 800530e:	68c3      	ldr	r3, [r0, #12]
 8005310:	9303      	str	r3, [sp, #12]

    r12 = pulFaultStackAddress[ 4 ];
 8005312:	6903      	ldr	r3, [r0, #16]
 8005314:	9304      	str	r3, [sp, #16]
    lr = pulFaultStackAddress[ 5 ];
 8005316:	6943      	ldr	r3, [r0, #20]
 8005318:	9305      	str	r3, [sp, #20]
    pc = pulFaultStackAddress[ 6 ];
 800531a:	6983      	ldr	r3, [r0, #24]
 800531c:	9306      	str	r3, [sp, #24]
    psr = pulFaultStackAddress[ 7 ];
 800531e:	69c3      	ldr	r3, [r0, #28]
 8005320:	9307      	str	r3, [sp, #28]
 8005322:	e7fe      	b.n	8005322 <prvGetRegistersFromStack+0x22>

08005324 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8005324:	2001      	movs	r0, #1
 8005326:	4770      	bx	lr

08005328 <_kill>:

int _kill(int pid, int sig)
{
 8005328:	b508      	push	{r3, lr}
	errno = EINVAL;
 800532a:	f000 f8a3 	bl	8005474 <__errno>
 800532e:	2316      	movs	r3, #22
 8005330:	6003      	str	r3, [r0, #0]
	return -1;
}
 8005332:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005336:	bd08      	pop	{r3, pc}

08005338 <_exit>:

void _exit (int status)
{
 8005338:	b508      	push	{r3, lr}
	errno = EINVAL;
 800533a:	f000 f89b 	bl	8005474 <__errno>
 800533e:	2316      	movs	r3, #22
 8005340:	6003      	str	r3, [r0, #0]
 8005342:	e7fe      	b.n	8005342 <_exit+0xa>

08005344 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005344:	b570      	push	{r4, r5, r6, lr}
 8005346:	460e      	mov	r6, r1
 8005348:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800534a:	460c      	mov	r4, r1
 800534c:	1ba3      	subs	r3, r4, r6
 800534e:	429d      	cmp	r5, r3
 8005350:	dc01      	bgt.n	8005356 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8005352:	4628      	mov	r0, r5
 8005354:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8005356:	f3af 8000 	nop.w
 800535a:	f804 0b01 	strb.w	r0, [r4], #1
 800535e:	e7f5      	b.n	800534c <_read+0x8>

08005360 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005360:	b570      	push	{r4, r5, r6, lr}
 8005362:	460e      	mov	r6, r1
 8005364:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005366:	460c      	mov	r4, r1
 8005368:	1ba3      	subs	r3, r4, r6
 800536a:	429d      	cmp	r5, r3
 800536c:	dc01      	bgt.n	8005372 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800536e:	4628      	mov	r0, r5
 8005370:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8005372:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005376:	f3af 8000 	nop.w
 800537a:	e7f5      	b.n	8005368 <_write+0x8>

0800537c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800537c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800537e:	4b0a      	ldr	r3, [pc, #40]	; (80053a8 <_sbrk+0x2c>)
 8005380:	6819      	ldr	r1, [r3, #0]
{
 8005382:	4602      	mov	r2, r0
	if (heap_end == 0)
 8005384:	b909      	cbnz	r1, 800538a <_sbrk+0xe>
		heap_end = &end;
 8005386:	4909      	ldr	r1, [pc, #36]	; (80053ac <_sbrk+0x30>)
 8005388:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800538a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800538c:	4669      	mov	r1, sp
 800538e:	4402      	add	r2, r0
 8005390:	428a      	cmp	r2, r1
 8005392:	d906      	bls.n	80053a2 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005394:	f000 f86e 	bl	8005474 <__errno>
 8005398:	230c      	movs	r3, #12
 800539a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800539c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053a0:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80053a2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80053a4:	bd08      	pop	{r3, pc}
 80053a6:	bf00      	nop
 80053a8:	20001f9c 	.word	0x20001f9c
 80053ac:	200034e8 	.word	0x200034e8

080053b0 <_close>:

int _close(int file)
{
	return -1;
}
 80053b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053b4:	4770      	bx	lr

080053b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80053b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053ba:	604b      	str	r3, [r1, #4]
	return 0;
}
 80053bc:	2000      	movs	r0, #0
 80053be:	4770      	bx	lr

080053c0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80053c0:	2001      	movs	r0, #1
 80053c2:	4770      	bx	lr

080053c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80053c4:	2000      	movs	r0, #0
 80053c6:	4770      	bx	lr

080053c8 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80053c8:	4b05      	ldr	r3, [pc, #20]	; (80053e0 <SystemInit+0x18>)
 80053ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80053ce:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80053d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80053d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80053da:	609a      	str	r2, [r3, #8]
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	e000ed00 	.word	0xe000ed00

080053e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80053e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800541c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80053e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80053ea:	e003      	b.n	80053f4 <LoopCopyDataInit>

080053ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80053ec:	4b0c      	ldr	r3, [pc, #48]	; (8005420 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80053ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80053f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80053f2:	3104      	adds	r1, #4

080053f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80053f4:	480b      	ldr	r0, [pc, #44]	; (8005424 <LoopForever+0xa>)
	ldr	r3, =_edata
 80053f6:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <LoopForever+0xe>)
	adds	r2, r0, r1
 80053f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80053fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80053fc:	d3f6      	bcc.n	80053ec <CopyDataInit>
	ldr	r2, =_sbss
 80053fe:	4a0b      	ldr	r2, [pc, #44]	; (800542c <LoopForever+0x12>)
	b	LoopFillZerobss
 8005400:	e002      	b.n	8005408 <LoopFillZerobss>

08005402 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005402:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005404:	f842 3b04 	str.w	r3, [r2], #4

08005408 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005408:	4b09      	ldr	r3, [pc, #36]	; (8005430 <LoopForever+0x16>)
	cmp	r2, r3
 800540a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800540c:	d3f9      	bcc.n	8005402 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800540e:	f7ff ffdb 	bl	80053c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005412:	f000 f93d 	bl	8005690 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005416:	f7ff f849 	bl	80044ac <main>

0800541a <LoopForever>:

LoopForever:
    b LoopForever
 800541a:	e7fe      	b.n	800541a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800541c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8005420:	08008f1c 	.word	0x08008f1c
	ldr	r0, =_sdata
 8005424:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005428:	200007fc 	.word	0x200007fc
	ldr	r2, =_sbss
 800542c:	200007fc 	.word	0x200007fc
	ldr	r3, = _ebss
 8005430:	200034e8 	.word	0x200034e8

08005434 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005434:	e7fe      	b.n	8005434 <ADC1_2_IRQHandler>
	...

08005438 <__assert_func>:
 8005438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800543a:	461c      	mov	r4, r3
 800543c:	4b09      	ldr	r3, [pc, #36]	; (8005464 <__assert_func+0x2c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4605      	mov	r5, r0
 8005442:	68d8      	ldr	r0, [r3, #12]
 8005444:	b152      	cbz	r2, 800545c <__assert_func+0x24>
 8005446:	4b08      	ldr	r3, [pc, #32]	; (8005468 <__assert_func+0x30>)
 8005448:	9202      	str	r2, [sp, #8]
 800544a:	e88d 000a 	stmia.w	sp, {r1, r3}
 800544e:	4622      	mov	r2, r4
 8005450:	462b      	mov	r3, r5
 8005452:	4906      	ldr	r1, [pc, #24]	; (800546c <__assert_func+0x34>)
 8005454:	f000 f8ec 	bl	8005630 <fiprintf>
 8005458:	f001 f982 	bl	8006760 <abort>
 800545c:	4b04      	ldr	r3, [pc, #16]	; (8005470 <__assert_func+0x38>)
 800545e:	461a      	mov	r2, r3
 8005460:	e7f2      	b.n	8005448 <__assert_func+0x10>
 8005462:	bf00      	nop
 8005464:	2000018c 	.word	0x2000018c
 8005468:	08008d1a 	.word	0x08008d1a
 800546c:	08008d27 	.word	0x08008d27
 8005470:	08008d55 	.word	0x08008d55

08005474 <__errno>:
 8005474:	4b01      	ldr	r3, [pc, #4]	; (800547c <__errno+0x8>)
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	2000018c 	.word	0x2000018c

08005480 <_cleanup_r>:
 8005480:	4901      	ldr	r1, [pc, #4]	; (8005488 <_cleanup_r+0x8>)
 8005482:	f000 b8e7 	b.w	8005654 <_fwalk_reent>
 8005486:	bf00      	nop
 8005488:	08006791 	.word	0x08006791

0800548c <std.isra.0>:
 800548c:	2300      	movs	r3, #0
 800548e:	b510      	push	{r4, lr}
 8005490:	4604      	mov	r4, r0
 8005492:	6003      	str	r3, [r0, #0]
 8005494:	6043      	str	r3, [r0, #4]
 8005496:	6083      	str	r3, [r0, #8]
 8005498:	8181      	strh	r1, [r0, #12]
 800549a:	6643      	str	r3, [r0, #100]	; 0x64
 800549c:	81c2      	strh	r2, [r0, #14]
 800549e:	6103      	str	r3, [r0, #16]
 80054a0:	6143      	str	r3, [r0, #20]
 80054a2:	6183      	str	r3, [r0, #24]
 80054a4:	4619      	mov	r1, r3
 80054a6:	2208      	movs	r2, #8
 80054a8:	305c      	adds	r0, #92	; 0x5c
 80054aa:	f000 fb32 	bl	8005b12 <memset>
 80054ae:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <std.isra.0+0x38>)
 80054b0:	6263      	str	r3, [r4, #36]	; 0x24
 80054b2:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <std.isra.0+0x3c>)
 80054b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80054b6:	4b05      	ldr	r3, [pc, #20]	; (80054cc <std.isra.0+0x40>)
 80054b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054ba:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <std.isra.0+0x44>)
 80054bc:	6224      	str	r4, [r4, #32]
 80054be:	6323      	str	r3, [r4, #48]	; 0x30
 80054c0:	bd10      	pop	{r4, pc}
 80054c2:	bf00      	nop
 80054c4:	08005c45 	.word	0x08005c45
 80054c8:	08005c67 	.word	0x08005c67
 80054cc:	08005c9f 	.word	0x08005c9f
 80054d0:	08005cc3 	.word	0x08005cc3

080054d4 <__sfmoreglue>:
 80054d4:	b570      	push	{r4, r5, r6, lr}
 80054d6:	1e4a      	subs	r2, r1, #1
 80054d8:	2568      	movs	r5, #104	; 0x68
 80054da:	4355      	muls	r5, r2
 80054dc:	460e      	mov	r6, r1
 80054de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80054e2:	f000 f8fd 	bl	80056e0 <_malloc_r>
 80054e6:	4604      	mov	r4, r0
 80054e8:	b140      	cbz	r0, 80054fc <__sfmoreglue+0x28>
 80054ea:	2100      	movs	r1, #0
 80054ec:	e880 0042 	stmia.w	r0, {r1, r6}
 80054f0:	300c      	adds	r0, #12
 80054f2:	60a0      	str	r0, [r4, #8]
 80054f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80054f8:	f000 fb0b 	bl	8005b12 <memset>
 80054fc:	4620      	mov	r0, r4
 80054fe:	bd70      	pop	{r4, r5, r6, pc}

08005500 <__sfp_lock_acquire>:
 8005500:	4801      	ldr	r0, [pc, #4]	; (8005508 <__sfp_lock_acquire+0x8>)
 8005502:	f000 b8eb 	b.w	80056dc <__retarget_lock_acquire_recursive>
 8005506:	bf00      	nop
 8005508:	200034e0 	.word	0x200034e0

0800550c <__sfp_lock_release>:
 800550c:	4801      	ldr	r0, [pc, #4]	; (8005514 <__sfp_lock_release+0x8>)
 800550e:	f000 b8e6 	b.w	80056de <__retarget_lock_release_recursive>
 8005512:	bf00      	nop
 8005514:	200034e0 	.word	0x200034e0

08005518 <__sinit_lock_acquire>:
 8005518:	4801      	ldr	r0, [pc, #4]	; (8005520 <__sinit_lock_acquire+0x8>)
 800551a:	f000 b8df 	b.w	80056dc <__retarget_lock_acquire_recursive>
 800551e:	bf00      	nop
 8005520:	200034db 	.word	0x200034db

08005524 <__sinit_lock_release>:
 8005524:	4801      	ldr	r0, [pc, #4]	; (800552c <__sinit_lock_release+0x8>)
 8005526:	f000 b8da 	b.w	80056de <__retarget_lock_release_recursive>
 800552a:	bf00      	nop
 800552c:	200034db 	.word	0x200034db

08005530 <__sinit>:
 8005530:	b510      	push	{r4, lr}
 8005532:	4604      	mov	r4, r0
 8005534:	f7ff fff0 	bl	8005518 <__sinit_lock_acquire>
 8005538:	69a3      	ldr	r3, [r4, #24]
 800553a:	b11b      	cbz	r3, 8005544 <__sinit+0x14>
 800553c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005540:	f7ff bff0 	b.w	8005524 <__sinit_lock_release>
 8005544:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8005548:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 800554c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8005550:	4b12      	ldr	r3, [pc, #72]	; (800559c <__sinit+0x6c>)
 8005552:	4a13      	ldr	r2, [pc, #76]	; (80055a0 <__sinit+0x70>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	62a2      	str	r2, [r4, #40]	; 0x28
 8005558:	429c      	cmp	r4, r3
 800555a:	bf04      	itt	eq
 800555c:	2301      	moveq	r3, #1
 800555e:	61a3      	streq	r3, [r4, #24]
 8005560:	4620      	mov	r0, r4
 8005562:	f000 f81f 	bl	80055a4 <__sfp>
 8005566:	6060      	str	r0, [r4, #4]
 8005568:	4620      	mov	r0, r4
 800556a:	f000 f81b 	bl	80055a4 <__sfp>
 800556e:	60a0      	str	r0, [r4, #8]
 8005570:	4620      	mov	r0, r4
 8005572:	f000 f817 	bl	80055a4 <__sfp>
 8005576:	2200      	movs	r2, #0
 8005578:	60e0      	str	r0, [r4, #12]
 800557a:	2104      	movs	r1, #4
 800557c:	6860      	ldr	r0, [r4, #4]
 800557e:	f7ff ff85 	bl	800548c <std.isra.0>
 8005582:	2201      	movs	r2, #1
 8005584:	2109      	movs	r1, #9
 8005586:	68a0      	ldr	r0, [r4, #8]
 8005588:	f7ff ff80 	bl	800548c <std.isra.0>
 800558c:	2202      	movs	r2, #2
 800558e:	2112      	movs	r1, #18
 8005590:	68e0      	ldr	r0, [r4, #12]
 8005592:	f7ff ff7b 	bl	800548c <std.isra.0>
 8005596:	2301      	movs	r3, #1
 8005598:	61a3      	str	r3, [r4, #24]
 800559a:	e7cf      	b.n	800553c <__sinit+0xc>
 800559c:	08008db8 	.word	0x08008db8
 80055a0:	08005481 	.word	0x08005481

080055a4 <__sfp>:
 80055a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a6:	4607      	mov	r7, r0
 80055a8:	f7ff ffaa 	bl	8005500 <__sfp_lock_acquire>
 80055ac:	4b1f      	ldr	r3, [pc, #124]	; (800562c <__sfp+0x88>)
 80055ae:	681e      	ldr	r6, [r3, #0]
 80055b0:	69b3      	ldr	r3, [r6, #24]
 80055b2:	b913      	cbnz	r3, 80055ba <__sfp+0x16>
 80055b4:	4630      	mov	r0, r6
 80055b6:	f7ff ffbb 	bl	8005530 <__sinit>
 80055ba:	36d8      	adds	r6, #216	; 0xd8
 80055bc:	68b4      	ldr	r4, [r6, #8]
 80055be:	6873      	ldr	r3, [r6, #4]
 80055c0:	3b01      	subs	r3, #1
 80055c2:	d503      	bpl.n	80055cc <__sfp+0x28>
 80055c4:	6833      	ldr	r3, [r6, #0]
 80055c6:	b133      	cbz	r3, 80055d6 <__sfp+0x32>
 80055c8:	6836      	ldr	r6, [r6, #0]
 80055ca:	e7f7      	b.n	80055bc <__sfp+0x18>
 80055cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80055d0:	b17d      	cbz	r5, 80055f2 <__sfp+0x4e>
 80055d2:	3468      	adds	r4, #104	; 0x68
 80055d4:	e7f4      	b.n	80055c0 <__sfp+0x1c>
 80055d6:	2104      	movs	r1, #4
 80055d8:	4638      	mov	r0, r7
 80055da:	f7ff ff7b 	bl	80054d4 <__sfmoreglue>
 80055de:	4604      	mov	r4, r0
 80055e0:	6030      	str	r0, [r6, #0]
 80055e2:	2800      	cmp	r0, #0
 80055e4:	d1f0      	bne.n	80055c8 <__sfp+0x24>
 80055e6:	f7ff ff91 	bl	800550c <__sfp_lock_release>
 80055ea:	230c      	movs	r3, #12
 80055ec:	603b      	str	r3, [r7, #0]
 80055ee:	4620      	mov	r0, r4
 80055f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055f6:	81e3      	strh	r3, [r4, #14]
 80055f8:	2301      	movs	r3, #1
 80055fa:	81a3      	strh	r3, [r4, #12]
 80055fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005600:	6665      	str	r5, [r4, #100]	; 0x64
 8005602:	f000 f869 	bl	80056d8 <__retarget_lock_init_recursive>
 8005606:	f7ff ff81 	bl	800550c <__sfp_lock_release>
 800560a:	6025      	str	r5, [r4, #0]
 800560c:	60a5      	str	r5, [r4, #8]
 800560e:	6065      	str	r5, [r4, #4]
 8005610:	6125      	str	r5, [r4, #16]
 8005612:	6165      	str	r5, [r4, #20]
 8005614:	61a5      	str	r5, [r4, #24]
 8005616:	2208      	movs	r2, #8
 8005618:	4629      	mov	r1, r5
 800561a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800561e:	f000 fa78 	bl	8005b12 <memset>
 8005622:	6365      	str	r5, [r4, #52]	; 0x34
 8005624:	63a5      	str	r5, [r4, #56]	; 0x38
 8005626:	64a5      	str	r5, [r4, #72]	; 0x48
 8005628:	64e5      	str	r5, [r4, #76]	; 0x4c
 800562a:	e7e0      	b.n	80055ee <__sfp+0x4a>
 800562c:	08008db8 	.word	0x08008db8

08005630 <fiprintf>:
 8005630:	b40e      	push	{r1, r2, r3}
 8005632:	b503      	push	{r0, r1, lr}
 8005634:	4601      	mov	r1, r0
 8005636:	ab03      	add	r3, sp, #12
 8005638:	4805      	ldr	r0, [pc, #20]	; (8005650 <fiprintf+0x20>)
 800563a:	f853 2b04 	ldr.w	r2, [r3], #4
 800563e:	6800      	ldr	r0, [r0, #0]
 8005640:	9301      	str	r3, [sp, #4]
 8005642:	f000 fb77 	bl	8005d34 <_vfiprintf_r>
 8005646:	b002      	add	sp, #8
 8005648:	f85d eb04 	ldr.w	lr, [sp], #4
 800564c:	b003      	add	sp, #12
 800564e:	4770      	bx	lr
 8005650:	2000018c 	.word	0x2000018c

08005654 <_fwalk_reent>:
 8005654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005658:	4680      	mov	r8, r0
 800565a:	4689      	mov	r9, r1
 800565c:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8005660:	2600      	movs	r6, #0
 8005662:	b914      	cbnz	r4, 800566a <_fwalk_reent+0x16>
 8005664:	4630      	mov	r0, r6
 8005666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800566a:	68a5      	ldr	r5, [r4, #8]
 800566c:	6867      	ldr	r7, [r4, #4]
 800566e:	3f01      	subs	r7, #1
 8005670:	d501      	bpl.n	8005676 <_fwalk_reent+0x22>
 8005672:	6824      	ldr	r4, [r4, #0]
 8005674:	e7f5      	b.n	8005662 <_fwalk_reent+0xe>
 8005676:	89ab      	ldrh	r3, [r5, #12]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d907      	bls.n	800568c <_fwalk_reent+0x38>
 800567c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005680:	3301      	adds	r3, #1
 8005682:	d003      	beq.n	800568c <_fwalk_reent+0x38>
 8005684:	4629      	mov	r1, r5
 8005686:	4640      	mov	r0, r8
 8005688:	47c8      	blx	r9
 800568a:	4306      	orrs	r6, r0
 800568c:	3568      	adds	r5, #104	; 0x68
 800568e:	e7ee      	b.n	800566e <_fwalk_reent+0x1a>

08005690 <__libc_init_array>:
 8005690:	b570      	push	{r4, r5, r6, lr}
 8005692:	4e0d      	ldr	r6, [pc, #52]	; (80056c8 <__libc_init_array+0x38>)
 8005694:	4c0d      	ldr	r4, [pc, #52]	; (80056cc <__libc_init_array+0x3c>)
 8005696:	1ba4      	subs	r4, r4, r6
 8005698:	10a4      	asrs	r4, r4, #2
 800569a:	2500      	movs	r5, #0
 800569c:	42a5      	cmp	r5, r4
 800569e:	d109      	bne.n	80056b4 <__libc_init_array+0x24>
 80056a0:	4e0b      	ldr	r6, [pc, #44]	; (80056d0 <__libc_init_array+0x40>)
 80056a2:	4c0c      	ldr	r4, [pc, #48]	; (80056d4 <__libc_init_array+0x44>)
 80056a4:	f001 ffbc 	bl	8007620 <_init>
 80056a8:	1ba4      	subs	r4, r4, r6
 80056aa:	10a4      	asrs	r4, r4, #2
 80056ac:	2500      	movs	r5, #0
 80056ae:	42a5      	cmp	r5, r4
 80056b0:	d105      	bne.n	80056be <__libc_init_array+0x2e>
 80056b2:	bd70      	pop	{r4, r5, r6, pc}
 80056b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056b8:	4798      	blx	r3
 80056ba:	3501      	adds	r5, #1
 80056bc:	e7ee      	b.n	800569c <__libc_init_array+0xc>
 80056be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056c2:	4798      	blx	r3
 80056c4:	3501      	adds	r5, #1
 80056c6:	e7f2      	b.n	80056ae <__libc_init_array+0x1e>
 80056c8:	08008f14 	.word	0x08008f14
 80056cc:	08008f14 	.word	0x08008f14
 80056d0:	08008f14 	.word	0x08008f14
 80056d4:	08008f18 	.word	0x08008f18

080056d8 <__retarget_lock_init_recursive>:
 80056d8:	4770      	bx	lr

080056da <__retarget_lock_close_recursive>:
 80056da:	4770      	bx	lr

080056dc <__retarget_lock_acquire_recursive>:
 80056dc:	4770      	bx	lr

080056de <__retarget_lock_release_recursive>:
 80056de:	4770      	bx	lr

080056e0 <_malloc_r>:
 80056e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e4:	f101 040b 	add.w	r4, r1, #11
 80056e8:	2c16      	cmp	r4, #22
 80056ea:	4681      	mov	r9, r0
 80056ec:	d907      	bls.n	80056fe <_malloc_r+0x1e>
 80056ee:	f034 0407 	bics.w	r4, r4, #7
 80056f2:	d505      	bpl.n	8005700 <_malloc_r+0x20>
 80056f4:	230c      	movs	r3, #12
 80056f6:	f8c9 3000 	str.w	r3, [r9]
 80056fa:	2600      	movs	r6, #0
 80056fc:	e131      	b.n	8005962 <_malloc_r+0x282>
 80056fe:	2410      	movs	r4, #16
 8005700:	428c      	cmp	r4, r1
 8005702:	d3f7      	bcc.n	80056f4 <_malloc_r+0x14>
 8005704:	4648      	mov	r0, r9
 8005706:	f000 fa0d 	bl	8005b24 <__malloc_lock>
 800570a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800570e:	4d9c      	ldr	r5, [pc, #624]	; (8005980 <_malloc_r+0x2a0>)
 8005710:	d236      	bcs.n	8005780 <_malloc_r+0xa0>
 8005712:	f104 0208 	add.w	r2, r4, #8
 8005716:	442a      	add	r2, r5
 8005718:	f1a2 0108 	sub.w	r1, r2, #8
 800571c:	6856      	ldr	r6, [r2, #4]
 800571e:	428e      	cmp	r6, r1
 8005720:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8005724:	d102      	bne.n	800572c <_malloc_r+0x4c>
 8005726:	68d6      	ldr	r6, [r2, #12]
 8005728:	42b2      	cmp	r2, r6
 800572a:	d010      	beq.n	800574e <_malloc_r+0x6e>
 800572c:	6873      	ldr	r3, [r6, #4]
 800572e:	68f2      	ldr	r2, [r6, #12]
 8005730:	68b1      	ldr	r1, [r6, #8]
 8005732:	f023 0303 	bic.w	r3, r3, #3
 8005736:	60ca      	str	r2, [r1, #12]
 8005738:	4433      	add	r3, r6
 800573a:	6091      	str	r1, [r2, #8]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	605a      	str	r2, [r3, #4]
 8005744:	4648      	mov	r0, r9
 8005746:	f000 f9f3 	bl	8005b30 <__malloc_unlock>
 800574a:	3608      	adds	r6, #8
 800574c:	e109      	b.n	8005962 <_malloc_r+0x282>
 800574e:	3302      	adds	r3, #2
 8005750:	4a8c      	ldr	r2, [pc, #560]	; (8005984 <_malloc_r+0x2a4>)
 8005752:	692e      	ldr	r6, [r5, #16]
 8005754:	4296      	cmp	r6, r2
 8005756:	4611      	mov	r1, r2
 8005758:	d06d      	beq.n	8005836 <_malloc_r+0x156>
 800575a:	6870      	ldr	r0, [r6, #4]
 800575c:	f020 0003 	bic.w	r0, r0, #3
 8005760:	1b07      	subs	r7, r0, r4
 8005762:	2f0f      	cmp	r7, #15
 8005764:	dd47      	ble.n	80057f6 <_malloc_r+0x116>
 8005766:	1933      	adds	r3, r6, r4
 8005768:	f044 0401 	orr.w	r4, r4, #1
 800576c:	6074      	str	r4, [r6, #4]
 800576e:	616b      	str	r3, [r5, #20]
 8005770:	612b      	str	r3, [r5, #16]
 8005772:	60da      	str	r2, [r3, #12]
 8005774:	609a      	str	r2, [r3, #8]
 8005776:	f047 0201 	orr.w	r2, r7, #1
 800577a:	605a      	str	r2, [r3, #4]
 800577c:	5037      	str	r7, [r6, r0]
 800577e:	e7e1      	b.n	8005744 <_malloc_r+0x64>
 8005780:	0a63      	lsrs	r3, r4, #9
 8005782:	d02a      	beq.n	80057da <_malloc_r+0xfa>
 8005784:	2b04      	cmp	r3, #4
 8005786:	d812      	bhi.n	80057ae <_malloc_r+0xce>
 8005788:	09a3      	lsrs	r3, r4, #6
 800578a:	3338      	adds	r3, #56	; 0x38
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005792:	f1a2 0008 	sub.w	r0, r2, #8
 8005796:	6856      	ldr	r6, [r2, #4]
 8005798:	4286      	cmp	r6, r0
 800579a:	d006      	beq.n	80057aa <_malloc_r+0xca>
 800579c:	6872      	ldr	r2, [r6, #4]
 800579e:	f022 0203 	bic.w	r2, r2, #3
 80057a2:	1b11      	subs	r1, r2, r4
 80057a4:	290f      	cmp	r1, #15
 80057a6:	dd1c      	ble.n	80057e2 <_malloc_r+0x102>
 80057a8:	3b01      	subs	r3, #1
 80057aa:	3301      	adds	r3, #1
 80057ac:	e7d0      	b.n	8005750 <_malloc_r+0x70>
 80057ae:	2b14      	cmp	r3, #20
 80057b0:	d801      	bhi.n	80057b6 <_malloc_r+0xd6>
 80057b2:	335b      	adds	r3, #91	; 0x5b
 80057b4:	e7ea      	b.n	800578c <_malloc_r+0xac>
 80057b6:	2b54      	cmp	r3, #84	; 0x54
 80057b8:	d802      	bhi.n	80057c0 <_malloc_r+0xe0>
 80057ba:	0b23      	lsrs	r3, r4, #12
 80057bc:	336e      	adds	r3, #110	; 0x6e
 80057be:	e7e5      	b.n	800578c <_malloc_r+0xac>
 80057c0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80057c4:	d802      	bhi.n	80057cc <_malloc_r+0xec>
 80057c6:	0be3      	lsrs	r3, r4, #15
 80057c8:	3377      	adds	r3, #119	; 0x77
 80057ca:	e7df      	b.n	800578c <_malloc_r+0xac>
 80057cc:	f240 5254 	movw	r2, #1364	; 0x554
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d804      	bhi.n	80057de <_malloc_r+0xfe>
 80057d4:	0ca3      	lsrs	r3, r4, #18
 80057d6:	337c      	adds	r3, #124	; 0x7c
 80057d8:	e7d8      	b.n	800578c <_malloc_r+0xac>
 80057da:	233f      	movs	r3, #63	; 0x3f
 80057dc:	e7d6      	b.n	800578c <_malloc_r+0xac>
 80057de:	237e      	movs	r3, #126	; 0x7e
 80057e0:	e7d4      	b.n	800578c <_malloc_r+0xac>
 80057e2:	2900      	cmp	r1, #0
 80057e4:	68f1      	ldr	r1, [r6, #12]
 80057e6:	db04      	blt.n	80057f2 <_malloc_r+0x112>
 80057e8:	68b3      	ldr	r3, [r6, #8]
 80057ea:	60d9      	str	r1, [r3, #12]
 80057ec:	608b      	str	r3, [r1, #8]
 80057ee:	18b3      	adds	r3, r6, r2
 80057f0:	e7a4      	b.n	800573c <_malloc_r+0x5c>
 80057f2:	460e      	mov	r6, r1
 80057f4:	e7d0      	b.n	8005798 <_malloc_r+0xb8>
 80057f6:	2f00      	cmp	r7, #0
 80057f8:	616a      	str	r2, [r5, #20]
 80057fa:	612a      	str	r2, [r5, #16]
 80057fc:	db05      	blt.n	800580a <_malloc_r+0x12a>
 80057fe:	4430      	add	r0, r6
 8005800:	6843      	ldr	r3, [r0, #4]
 8005802:	f043 0301 	orr.w	r3, r3, #1
 8005806:	6043      	str	r3, [r0, #4]
 8005808:	e79c      	b.n	8005744 <_malloc_r+0x64>
 800580a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800580e:	d244      	bcs.n	800589a <_malloc_r+0x1ba>
 8005810:	08c0      	lsrs	r0, r0, #3
 8005812:	1087      	asrs	r7, r0, #2
 8005814:	2201      	movs	r2, #1
 8005816:	fa02 f707 	lsl.w	r7, r2, r7
 800581a:	686a      	ldr	r2, [r5, #4]
 800581c:	3001      	adds	r0, #1
 800581e:	433a      	orrs	r2, r7
 8005820:	606a      	str	r2, [r5, #4]
 8005822:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005826:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800582a:	60b7      	str	r7, [r6, #8]
 800582c:	3a08      	subs	r2, #8
 800582e:	60f2      	str	r2, [r6, #12]
 8005830:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8005834:	60fe      	str	r6, [r7, #12]
 8005836:	2001      	movs	r0, #1
 8005838:	109a      	asrs	r2, r3, #2
 800583a:	fa00 f202 	lsl.w	r2, r0, r2
 800583e:	6868      	ldr	r0, [r5, #4]
 8005840:	4282      	cmp	r2, r0
 8005842:	f200 80a1 	bhi.w	8005988 <_malloc_r+0x2a8>
 8005846:	4202      	tst	r2, r0
 8005848:	d106      	bne.n	8005858 <_malloc_r+0x178>
 800584a:	f023 0303 	bic.w	r3, r3, #3
 800584e:	0052      	lsls	r2, r2, #1
 8005850:	4202      	tst	r2, r0
 8005852:	f103 0304 	add.w	r3, r3, #4
 8005856:	d0fa      	beq.n	800584e <_malloc_r+0x16e>
 8005858:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 800585c:	46e0      	mov	r8, ip
 800585e:	469e      	mov	lr, r3
 8005860:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8005864:	4546      	cmp	r6, r8
 8005866:	d153      	bne.n	8005910 <_malloc_r+0x230>
 8005868:	f10e 0e01 	add.w	lr, lr, #1
 800586c:	f01e 0f03 	tst.w	lr, #3
 8005870:	f108 0808 	add.w	r8, r8, #8
 8005874:	d1f4      	bne.n	8005860 <_malloc_r+0x180>
 8005876:	0798      	lsls	r0, r3, #30
 8005878:	d179      	bne.n	800596e <_malloc_r+0x28e>
 800587a:	686b      	ldr	r3, [r5, #4]
 800587c:	ea23 0302 	bic.w	r3, r3, r2
 8005880:	606b      	str	r3, [r5, #4]
 8005882:	6868      	ldr	r0, [r5, #4]
 8005884:	0052      	lsls	r2, r2, #1
 8005886:	4282      	cmp	r2, r0
 8005888:	d87e      	bhi.n	8005988 <_malloc_r+0x2a8>
 800588a:	2a00      	cmp	r2, #0
 800588c:	d07c      	beq.n	8005988 <_malloc_r+0x2a8>
 800588e:	4673      	mov	r3, lr
 8005890:	4202      	tst	r2, r0
 8005892:	d1e1      	bne.n	8005858 <_malloc_r+0x178>
 8005894:	3304      	adds	r3, #4
 8005896:	0052      	lsls	r2, r2, #1
 8005898:	e7fa      	b.n	8005890 <_malloc_r+0x1b0>
 800589a:	0a42      	lsrs	r2, r0, #9
 800589c:	2a04      	cmp	r2, #4
 800589e:	d815      	bhi.n	80058cc <_malloc_r+0x1ec>
 80058a0:	0982      	lsrs	r2, r0, #6
 80058a2:	3238      	adds	r2, #56	; 0x38
 80058a4:	1c57      	adds	r7, r2, #1
 80058a6:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80058aa:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80058ae:	45be      	cmp	lr, r7
 80058b0:	d126      	bne.n	8005900 <_malloc_r+0x220>
 80058b2:	2001      	movs	r0, #1
 80058b4:	1092      	asrs	r2, r2, #2
 80058b6:	fa00 f202 	lsl.w	r2, r0, r2
 80058ba:	6868      	ldr	r0, [r5, #4]
 80058bc:	4310      	orrs	r0, r2
 80058be:	6068      	str	r0, [r5, #4]
 80058c0:	f8c6 e00c 	str.w	lr, [r6, #12]
 80058c4:	60b7      	str	r7, [r6, #8]
 80058c6:	f8ce 6008 	str.w	r6, [lr, #8]
 80058ca:	e7b3      	b.n	8005834 <_malloc_r+0x154>
 80058cc:	2a14      	cmp	r2, #20
 80058ce:	d801      	bhi.n	80058d4 <_malloc_r+0x1f4>
 80058d0:	325b      	adds	r2, #91	; 0x5b
 80058d2:	e7e7      	b.n	80058a4 <_malloc_r+0x1c4>
 80058d4:	2a54      	cmp	r2, #84	; 0x54
 80058d6:	d802      	bhi.n	80058de <_malloc_r+0x1fe>
 80058d8:	0b02      	lsrs	r2, r0, #12
 80058da:	326e      	adds	r2, #110	; 0x6e
 80058dc:	e7e2      	b.n	80058a4 <_malloc_r+0x1c4>
 80058de:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80058e2:	d802      	bhi.n	80058ea <_malloc_r+0x20a>
 80058e4:	0bc2      	lsrs	r2, r0, #15
 80058e6:	3277      	adds	r2, #119	; 0x77
 80058e8:	e7dc      	b.n	80058a4 <_malloc_r+0x1c4>
 80058ea:	f240 5754 	movw	r7, #1364	; 0x554
 80058ee:	42ba      	cmp	r2, r7
 80058f0:	bf9a      	itte	ls
 80058f2:	0c82      	lsrls	r2, r0, #18
 80058f4:	327c      	addls	r2, #124	; 0x7c
 80058f6:	227e      	movhi	r2, #126	; 0x7e
 80058f8:	e7d4      	b.n	80058a4 <_malloc_r+0x1c4>
 80058fa:	68bf      	ldr	r7, [r7, #8]
 80058fc:	45be      	cmp	lr, r7
 80058fe:	d004      	beq.n	800590a <_malloc_r+0x22a>
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	f022 0203 	bic.w	r2, r2, #3
 8005906:	4290      	cmp	r0, r2
 8005908:	d3f7      	bcc.n	80058fa <_malloc_r+0x21a>
 800590a:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800590e:	e7d7      	b.n	80058c0 <_malloc_r+0x1e0>
 8005910:	6870      	ldr	r0, [r6, #4]
 8005912:	68f7      	ldr	r7, [r6, #12]
 8005914:	f020 0003 	bic.w	r0, r0, #3
 8005918:	eba0 0a04 	sub.w	sl, r0, r4
 800591c:	f1ba 0f0f 	cmp.w	sl, #15
 8005920:	dd10      	ble.n	8005944 <_malloc_r+0x264>
 8005922:	68b2      	ldr	r2, [r6, #8]
 8005924:	1933      	adds	r3, r6, r4
 8005926:	f044 0401 	orr.w	r4, r4, #1
 800592a:	6074      	str	r4, [r6, #4]
 800592c:	60d7      	str	r7, [r2, #12]
 800592e:	60ba      	str	r2, [r7, #8]
 8005930:	f04a 0201 	orr.w	r2, sl, #1
 8005934:	616b      	str	r3, [r5, #20]
 8005936:	612b      	str	r3, [r5, #16]
 8005938:	60d9      	str	r1, [r3, #12]
 800593a:	6099      	str	r1, [r3, #8]
 800593c:	605a      	str	r2, [r3, #4]
 800593e:	f846 a000 	str.w	sl, [r6, r0]
 8005942:	e6ff      	b.n	8005744 <_malloc_r+0x64>
 8005944:	f1ba 0f00 	cmp.w	sl, #0
 8005948:	db0f      	blt.n	800596a <_malloc_r+0x28a>
 800594a:	4430      	add	r0, r6
 800594c:	6843      	ldr	r3, [r0, #4]
 800594e:	f043 0301 	orr.w	r3, r3, #1
 8005952:	6043      	str	r3, [r0, #4]
 8005954:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8005958:	4648      	mov	r0, r9
 800595a:	60df      	str	r7, [r3, #12]
 800595c:	60bb      	str	r3, [r7, #8]
 800595e:	f000 f8e7 	bl	8005b30 <__malloc_unlock>
 8005962:	4630      	mov	r0, r6
 8005964:	b003      	add	sp, #12
 8005966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596a:	463e      	mov	r6, r7
 800596c:	e77a      	b.n	8005864 <_malloc_r+0x184>
 800596e:	f85c 0908 	ldr.w	r0, [ip], #-8
 8005972:	4584      	cmp	ip, r0
 8005974:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005978:	f43f af7d 	beq.w	8005876 <_malloc_r+0x196>
 800597c:	e781      	b.n	8005882 <_malloc_r+0x1a2>
 800597e:	bf00      	nop
 8005980:	20000280 	.word	0x20000280
 8005984:	20000288 	.word	0x20000288
 8005988:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800598c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8005990:	f026 0603 	bic.w	r6, r6, #3
 8005994:	42b4      	cmp	r4, r6
 8005996:	d803      	bhi.n	80059a0 <_malloc_r+0x2c0>
 8005998:	1b33      	subs	r3, r6, r4
 800599a:	2b0f      	cmp	r3, #15
 800599c:	f300 8096 	bgt.w	8005acc <_malloc_r+0x3ec>
 80059a0:	4a4f      	ldr	r2, [pc, #316]	; (8005ae0 <_malloc_r+0x400>)
 80059a2:	6817      	ldr	r7, [r2, #0]
 80059a4:	4a4f      	ldr	r2, [pc, #316]	; (8005ae4 <_malloc_r+0x404>)
 80059a6:	6811      	ldr	r1, [r2, #0]
 80059a8:	3710      	adds	r7, #16
 80059aa:	3101      	adds	r1, #1
 80059ac:	eb0b 0306 	add.w	r3, fp, r6
 80059b0:	4427      	add	r7, r4
 80059b2:	d005      	beq.n	80059c0 <_malloc_r+0x2e0>
 80059b4:	494c      	ldr	r1, [pc, #304]	; (8005ae8 <_malloc_r+0x408>)
 80059b6:	3901      	subs	r1, #1
 80059b8:	440f      	add	r7, r1
 80059ba:	3101      	adds	r1, #1
 80059bc:	4249      	negs	r1, r1
 80059be:	400f      	ands	r7, r1
 80059c0:	4639      	mov	r1, r7
 80059c2:	4648      	mov	r0, r9
 80059c4:	9201      	str	r2, [sp, #4]
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	f000 f92c 	bl	8005c24 <_sbrk_r>
 80059cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80059d0:	4680      	mov	r8, r0
 80059d2:	d056      	beq.n	8005a82 <_malloc_r+0x3a2>
 80059d4:	9b00      	ldr	r3, [sp, #0]
 80059d6:	9a01      	ldr	r2, [sp, #4]
 80059d8:	4283      	cmp	r3, r0
 80059da:	d901      	bls.n	80059e0 <_malloc_r+0x300>
 80059dc:	45ab      	cmp	fp, r5
 80059de:	d150      	bne.n	8005a82 <_malloc_r+0x3a2>
 80059e0:	4842      	ldr	r0, [pc, #264]	; (8005aec <_malloc_r+0x40c>)
 80059e2:	6801      	ldr	r1, [r0, #0]
 80059e4:	4543      	cmp	r3, r8
 80059e6:	eb07 0e01 	add.w	lr, r7, r1
 80059ea:	f8c0 e000 	str.w	lr, [r0]
 80059ee:	4940      	ldr	r1, [pc, #256]	; (8005af0 <_malloc_r+0x410>)
 80059f0:	4682      	mov	sl, r0
 80059f2:	d113      	bne.n	8005a1c <_malloc_r+0x33c>
 80059f4:	420b      	tst	r3, r1
 80059f6:	d111      	bne.n	8005a1c <_malloc_r+0x33c>
 80059f8:	68ab      	ldr	r3, [r5, #8]
 80059fa:	443e      	add	r6, r7
 80059fc:	f046 0601 	orr.w	r6, r6, #1
 8005a00:	605e      	str	r6, [r3, #4]
 8005a02:	4a3c      	ldr	r2, [pc, #240]	; (8005af4 <_malloc_r+0x414>)
 8005a04:	f8da 3000 	ldr.w	r3, [sl]
 8005a08:	6811      	ldr	r1, [r2, #0]
 8005a0a:	428b      	cmp	r3, r1
 8005a0c:	bf88      	it	hi
 8005a0e:	6013      	strhi	r3, [r2, #0]
 8005a10:	4a39      	ldr	r2, [pc, #228]	; (8005af8 <_malloc_r+0x418>)
 8005a12:	6811      	ldr	r1, [r2, #0]
 8005a14:	428b      	cmp	r3, r1
 8005a16:	bf88      	it	hi
 8005a18:	6013      	strhi	r3, [r2, #0]
 8005a1a:	e032      	b.n	8005a82 <_malloc_r+0x3a2>
 8005a1c:	6810      	ldr	r0, [r2, #0]
 8005a1e:	3001      	adds	r0, #1
 8005a20:	bf1b      	ittet	ne
 8005a22:	eba8 0303 	subne.w	r3, r8, r3
 8005a26:	4473      	addne	r3, lr
 8005a28:	f8c2 8000 	streq.w	r8, [r2]
 8005a2c:	f8ca 3000 	strne.w	r3, [sl]
 8005a30:	f018 0007 	ands.w	r0, r8, #7
 8005a34:	bf1c      	itt	ne
 8005a36:	f1c0 0008 	rsbne	r0, r0, #8
 8005a3a:	4480      	addne	r8, r0
 8005a3c:	4b2a      	ldr	r3, [pc, #168]	; (8005ae8 <_malloc_r+0x408>)
 8005a3e:	4447      	add	r7, r8
 8005a40:	4418      	add	r0, r3
 8005a42:	400f      	ands	r7, r1
 8005a44:	1bc7      	subs	r7, r0, r7
 8005a46:	4639      	mov	r1, r7
 8005a48:	4648      	mov	r0, r9
 8005a4a:	f000 f8eb 	bl	8005c24 <_sbrk_r>
 8005a4e:	1c43      	adds	r3, r0, #1
 8005a50:	bf08      	it	eq
 8005a52:	4640      	moveq	r0, r8
 8005a54:	f8da 3000 	ldr.w	r3, [sl]
 8005a58:	f8c5 8008 	str.w	r8, [r5, #8]
 8005a5c:	bf08      	it	eq
 8005a5e:	2700      	moveq	r7, #0
 8005a60:	eba0 0008 	sub.w	r0, r0, r8
 8005a64:	443b      	add	r3, r7
 8005a66:	4407      	add	r7, r0
 8005a68:	f047 0701 	orr.w	r7, r7, #1
 8005a6c:	45ab      	cmp	fp, r5
 8005a6e:	f8ca 3000 	str.w	r3, [sl]
 8005a72:	f8c8 7004 	str.w	r7, [r8, #4]
 8005a76:	d0c4      	beq.n	8005a02 <_malloc_r+0x322>
 8005a78:	2e0f      	cmp	r6, #15
 8005a7a:	d810      	bhi.n	8005a9e <_malloc_r+0x3be>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	f8c8 3004 	str.w	r3, [r8, #4]
 8005a82:	68ab      	ldr	r3, [r5, #8]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	f022 0203 	bic.w	r2, r2, #3
 8005a8a:	4294      	cmp	r4, r2
 8005a8c:	eba2 0304 	sub.w	r3, r2, r4
 8005a90:	d801      	bhi.n	8005a96 <_malloc_r+0x3b6>
 8005a92:	2b0f      	cmp	r3, #15
 8005a94:	dc1a      	bgt.n	8005acc <_malloc_r+0x3ec>
 8005a96:	4648      	mov	r0, r9
 8005a98:	f000 f84a 	bl	8005b30 <__malloc_unlock>
 8005a9c:	e62d      	b.n	80056fa <_malloc_r+0x1a>
 8005a9e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005aa2:	3e0c      	subs	r6, #12
 8005aa4:	f026 0607 	bic.w	r6, r6, #7
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	4333      	orrs	r3, r6
 8005aae:	f8cb 3004 	str.w	r3, [fp, #4]
 8005ab2:	eb0b 0306 	add.w	r3, fp, r6
 8005ab6:	2205      	movs	r2, #5
 8005ab8:	2e0f      	cmp	r6, #15
 8005aba:	605a      	str	r2, [r3, #4]
 8005abc:	609a      	str	r2, [r3, #8]
 8005abe:	d9a0      	bls.n	8005a02 <_malloc_r+0x322>
 8005ac0:	f10b 0108 	add.w	r1, fp, #8
 8005ac4:	4648      	mov	r0, r9
 8005ac6:	f001 f85d 	bl	8006b84 <_free_r>
 8005aca:	e79a      	b.n	8005a02 <_malloc_r+0x322>
 8005acc:	68ae      	ldr	r6, [r5, #8]
 8005ace:	f044 0201 	orr.w	r2, r4, #1
 8005ad2:	4434      	add	r4, r6
 8005ad4:	f043 0301 	orr.w	r3, r3, #1
 8005ad8:	6072      	str	r2, [r6, #4]
 8005ada:	60ac      	str	r4, [r5, #8]
 8005adc:	6063      	str	r3, [r4, #4]
 8005ade:	e631      	b.n	8005744 <_malloc_r+0x64>
 8005ae0:	20001fd0 	.word	0x20001fd0
 8005ae4:	20000688 	.word	0x20000688
 8005ae8:	00000080 	.word	0x00000080
 8005aec:	20001fa0 	.word	0x20001fa0
 8005af0:	0000007f 	.word	0x0000007f
 8005af4:	20001fc8 	.word	0x20001fc8
 8005af8:	20001fcc 	.word	0x20001fcc

08005afc <memcpy>:
 8005afc:	b510      	push	{r4, lr}
 8005afe:	1e43      	subs	r3, r0, #1
 8005b00:	440a      	add	r2, r1
 8005b02:	4291      	cmp	r1, r2
 8005b04:	d100      	bne.n	8005b08 <memcpy+0xc>
 8005b06:	bd10      	pop	{r4, pc}
 8005b08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b10:	e7f7      	b.n	8005b02 <memcpy+0x6>

08005b12 <memset>:
 8005b12:	4402      	add	r2, r0
 8005b14:	4603      	mov	r3, r0
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d100      	bne.n	8005b1c <memset+0xa>
 8005b1a:	4770      	bx	lr
 8005b1c:	f803 1b01 	strb.w	r1, [r3], #1
 8005b20:	e7f9      	b.n	8005b16 <memset+0x4>
	...

08005b24 <__malloc_lock>:
 8005b24:	4801      	ldr	r0, [pc, #4]	; (8005b2c <__malloc_lock+0x8>)
 8005b26:	f7ff bdd9 	b.w	80056dc <__retarget_lock_acquire_recursive>
 8005b2a:	bf00      	nop
 8005b2c:	200034dc 	.word	0x200034dc

08005b30 <__malloc_unlock>:
 8005b30:	4801      	ldr	r0, [pc, #4]	; (8005b38 <__malloc_unlock+0x8>)
 8005b32:	f7ff bdd4 	b.w	80056de <__retarget_lock_release_recursive>
 8005b36:	bf00      	nop
 8005b38:	200034dc 	.word	0x200034dc

08005b3c <cleanup_glue>:
 8005b3c:	b538      	push	{r3, r4, r5, lr}
 8005b3e:	460c      	mov	r4, r1
 8005b40:	6809      	ldr	r1, [r1, #0]
 8005b42:	4605      	mov	r5, r0
 8005b44:	b109      	cbz	r1, 8005b4a <cleanup_glue+0xe>
 8005b46:	f7ff fff9 	bl	8005b3c <cleanup_glue>
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b52:	f001 b817 	b.w	8006b84 <_free_r>
	...

08005b58 <_reclaim_reent>:
 8005b58:	4b31      	ldr	r3, [pc, #196]	; (8005c20 <_reclaim_reent+0xc8>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4283      	cmp	r3, r0
 8005b5e:	b570      	push	{r4, r5, r6, lr}
 8005b60:	4604      	mov	r4, r0
 8005b62:	d05c      	beq.n	8005c1e <_reclaim_reent+0xc6>
 8005b64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005b66:	b1ab      	cbz	r3, 8005b94 <_reclaim_reent+0x3c>
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	b16b      	cbz	r3, 8005b88 <_reclaim_reent+0x30>
 8005b6c:	2500      	movs	r5, #0
 8005b6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	5959      	ldr	r1, [r3, r5]
 8005b74:	2900      	cmp	r1, #0
 8005b76:	d14c      	bne.n	8005c12 <_reclaim_reent+0xba>
 8005b78:	3504      	adds	r5, #4
 8005b7a:	2d80      	cmp	r5, #128	; 0x80
 8005b7c:	d1f7      	bne.n	8005b6e <_reclaim_reent+0x16>
 8005b7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b80:	4620      	mov	r0, r4
 8005b82:	68d9      	ldr	r1, [r3, #12]
 8005b84:	f000 fffe 	bl	8006b84 <_free_r>
 8005b88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b8a:	6819      	ldr	r1, [r3, #0]
 8005b8c:	b111      	cbz	r1, 8005b94 <_reclaim_reent+0x3c>
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f000 fff8 	bl	8006b84 <_free_r>
 8005b94:	6961      	ldr	r1, [r4, #20]
 8005b96:	b111      	cbz	r1, 8005b9e <_reclaim_reent+0x46>
 8005b98:	4620      	mov	r0, r4
 8005b9a:	f000 fff3 	bl	8006b84 <_free_r>
 8005b9e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005ba0:	b111      	cbz	r1, 8005ba8 <_reclaim_reent+0x50>
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	f000 ffee 	bl	8006b84 <_free_r>
 8005ba8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005baa:	b111      	cbz	r1, 8005bb2 <_reclaim_reent+0x5a>
 8005bac:	4620      	mov	r0, r4
 8005bae:	f000 ffe9 	bl	8006b84 <_free_r>
 8005bb2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005bb4:	b111      	cbz	r1, 8005bbc <_reclaim_reent+0x64>
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	f000 ffe4 	bl	8006b84 <_free_r>
 8005bbc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005bbe:	b111      	cbz	r1, 8005bc6 <_reclaim_reent+0x6e>
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	f000 ffdf 	bl	8006b84 <_free_r>
 8005bc6:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
 8005bca:	b111      	cbz	r1, 8005bd2 <_reclaim_reent+0x7a>
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f000 ffd9 	bl	8006b84 <_free_r>
 8005bd2:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
 8005bd6:	b111      	cbz	r1, 8005bde <_reclaim_reent+0x86>
 8005bd8:	4620      	mov	r0, r4
 8005bda:	f000 ffd3 	bl	8006b84 <_free_r>
 8005bde:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005be0:	b12b      	cbz	r3, 8005bee <_reclaim_reent+0x96>
 8005be2:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8005be6:	b111      	cbz	r1, 8005bee <_reclaim_reent+0x96>
 8005be8:	4620      	mov	r0, r4
 8005bea:	f000 ffcb 	bl	8006b84 <_free_r>
 8005bee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bf0:	b111      	cbz	r1, 8005bf8 <_reclaim_reent+0xa0>
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f000 ffc6 	bl	8006b84 <_free_r>
 8005bf8:	69a3      	ldr	r3, [r4, #24]
 8005bfa:	b183      	cbz	r3, 8005c1e <_reclaim_reent+0xc6>
 8005bfc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005bfe:	4620      	mov	r0, r4
 8005c00:	4798      	blx	r3
 8005c02:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
 8005c06:	b151      	cbz	r1, 8005c1e <_reclaim_reent+0xc6>
 8005c08:	4620      	mov	r0, r4
 8005c0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005c0e:	f7ff bf95 	b.w	8005b3c <cleanup_glue>
 8005c12:	680e      	ldr	r6, [r1, #0]
 8005c14:	4620      	mov	r0, r4
 8005c16:	f000 ffb5 	bl	8006b84 <_free_r>
 8005c1a:	4631      	mov	r1, r6
 8005c1c:	e7aa      	b.n	8005b74 <_reclaim_reent+0x1c>
 8005c1e:	bd70      	pop	{r4, r5, r6, pc}
 8005c20:	2000018c 	.word	0x2000018c

08005c24 <_sbrk_r>:
 8005c24:	b538      	push	{r3, r4, r5, lr}
 8005c26:	4c06      	ldr	r4, [pc, #24]	; (8005c40 <_sbrk_r+0x1c>)
 8005c28:	2300      	movs	r3, #0
 8005c2a:	4605      	mov	r5, r0
 8005c2c:	4608      	mov	r0, r1
 8005c2e:	6023      	str	r3, [r4, #0]
 8005c30:	f7ff fba4 	bl	800537c <_sbrk>
 8005c34:	1c43      	adds	r3, r0, #1
 8005c36:	d102      	bne.n	8005c3e <_sbrk_r+0x1a>
 8005c38:	6823      	ldr	r3, [r4, #0]
 8005c3a:	b103      	cbz	r3, 8005c3e <_sbrk_r+0x1a>
 8005c3c:	602b      	str	r3, [r5, #0]
 8005c3e:	bd38      	pop	{r3, r4, r5, pc}
 8005c40:	200034e4 	.word	0x200034e4

08005c44 <__sread>:
 8005c44:	b510      	push	{r4, lr}
 8005c46:	460c      	mov	r4, r1
 8005c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c4c:	f001 fa5c 	bl	8007108 <_read_r>
 8005c50:	2800      	cmp	r0, #0
 8005c52:	bfab      	itete	ge
 8005c54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c56:	89a3      	ldrhlt	r3, [r4, #12]
 8005c58:	181b      	addge	r3, r3, r0
 8005c5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c5e:	bfac      	ite	ge
 8005c60:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c62:	81a3      	strhlt	r3, [r4, #12]
 8005c64:	bd10      	pop	{r4, pc}

08005c66 <__swrite>:
 8005c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c6a:	461f      	mov	r7, r3
 8005c6c:	898b      	ldrh	r3, [r1, #12]
 8005c6e:	05db      	lsls	r3, r3, #23
 8005c70:	4605      	mov	r5, r0
 8005c72:	460c      	mov	r4, r1
 8005c74:	4616      	mov	r6, r2
 8005c76:	d505      	bpl.n	8005c84 <__swrite+0x1e>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c80:	f001 f998 	bl	8006fb4 <_lseek_r>
 8005c84:	89a3      	ldrh	r3, [r4, #12]
 8005c86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c8e:	81a3      	strh	r3, [r4, #12]
 8005c90:	4632      	mov	r2, r6
 8005c92:	463b      	mov	r3, r7
 8005c94:	4628      	mov	r0, r5
 8005c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c9a:	f000 bce1 	b.w	8006660 <_write_r>

08005c9e <__sseek>:
 8005c9e:	b510      	push	{r4, lr}
 8005ca0:	460c      	mov	r4, r1
 8005ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ca6:	f001 f985 	bl	8006fb4 <_lseek_r>
 8005caa:	1c43      	adds	r3, r0, #1
 8005cac:	89a3      	ldrh	r3, [r4, #12]
 8005cae:	bf15      	itete	ne
 8005cb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005cb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005cb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005cba:	81a3      	strheq	r3, [r4, #12]
 8005cbc:	bf18      	it	ne
 8005cbe:	81a3      	strhne	r3, [r4, #12]
 8005cc0:	bd10      	pop	{r4, pc}

08005cc2 <__sclose>:
 8005cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cc6:	f000 bd53 	b.w	8006770 <_close_r>

08005cca <__sprint_r>:
 8005cca:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cce:	6893      	ldr	r3, [r2, #8]
 8005cd0:	4680      	mov	r8, r0
 8005cd2:	460f      	mov	r7, r1
 8005cd4:	4614      	mov	r4, r2
 8005cd6:	b91b      	cbnz	r3, 8005ce0 <__sprint_r+0x16>
 8005cd8:	6053      	str	r3, [r2, #4]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8005ce2:	049d      	lsls	r5, r3, #18
 8005ce4:	d523      	bpl.n	8005d2e <__sprint_r+0x64>
 8005ce6:	6815      	ldr	r5, [r2, #0]
 8005ce8:	68a0      	ldr	r0, [r4, #8]
 8005cea:	3508      	adds	r5, #8
 8005cec:	b920      	cbnz	r0, 8005cf8 <__sprint_r+0x2e>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60a3      	str	r3, [r4, #8]
 8005cf2:	6063      	str	r3, [r4, #4]
 8005cf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf8:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8005cfc:	f855 bc08 	ldr.w	fp, [r5, #-8]
 8005d00:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8005d04:	f04f 0900 	mov.w	r9, #0
 8005d08:	45ca      	cmp	sl, r9
 8005d0a:	dc05      	bgt.n	8005d18 <__sprint_r+0x4e>
 8005d0c:	68a3      	ldr	r3, [r4, #8]
 8005d0e:	f026 0603 	bic.w	r6, r6, #3
 8005d12:	1b9e      	subs	r6, r3, r6
 8005d14:	60a6      	str	r6, [r4, #8]
 8005d16:	e7e7      	b.n	8005ce8 <__sprint_r+0x1e>
 8005d18:	463a      	mov	r2, r7
 8005d1a:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8005d1e:	4640      	mov	r0, r8
 8005d20:	f000 feb1 	bl	8006a86 <_fputwc_r>
 8005d24:	1c43      	adds	r3, r0, #1
 8005d26:	d0e2      	beq.n	8005cee <__sprint_r+0x24>
 8005d28:	f109 0901 	add.w	r9, r9, #1
 8005d2c:	e7ec      	b.n	8005d08 <__sprint_r+0x3e>
 8005d2e:	f000 ffe5 	bl	8006cfc <__sfvwrite_r>
 8005d32:	e7dc      	b.n	8005cee <__sprint_r+0x24>

08005d34 <_vfiprintf_r>:
 8005d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d38:	460f      	mov	r7, r1
 8005d3a:	b0ab      	sub	sp, #172	; 0xac
 8005d3c:	4615      	mov	r5, r2
 8005d3e:	461e      	mov	r6, r3
 8005d40:	461c      	mov	r4, r3
 8005d42:	4682      	mov	sl, r0
 8005d44:	b118      	cbz	r0, 8005d4e <_vfiprintf_r+0x1a>
 8005d46:	6983      	ldr	r3, [r0, #24]
 8005d48:	b90b      	cbnz	r3, 8005d4e <_vfiprintf_r+0x1a>
 8005d4a:	f7ff fbf1 	bl	8005530 <__sinit>
 8005d4e:	4b95      	ldr	r3, [pc, #596]	; (8005fa4 <_vfiprintf_r+0x270>)
 8005d50:	429f      	cmp	r7, r3
 8005d52:	d12c      	bne.n	8005dae <_vfiprintf_r+0x7a>
 8005d54:	f8da 7004 	ldr.w	r7, [sl, #4]
 8005d58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d5a:	07d8      	lsls	r0, r3, #31
 8005d5c:	d405      	bmi.n	8005d6a <_vfiprintf_r+0x36>
 8005d5e:	89bb      	ldrh	r3, [r7, #12]
 8005d60:	0599      	lsls	r1, r3, #22
 8005d62:	d402      	bmi.n	8005d6a <_vfiprintf_r+0x36>
 8005d64:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005d66:	f7ff fcb9 	bl	80056dc <__retarget_lock_acquire_recursive>
 8005d6a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005d6e:	049a      	lsls	r2, r3, #18
 8005d70:	d406      	bmi.n	8005d80 <_vfiprintf_r+0x4c>
 8005d72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d76:	81bb      	strh	r3, [r7, #12]
 8005d78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d7e:	667b      	str	r3, [r7, #100]	; 0x64
 8005d80:	89bb      	ldrh	r3, [r7, #12]
 8005d82:	071b      	lsls	r3, r3, #28
 8005d84:	d501      	bpl.n	8005d8a <_vfiprintf_r+0x56>
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	b9eb      	cbnz	r3, 8005dc6 <_vfiprintf_r+0x92>
 8005d8a:	4639      	mov	r1, r7
 8005d8c:	4650      	mov	r0, sl
 8005d8e:	f000 fc79 	bl	8006684 <__swsetup_r>
 8005d92:	b1c0      	cbz	r0, 8005dc6 <_vfiprintf_r+0x92>
 8005d94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d96:	07d8      	lsls	r0, r3, #31
 8005d98:	d405      	bmi.n	8005da6 <_vfiprintf_r+0x72>
 8005d9a:	89bb      	ldrh	r3, [r7, #12]
 8005d9c:	0599      	lsls	r1, r3, #22
 8005d9e:	d402      	bmi.n	8005da6 <_vfiprintf_r+0x72>
 8005da0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005da2:	f7ff fc9c 	bl	80056de <__retarget_lock_release_recursive>
 8005da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005daa:	9303      	str	r3, [sp, #12]
 8005dac:	e023      	b.n	8005df6 <_vfiprintf_r+0xc2>
 8005dae:	4b7e      	ldr	r3, [pc, #504]	; (8005fa8 <_vfiprintf_r+0x274>)
 8005db0:	429f      	cmp	r7, r3
 8005db2:	d102      	bne.n	8005dba <_vfiprintf_r+0x86>
 8005db4:	f8da 7008 	ldr.w	r7, [sl, #8]
 8005db8:	e7ce      	b.n	8005d58 <_vfiprintf_r+0x24>
 8005dba:	4b7c      	ldr	r3, [pc, #496]	; (8005fac <_vfiprintf_r+0x278>)
 8005dbc:	429f      	cmp	r7, r3
 8005dbe:	bf08      	it	eq
 8005dc0:	f8da 700c 	ldreq.w	r7, [sl, #12]
 8005dc4:	e7c8      	b.n	8005d58 <_vfiprintf_r+0x24>
 8005dc6:	89bb      	ldrh	r3, [r7, #12]
 8005dc8:	f003 021a 	and.w	r2, r3, #26
 8005dcc:	2a0a      	cmp	r2, #10
 8005dce:	d116      	bne.n	8005dfe <_vfiprintf_r+0xca>
 8005dd0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005dd4:	2a00      	cmp	r2, #0
 8005dd6:	db12      	blt.n	8005dfe <_vfiprintf_r+0xca>
 8005dd8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005dda:	07d2      	lsls	r2, r2, #31
 8005ddc:	d404      	bmi.n	8005de8 <_vfiprintf_r+0xb4>
 8005dde:	059b      	lsls	r3, r3, #22
 8005de0:	d402      	bmi.n	8005de8 <_vfiprintf_r+0xb4>
 8005de2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005de4:	f7ff fc7b 	bl	80056de <__retarget_lock_release_recursive>
 8005de8:	4633      	mov	r3, r6
 8005dea:	462a      	mov	r2, r5
 8005dec:	4639      	mov	r1, r7
 8005dee:	4650      	mov	r0, sl
 8005df0:	f000 fbf6 	bl	80065e0 <__sbprintf>
 8005df4:	9003      	str	r0, [sp, #12]
 8005df6:	9803      	ldr	r0, [sp, #12]
 8005df8:	b02b      	add	sp, #172	; 0xac
 8005dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dfe:	2300      	movs	r3, #0
 8005e00:	ae1a      	add	r6, sp, #104	; 0x68
 8005e02:	960d      	str	r6, [sp, #52]	; 0x34
 8005e04:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e06:	930e      	str	r3, [sp, #56]	; 0x38
 8005e08:	9502      	str	r5, [sp, #8]
 8005e0a:	9306      	str	r3, [sp, #24]
 8005e0c:	9303      	str	r3, [sp, #12]
 8005e0e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005e12:	4645      	mov	r5, r8
 8005e14:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005e18:	b10b      	cbz	r3, 8005e1e <_vfiprintf_r+0xea>
 8005e1a:	2b25      	cmp	r3, #37	; 0x25
 8005e1c:	d146      	bne.n	8005eac <_vfiprintf_r+0x178>
 8005e1e:	9b02      	ldr	r3, [sp, #8]
 8005e20:	ebb8 0903 	subs.w	r9, r8, r3
 8005e24:	d00d      	beq.n	8005e42 <_vfiprintf_r+0x10e>
 8005e26:	e886 0208 	stmia.w	r6, {r3, r9}
 8005e2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e2c:	444b      	add	r3, r9
 8005e2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e32:	3301      	adds	r3, #1
 8005e34:	2b07      	cmp	r3, #7
 8005e36:	930e      	str	r3, [sp, #56]	; 0x38
 8005e38:	dc3a      	bgt.n	8005eb0 <_vfiprintf_r+0x17c>
 8005e3a:	3608      	adds	r6, #8
 8005e3c:	9b03      	ldr	r3, [sp, #12]
 8005e3e:	444b      	add	r3, r9
 8005e40:	9303      	str	r3, [sp, #12]
 8005e42:	f898 3000 	ldrb.w	r3, [r8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f000 8388 	beq.w	800655c <_vfiprintf_r+0x828>
 8005e4c:	f04f 0300 	mov.w	r3, #0
 8005e50:	2200      	movs	r2, #0
 8005e52:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8005e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	9301      	str	r3, [sp, #4]
 8005e5e:	9204      	str	r2, [sp, #16]
 8005e60:	4693      	mov	fp, r2
 8005e62:	f04f 0e0a 	mov.w	lr, #10
 8005e66:	1c6b      	adds	r3, r5, #1
 8005e68:	7828      	ldrb	r0, [r5, #0]
 8005e6a:	9302      	str	r3, [sp, #8]
 8005e6c:	2858      	cmp	r0, #88	; 0x58
 8005e6e:	f000 8165 	beq.w	800613c <_vfiprintf_r+0x408>
 8005e72:	dc49      	bgt.n	8005f08 <_vfiprintf_r+0x1d4>
 8005e74:	282e      	cmp	r0, #46	; 0x2e
 8005e76:	f000 8193 	beq.w	80061a0 <_vfiprintf_r+0x46c>
 8005e7a:	dc2d      	bgt.n	8005ed8 <_vfiprintf_r+0x1a4>
 8005e7c:	282a      	cmp	r0, #42	; 0x2a
 8005e7e:	f000 8184 	beq.w	800618a <_vfiprintf_r+0x456>
 8005e82:	dc21      	bgt.n	8005ec8 <_vfiprintf_r+0x194>
 8005e84:	2820      	cmp	r0, #32
 8005e86:	f000 8178 	beq.w	800617a <_vfiprintf_r+0x446>
 8005e8a:	2823      	cmp	r0, #35	; 0x23
 8005e8c:	f000 817a 	beq.w	8006184 <_vfiprintf_r+0x450>
 8005e90:	b10a      	cbz	r2, 8005e96 <_vfiprintf_r+0x162>
 8005e92:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8005e96:	2800      	cmp	r0, #0
 8005e98:	f000 8360 	beq.w	800655c <_vfiprintf_r+0x828>
 8005e9c:	f04f 0300 	mov.w	r3, #0
 8005ea0:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
 8005ea4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8005ea8:	46a0      	mov	r8, r4
 8005eaa:	e1b6      	b.n	800621a <_vfiprintf_r+0x4e6>
 8005eac:	46a8      	mov	r8, r5
 8005eae:	e7b0      	b.n	8005e12 <_vfiprintf_r+0xde>
 8005eb0:	aa0d      	add	r2, sp, #52	; 0x34
 8005eb2:	4639      	mov	r1, r7
 8005eb4:	4650      	mov	r0, sl
 8005eb6:	f7ff ff08 	bl	8005cca <__sprint_r>
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	f040 832d 	bne.w	800651a <_vfiprintf_r+0x7e6>
 8005ec0:	ae1a      	add	r6, sp, #104	; 0x68
 8005ec2:	e7bb      	b.n	8005e3c <_vfiprintf_r+0x108>
 8005ec4:	4604      	mov	r4, r0
 8005ec6:	e15b      	b.n	8006180 <_vfiprintf_r+0x44c>
 8005ec8:	282b      	cmp	r0, #43	; 0x2b
 8005eca:	f000 8157 	beq.w	800617c <_vfiprintf_r+0x448>
 8005ece:	282d      	cmp	r0, #45	; 0x2d
 8005ed0:	d1de      	bne.n	8005e90 <_vfiprintf_r+0x15c>
 8005ed2:	f04b 0b04 	orr.w	fp, fp, #4
 8005ed6:	e153      	b.n	8006180 <_vfiprintf_r+0x44c>
 8005ed8:	2839      	cmp	r0, #57	; 0x39
 8005eda:	dc07      	bgt.n	8005eec <_vfiprintf_r+0x1b8>
 8005edc:	2831      	cmp	r0, #49	; 0x31
 8005ede:	f280 817d 	bge.w	80061dc <_vfiprintf_r+0x4a8>
 8005ee2:	2830      	cmp	r0, #48	; 0x30
 8005ee4:	d1d4      	bne.n	8005e90 <_vfiprintf_r+0x15c>
 8005ee6:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8005eea:	e149      	b.n	8006180 <_vfiprintf_r+0x44c>
 8005eec:	284f      	cmp	r0, #79	; 0x4f
 8005eee:	f000 81c8 	beq.w	8006282 <_vfiprintf_r+0x54e>
 8005ef2:	2855      	cmp	r0, #85	; 0x55
 8005ef4:	f000 8205 	beq.w	8006302 <_vfiprintf_r+0x5ce>
 8005ef8:	2844      	cmp	r0, #68	; 0x44
 8005efa:	d1c9      	bne.n	8005e90 <_vfiprintf_r+0x15c>
 8005efc:	b10a      	cbz	r2, 8005f02 <_vfiprintf_r+0x1ce>
 8005efe:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8005f02:	f04b 0b10 	orr.w	fp, fp, #16
 8005f06:	e00f      	b.n	8005f28 <_vfiprintf_r+0x1f4>
 8005f08:	286e      	cmp	r0, #110	; 0x6e
 8005f0a:	f000 819a 	beq.w	8006242 <_vfiprintf_r+0x50e>
 8005f0e:	dc31      	bgt.n	8005f74 <_vfiprintf_r+0x240>
 8005f10:	2868      	cmp	r0, #104	; 0x68
 8005f12:	f000 8173 	beq.w	80061fc <_vfiprintf_r+0x4c8>
 8005f16:	dc1f      	bgt.n	8005f58 <_vfiprintf_r+0x224>
 8005f18:	2863      	cmp	r0, #99	; 0x63
 8005f1a:	f000 8175 	beq.w	8006208 <_vfiprintf_r+0x4d4>
 8005f1e:	2864      	cmp	r0, #100	; 0x64
 8005f20:	d1b6      	bne.n	8005e90 <_vfiprintf_r+0x15c>
 8005f22:	b10a      	cbz	r2, 8005f28 <_vfiprintf_r+0x1f4>
 8005f24:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8005f28:	f01b 0f20 	tst.w	fp, #32
 8005f2c:	f000 817b 	beq.w	8006226 <_vfiprintf_r+0x4f2>
 8005f30:	3407      	adds	r4, #7
 8005f32:	f024 0407 	bic.w	r4, r4, #7
 8005f36:	f104 0808 	add.w	r8, r4, #8
 8005f3a:	e9d4 4500 	ldrd	r4, r5, [r4]
 8005f3e:	2c00      	cmp	r4, #0
 8005f40:	f175 0300 	sbcs.w	r3, r5, #0
 8005f44:	da06      	bge.n	8005f54 <_vfiprintf_r+0x220>
 8005f46:	4264      	negs	r4, r4
 8005f48:	f04f 022d 	mov.w	r2, #45	; 0x2d
 8005f4c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8005f50:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 8005f54:	2201      	movs	r2, #1
 8005f56:	e1a5      	b.n	80062a4 <_vfiprintf_r+0x570>
 8005f58:	2869      	cmp	r0, #105	; 0x69
 8005f5a:	d0e2      	beq.n	8005f22 <_vfiprintf_r+0x1ee>
 8005f5c:	286c      	cmp	r0, #108	; 0x6c
 8005f5e:	d197      	bne.n	8005e90 <_vfiprintf_r+0x15c>
 8005f60:	9b02      	ldr	r3, [sp, #8]
 8005f62:	7818      	ldrb	r0, [r3, #0]
 8005f64:	286c      	cmp	r0, #108	; 0x6c
 8005f66:	f040 814c 	bne.w	8006202 <_vfiprintf_r+0x4ce>
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	9302      	str	r3, [sp, #8]
 8005f6e:	f04b 0b20 	orr.w	fp, fp, #32
 8005f72:	e105      	b.n	8006180 <_vfiprintf_r+0x44c>
 8005f74:	2871      	cmp	r0, #113	; 0x71
 8005f76:	d0fa      	beq.n	8005f6e <_vfiprintf_r+0x23a>
 8005f78:	dc1c      	bgt.n	8005fb4 <_vfiprintf_r+0x280>
 8005f7a:	286f      	cmp	r0, #111	; 0x6f
 8005f7c:	f000 8183 	beq.w	8006286 <_vfiprintf_r+0x552>
 8005f80:	2870      	cmp	r0, #112	; 0x70
 8005f82:	d185      	bne.n	8005e90 <_vfiprintf_r+0x15c>
 8005f84:	2230      	movs	r2, #48	; 0x30
 8005f86:	f104 0804 	add.w	r8, r4, #4
 8005f8a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 8005f8e:	4b08      	ldr	r3, [pc, #32]	; (8005fb0 <_vfiprintf_r+0x27c>)
 8005f90:	6824      	ldr	r4, [r4, #0]
 8005f92:	9306      	str	r3, [sp, #24]
 8005f94:	2278      	movs	r2, #120	; 0x78
 8005f96:	2500      	movs	r5, #0
 8005f98:	f04b 0b02 	orr.w	fp, fp, #2
 8005f9c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	e17b      	b.n	800629c <_vfiprintf_r+0x568>
 8005fa4:	08008d78 	.word	0x08008d78
 8005fa8:	08008d98 	.word	0x08008d98
 8005fac:	08008d58 	.word	0x08008d58
 8005fb0:	08008dcd 	.word	0x08008dcd
 8005fb4:	2875      	cmp	r0, #117	; 0x75
 8005fb6:	f000 81a6 	beq.w	8006306 <_vfiprintf_r+0x5d2>
 8005fba:	2878      	cmp	r0, #120	; 0x78
 8005fbc:	f000 81bc 	beq.w	8006338 <_vfiprintf_r+0x604>
 8005fc0:	2873      	cmp	r0, #115	; 0x73
 8005fc2:	f47f af65 	bne.w	8005e90 <_vfiprintf_r+0x15c>
 8005fc6:	f04f 0300 	mov.w	r3, #0
 8005fca:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8005fce:	9b01      	ldr	r3, [sp, #4]
 8005fd0:	f8d4 9000 	ldr.w	r9, [r4]
 8005fd4:	f104 0804 	add.w	r8, r4, #4
 8005fd8:	1c5c      	adds	r4, r3, #1
 8005fda:	f000 818d 	beq.w	80062f8 <_vfiprintf_r+0x5c4>
 8005fde:	461a      	mov	r2, r3
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	4648      	mov	r0, r9
 8005fe4:	f7fa f8fc 	bl	80001e0 <memchr>
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	f000 81fb 	beq.w	80063e4 <_vfiprintf_r+0x6b0>
 8005fee:	eba0 0309 	sub.w	r3, r0, r9
 8005ff2:	9301      	str	r3, [sp, #4]
 8005ff4:	2500      	movs	r5, #0
 8005ff6:	9b01      	ldr	r3, [sp, #4]
 8005ff8:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8005ffc:	42ab      	cmp	r3, r5
 8005ffe:	bfb8      	it	lt
 8006000:	462b      	movlt	r3, r5
 8006002:	9305      	str	r3, [sp, #20]
 8006004:	b10a      	cbz	r2, 800600a <_vfiprintf_r+0x2d6>
 8006006:	3301      	adds	r3, #1
 8006008:	9305      	str	r3, [sp, #20]
 800600a:	f01b 0302 	ands.w	r3, fp, #2
 800600e:	9307      	str	r3, [sp, #28]
 8006010:	bf1e      	ittt	ne
 8006012:	9b05      	ldrne	r3, [sp, #20]
 8006014:	3302      	addne	r3, #2
 8006016:	9305      	strne	r3, [sp, #20]
 8006018:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 800601c:	9308      	str	r3, [sp, #32]
 800601e:	d114      	bne.n	800604a <_vfiprintf_r+0x316>
 8006020:	9b04      	ldr	r3, [sp, #16]
 8006022:	9a05      	ldr	r2, [sp, #20]
 8006024:	1a9c      	subs	r4, r3, r2
 8006026:	2c00      	cmp	r4, #0
 8006028:	dd0f      	ble.n	800604a <_vfiprintf_r+0x316>
 800602a:	4bad      	ldr	r3, [pc, #692]	; (80062e0 <_vfiprintf_r+0x5ac>)
 800602c:	6033      	str	r3, [r6, #0]
 800602e:	2c10      	cmp	r4, #16
 8006030:	f300 81da 	bgt.w	80063e8 <_vfiprintf_r+0x6b4>
 8006034:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006036:	6074      	str	r4, [r6, #4]
 8006038:	4414      	add	r4, r2
 800603a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800603c:	940f      	str	r4, [sp, #60]	; 0x3c
 800603e:	3201      	adds	r2, #1
 8006040:	2a07      	cmp	r2, #7
 8006042:	920e      	str	r2, [sp, #56]	; 0x38
 8006044:	f300 81e9 	bgt.w	800641a <_vfiprintf_r+0x6e6>
 8006048:	3608      	adds	r6, #8
 800604a:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800604e:	b172      	cbz	r2, 800606e <_vfiprintf_r+0x33a>
 8006050:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
 8006054:	6032      	str	r2, [r6, #0]
 8006056:	2201      	movs	r2, #1
 8006058:	6072      	str	r2, [r6, #4]
 800605a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800605c:	3201      	adds	r2, #1
 800605e:	920f      	str	r2, [sp, #60]	; 0x3c
 8006060:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006062:	3201      	adds	r2, #1
 8006064:	2a07      	cmp	r2, #7
 8006066:	920e      	str	r2, [sp, #56]	; 0x38
 8006068:	f300 81e0 	bgt.w	800642c <_vfiprintf_r+0x6f8>
 800606c:	3608      	adds	r6, #8
 800606e:	9b07      	ldr	r3, [sp, #28]
 8006070:	b16b      	cbz	r3, 800608e <_vfiprintf_r+0x35a>
 8006072:	aa0c      	add	r2, sp, #48	; 0x30
 8006074:	6032      	str	r2, [r6, #0]
 8006076:	2202      	movs	r2, #2
 8006078:	6072      	str	r2, [r6, #4]
 800607a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800607c:	3202      	adds	r2, #2
 800607e:	920f      	str	r2, [sp, #60]	; 0x3c
 8006080:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006082:	3201      	adds	r2, #1
 8006084:	2a07      	cmp	r2, #7
 8006086:	920e      	str	r2, [sp, #56]	; 0x38
 8006088:	f300 81d9 	bgt.w	800643e <_vfiprintf_r+0x70a>
 800608c:	3608      	adds	r6, #8
 800608e:	9b08      	ldr	r3, [sp, #32]
 8006090:	2b80      	cmp	r3, #128	; 0x80
 8006092:	d114      	bne.n	80060be <_vfiprintf_r+0x38a>
 8006094:	9b04      	ldr	r3, [sp, #16]
 8006096:	9a05      	ldr	r2, [sp, #20]
 8006098:	1a9c      	subs	r4, r3, r2
 800609a:	2c00      	cmp	r4, #0
 800609c:	dd0f      	ble.n	80060be <_vfiprintf_r+0x38a>
 800609e:	4b91      	ldr	r3, [pc, #580]	; (80062e4 <_vfiprintf_r+0x5b0>)
 80060a0:	6033      	str	r3, [r6, #0]
 80060a2:	2c10      	cmp	r4, #16
 80060a4:	f300 81d4 	bgt.w	8006450 <_vfiprintf_r+0x71c>
 80060a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80060aa:	6074      	str	r4, [r6, #4]
 80060ac:	4414      	add	r4, r2
 80060ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060b0:	940f      	str	r4, [sp, #60]	; 0x3c
 80060b2:	3201      	adds	r2, #1
 80060b4:	2a07      	cmp	r2, #7
 80060b6:	920e      	str	r2, [sp, #56]	; 0x38
 80060b8:	f300 81e2 	bgt.w	8006480 <_vfiprintf_r+0x74c>
 80060bc:	3608      	adds	r6, #8
 80060be:	9b01      	ldr	r3, [sp, #4]
 80060c0:	1aec      	subs	r4, r5, r3
 80060c2:	2c00      	cmp	r4, #0
 80060c4:	dd10      	ble.n	80060e8 <_vfiprintf_r+0x3b4>
 80060c6:	4d87      	ldr	r5, [pc, #540]	; (80062e4 <_vfiprintf_r+0x5b0>)
 80060c8:	2310      	movs	r3, #16
 80060ca:	2c10      	cmp	r4, #16
 80060cc:	6035      	str	r5, [r6, #0]
 80060ce:	f300 81e0 	bgt.w	8006492 <_vfiprintf_r+0x75e>
 80060d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060d4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80060d6:	6074      	str	r4, [r6, #4]
 80060d8:	3201      	adds	r2, #1
 80060da:	4404      	add	r4, r0
 80060dc:	2a07      	cmp	r2, #7
 80060de:	940f      	str	r4, [sp, #60]	; 0x3c
 80060e0:	920e      	str	r2, [sp, #56]	; 0x38
 80060e2:	f300 81ed 	bgt.w	80064c0 <_vfiprintf_r+0x78c>
 80060e6:	3608      	adds	r6, #8
 80060e8:	9b01      	ldr	r3, [sp, #4]
 80060ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80060ec:	f8c6 9000 	str.w	r9, [r6]
 80060f0:	441a      	add	r2, r3
 80060f2:	920f      	str	r2, [sp, #60]	; 0x3c
 80060f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060f6:	6073      	str	r3, [r6, #4]
 80060f8:	3201      	adds	r2, #1
 80060fa:	2a07      	cmp	r2, #7
 80060fc:	920e      	str	r2, [sp, #56]	; 0x38
 80060fe:	f300 81e7 	bgt.w	80064d0 <_vfiprintf_r+0x79c>
 8006102:	f106 0208 	add.w	r2, r6, #8
 8006106:	f01b 0f04 	tst.w	fp, #4
 800610a:	f040 81e9 	bne.w	80064e0 <_vfiprintf_r+0x7ac>
 800610e:	9b03      	ldr	r3, [sp, #12]
 8006110:	9a04      	ldr	r2, [sp, #16]
 8006112:	9905      	ldr	r1, [sp, #20]
 8006114:	428a      	cmp	r2, r1
 8006116:	bfac      	ite	ge
 8006118:	189b      	addge	r3, r3, r2
 800611a:	185b      	addlt	r3, r3, r1
 800611c:	9303      	str	r3, [sp, #12]
 800611e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006120:	b13b      	cbz	r3, 8006132 <_vfiprintf_r+0x3fe>
 8006122:	aa0d      	add	r2, sp, #52	; 0x34
 8006124:	4639      	mov	r1, r7
 8006126:	4650      	mov	r0, sl
 8006128:	f7ff fdcf 	bl	8005cca <__sprint_r>
 800612c:	2800      	cmp	r0, #0
 800612e:	f040 81f4 	bne.w	800651a <_vfiprintf_r+0x7e6>
 8006132:	2300      	movs	r3, #0
 8006134:	930e      	str	r3, [sp, #56]	; 0x38
 8006136:	4644      	mov	r4, r8
 8006138:	ae1a      	add	r6, sp, #104	; 0x68
 800613a:	e668      	b.n	8005e0e <_vfiprintf_r+0xda>
 800613c:	b10a      	cbz	r2, 8006142 <_vfiprintf_r+0x40e>
 800613e:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8006142:	4b69      	ldr	r3, [pc, #420]	; (80062e8 <_vfiprintf_r+0x5b4>)
 8006144:	9306      	str	r3, [sp, #24]
 8006146:	f01b 0f20 	tst.w	fp, #32
 800614a:	f000 80fa 	beq.w	8006342 <_vfiprintf_r+0x60e>
 800614e:	3407      	adds	r4, #7
 8006150:	f024 0407 	bic.w	r4, r4, #7
 8006154:	f104 0808 	add.w	r8, r4, #8
 8006158:	e9d4 4500 	ldrd	r4, r5, [r4]
 800615c:	f01b 0f01 	tst.w	fp, #1
 8006160:	f43f af1e 	beq.w	8005fa0 <_vfiprintf_r+0x26c>
 8006164:	ea54 0305 	orrs.w	r3, r4, r5
 8006168:	bf1f      	itttt	ne
 800616a:	2230      	movne	r2, #48	; 0x30
 800616c:	f88d 2030 	strbne.w	r2, [sp, #48]	; 0x30
 8006170:	f88d 0031 	strbne.w	r0, [sp, #49]	; 0x31
 8006174:	f04b 0b02 	orrne.w	fp, fp, #2
 8006178:	e712      	b.n	8005fa0 <_vfiprintf_r+0x26c>
 800617a:	b909      	cbnz	r1, 8006180 <_vfiprintf_r+0x44c>
 800617c:	2201      	movs	r2, #1
 800617e:	4601      	mov	r1, r0
 8006180:	9d02      	ldr	r5, [sp, #8]
 8006182:	e670      	b.n	8005e66 <_vfiprintf_r+0x132>
 8006184:	f04b 0b01 	orr.w	fp, fp, #1
 8006188:	e7fa      	b.n	8006180 <_vfiprintf_r+0x44c>
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	9304      	str	r3, [sp, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	f104 0004 	add.w	r0, r4, #4
 8006194:	f6bf ae96 	bge.w	8005ec4 <_vfiprintf_r+0x190>
 8006198:	425b      	negs	r3, r3
 800619a:	9304      	str	r3, [sp, #16]
 800619c:	4604      	mov	r4, r0
 800619e:	e698      	b.n	8005ed2 <_vfiprintf_r+0x19e>
 80061a0:	9b02      	ldr	r3, [sp, #8]
 80061a2:	7818      	ldrb	r0, [r3, #0]
 80061a4:	282a      	cmp	r0, #42	; 0x2a
 80061a6:	f103 0501 	add.w	r5, r3, #1
 80061aa:	d010      	beq.n	80061ce <_vfiprintf_r+0x49a>
 80061ac:	2300      	movs	r3, #0
 80061ae:	9301      	str	r3, [sp, #4]
 80061b0:	9502      	str	r5, [sp, #8]
 80061b2:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
 80061b6:	2d09      	cmp	r5, #9
 80061b8:	f63f ae58 	bhi.w	8005e6c <_vfiprintf_r+0x138>
 80061bc:	9b01      	ldr	r3, [sp, #4]
 80061be:	fb0e 5303 	mla	r3, lr, r3, r5
 80061c2:	9301      	str	r3, [sp, #4]
 80061c4:	9b02      	ldr	r3, [sp, #8]
 80061c6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80061ca:	9302      	str	r3, [sp, #8]
 80061cc:	e7f1      	b.n	80061b2 <_vfiprintf_r+0x47e>
 80061ce:	6820      	ldr	r0, [r4, #0]
 80061d0:	9502      	str	r5, [sp, #8]
 80061d2:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 80061d6:	9301      	str	r3, [sp, #4]
 80061d8:	3404      	adds	r4, #4
 80061da:	e7d1      	b.n	8006180 <_vfiprintf_r+0x44c>
 80061dc:	2300      	movs	r3, #0
 80061de:	9304      	str	r3, [sp, #16]
 80061e0:	9b04      	ldr	r3, [sp, #16]
 80061e2:	3830      	subs	r0, #48	; 0x30
 80061e4:	fb0e 0303 	mla	r3, lr, r3, r0
 80061e8:	9304      	str	r3, [sp, #16]
 80061ea:	9b02      	ldr	r3, [sp, #8]
 80061ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 80061f0:	9302      	str	r3, [sp, #8]
 80061f2:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
 80061f6:	2d09      	cmp	r5, #9
 80061f8:	d9f2      	bls.n	80061e0 <_vfiprintf_r+0x4ac>
 80061fa:	e637      	b.n	8005e6c <_vfiprintf_r+0x138>
 80061fc:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 8006200:	e7be      	b.n	8006180 <_vfiprintf_r+0x44c>
 8006202:	f04b 0b10 	orr.w	fp, fp, #16
 8006206:	e7bb      	b.n	8006180 <_vfiprintf_r+0x44c>
 8006208:	6822      	ldr	r2, [r4, #0]
 800620a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
 800620e:	f04f 0300 	mov.w	r3, #0
 8006212:	f104 0804 	add.w	r8, r4, #4
 8006216:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 800621a:	2301      	movs	r3, #1
 800621c:	9301      	str	r3, [sp, #4]
 800621e:	2500      	movs	r5, #0
 8006220:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 8006224:	e6e7      	b.n	8005ff6 <_vfiprintf_r+0x2c2>
 8006226:	f01b 0f10 	tst.w	fp, #16
 800622a:	f104 0804 	add.w	r8, r4, #4
 800622e:	d002      	beq.n	8006236 <_vfiprintf_r+0x502>
 8006230:	6824      	ldr	r4, [r4, #0]
 8006232:	17e5      	asrs	r5, r4, #31
 8006234:	e683      	b.n	8005f3e <_vfiprintf_r+0x20a>
 8006236:	6824      	ldr	r4, [r4, #0]
 8006238:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800623c:	bf18      	it	ne
 800623e:	b224      	sxthne	r4, r4
 8006240:	e7f7      	b.n	8006232 <_vfiprintf_r+0x4fe>
 8006242:	b10a      	cbz	r2, 8006248 <_vfiprintf_r+0x514>
 8006244:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8006248:	f01b 0f20 	tst.w	fp, #32
 800624c:	f104 0204 	add.w	r2, r4, #4
 8006250:	d008      	beq.n	8006264 <_vfiprintf_r+0x530>
 8006252:	9903      	ldr	r1, [sp, #12]
 8006254:	6823      	ldr	r3, [r4, #0]
 8006256:	17cd      	asrs	r5, r1, #31
 8006258:	4608      	mov	r0, r1
 800625a:	4629      	mov	r1, r5
 800625c:	e9c3 0100 	strd	r0, r1, [r3]
 8006260:	4614      	mov	r4, r2
 8006262:	e5d4      	b.n	8005e0e <_vfiprintf_r+0xda>
 8006264:	f01b 0f10 	tst.w	fp, #16
 8006268:	d003      	beq.n	8006272 <_vfiprintf_r+0x53e>
 800626a:	6823      	ldr	r3, [r4, #0]
 800626c:	9903      	ldr	r1, [sp, #12]
 800626e:	6019      	str	r1, [r3, #0]
 8006270:	e7f6      	b.n	8006260 <_vfiprintf_r+0x52c>
 8006272:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006276:	d0f8      	beq.n	800626a <_vfiprintf_r+0x536>
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800627e:	8019      	strh	r1, [r3, #0]
 8006280:	e7ee      	b.n	8006260 <_vfiprintf_r+0x52c>
 8006282:	f04b 0b10 	orr.w	fp, fp, #16
 8006286:	f01b 0220 	ands.w	r2, fp, #32
 800628a:	d021      	beq.n	80062d0 <_vfiprintf_r+0x59c>
 800628c:	3407      	adds	r4, #7
 800628e:	f024 0407 	bic.w	r4, r4, #7
 8006292:	f104 0808 	add.w	r8, r4, #8
 8006296:	e9d4 4500 	ldrd	r4, r5, [r4]
 800629a:	2200      	movs	r2, #0
 800629c:	f04f 0300 	mov.w	r3, #0
 80062a0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 80062a4:	9b01      	ldr	r3, [sp, #4]
 80062a6:	3301      	adds	r3, #1
 80062a8:	f000 8165 	beq.w	8006576 <_vfiprintf_r+0x842>
 80062ac:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
 80062b0:	9305      	str	r3, [sp, #20]
 80062b2:	ea54 0305 	orrs.w	r3, r4, r5
 80062b6:	f040 8164 	bne.w	8006582 <_vfiprintf_r+0x84e>
 80062ba:	9b01      	ldr	r3, [sp, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 8084 	beq.w	80063ca <_vfiprintf_r+0x696>
 80062c2:	2a01      	cmp	r2, #1
 80062c4:	d050      	beq.n	8006368 <_vfiprintf_r+0x634>
 80062c6:	2a02      	cmp	r2, #2
 80062c8:	d06b      	beq.n	80063a2 <_vfiprintf_r+0x66e>
 80062ca:	2400      	movs	r4, #0
 80062cc:	2500      	movs	r5, #0
 80062ce:	e15e      	b.n	800658e <_vfiprintf_r+0x85a>
 80062d0:	f01b 0110 	ands.w	r1, fp, #16
 80062d4:	f104 0804 	add.w	r8, r4, #4
 80062d8:	d008      	beq.n	80062ec <_vfiprintf_r+0x5b8>
 80062da:	6824      	ldr	r4, [r4, #0]
 80062dc:	2500      	movs	r5, #0
 80062de:	e7dd      	b.n	800629c <_vfiprintf_r+0x568>
 80062e0:	08008dde 	.word	0x08008dde
 80062e4:	08008dee 	.word	0x08008dee
 80062e8:	08008dbc 	.word	0x08008dbc
 80062ec:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
 80062f0:	d0f3      	beq.n	80062da <_vfiprintf_r+0x5a6>
 80062f2:	8824      	ldrh	r4, [r4, #0]
 80062f4:	2500      	movs	r5, #0
 80062f6:	e7d0      	b.n	800629a <_vfiprintf_r+0x566>
 80062f8:	4648      	mov	r0, r9
 80062fa:	f7f9 ffc1 	bl	8000280 <strlen>
 80062fe:	9001      	str	r0, [sp, #4]
 8006300:	e678      	b.n	8005ff4 <_vfiprintf_r+0x2c0>
 8006302:	f04b 0b10 	orr.w	fp, fp, #16
 8006306:	f01b 0f20 	tst.w	fp, #32
 800630a:	d008      	beq.n	800631e <_vfiprintf_r+0x5ea>
 800630c:	3407      	adds	r4, #7
 800630e:	f024 0407 	bic.w	r4, r4, #7
 8006312:	f104 0808 	add.w	r8, r4, #8
 8006316:	e9d4 4500 	ldrd	r4, r5, [r4]
 800631a:	2201      	movs	r2, #1
 800631c:	e7be      	b.n	800629c <_vfiprintf_r+0x568>
 800631e:	f01b 0f10 	tst.w	fp, #16
 8006322:	f104 0804 	add.w	r8, r4, #4
 8006326:	d001      	beq.n	800632c <_vfiprintf_r+0x5f8>
 8006328:	6824      	ldr	r4, [r4, #0]
 800632a:	e003      	b.n	8006334 <_vfiprintf_r+0x600>
 800632c:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006330:	d0fa      	beq.n	8006328 <_vfiprintf_r+0x5f4>
 8006332:	8824      	ldrh	r4, [r4, #0]
 8006334:	2500      	movs	r5, #0
 8006336:	e7f0      	b.n	800631a <_vfiprintf_r+0x5e6>
 8006338:	b10a      	cbz	r2, 800633e <_vfiprintf_r+0x60a>
 800633a:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 800633e:	4ba6      	ldr	r3, [pc, #664]	; (80065d8 <_vfiprintf_r+0x8a4>)
 8006340:	e700      	b.n	8006144 <_vfiprintf_r+0x410>
 8006342:	f01b 0f10 	tst.w	fp, #16
 8006346:	f104 0804 	add.w	r8, r4, #4
 800634a:	d001      	beq.n	8006350 <_vfiprintf_r+0x61c>
 800634c:	6824      	ldr	r4, [r4, #0]
 800634e:	e003      	b.n	8006358 <_vfiprintf_r+0x624>
 8006350:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006354:	d0fa      	beq.n	800634c <_vfiprintf_r+0x618>
 8006356:	8824      	ldrh	r4, [r4, #0]
 8006358:	2500      	movs	r5, #0
 800635a:	e6ff      	b.n	800615c <_vfiprintf_r+0x428>
 800635c:	464b      	mov	r3, r9
 800635e:	e117      	b.n	8006590 <_vfiprintf_r+0x85c>
 8006360:	2d00      	cmp	r5, #0
 8006362:	bf08      	it	eq
 8006364:	2c0a      	cmpeq	r4, #10
 8006366:	d205      	bcs.n	8006374 <_vfiprintf_r+0x640>
 8006368:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 800636c:	3430      	adds	r4, #48	; 0x30
 800636e:	f809 4d41 	strb.w	r4, [r9, #-65]!
 8006372:	e128      	b.n	80065c6 <_vfiprintf_r+0x892>
 8006374:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8006378:	4620      	mov	r0, r4
 800637a:	4629      	mov	r1, r5
 800637c:	220a      	movs	r2, #10
 800637e:	2300      	movs	r3, #0
 8006380:	f7fa fbc0 	bl	8000b04 <__aeabi_uldivmod>
 8006384:	3230      	adds	r2, #48	; 0x30
 8006386:	f809 2d01 	strb.w	r2, [r9, #-1]!
 800638a:	2300      	movs	r3, #0
 800638c:	4620      	mov	r0, r4
 800638e:	4629      	mov	r1, r5
 8006390:	220a      	movs	r2, #10
 8006392:	f7fa fbb7 	bl	8000b04 <__aeabi_uldivmod>
 8006396:	4604      	mov	r4, r0
 8006398:	460d      	mov	r5, r1
 800639a:	ea54 0305 	orrs.w	r3, r4, r5
 800639e:	d1eb      	bne.n	8006378 <_vfiprintf_r+0x644>
 80063a0:	e111      	b.n	80065c6 <_vfiprintf_r+0x892>
 80063a2:	2400      	movs	r4, #0
 80063a4:	2500      	movs	r5, #0
 80063a6:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80063aa:	f004 030f 	and.w	r3, r4, #15
 80063ae:	9a06      	ldr	r2, [sp, #24]
 80063b0:	5cd3      	ldrb	r3, [r2, r3]
 80063b2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80063b6:	0923      	lsrs	r3, r4, #4
 80063b8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 80063bc:	092a      	lsrs	r2, r5, #4
 80063be:	461c      	mov	r4, r3
 80063c0:	4615      	mov	r5, r2
 80063c2:	ea54 0305 	orrs.w	r3, r4, r5
 80063c6:	d1f0      	bne.n	80063aa <_vfiprintf_r+0x676>
 80063c8:	e0fd      	b.n	80065c6 <_vfiprintf_r+0x892>
 80063ca:	b942      	cbnz	r2, 80063de <_vfiprintf_r+0x6aa>
 80063cc:	f01b 0f01 	tst.w	fp, #1
 80063d0:	d005      	beq.n	80063de <_vfiprintf_r+0x6aa>
 80063d2:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 80063d6:	2330      	movs	r3, #48	; 0x30
 80063d8:	f809 3d41 	strb.w	r3, [r9, #-65]!
 80063dc:	e0f3      	b.n	80065c6 <_vfiprintf_r+0x892>
 80063de:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80063e2:	e0f0      	b.n	80065c6 <_vfiprintf_r+0x892>
 80063e4:	4605      	mov	r5, r0
 80063e6:	e606      	b.n	8005ff6 <_vfiprintf_r+0x2c2>
 80063e8:	2210      	movs	r2, #16
 80063ea:	6072      	str	r2, [r6, #4]
 80063ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063ee:	3210      	adds	r2, #16
 80063f0:	920f      	str	r2, [sp, #60]	; 0x3c
 80063f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063f4:	3201      	adds	r2, #1
 80063f6:	2a07      	cmp	r2, #7
 80063f8:	920e      	str	r2, [sp, #56]	; 0x38
 80063fa:	dc02      	bgt.n	8006402 <_vfiprintf_r+0x6ce>
 80063fc:	3608      	adds	r6, #8
 80063fe:	3c10      	subs	r4, #16
 8006400:	e614      	b.n	800602c <_vfiprintf_r+0x2f8>
 8006402:	aa0d      	add	r2, sp, #52	; 0x34
 8006404:	4639      	mov	r1, r7
 8006406:	4650      	mov	r0, sl
 8006408:	9309      	str	r3, [sp, #36]	; 0x24
 800640a:	f7ff fc5e 	bl	8005cca <__sprint_r>
 800640e:	2800      	cmp	r0, #0
 8006410:	f040 8083 	bne.w	800651a <_vfiprintf_r+0x7e6>
 8006414:	ae1a      	add	r6, sp, #104	; 0x68
 8006416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006418:	e7f1      	b.n	80063fe <_vfiprintf_r+0x6ca>
 800641a:	aa0d      	add	r2, sp, #52	; 0x34
 800641c:	4639      	mov	r1, r7
 800641e:	4650      	mov	r0, sl
 8006420:	f7ff fc53 	bl	8005cca <__sprint_r>
 8006424:	2800      	cmp	r0, #0
 8006426:	d178      	bne.n	800651a <_vfiprintf_r+0x7e6>
 8006428:	ae1a      	add	r6, sp, #104	; 0x68
 800642a:	e60e      	b.n	800604a <_vfiprintf_r+0x316>
 800642c:	aa0d      	add	r2, sp, #52	; 0x34
 800642e:	4639      	mov	r1, r7
 8006430:	4650      	mov	r0, sl
 8006432:	f7ff fc4a 	bl	8005cca <__sprint_r>
 8006436:	2800      	cmp	r0, #0
 8006438:	d16f      	bne.n	800651a <_vfiprintf_r+0x7e6>
 800643a:	ae1a      	add	r6, sp, #104	; 0x68
 800643c:	e617      	b.n	800606e <_vfiprintf_r+0x33a>
 800643e:	aa0d      	add	r2, sp, #52	; 0x34
 8006440:	4639      	mov	r1, r7
 8006442:	4650      	mov	r0, sl
 8006444:	f7ff fc41 	bl	8005cca <__sprint_r>
 8006448:	2800      	cmp	r0, #0
 800644a:	d166      	bne.n	800651a <_vfiprintf_r+0x7e6>
 800644c:	ae1a      	add	r6, sp, #104	; 0x68
 800644e:	e61e      	b.n	800608e <_vfiprintf_r+0x35a>
 8006450:	2210      	movs	r2, #16
 8006452:	6072      	str	r2, [r6, #4]
 8006454:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006456:	3210      	adds	r2, #16
 8006458:	920f      	str	r2, [sp, #60]	; 0x3c
 800645a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800645c:	3201      	adds	r2, #1
 800645e:	2a07      	cmp	r2, #7
 8006460:	920e      	str	r2, [sp, #56]	; 0x38
 8006462:	dc02      	bgt.n	800646a <_vfiprintf_r+0x736>
 8006464:	3608      	adds	r6, #8
 8006466:	3c10      	subs	r4, #16
 8006468:	e61a      	b.n	80060a0 <_vfiprintf_r+0x36c>
 800646a:	aa0d      	add	r2, sp, #52	; 0x34
 800646c:	4639      	mov	r1, r7
 800646e:	4650      	mov	r0, sl
 8006470:	9307      	str	r3, [sp, #28]
 8006472:	f7ff fc2a 	bl	8005cca <__sprint_r>
 8006476:	2800      	cmp	r0, #0
 8006478:	d14f      	bne.n	800651a <_vfiprintf_r+0x7e6>
 800647a:	ae1a      	add	r6, sp, #104	; 0x68
 800647c:	9b07      	ldr	r3, [sp, #28]
 800647e:	e7f2      	b.n	8006466 <_vfiprintf_r+0x732>
 8006480:	aa0d      	add	r2, sp, #52	; 0x34
 8006482:	4639      	mov	r1, r7
 8006484:	4650      	mov	r0, sl
 8006486:	f7ff fc20 	bl	8005cca <__sprint_r>
 800648a:	2800      	cmp	r0, #0
 800648c:	d145      	bne.n	800651a <_vfiprintf_r+0x7e6>
 800648e:	ae1a      	add	r6, sp, #104	; 0x68
 8006490:	e615      	b.n	80060be <_vfiprintf_r+0x38a>
 8006492:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006494:	6073      	str	r3, [r6, #4]
 8006496:	3210      	adds	r2, #16
 8006498:	920f      	str	r2, [sp, #60]	; 0x3c
 800649a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800649c:	3201      	adds	r2, #1
 800649e:	2a07      	cmp	r2, #7
 80064a0:	920e      	str	r2, [sp, #56]	; 0x38
 80064a2:	dc02      	bgt.n	80064aa <_vfiprintf_r+0x776>
 80064a4:	3608      	adds	r6, #8
 80064a6:	3c10      	subs	r4, #16
 80064a8:	e60f      	b.n	80060ca <_vfiprintf_r+0x396>
 80064aa:	aa0d      	add	r2, sp, #52	; 0x34
 80064ac:	4639      	mov	r1, r7
 80064ae:	4650      	mov	r0, sl
 80064b0:	9307      	str	r3, [sp, #28]
 80064b2:	f7ff fc0a 	bl	8005cca <__sprint_r>
 80064b6:	2800      	cmp	r0, #0
 80064b8:	d12f      	bne.n	800651a <_vfiprintf_r+0x7e6>
 80064ba:	ae1a      	add	r6, sp, #104	; 0x68
 80064bc:	9b07      	ldr	r3, [sp, #28]
 80064be:	e7f2      	b.n	80064a6 <_vfiprintf_r+0x772>
 80064c0:	aa0d      	add	r2, sp, #52	; 0x34
 80064c2:	4639      	mov	r1, r7
 80064c4:	4650      	mov	r0, sl
 80064c6:	f7ff fc00 	bl	8005cca <__sprint_r>
 80064ca:	bb30      	cbnz	r0, 800651a <_vfiprintf_r+0x7e6>
 80064cc:	ae1a      	add	r6, sp, #104	; 0x68
 80064ce:	e60b      	b.n	80060e8 <_vfiprintf_r+0x3b4>
 80064d0:	aa0d      	add	r2, sp, #52	; 0x34
 80064d2:	4639      	mov	r1, r7
 80064d4:	4650      	mov	r0, sl
 80064d6:	f7ff fbf8 	bl	8005cca <__sprint_r>
 80064da:	b9f0      	cbnz	r0, 800651a <_vfiprintf_r+0x7e6>
 80064dc:	aa1a      	add	r2, sp, #104	; 0x68
 80064de:	e612      	b.n	8006106 <_vfiprintf_r+0x3d2>
 80064e0:	9b04      	ldr	r3, [sp, #16]
 80064e2:	9905      	ldr	r1, [sp, #20]
 80064e4:	1a5c      	subs	r4, r3, r1
 80064e6:	2c00      	cmp	r4, #0
 80064e8:	f77f ae11 	ble.w	800610e <_vfiprintf_r+0x3da>
 80064ec:	4d3b      	ldr	r5, [pc, #236]	; (80065dc <_vfiprintf_r+0x8a8>)
 80064ee:	2610      	movs	r6, #16
 80064f0:	2c10      	cmp	r4, #16
 80064f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80064f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064f6:	6015      	str	r5, [r2, #0]
 80064f8:	dc1d      	bgt.n	8006536 <_vfiprintf_r+0x802>
 80064fa:	3301      	adds	r3, #1
 80064fc:	6054      	str	r4, [r2, #4]
 80064fe:	2b07      	cmp	r3, #7
 8006500:	440c      	add	r4, r1
 8006502:	940f      	str	r4, [sp, #60]	; 0x3c
 8006504:	930e      	str	r3, [sp, #56]	; 0x38
 8006506:	f77f ae02 	ble.w	800610e <_vfiprintf_r+0x3da>
 800650a:	aa0d      	add	r2, sp, #52	; 0x34
 800650c:	4639      	mov	r1, r7
 800650e:	4650      	mov	r0, sl
 8006510:	f7ff fbdb 	bl	8005cca <__sprint_r>
 8006514:	2800      	cmp	r0, #0
 8006516:	f43f adfa 	beq.w	800610e <_vfiprintf_r+0x3da>
 800651a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800651c:	07d9      	lsls	r1, r3, #31
 800651e:	d405      	bmi.n	800652c <_vfiprintf_r+0x7f8>
 8006520:	89bb      	ldrh	r3, [r7, #12]
 8006522:	059a      	lsls	r2, r3, #22
 8006524:	d402      	bmi.n	800652c <_vfiprintf_r+0x7f8>
 8006526:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006528:	f7ff f8d9 	bl	80056de <__retarget_lock_release_recursive>
 800652c:	89bb      	ldrh	r3, [r7, #12]
 800652e:	065b      	lsls	r3, r3, #25
 8006530:	f57f ac61 	bpl.w	8005df6 <_vfiprintf_r+0xc2>
 8006534:	e437      	b.n	8005da6 <_vfiprintf_r+0x72>
 8006536:	3301      	adds	r3, #1
 8006538:	3110      	adds	r1, #16
 800653a:	2b07      	cmp	r3, #7
 800653c:	6056      	str	r6, [r2, #4]
 800653e:	910f      	str	r1, [sp, #60]	; 0x3c
 8006540:	930e      	str	r3, [sp, #56]	; 0x38
 8006542:	dc02      	bgt.n	800654a <_vfiprintf_r+0x816>
 8006544:	3208      	adds	r2, #8
 8006546:	3c10      	subs	r4, #16
 8006548:	e7d2      	b.n	80064f0 <_vfiprintf_r+0x7bc>
 800654a:	aa0d      	add	r2, sp, #52	; 0x34
 800654c:	4639      	mov	r1, r7
 800654e:	4650      	mov	r0, sl
 8006550:	f7ff fbbb 	bl	8005cca <__sprint_r>
 8006554:	2800      	cmp	r0, #0
 8006556:	d1e0      	bne.n	800651a <_vfiprintf_r+0x7e6>
 8006558:	aa1a      	add	r2, sp, #104	; 0x68
 800655a:	e7f4      	b.n	8006546 <_vfiprintf_r+0x812>
 800655c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800655e:	b913      	cbnz	r3, 8006566 <_vfiprintf_r+0x832>
 8006560:	2300      	movs	r3, #0
 8006562:	930e      	str	r3, [sp, #56]	; 0x38
 8006564:	e7d9      	b.n	800651a <_vfiprintf_r+0x7e6>
 8006566:	aa0d      	add	r2, sp, #52	; 0x34
 8006568:	4639      	mov	r1, r7
 800656a:	4650      	mov	r0, sl
 800656c:	f7ff fbad 	bl	8005cca <__sprint_r>
 8006570:	2800      	cmp	r0, #0
 8006572:	d0f5      	beq.n	8006560 <_vfiprintf_r+0x82c>
 8006574:	e7d1      	b.n	800651a <_vfiprintf_r+0x7e6>
 8006576:	ea54 0305 	orrs.w	r3, r4, r5
 800657a:	f8cd b014 	str.w	fp, [sp, #20]
 800657e:	f43f aea0 	beq.w	80062c2 <_vfiprintf_r+0x58e>
 8006582:	2a01      	cmp	r2, #1
 8006584:	f43f aeec 	beq.w	8006360 <_vfiprintf_r+0x62c>
 8006588:	2a02      	cmp	r2, #2
 800658a:	f43f af0c 	beq.w	80063a6 <_vfiprintf_r+0x672>
 800658e:	ab1a      	add	r3, sp, #104	; 0x68
 8006590:	08e1      	lsrs	r1, r4, #3
 8006592:	ea41 7145 	orr.w	r1, r1, r5, lsl #29
 8006596:	08e8      	lsrs	r0, r5, #3
 8006598:	f004 0207 	and.w	r2, r4, #7
 800659c:	4605      	mov	r5, r0
 800659e:	460c      	mov	r4, r1
 80065a0:	3230      	adds	r2, #48	; 0x30
 80065a2:	ea54 0105 	orrs.w	r1, r4, r5
 80065a6:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 80065aa:	f803 2c01 	strb.w	r2, [r3, #-1]
 80065ae:	f47f aed5 	bne.w	800635c <_vfiprintf_r+0x628>
 80065b2:	9905      	ldr	r1, [sp, #20]
 80065b4:	07c8      	lsls	r0, r1, #31
 80065b6:	d506      	bpl.n	80065c6 <_vfiprintf_r+0x892>
 80065b8:	2a30      	cmp	r2, #48	; 0x30
 80065ba:	d004      	beq.n	80065c6 <_vfiprintf_r+0x892>
 80065bc:	2230      	movs	r2, #48	; 0x30
 80065be:	f809 2c01 	strb.w	r2, [r9, #-1]
 80065c2:	f1a3 0902 	sub.w	r9, r3, #2
 80065c6:	ab1a      	add	r3, sp, #104	; 0x68
 80065c8:	eba3 0309 	sub.w	r3, r3, r9
 80065cc:	9d01      	ldr	r5, [sp, #4]
 80065ce:	f8dd b014 	ldr.w	fp, [sp, #20]
 80065d2:	9301      	str	r3, [sp, #4]
 80065d4:	e50f      	b.n	8005ff6 <_vfiprintf_r+0x2c2>
 80065d6:	bf00      	nop
 80065d8:	08008dcd 	.word	0x08008dcd
 80065dc:	08008dde 	.word	0x08008dde

080065e0 <__sbprintf>:
 80065e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065e2:	460c      	mov	r4, r1
 80065e4:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 80065e8:	461f      	mov	r7, r3
 80065ea:	8989      	ldrh	r1, [r1, #12]
 80065ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065ee:	9319      	str	r3, [sp, #100]	; 0x64
 80065f0:	89e3      	ldrh	r3, [r4, #14]
 80065f2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80065f6:	f021 0102 	bic.w	r1, r1, #2
 80065fa:	6a23      	ldr	r3, [r4, #32]
 80065fc:	f8ad 100c 	strh.w	r1, [sp, #12]
 8006600:	9308      	str	r3, [sp, #32]
 8006602:	a91a      	add	r1, sp, #104	; 0x68
 8006604:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006606:	930a      	str	r3, [sp, #40]	; 0x28
 8006608:	4615      	mov	r5, r2
 800660a:	2300      	movs	r3, #0
 800660c:	4606      	mov	r6, r0
 800660e:	9100      	str	r1, [sp, #0]
 8006610:	9104      	str	r1, [sp, #16]
 8006612:	a816      	add	r0, sp, #88	; 0x58
 8006614:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006618:	9102      	str	r1, [sp, #8]
 800661a:	9105      	str	r1, [sp, #20]
 800661c:	9306      	str	r3, [sp, #24]
 800661e:	f7ff f85b 	bl	80056d8 <__retarget_lock_init_recursive>
 8006622:	462a      	mov	r2, r5
 8006624:	463b      	mov	r3, r7
 8006626:	4669      	mov	r1, sp
 8006628:	4630      	mov	r0, r6
 800662a:	f7ff fb83 	bl	8005d34 <_vfiprintf_r>
 800662e:	1e05      	subs	r5, r0, #0
 8006630:	db07      	blt.n	8006642 <__sbprintf+0x62>
 8006632:	4669      	mov	r1, sp
 8006634:	4630      	mov	r0, r6
 8006636:	f000 f9a9 	bl	800698c <_fflush_r>
 800663a:	2800      	cmp	r0, #0
 800663c:	bf18      	it	ne
 800663e:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8006642:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8006646:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006648:	065b      	lsls	r3, r3, #25
 800664a:	bf42      	ittt	mi
 800664c:	89a3      	ldrhmi	r3, [r4, #12]
 800664e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8006652:	81a3      	strhmi	r3, [r4, #12]
 8006654:	f7ff f841 	bl	80056da <__retarget_lock_close_recursive>
 8006658:	4628      	mov	r0, r5
 800665a:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800665e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006660 <_write_r>:
 8006660:	b538      	push	{r3, r4, r5, lr}
 8006662:	4c07      	ldr	r4, [pc, #28]	; (8006680 <_write_r+0x20>)
 8006664:	4605      	mov	r5, r0
 8006666:	4608      	mov	r0, r1
 8006668:	4611      	mov	r1, r2
 800666a:	2200      	movs	r2, #0
 800666c:	6022      	str	r2, [r4, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	f7fe fe76 	bl	8005360 <_write>
 8006674:	1c43      	adds	r3, r0, #1
 8006676:	d102      	bne.n	800667e <_write_r+0x1e>
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	b103      	cbz	r3, 800667e <_write_r+0x1e>
 800667c:	602b      	str	r3, [r5, #0]
 800667e:	bd38      	pop	{r3, r4, r5, pc}
 8006680:	200034e4 	.word	0x200034e4

08006684 <__swsetup_r>:
 8006684:	4b32      	ldr	r3, [pc, #200]	; (8006750 <__swsetup_r+0xcc>)
 8006686:	b570      	push	{r4, r5, r6, lr}
 8006688:	681d      	ldr	r5, [r3, #0]
 800668a:	4606      	mov	r6, r0
 800668c:	460c      	mov	r4, r1
 800668e:	b125      	cbz	r5, 800669a <__swsetup_r+0x16>
 8006690:	69ab      	ldr	r3, [r5, #24]
 8006692:	b913      	cbnz	r3, 800669a <__swsetup_r+0x16>
 8006694:	4628      	mov	r0, r5
 8006696:	f7fe ff4b 	bl	8005530 <__sinit>
 800669a:	4b2e      	ldr	r3, [pc, #184]	; (8006754 <__swsetup_r+0xd0>)
 800669c:	429c      	cmp	r4, r3
 800669e:	d10f      	bne.n	80066c0 <__swsetup_r+0x3c>
 80066a0:	686c      	ldr	r4, [r5, #4]
 80066a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	0715      	lsls	r5, r2, #28
 80066aa:	d42c      	bmi.n	8006706 <__swsetup_r+0x82>
 80066ac:	06d0      	lsls	r0, r2, #27
 80066ae:	d411      	bmi.n	80066d4 <__swsetup_r+0x50>
 80066b0:	2209      	movs	r2, #9
 80066b2:	6032      	str	r2, [r6, #0]
 80066b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066b8:	81a3      	strh	r3, [r4, #12]
 80066ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066be:	bd70      	pop	{r4, r5, r6, pc}
 80066c0:	4b25      	ldr	r3, [pc, #148]	; (8006758 <__swsetup_r+0xd4>)
 80066c2:	429c      	cmp	r4, r3
 80066c4:	d101      	bne.n	80066ca <__swsetup_r+0x46>
 80066c6:	68ac      	ldr	r4, [r5, #8]
 80066c8:	e7eb      	b.n	80066a2 <__swsetup_r+0x1e>
 80066ca:	4b24      	ldr	r3, [pc, #144]	; (800675c <__swsetup_r+0xd8>)
 80066cc:	429c      	cmp	r4, r3
 80066ce:	bf08      	it	eq
 80066d0:	68ec      	ldreq	r4, [r5, #12]
 80066d2:	e7e6      	b.n	80066a2 <__swsetup_r+0x1e>
 80066d4:	0751      	lsls	r1, r2, #29
 80066d6:	d512      	bpl.n	80066fe <__swsetup_r+0x7a>
 80066d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066da:	b141      	cbz	r1, 80066ee <__swsetup_r+0x6a>
 80066dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066e0:	4299      	cmp	r1, r3
 80066e2:	d002      	beq.n	80066ea <__swsetup_r+0x66>
 80066e4:	4630      	mov	r0, r6
 80066e6:	f000 fa4d 	bl	8006b84 <_free_r>
 80066ea:	2300      	movs	r3, #0
 80066ec:	6363      	str	r3, [r4, #52]	; 0x34
 80066ee:	89a3      	ldrh	r3, [r4, #12]
 80066f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066f4:	81a3      	strh	r3, [r4, #12]
 80066f6:	2300      	movs	r3, #0
 80066f8:	6063      	str	r3, [r4, #4]
 80066fa:	6923      	ldr	r3, [r4, #16]
 80066fc:	6023      	str	r3, [r4, #0]
 80066fe:	89a3      	ldrh	r3, [r4, #12]
 8006700:	f043 0308 	orr.w	r3, r3, #8
 8006704:	81a3      	strh	r3, [r4, #12]
 8006706:	6923      	ldr	r3, [r4, #16]
 8006708:	b94b      	cbnz	r3, 800671e <__swsetup_r+0x9a>
 800670a:	89a3      	ldrh	r3, [r4, #12]
 800670c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006714:	d003      	beq.n	800671e <__swsetup_r+0x9a>
 8006716:	4621      	mov	r1, r4
 8006718:	4630      	mov	r0, r6
 800671a:	f000 fc89 	bl	8007030 <__smakebuf_r>
 800671e:	89a2      	ldrh	r2, [r4, #12]
 8006720:	f012 0301 	ands.w	r3, r2, #1
 8006724:	d00c      	beq.n	8006740 <__swsetup_r+0xbc>
 8006726:	2300      	movs	r3, #0
 8006728:	60a3      	str	r3, [r4, #8]
 800672a:	6963      	ldr	r3, [r4, #20]
 800672c:	425b      	negs	r3, r3
 800672e:	61a3      	str	r3, [r4, #24]
 8006730:	6923      	ldr	r3, [r4, #16]
 8006732:	b953      	cbnz	r3, 800674a <__swsetup_r+0xc6>
 8006734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006738:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800673c:	d1ba      	bne.n	80066b4 <__swsetup_r+0x30>
 800673e:	bd70      	pop	{r4, r5, r6, pc}
 8006740:	0792      	lsls	r2, r2, #30
 8006742:	bf58      	it	pl
 8006744:	6963      	ldrpl	r3, [r4, #20]
 8006746:	60a3      	str	r3, [r4, #8]
 8006748:	e7f2      	b.n	8006730 <__swsetup_r+0xac>
 800674a:	2000      	movs	r0, #0
 800674c:	e7f7      	b.n	800673e <__swsetup_r+0xba>
 800674e:	bf00      	nop
 8006750:	2000018c 	.word	0x2000018c
 8006754:	08008d78 	.word	0x08008d78
 8006758:	08008d98 	.word	0x08008d98
 800675c:	08008d58 	.word	0x08008d58

08006760 <abort>:
 8006760:	b508      	push	{r3, lr}
 8006762:	2006      	movs	r0, #6
 8006764:	f000 fe8a 	bl	800747c <raise>
 8006768:	2001      	movs	r0, #1
 800676a:	f7fe fde5 	bl	8005338 <_exit>
	...

08006770 <_close_r>:
 8006770:	b538      	push	{r3, r4, r5, lr}
 8006772:	4c06      	ldr	r4, [pc, #24]	; (800678c <_close_r+0x1c>)
 8006774:	2300      	movs	r3, #0
 8006776:	4605      	mov	r5, r0
 8006778:	4608      	mov	r0, r1
 800677a:	6023      	str	r3, [r4, #0]
 800677c:	f7fe fe18 	bl	80053b0 <_close>
 8006780:	1c43      	adds	r3, r0, #1
 8006782:	d102      	bne.n	800678a <_close_r+0x1a>
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	b103      	cbz	r3, 800678a <_close_r+0x1a>
 8006788:	602b      	str	r3, [r5, #0]
 800678a:	bd38      	pop	{r3, r4, r5, pc}
 800678c:	200034e4 	.word	0x200034e4

08006790 <_fclose_r>:
 8006790:	b570      	push	{r4, r5, r6, lr}
 8006792:	4605      	mov	r5, r0
 8006794:	460c      	mov	r4, r1
 8006796:	b911      	cbnz	r1, 800679e <_fclose_r+0xe>
 8006798:	2600      	movs	r6, #0
 800679a:	4630      	mov	r0, r6
 800679c:	bd70      	pop	{r4, r5, r6, pc}
 800679e:	b118      	cbz	r0, 80067a8 <_fclose_r+0x18>
 80067a0:	6983      	ldr	r3, [r0, #24]
 80067a2:	b90b      	cbnz	r3, 80067a8 <_fclose_r+0x18>
 80067a4:	f7fe fec4 	bl	8005530 <__sinit>
 80067a8:	4b2c      	ldr	r3, [pc, #176]	; (800685c <_fclose_r+0xcc>)
 80067aa:	429c      	cmp	r4, r3
 80067ac:	d114      	bne.n	80067d8 <_fclose_r+0x48>
 80067ae:	686c      	ldr	r4, [r5, #4]
 80067b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067b2:	07d8      	lsls	r0, r3, #31
 80067b4:	d405      	bmi.n	80067c2 <_fclose_r+0x32>
 80067b6:	89a3      	ldrh	r3, [r4, #12]
 80067b8:	0599      	lsls	r1, r3, #22
 80067ba:	d402      	bmi.n	80067c2 <_fclose_r+0x32>
 80067bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067be:	f7fe ff8d 	bl	80056dc <__retarget_lock_acquire_recursive>
 80067c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067c6:	b98b      	cbnz	r3, 80067ec <_fclose_r+0x5c>
 80067c8:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80067ca:	f016 0601 	ands.w	r6, r6, #1
 80067ce:	d1e3      	bne.n	8006798 <_fclose_r+0x8>
 80067d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067d2:	f7fe ff84 	bl	80056de <__retarget_lock_release_recursive>
 80067d6:	e7e0      	b.n	800679a <_fclose_r+0xa>
 80067d8:	4b21      	ldr	r3, [pc, #132]	; (8006860 <_fclose_r+0xd0>)
 80067da:	429c      	cmp	r4, r3
 80067dc:	d101      	bne.n	80067e2 <_fclose_r+0x52>
 80067de:	68ac      	ldr	r4, [r5, #8]
 80067e0:	e7e6      	b.n	80067b0 <_fclose_r+0x20>
 80067e2:	4b20      	ldr	r3, [pc, #128]	; (8006864 <_fclose_r+0xd4>)
 80067e4:	429c      	cmp	r4, r3
 80067e6:	bf08      	it	eq
 80067e8:	68ec      	ldreq	r4, [r5, #12]
 80067ea:	e7e1      	b.n	80067b0 <_fclose_r+0x20>
 80067ec:	4621      	mov	r1, r4
 80067ee:	4628      	mov	r0, r5
 80067f0:	f000 f83a 	bl	8006868 <__sflush_r>
 80067f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80067f6:	4606      	mov	r6, r0
 80067f8:	b133      	cbz	r3, 8006808 <_fclose_r+0x78>
 80067fa:	6a21      	ldr	r1, [r4, #32]
 80067fc:	4628      	mov	r0, r5
 80067fe:	4798      	blx	r3
 8006800:	2800      	cmp	r0, #0
 8006802:	bfb8      	it	lt
 8006804:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 8006808:	89a3      	ldrh	r3, [r4, #12]
 800680a:	061a      	lsls	r2, r3, #24
 800680c:	d503      	bpl.n	8006816 <_fclose_r+0x86>
 800680e:	6921      	ldr	r1, [r4, #16]
 8006810:	4628      	mov	r0, r5
 8006812:	f000 f9b7 	bl	8006b84 <_free_r>
 8006816:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006818:	b141      	cbz	r1, 800682c <_fclose_r+0x9c>
 800681a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800681e:	4299      	cmp	r1, r3
 8006820:	d002      	beq.n	8006828 <_fclose_r+0x98>
 8006822:	4628      	mov	r0, r5
 8006824:	f000 f9ae 	bl	8006b84 <_free_r>
 8006828:	2300      	movs	r3, #0
 800682a:	6363      	str	r3, [r4, #52]	; 0x34
 800682c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800682e:	b121      	cbz	r1, 800683a <_fclose_r+0xaa>
 8006830:	4628      	mov	r0, r5
 8006832:	f000 f9a7 	bl	8006b84 <_free_r>
 8006836:	2300      	movs	r3, #0
 8006838:	64a3      	str	r3, [r4, #72]	; 0x48
 800683a:	f7fe fe61 	bl	8005500 <__sfp_lock_acquire>
 800683e:	2300      	movs	r3, #0
 8006840:	81a3      	strh	r3, [r4, #12]
 8006842:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006844:	07db      	lsls	r3, r3, #31
 8006846:	d402      	bmi.n	800684e <_fclose_r+0xbe>
 8006848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800684a:	f7fe ff48 	bl	80056de <__retarget_lock_release_recursive>
 800684e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006850:	f7fe ff43 	bl	80056da <__retarget_lock_close_recursive>
 8006854:	f7fe fe5a 	bl	800550c <__sfp_lock_release>
 8006858:	e79f      	b.n	800679a <_fclose_r+0xa>
 800685a:	bf00      	nop
 800685c:	08008d78 	.word	0x08008d78
 8006860:	08008d98 	.word	0x08008d98
 8006864:	08008d58 	.word	0x08008d58

08006868 <__sflush_r>:
 8006868:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800686c:	b293      	uxth	r3, r2
 800686e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006872:	4605      	mov	r5, r0
 8006874:	0718      	lsls	r0, r3, #28
 8006876:	460c      	mov	r4, r1
 8006878:	d461      	bmi.n	800693e <__sflush_r+0xd6>
 800687a:	684b      	ldr	r3, [r1, #4]
 800687c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006880:	2b00      	cmp	r3, #0
 8006882:	818a      	strh	r2, [r1, #12]
 8006884:	dc05      	bgt.n	8006892 <__sflush_r+0x2a>
 8006886:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006888:	2b00      	cmp	r3, #0
 800688a:	dc02      	bgt.n	8006892 <__sflush_r+0x2a>
 800688c:	2000      	movs	r0, #0
 800688e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006892:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006894:	2e00      	cmp	r6, #0
 8006896:	d0f9      	beq.n	800688c <__sflush_r+0x24>
 8006898:	2300      	movs	r3, #0
 800689a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800689e:	682f      	ldr	r7, [r5, #0]
 80068a0:	602b      	str	r3, [r5, #0]
 80068a2:	d037      	beq.n	8006914 <__sflush_r+0xac>
 80068a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068a6:	89a3      	ldrh	r3, [r4, #12]
 80068a8:	075a      	lsls	r2, r3, #29
 80068aa:	d505      	bpl.n	80068b8 <__sflush_r+0x50>
 80068ac:	6863      	ldr	r3, [r4, #4]
 80068ae:	1ac0      	subs	r0, r0, r3
 80068b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068b2:	b10b      	cbz	r3, 80068b8 <__sflush_r+0x50>
 80068b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068b6:	1ac0      	subs	r0, r0, r3
 80068b8:	2300      	movs	r3, #0
 80068ba:	4602      	mov	r2, r0
 80068bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068be:	6a21      	ldr	r1, [r4, #32]
 80068c0:	4628      	mov	r0, r5
 80068c2:	47b0      	blx	r6
 80068c4:	1c43      	adds	r3, r0, #1
 80068c6:	89a3      	ldrh	r3, [r4, #12]
 80068c8:	d106      	bne.n	80068d8 <__sflush_r+0x70>
 80068ca:	6829      	ldr	r1, [r5, #0]
 80068cc:	291d      	cmp	r1, #29
 80068ce:	d84f      	bhi.n	8006970 <__sflush_r+0x108>
 80068d0:	4a2d      	ldr	r2, [pc, #180]	; (8006988 <__sflush_r+0x120>)
 80068d2:	40ca      	lsrs	r2, r1
 80068d4:	07d6      	lsls	r6, r2, #31
 80068d6:	d54b      	bpl.n	8006970 <__sflush_r+0x108>
 80068d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068dc:	b21b      	sxth	r3, r3
 80068de:	2200      	movs	r2, #0
 80068e0:	6062      	str	r2, [r4, #4]
 80068e2:	04d9      	lsls	r1, r3, #19
 80068e4:	6922      	ldr	r2, [r4, #16]
 80068e6:	81a3      	strh	r3, [r4, #12]
 80068e8:	6022      	str	r2, [r4, #0]
 80068ea:	d504      	bpl.n	80068f6 <__sflush_r+0x8e>
 80068ec:	1c42      	adds	r2, r0, #1
 80068ee:	d101      	bne.n	80068f4 <__sflush_r+0x8c>
 80068f0:	682b      	ldr	r3, [r5, #0]
 80068f2:	b903      	cbnz	r3, 80068f6 <__sflush_r+0x8e>
 80068f4:	6560      	str	r0, [r4, #84]	; 0x54
 80068f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068f8:	602f      	str	r7, [r5, #0]
 80068fa:	2900      	cmp	r1, #0
 80068fc:	d0c6      	beq.n	800688c <__sflush_r+0x24>
 80068fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006902:	4299      	cmp	r1, r3
 8006904:	d002      	beq.n	800690c <__sflush_r+0xa4>
 8006906:	4628      	mov	r0, r5
 8006908:	f000 f93c 	bl	8006b84 <_free_r>
 800690c:	2000      	movs	r0, #0
 800690e:	6360      	str	r0, [r4, #52]	; 0x34
 8006910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006914:	6a21      	ldr	r1, [r4, #32]
 8006916:	2301      	movs	r3, #1
 8006918:	4628      	mov	r0, r5
 800691a:	47b0      	blx	r6
 800691c:	1c41      	adds	r1, r0, #1
 800691e:	d1c2      	bne.n	80068a6 <__sflush_r+0x3e>
 8006920:	682b      	ldr	r3, [r5, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d0bf      	beq.n	80068a6 <__sflush_r+0x3e>
 8006926:	2b1d      	cmp	r3, #29
 8006928:	d001      	beq.n	800692e <__sflush_r+0xc6>
 800692a:	2b16      	cmp	r3, #22
 800692c:	d101      	bne.n	8006932 <__sflush_r+0xca>
 800692e:	602f      	str	r7, [r5, #0]
 8006930:	e7ac      	b.n	800688c <__sflush_r+0x24>
 8006932:	89a3      	ldrh	r3, [r4, #12]
 8006934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006938:	81a3      	strh	r3, [r4, #12]
 800693a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800693e:	690f      	ldr	r7, [r1, #16]
 8006940:	2f00      	cmp	r7, #0
 8006942:	d0a3      	beq.n	800688c <__sflush_r+0x24>
 8006944:	079b      	lsls	r3, r3, #30
 8006946:	680e      	ldr	r6, [r1, #0]
 8006948:	bf08      	it	eq
 800694a:	694b      	ldreq	r3, [r1, #20]
 800694c:	600f      	str	r7, [r1, #0]
 800694e:	bf18      	it	ne
 8006950:	2300      	movne	r3, #0
 8006952:	eba6 0807 	sub.w	r8, r6, r7
 8006956:	608b      	str	r3, [r1, #8]
 8006958:	f1b8 0f00 	cmp.w	r8, #0
 800695c:	dd96      	ble.n	800688c <__sflush_r+0x24>
 800695e:	4643      	mov	r3, r8
 8006960:	463a      	mov	r2, r7
 8006962:	6a21      	ldr	r1, [r4, #32]
 8006964:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006966:	4628      	mov	r0, r5
 8006968:	47b0      	blx	r6
 800696a:	2800      	cmp	r0, #0
 800696c:	dc07      	bgt.n	800697e <__sflush_r+0x116>
 800696e:	89a3      	ldrh	r3, [r4, #12]
 8006970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006974:	81a3      	strh	r3, [r4, #12]
 8006976:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800697a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800697e:	4407      	add	r7, r0
 8006980:	eba8 0800 	sub.w	r8, r8, r0
 8006984:	e7e8      	b.n	8006958 <__sflush_r+0xf0>
 8006986:	bf00      	nop
 8006988:	20400001 	.word	0x20400001

0800698c <_fflush_r>:
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	690b      	ldr	r3, [r1, #16]
 8006990:	4605      	mov	r5, r0
 8006992:	460c      	mov	r4, r1
 8006994:	b913      	cbnz	r3, 800699c <_fflush_r+0x10>
 8006996:	2500      	movs	r5, #0
 8006998:	4628      	mov	r0, r5
 800699a:	bd38      	pop	{r3, r4, r5, pc}
 800699c:	b118      	cbz	r0, 80069a6 <_fflush_r+0x1a>
 800699e:	6983      	ldr	r3, [r0, #24]
 80069a0:	b90b      	cbnz	r3, 80069a6 <_fflush_r+0x1a>
 80069a2:	f7fe fdc5 	bl	8005530 <__sinit>
 80069a6:	4b14      	ldr	r3, [pc, #80]	; (80069f8 <_fflush_r+0x6c>)
 80069a8:	429c      	cmp	r4, r3
 80069aa:	d11b      	bne.n	80069e4 <_fflush_r+0x58>
 80069ac:	686c      	ldr	r4, [r5, #4]
 80069ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0ef      	beq.n	8006996 <_fflush_r+0xa>
 80069b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80069b8:	07d0      	lsls	r0, r2, #31
 80069ba:	d404      	bmi.n	80069c6 <_fflush_r+0x3a>
 80069bc:	0599      	lsls	r1, r3, #22
 80069be:	d402      	bmi.n	80069c6 <_fflush_r+0x3a>
 80069c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069c2:	f7fe fe8b 	bl	80056dc <__retarget_lock_acquire_recursive>
 80069c6:	4628      	mov	r0, r5
 80069c8:	4621      	mov	r1, r4
 80069ca:	f7ff ff4d 	bl	8006868 <__sflush_r>
 80069ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069d0:	07da      	lsls	r2, r3, #31
 80069d2:	4605      	mov	r5, r0
 80069d4:	d4e0      	bmi.n	8006998 <_fflush_r+0xc>
 80069d6:	89a3      	ldrh	r3, [r4, #12]
 80069d8:	059b      	lsls	r3, r3, #22
 80069da:	d4dd      	bmi.n	8006998 <_fflush_r+0xc>
 80069dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069de:	f7fe fe7e 	bl	80056de <__retarget_lock_release_recursive>
 80069e2:	e7d9      	b.n	8006998 <_fflush_r+0xc>
 80069e4:	4b05      	ldr	r3, [pc, #20]	; (80069fc <_fflush_r+0x70>)
 80069e6:	429c      	cmp	r4, r3
 80069e8:	d101      	bne.n	80069ee <_fflush_r+0x62>
 80069ea:	68ac      	ldr	r4, [r5, #8]
 80069ec:	e7df      	b.n	80069ae <_fflush_r+0x22>
 80069ee:	4b04      	ldr	r3, [pc, #16]	; (8006a00 <_fflush_r+0x74>)
 80069f0:	429c      	cmp	r4, r3
 80069f2:	bf08      	it	eq
 80069f4:	68ec      	ldreq	r4, [r5, #12]
 80069f6:	e7da      	b.n	80069ae <_fflush_r+0x22>
 80069f8:	08008d78 	.word	0x08008d78
 80069fc:	08008d98 	.word	0x08008d98
 8006a00:	08008d58 	.word	0x08008d58

08006a04 <__fputwc>:
 8006a04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a08:	4680      	mov	r8, r0
 8006a0a:	460e      	mov	r6, r1
 8006a0c:	4614      	mov	r4, r2
 8006a0e:	f000 fac3 	bl	8006f98 <__locale_mb_cur_max>
 8006a12:	2801      	cmp	r0, #1
 8006a14:	d11c      	bne.n	8006a50 <__fputwc+0x4c>
 8006a16:	1e73      	subs	r3, r6, #1
 8006a18:	2bfe      	cmp	r3, #254	; 0xfe
 8006a1a:	d819      	bhi.n	8006a50 <__fputwc+0x4c>
 8006a1c:	f88d 6004 	strb.w	r6, [sp, #4]
 8006a20:	4605      	mov	r5, r0
 8006a22:	2700      	movs	r7, #0
 8006a24:	f10d 0904 	add.w	r9, sp, #4
 8006a28:	42af      	cmp	r7, r5
 8006a2a:	d020      	beq.n	8006a6e <__fputwc+0x6a>
 8006a2c:	68a3      	ldr	r3, [r4, #8]
 8006a2e:	f817 1009 	ldrb.w	r1, [r7, r9]
 8006a32:	3b01      	subs	r3, #1
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	60a3      	str	r3, [r4, #8]
 8006a38:	da04      	bge.n	8006a44 <__fputwc+0x40>
 8006a3a:	69a2      	ldr	r2, [r4, #24]
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	db1a      	blt.n	8006a76 <__fputwc+0x72>
 8006a40:	290a      	cmp	r1, #10
 8006a42:	d018      	beq.n	8006a76 <__fputwc+0x72>
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	6022      	str	r2, [r4, #0]
 8006a4a:	7019      	strb	r1, [r3, #0]
 8006a4c:	3701      	adds	r7, #1
 8006a4e:	e7eb      	b.n	8006a28 <__fputwc+0x24>
 8006a50:	4632      	mov	r2, r6
 8006a52:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8006a56:	a901      	add	r1, sp, #4
 8006a58:	4640      	mov	r0, r8
 8006a5a:	f000 fd89 	bl	8007570 <_wcrtomb_r>
 8006a5e:	1c42      	adds	r2, r0, #1
 8006a60:	4605      	mov	r5, r0
 8006a62:	d1de      	bne.n	8006a22 <__fputwc+0x1e>
 8006a64:	89a3      	ldrh	r3, [r4, #12]
 8006a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a6a:	81a3      	strh	r3, [r4, #12]
 8006a6c:	4606      	mov	r6, r0
 8006a6e:	4630      	mov	r0, r6
 8006a70:	b003      	add	sp, #12
 8006a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a76:	4622      	mov	r2, r4
 8006a78:	4640      	mov	r0, r8
 8006a7a:	f000 fd1b 	bl	80074b4 <__swbuf_r>
 8006a7e:	1c43      	adds	r3, r0, #1
 8006a80:	d1e4      	bne.n	8006a4c <__fputwc+0x48>
 8006a82:	4606      	mov	r6, r0
 8006a84:	e7f3      	b.n	8006a6e <__fputwc+0x6a>

08006a86 <_fputwc_r>:
 8006a86:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8006a88:	07db      	lsls	r3, r3, #31
 8006a8a:	b570      	push	{r4, r5, r6, lr}
 8006a8c:	4605      	mov	r5, r0
 8006a8e:	460e      	mov	r6, r1
 8006a90:	4614      	mov	r4, r2
 8006a92:	d405      	bmi.n	8006aa0 <_fputwc_r+0x1a>
 8006a94:	8993      	ldrh	r3, [r2, #12]
 8006a96:	0598      	lsls	r0, r3, #22
 8006a98:	d402      	bmi.n	8006aa0 <_fputwc_r+0x1a>
 8006a9a:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8006a9c:	f7fe fe1e 	bl	80056dc <__retarget_lock_acquire_recursive>
 8006aa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aa4:	0499      	lsls	r1, r3, #18
 8006aa6:	d406      	bmi.n	8006ab6 <_fputwc_r+0x30>
 8006aa8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006aac:	81a3      	strh	r3, [r4, #12]
 8006aae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ab0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006ab4:	6663      	str	r3, [r4, #100]	; 0x64
 8006ab6:	4622      	mov	r2, r4
 8006ab8:	4628      	mov	r0, r5
 8006aba:	4631      	mov	r1, r6
 8006abc:	f7ff ffa2 	bl	8006a04 <__fputwc>
 8006ac0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ac2:	07da      	lsls	r2, r3, #31
 8006ac4:	4605      	mov	r5, r0
 8006ac6:	d405      	bmi.n	8006ad4 <_fputwc_r+0x4e>
 8006ac8:	89a3      	ldrh	r3, [r4, #12]
 8006aca:	059b      	lsls	r3, r3, #22
 8006acc:	d402      	bmi.n	8006ad4 <_fputwc_r+0x4e>
 8006ace:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ad0:	f7fe fe05 	bl	80056de <__retarget_lock_release_recursive>
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	bd70      	pop	{r4, r5, r6, pc}

08006ad8 <_malloc_trim_r>:
 8006ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006adc:	4f25      	ldr	r7, [pc, #148]	; (8006b74 <_malloc_trim_r+0x9c>)
 8006ade:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8006b80 <_malloc_trim_r+0xa8>
 8006ae2:	4689      	mov	r9, r1
 8006ae4:	4606      	mov	r6, r0
 8006ae6:	f7ff f81d 	bl	8005b24 <__malloc_lock>
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	685d      	ldr	r5, [r3, #4]
 8006aee:	f1a8 0411 	sub.w	r4, r8, #17
 8006af2:	f025 0503 	bic.w	r5, r5, #3
 8006af6:	eba4 0409 	sub.w	r4, r4, r9
 8006afa:	442c      	add	r4, r5
 8006afc:	fbb4 f4f8 	udiv	r4, r4, r8
 8006b00:	3c01      	subs	r4, #1
 8006b02:	fb08 f404 	mul.w	r4, r8, r4
 8006b06:	4544      	cmp	r4, r8
 8006b08:	da05      	bge.n	8006b16 <_malloc_trim_r+0x3e>
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	f7ff f810 	bl	8005b30 <__malloc_unlock>
 8006b10:	2000      	movs	r0, #0
 8006b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b16:	2100      	movs	r1, #0
 8006b18:	4630      	mov	r0, r6
 8006b1a:	f7ff f883 	bl	8005c24 <_sbrk_r>
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	442b      	add	r3, r5
 8006b22:	4298      	cmp	r0, r3
 8006b24:	d1f1      	bne.n	8006b0a <_malloc_trim_r+0x32>
 8006b26:	4261      	negs	r1, r4
 8006b28:	4630      	mov	r0, r6
 8006b2a:	f7ff f87b 	bl	8005c24 <_sbrk_r>
 8006b2e:	3001      	adds	r0, #1
 8006b30:	d110      	bne.n	8006b54 <_malloc_trim_r+0x7c>
 8006b32:	2100      	movs	r1, #0
 8006b34:	4630      	mov	r0, r6
 8006b36:	f7ff f875 	bl	8005c24 <_sbrk_r>
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	1a83      	subs	r3, r0, r2
 8006b3e:	2b0f      	cmp	r3, #15
 8006b40:	dde3      	ble.n	8006b0a <_malloc_trim_r+0x32>
 8006b42:	490d      	ldr	r1, [pc, #52]	; (8006b78 <_malloc_trim_r+0xa0>)
 8006b44:	6809      	ldr	r1, [r1, #0]
 8006b46:	1a40      	subs	r0, r0, r1
 8006b48:	490c      	ldr	r1, [pc, #48]	; (8006b7c <_malloc_trim_r+0xa4>)
 8006b4a:	f043 0301 	orr.w	r3, r3, #1
 8006b4e:	6008      	str	r0, [r1, #0]
 8006b50:	6053      	str	r3, [r2, #4]
 8006b52:	e7da      	b.n	8006b0a <_malloc_trim_r+0x32>
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	4a09      	ldr	r2, [pc, #36]	; (8006b7c <_malloc_trim_r+0xa4>)
 8006b58:	1b2d      	subs	r5, r5, r4
 8006b5a:	f045 0501 	orr.w	r5, r5, #1
 8006b5e:	605d      	str	r5, [r3, #4]
 8006b60:	6813      	ldr	r3, [r2, #0]
 8006b62:	4630      	mov	r0, r6
 8006b64:	1b1c      	subs	r4, r3, r4
 8006b66:	6014      	str	r4, [r2, #0]
 8006b68:	f7fe ffe2 	bl	8005b30 <__malloc_unlock>
 8006b6c:	2001      	movs	r0, #1
 8006b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b72:	bf00      	nop
 8006b74:	20000280 	.word	0x20000280
 8006b78:	20000688 	.word	0x20000688
 8006b7c:	20001fa0 	.word	0x20001fa0
 8006b80:	00000080 	.word	0x00000080

08006b84 <_free_r>:
 8006b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b88:	4604      	mov	r4, r0
 8006b8a:	4688      	mov	r8, r1
 8006b8c:	2900      	cmp	r1, #0
 8006b8e:	f000 80ab 	beq.w	8006ce8 <_free_r+0x164>
 8006b92:	f7fe ffc7 	bl	8005b24 <__malloc_lock>
 8006b96:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8006b9a:	4d54      	ldr	r5, [pc, #336]	; (8006cec <_free_r+0x168>)
 8006b9c:	f022 0001 	bic.w	r0, r2, #1
 8006ba0:	f1a8 0308 	sub.w	r3, r8, #8
 8006ba4:	181f      	adds	r7, r3, r0
 8006ba6:	68a9      	ldr	r1, [r5, #8]
 8006ba8:	687e      	ldr	r6, [r7, #4]
 8006baa:	428f      	cmp	r7, r1
 8006bac:	f026 0603 	bic.w	r6, r6, #3
 8006bb0:	f002 0201 	and.w	r2, r2, #1
 8006bb4:	d11b      	bne.n	8006bee <_free_r+0x6a>
 8006bb6:	4430      	add	r0, r6
 8006bb8:	b93a      	cbnz	r2, 8006bca <_free_r+0x46>
 8006bba:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8006bbe:	1a9b      	subs	r3, r3, r2
 8006bc0:	4410      	add	r0, r2
 8006bc2:	6899      	ldr	r1, [r3, #8]
 8006bc4:	68da      	ldr	r2, [r3, #12]
 8006bc6:	60ca      	str	r2, [r1, #12]
 8006bc8:	6091      	str	r1, [r2, #8]
 8006bca:	f040 0201 	orr.w	r2, r0, #1
 8006bce:	605a      	str	r2, [r3, #4]
 8006bd0:	60ab      	str	r3, [r5, #8]
 8006bd2:	4b47      	ldr	r3, [pc, #284]	; (8006cf0 <_free_r+0x16c>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4298      	cmp	r0, r3
 8006bd8:	d304      	bcc.n	8006be4 <_free_r+0x60>
 8006bda:	4b46      	ldr	r3, [pc, #280]	; (8006cf4 <_free_r+0x170>)
 8006bdc:	4620      	mov	r0, r4
 8006bde:	6819      	ldr	r1, [r3, #0]
 8006be0:	f7ff ff7a 	bl	8006ad8 <_malloc_trim_r>
 8006be4:	4620      	mov	r0, r4
 8006be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bea:	f7fe bfa1 	b.w	8005b30 <__malloc_unlock>
 8006bee:	607e      	str	r6, [r7, #4]
 8006bf0:	2a00      	cmp	r2, #0
 8006bf2:	d139      	bne.n	8006c68 <_free_r+0xe4>
 8006bf4:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8006bf8:	1a5b      	subs	r3, r3, r1
 8006bfa:	4408      	add	r0, r1
 8006bfc:	6899      	ldr	r1, [r3, #8]
 8006bfe:	f105 0e08 	add.w	lr, r5, #8
 8006c02:	4571      	cmp	r1, lr
 8006c04:	d032      	beq.n	8006c6c <_free_r+0xe8>
 8006c06:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8006c0a:	f8c1 e00c 	str.w	lr, [r1, #12]
 8006c0e:	f8ce 1008 	str.w	r1, [lr, #8]
 8006c12:	19b9      	adds	r1, r7, r6
 8006c14:	6849      	ldr	r1, [r1, #4]
 8006c16:	07c9      	lsls	r1, r1, #31
 8006c18:	d40a      	bmi.n	8006c30 <_free_r+0xac>
 8006c1a:	4430      	add	r0, r6
 8006c1c:	68b9      	ldr	r1, [r7, #8]
 8006c1e:	bb3a      	cbnz	r2, 8006c70 <_free_r+0xec>
 8006c20:	4e35      	ldr	r6, [pc, #212]	; (8006cf8 <_free_r+0x174>)
 8006c22:	42b1      	cmp	r1, r6
 8006c24:	d124      	bne.n	8006c70 <_free_r+0xec>
 8006c26:	616b      	str	r3, [r5, #20]
 8006c28:	612b      	str	r3, [r5, #16]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	60d9      	str	r1, [r3, #12]
 8006c2e:	6099      	str	r1, [r3, #8]
 8006c30:	f040 0101 	orr.w	r1, r0, #1
 8006c34:	6059      	str	r1, [r3, #4]
 8006c36:	5018      	str	r0, [r3, r0]
 8006c38:	2a00      	cmp	r2, #0
 8006c3a:	d1d3      	bne.n	8006be4 <_free_r+0x60>
 8006c3c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006c40:	d21a      	bcs.n	8006c78 <_free_r+0xf4>
 8006c42:	08c0      	lsrs	r0, r0, #3
 8006c44:	1081      	asrs	r1, r0, #2
 8006c46:	2201      	movs	r2, #1
 8006c48:	408a      	lsls	r2, r1
 8006c4a:	6869      	ldr	r1, [r5, #4]
 8006c4c:	3001      	adds	r0, #1
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	606a      	str	r2, [r5, #4]
 8006c52:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8006c56:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8006c5a:	6099      	str	r1, [r3, #8]
 8006c5c:	3a08      	subs	r2, #8
 8006c5e:	60da      	str	r2, [r3, #12]
 8006c60:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8006c64:	60cb      	str	r3, [r1, #12]
 8006c66:	e7bd      	b.n	8006be4 <_free_r+0x60>
 8006c68:	2200      	movs	r2, #0
 8006c6a:	e7d2      	b.n	8006c12 <_free_r+0x8e>
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	e7d0      	b.n	8006c12 <_free_r+0x8e>
 8006c70:	68fe      	ldr	r6, [r7, #12]
 8006c72:	60ce      	str	r6, [r1, #12]
 8006c74:	60b1      	str	r1, [r6, #8]
 8006c76:	e7db      	b.n	8006c30 <_free_r+0xac>
 8006c78:	0a42      	lsrs	r2, r0, #9
 8006c7a:	2a04      	cmp	r2, #4
 8006c7c:	d813      	bhi.n	8006ca6 <_free_r+0x122>
 8006c7e:	0982      	lsrs	r2, r0, #6
 8006c80:	3238      	adds	r2, #56	; 0x38
 8006c82:	1c51      	adds	r1, r2, #1
 8006c84:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8006c88:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8006c8c:	428e      	cmp	r6, r1
 8006c8e:	d124      	bne.n	8006cda <_free_r+0x156>
 8006c90:	2001      	movs	r0, #1
 8006c92:	1092      	asrs	r2, r2, #2
 8006c94:	fa00 f202 	lsl.w	r2, r0, r2
 8006c98:	6868      	ldr	r0, [r5, #4]
 8006c9a:	4302      	orrs	r2, r0
 8006c9c:	606a      	str	r2, [r5, #4]
 8006c9e:	60de      	str	r6, [r3, #12]
 8006ca0:	6099      	str	r1, [r3, #8]
 8006ca2:	60b3      	str	r3, [r6, #8]
 8006ca4:	e7de      	b.n	8006c64 <_free_r+0xe0>
 8006ca6:	2a14      	cmp	r2, #20
 8006ca8:	d801      	bhi.n	8006cae <_free_r+0x12a>
 8006caa:	325b      	adds	r2, #91	; 0x5b
 8006cac:	e7e9      	b.n	8006c82 <_free_r+0xfe>
 8006cae:	2a54      	cmp	r2, #84	; 0x54
 8006cb0:	d802      	bhi.n	8006cb8 <_free_r+0x134>
 8006cb2:	0b02      	lsrs	r2, r0, #12
 8006cb4:	326e      	adds	r2, #110	; 0x6e
 8006cb6:	e7e4      	b.n	8006c82 <_free_r+0xfe>
 8006cb8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006cbc:	d802      	bhi.n	8006cc4 <_free_r+0x140>
 8006cbe:	0bc2      	lsrs	r2, r0, #15
 8006cc0:	3277      	adds	r2, #119	; 0x77
 8006cc2:	e7de      	b.n	8006c82 <_free_r+0xfe>
 8006cc4:	f240 5154 	movw	r1, #1364	; 0x554
 8006cc8:	428a      	cmp	r2, r1
 8006cca:	bf9a      	itte	ls
 8006ccc:	0c82      	lsrls	r2, r0, #18
 8006cce:	327c      	addls	r2, #124	; 0x7c
 8006cd0:	227e      	movhi	r2, #126	; 0x7e
 8006cd2:	e7d6      	b.n	8006c82 <_free_r+0xfe>
 8006cd4:	6889      	ldr	r1, [r1, #8]
 8006cd6:	428e      	cmp	r6, r1
 8006cd8:	d004      	beq.n	8006ce4 <_free_r+0x160>
 8006cda:	684a      	ldr	r2, [r1, #4]
 8006cdc:	f022 0203 	bic.w	r2, r2, #3
 8006ce0:	4290      	cmp	r0, r2
 8006ce2:	d3f7      	bcc.n	8006cd4 <_free_r+0x150>
 8006ce4:	68ce      	ldr	r6, [r1, #12]
 8006ce6:	e7da      	b.n	8006c9e <_free_r+0x11a>
 8006ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cec:	20000280 	.word	0x20000280
 8006cf0:	2000068c 	.word	0x2000068c
 8006cf4:	20001fd0 	.word	0x20001fd0
 8006cf8:	20000288 	.word	0x20000288

08006cfc <__sfvwrite_r>:
 8006cfc:	6893      	ldr	r3, [r2, #8]
 8006cfe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d02:	4607      	mov	r7, r0
 8006d04:	460c      	mov	r4, r1
 8006d06:	4690      	mov	r8, r2
 8006d08:	b91b      	cbnz	r3, 8006d12 <__sfvwrite_r+0x16>
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	b003      	add	sp, #12
 8006d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d12:	898b      	ldrh	r3, [r1, #12]
 8006d14:	0718      	lsls	r0, r3, #28
 8006d16:	d526      	bpl.n	8006d66 <__sfvwrite_r+0x6a>
 8006d18:	690b      	ldr	r3, [r1, #16]
 8006d1a:	b323      	cbz	r3, 8006d66 <__sfvwrite_r+0x6a>
 8006d1c:	89a3      	ldrh	r3, [r4, #12]
 8006d1e:	f8d8 6000 	ldr.w	r6, [r8]
 8006d22:	f013 0902 	ands.w	r9, r3, #2
 8006d26:	d02d      	beq.n	8006d84 <__sfvwrite_r+0x88>
 8006d28:	f04f 0a00 	mov.w	sl, #0
 8006d2c:	f8df b264 	ldr.w	fp, [pc, #612]	; 8006f94 <__sfvwrite_r+0x298>
 8006d30:	46d1      	mov	r9, sl
 8006d32:	f1b9 0f00 	cmp.w	r9, #0
 8006d36:	d01f      	beq.n	8006d78 <__sfvwrite_r+0x7c>
 8006d38:	45d9      	cmp	r9, fp
 8006d3a:	464b      	mov	r3, r9
 8006d3c:	4652      	mov	r2, sl
 8006d3e:	bf28      	it	cs
 8006d40:	465b      	movcs	r3, fp
 8006d42:	6a21      	ldr	r1, [r4, #32]
 8006d44:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006d46:	4638      	mov	r0, r7
 8006d48:	47a8      	blx	r5
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	f340 8089 	ble.w	8006e62 <__sfvwrite_r+0x166>
 8006d50:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d54:	4482      	add	sl, r0
 8006d56:	eba9 0900 	sub.w	r9, r9, r0
 8006d5a:	1a18      	subs	r0, r3, r0
 8006d5c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d60:	2800      	cmp	r0, #0
 8006d62:	d1e6      	bne.n	8006d32 <__sfvwrite_r+0x36>
 8006d64:	e7d1      	b.n	8006d0a <__sfvwrite_r+0xe>
 8006d66:	4621      	mov	r1, r4
 8006d68:	4638      	mov	r0, r7
 8006d6a:	f7ff fc8b 	bl	8006684 <__swsetup_r>
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	d0d4      	beq.n	8006d1c <__sfvwrite_r+0x20>
 8006d72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d76:	e7c9      	b.n	8006d0c <__sfvwrite_r+0x10>
 8006d78:	f8d6 a000 	ldr.w	sl, [r6]
 8006d7c:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8006d80:	3608      	adds	r6, #8
 8006d82:	e7d6      	b.n	8006d32 <__sfvwrite_r+0x36>
 8006d84:	f013 0301 	ands.w	r3, r3, #1
 8006d88:	d043      	beq.n	8006e12 <__sfvwrite_r+0x116>
 8006d8a:	4648      	mov	r0, r9
 8006d8c:	46ca      	mov	sl, r9
 8006d8e:	46cb      	mov	fp, r9
 8006d90:	f1bb 0f00 	cmp.w	fp, #0
 8006d94:	f000 80d9 	beq.w	8006f4a <__sfvwrite_r+0x24e>
 8006d98:	b950      	cbnz	r0, 8006db0 <__sfvwrite_r+0xb4>
 8006d9a:	465a      	mov	r2, fp
 8006d9c:	210a      	movs	r1, #10
 8006d9e:	4650      	mov	r0, sl
 8006da0:	f7f9 fa1e 	bl	80001e0 <memchr>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	f000 80d5 	beq.w	8006f54 <__sfvwrite_r+0x258>
 8006daa:	3001      	adds	r0, #1
 8006dac:	eba0 090a 	sub.w	r9, r0, sl
 8006db0:	6820      	ldr	r0, [r4, #0]
 8006db2:	6921      	ldr	r1, [r4, #16]
 8006db4:	6962      	ldr	r2, [r4, #20]
 8006db6:	45d9      	cmp	r9, fp
 8006db8:	464b      	mov	r3, r9
 8006dba:	bf28      	it	cs
 8006dbc:	465b      	movcs	r3, fp
 8006dbe:	4288      	cmp	r0, r1
 8006dc0:	f240 80cb 	bls.w	8006f5a <__sfvwrite_r+0x25e>
 8006dc4:	68a5      	ldr	r5, [r4, #8]
 8006dc6:	4415      	add	r5, r2
 8006dc8:	42ab      	cmp	r3, r5
 8006dca:	f340 80c6 	ble.w	8006f5a <__sfvwrite_r+0x25e>
 8006dce:	4651      	mov	r1, sl
 8006dd0:	462a      	mov	r2, r5
 8006dd2:	f000 f97f 	bl	80070d4 <memmove>
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	442b      	add	r3, r5
 8006dda:	6023      	str	r3, [r4, #0]
 8006ddc:	4621      	mov	r1, r4
 8006dde:	4638      	mov	r0, r7
 8006de0:	f7ff fdd4 	bl	800698c <_fflush_r>
 8006de4:	2800      	cmp	r0, #0
 8006de6:	d13c      	bne.n	8006e62 <__sfvwrite_r+0x166>
 8006de8:	ebb9 0905 	subs.w	r9, r9, r5
 8006dec:	f040 80cf 	bne.w	8006f8e <__sfvwrite_r+0x292>
 8006df0:	4621      	mov	r1, r4
 8006df2:	4638      	mov	r0, r7
 8006df4:	f7ff fdca 	bl	800698c <_fflush_r>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	d132      	bne.n	8006e62 <__sfvwrite_r+0x166>
 8006dfc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e00:	44aa      	add	sl, r5
 8006e02:	ebab 0b05 	sub.w	fp, fp, r5
 8006e06:	1b5d      	subs	r5, r3, r5
 8006e08:	f8c8 5008 	str.w	r5, [r8, #8]
 8006e0c:	2d00      	cmp	r5, #0
 8006e0e:	d1bf      	bne.n	8006d90 <__sfvwrite_r+0x94>
 8006e10:	e77b      	b.n	8006d0a <__sfvwrite_r+0xe>
 8006e12:	4699      	mov	r9, r3
 8006e14:	469a      	mov	sl, r3
 8006e16:	f1ba 0f00 	cmp.w	sl, #0
 8006e1a:	d027      	beq.n	8006e6c <__sfvwrite_r+0x170>
 8006e1c:	89a2      	ldrh	r2, [r4, #12]
 8006e1e:	68a5      	ldr	r5, [r4, #8]
 8006e20:	0591      	lsls	r1, r2, #22
 8006e22:	d565      	bpl.n	8006ef0 <__sfvwrite_r+0x1f4>
 8006e24:	45aa      	cmp	sl, r5
 8006e26:	d33b      	bcc.n	8006ea0 <__sfvwrite_r+0x1a4>
 8006e28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e2c:	d036      	beq.n	8006e9c <__sfvwrite_r+0x1a0>
 8006e2e:	6921      	ldr	r1, [r4, #16]
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	1a5b      	subs	r3, r3, r1
 8006e34:	9301      	str	r3, [sp, #4]
 8006e36:	6963      	ldr	r3, [r4, #20]
 8006e38:	2002      	movs	r0, #2
 8006e3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006e3e:	fb93 fbf0 	sdiv	fp, r3, r0
 8006e42:	9b01      	ldr	r3, [sp, #4]
 8006e44:	1c58      	adds	r0, r3, #1
 8006e46:	4450      	add	r0, sl
 8006e48:	4583      	cmp	fp, r0
 8006e4a:	bf38      	it	cc
 8006e4c:	4683      	movcc	fp, r0
 8006e4e:	0553      	lsls	r3, r2, #21
 8006e50:	d53e      	bpl.n	8006ed0 <__sfvwrite_r+0x1d4>
 8006e52:	4659      	mov	r1, fp
 8006e54:	4638      	mov	r0, r7
 8006e56:	f7fe fc43 	bl	80056e0 <_malloc_r>
 8006e5a:	4605      	mov	r5, r0
 8006e5c:	b950      	cbnz	r0, 8006e74 <__sfvwrite_r+0x178>
 8006e5e:	230c      	movs	r3, #12
 8006e60:	603b      	str	r3, [r7, #0]
 8006e62:	89a3      	ldrh	r3, [r4, #12]
 8006e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e68:	81a3      	strh	r3, [r4, #12]
 8006e6a:	e782      	b.n	8006d72 <__sfvwrite_r+0x76>
 8006e6c:	e896 0600 	ldmia.w	r6, {r9, sl}
 8006e70:	3608      	adds	r6, #8
 8006e72:	e7d0      	b.n	8006e16 <__sfvwrite_r+0x11a>
 8006e74:	9a01      	ldr	r2, [sp, #4]
 8006e76:	6921      	ldr	r1, [r4, #16]
 8006e78:	f7fe fe40 	bl	8005afc <memcpy>
 8006e7c:	89a2      	ldrh	r2, [r4, #12]
 8006e7e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8006e82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e86:	81a2      	strh	r2, [r4, #12]
 8006e88:	9b01      	ldr	r3, [sp, #4]
 8006e8a:	6125      	str	r5, [r4, #16]
 8006e8c:	441d      	add	r5, r3
 8006e8e:	ebab 0303 	sub.w	r3, fp, r3
 8006e92:	6025      	str	r5, [r4, #0]
 8006e94:	f8c4 b014 	str.w	fp, [r4, #20]
 8006e98:	4655      	mov	r5, sl
 8006e9a:	60a3      	str	r3, [r4, #8]
 8006e9c:	45aa      	cmp	sl, r5
 8006e9e:	d200      	bcs.n	8006ea2 <__sfvwrite_r+0x1a6>
 8006ea0:	4655      	mov	r5, sl
 8006ea2:	462a      	mov	r2, r5
 8006ea4:	4649      	mov	r1, r9
 8006ea6:	6820      	ldr	r0, [r4, #0]
 8006ea8:	f000 f914 	bl	80070d4 <memmove>
 8006eac:	68a3      	ldr	r3, [r4, #8]
 8006eae:	1b5b      	subs	r3, r3, r5
 8006eb0:	60a3      	str	r3, [r4, #8]
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	441d      	add	r5, r3
 8006eb6:	6025      	str	r5, [r4, #0]
 8006eb8:	4655      	mov	r5, sl
 8006eba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006ebe:	44a9      	add	r9, r5
 8006ec0:	ebaa 0a05 	sub.w	sl, sl, r5
 8006ec4:	1b5d      	subs	r5, r3, r5
 8006ec6:	f8c8 5008 	str.w	r5, [r8, #8]
 8006eca:	2d00      	cmp	r5, #0
 8006ecc:	d1a3      	bne.n	8006e16 <__sfvwrite_r+0x11a>
 8006ece:	e71c      	b.n	8006d0a <__sfvwrite_r+0xe>
 8006ed0:	465a      	mov	r2, fp
 8006ed2:	4638      	mov	r0, r7
 8006ed4:	f000 f92a 	bl	800712c <_realloc_r>
 8006ed8:	4605      	mov	r5, r0
 8006eda:	2800      	cmp	r0, #0
 8006edc:	d1d4      	bne.n	8006e88 <__sfvwrite_r+0x18c>
 8006ede:	6921      	ldr	r1, [r4, #16]
 8006ee0:	4638      	mov	r0, r7
 8006ee2:	f7ff fe4f 	bl	8006b84 <_free_r>
 8006ee6:	89a3      	ldrh	r3, [r4, #12]
 8006ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006eec:	81a3      	strh	r3, [r4, #12]
 8006eee:	e7b6      	b.n	8006e5e <__sfvwrite_r+0x162>
 8006ef0:	6820      	ldr	r0, [r4, #0]
 8006ef2:	6923      	ldr	r3, [r4, #16]
 8006ef4:	4298      	cmp	r0, r3
 8006ef6:	d802      	bhi.n	8006efe <__sfvwrite_r+0x202>
 8006ef8:	6962      	ldr	r2, [r4, #20]
 8006efa:	4592      	cmp	sl, r2
 8006efc:	d215      	bcs.n	8006f2a <__sfvwrite_r+0x22e>
 8006efe:	4555      	cmp	r5, sl
 8006f00:	bf28      	it	cs
 8006f02:	4655      	movcs	r5, sl
 8006f04:	462a      	mov	r2, r5
 8006f06:	4649      	mov	r1, r9
 8006f08:	f000 f8e4 	bl	80070d4 <memmove>
 8006f0c:	68a3      	ldr	r3, [r4, #8]
 8006f0e:	6822      	ldr	r2, [r4, #0]
 8006f10:	1b5b      	subs	r3, r3, r5
 8006f12:	442a      	add	r2, r5
 8006f14:	60a3      	str	r3, [r4, #8]
 8006f16:	6022      	str	r2, [r4, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1ce      	bne.n	8006eba <__sfvwrite_r+0x1be>
 8006f1c:	4621      	mov	r1, r4
 8006f1e:	4638      	mov	r0, r7
 8006f20:	f7ff fd34 	bl	800698c <_fflush_r>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	d0c8      	beq.n	8006eba <__sfvwrite_r+0x1be>
 8006f28:	e79b      	b.n	8006e62 <__sfvwrite_r+0x166>
 8006f2a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006f2e:	4553      	cmp	r3, sl
 8006f30:	bf28      	it	cs
 8006f32:	4653      	movcs	r3, sl
 8006f34:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006f36:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f3a:	6a21      	ldr	r1, [r4, #32]
 8006f3c:	4353      	muls	r3, r2
 8006f3e:	4638      	mov	r0, r7
 8006f40:	464a      	mov	r2, r9
 8006f42:	47a8      	blx	r5
 8006f44:	1e05      	subs	r5, r0, #0
 8006f46:	dcb8      	bgt.n	8006eba <__sfvwrite_r+0x1be>
 8006f48:	e78b      	b.n	8006e62 <__sfvwrite_r+0x166>
 8006f4a:	e896 0c00 	ldmia.w	r6, {sl, fp}
 8006f4e:	2000      	movs	r0, #0
 8006f50:	3608      	adds	r6, #8
 8006f52:	e71d      	b.n	8006d90 <__sfvwrite_r+0x94>
 8006f54:	f10b 0901 	add.w	r9, fp, #1
 8006f58:	e72a      	b.n	8006db0 <__sfvwrite_r+0xb4>
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	db09      	blt.n	8006f72 <__sfvwrite_r+0x276>
 8006f5e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006f60:	6a21      	ldr	r1, [r4, #32]
 8006f62:	4613      	mov	r3, r2
 8006f64:	4638      	mov	r0, r7
 8006f66:	4652      	mov	r2, sl
 8006f68:	47a8      	blx	r5
 8006f6a:	1e05      	subs	r5, r0, #0
 8006f6c:	f73f af3c 	bgt.w	8006de8 <__sfvwrite_r+0xec>
 8006f70:	e777      	b.n	8006e62 <__sfvwrite_r+0x166>
 8006f72:	461a      	mov	r2, r3
 8006f74:	4651      	mov	r1, sl
 8006f76:	9301      	str	r3, [sp, #4]
 8006f78:	f000 f8ac 	bl	80070d4 <memmove>
 8006f7c:	9b01      	ldr	r3, [sp, #4]
 8006f7e:	68a2      	ldr	r2, [r4, #8]
 8006f80:	1ad2      	subs	r2, r2, r3
 8006f82:	60a2      	str	r2, [r4, #8]
 8006f84:	6822      	ldr	r2, [r4, #0]
 8006f86:	441a      	add	r2, r3
 8006f88:	6022      	str	r2, [r4, #0]
 8006f8a:	461d      	mov	r5, r3
 8006f8c:	e72c      	b.n	8006de8 <__sfvwrite_r+0xec>
 8006f8e:	2001      	movs	r0, #1
 8006f90:	e734      	b.n	8006dfc <__sfvwrite_r+0x100>
 8006f92:	bf00      	nop
 8006f94:	7ffffc00 	.word	0x7ffffc00

08006f98 <__locale_mb_cur_max>:
 8006f98:	4b04      	ldr	r3, [pc, #16]	; (8006fac <__locale_mb_cur_max+0x14>)
 8006f9a:	4a05      	ldr	r2, [pc, #20]	; (8006fb0 <__locale_mb_cur_max+0x18>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	6a1b      	ldr	r3, [r3, #32]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	bf08      	it	eq
 8006fa4:	4613      	moveq	r3, r2
 8006fa6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8006faa:	4770      	bx	lr
 8006fac:	2000018c 	.word	0x2000018c
 8006fb0:	20000690 	.word	0x20000690

08006fb4 <_lseek_r>:
 8006fb4:	b538      	push	{r3, r4, r5, lr}
 8006fb6:	4c07      	ldr	r4, [pc, #28]	; (8006fd4 <_lseek_r+0x20>)
 8006fb8:	4605      	mov	r5, r0
 8006fba:	4608      	mov	r0, r1
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	6022      	str	r2, [r4, #0]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	f7fe f9fe 	bl	80053c4 <_lseek>
 8006fc8:	1c43      	adds	r3, r0, #1
 8006fca:	d102      	bne.n	8006fd2 <_lseek_r+0x1e>
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	b103      	cbz	r3, 8006fd2 <_lseek_r+0x1e>
 8006fd0:	602b      	str	r3, [r5, #0]
 8006fd2:	bd38      	pop	{r3, r4, r5, pc}
 8006fd4:	200034e4 	.word	0x200034e4

08006fd8 <__swhatbuf_r>:
 8006fd8:	b570      	push	{r4, r5, r6, lr}
 8006fda:	460e      	mov	r6, r1
 8006fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe0:	2900      	cmp	r1, #0
 8006fe2:	b090      	sub	sp, #64	; 0x40
 8006fe4:	4614      	mov	r4, r2
 8006fe6:	461d      	mov	r5, r3
 8006fe8:	da09      	bge.n	8006ffe <__swhatbuf_r+0x26>
 8006fea:	89b3      	ldrh	r3, [r6, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006ff2:	602a      	str	r2, [r5, #0]
 8006ff4:	d116      	bne.n	8007024 <__swhatbuf_r+0x4c>
 8006ff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ffa:	6023      	str	r3, [r4, #0]
 8006ffc:	e015      	b.n	800702a <__swhatbuf_r+0x52>
 8006ffe:	aa01      	add	r2, sp, #4
 8007000:	f000 faec 	bl	80075dc <_fstat_r>
 8007004:	2800      	cmp	r0, #0
 8007006:	dbf0      	blt.n	8006fea <__swhatbuf_r+0x12>
 8007008:	9a02      	ldr	r2, [sp, #8]
 800700a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800700e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007012:	425a      	negs	r2, r3
 8007014:	415a      	adcs	r2, r3
 8007016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800701a:	602a      	str	r2, [r5, #0]
 800701c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007020:	6023      	str	r3, [r4, #0]
 8007022:	e002      	b.n	800702a <__swhatbuf_r+0x52>
 8007024:	2340      	movs	r3, #64	; 0x40
 8007026:	6023      	str	r3, [r4, #0]
 8007028:	4610      	mov	r0, r2
 800702a:	b010      	add	sp, #64	; 0x40
 800702c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007030 <__smakebuf_r>:
 8007030:	898b      	ldrh	r3, [r1, #12]
 8007032:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007034:	079d      	lsls	r5, r3, #30
 8007036:	4606      	mov	r6, r0
 8007038:	460c      	mov	r4, r1
 800703a:	d507      	bpl.n	800704c <__smakebuf_r+0x1c>
 800703c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007040:	6023      	str	r3, [r4, #0]
 8007042:	6123      	str	r3, [r4, #16]
 8007044:	2301      	movs	r3, #1
 8007046:	6163      	str	r3, [r4, #20]
 8007048:	b002      	add	sp, #8
 800704a:	bd70      	pop	{r4, r5, r6, pc}
 800704c:	ab01      	add	r3, sp, #4
 800704e:	466a      	mov	r2, sp
 8007050:	f7ff ffc2 	bl	8006fd8 <__swhatbuf_r>
 8007054:	9900      	ldr	r1, [sp, #0]
 8007056:	4605      	mov	r5, r0
 8007058:	4630      	mov	r0, r6
 800705a:	f7fe fb41 	bl	80056e0 <_malloc_r>
 800705e:	b948      	cbnz	r0, 8007074 <__smakebuf_r+0x44>
 8007060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007064:	059a      	lsls	r2, r3, #22
 8007066:	d4ef      	bmi.n	8007048 <__smakebuf_r+0x18>
 8007068:	f023 0303 	bic.w	r3, r3, #3
 800706c:	f043 0302 	orr.w	r3, r3, #2
 8007070:	81a3      	strh	r3, [r4, #12]
 8007072:	e7e3      	b.n	800703c <__smakebuf_r+0xc>
 8007074:	4b0d      	ldr	r3, [pc, #52]	; (80070ac <__smakebuf_r+0x7c>)
 8007076:	62b3      	str	r3, [r6, #40]	; 0x28
 8007078:	89a3      	ldrh	r3, [r4, #12]
 800707a:	6020      	str	r0, [r4, #0]
 800707c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007080:	81a3      	strh	r3, [r4, #12]
 8007082:	9b00      	ldr	r3, [sp, #0]
 8007084:	6163      	str	r3, [r4, #20]
 8007086:	9b01      	ldr	r3, [sp, #4]
 8007088:	6120      	str	r0, [r4, #16]
 800708a:	b15b      	cbz	r3, 80070a4 <__smakebuf_r+0x74>
 800708c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007090:	4630      	mov	r0, r6
 8007092:	f000 fab5 	bl	8007600 <_isatty_r>
 8007096:	b128      	cbz	r0, 80070a4 <__smakebuf_r+0x74>
 8007098:	89a3      	ldrh	r3, [r4, #12]
 800709a:	f023 0303 	bic.w	r3, r3, #3
 800709e:	f043 0301 	orr.w	r3, r3, #1
 80070a2:	81a3      	strh	r3, [r4, #12]
 80070a4:	89a3      	ldrh	r3, [r4, #12]
 80070a6:	431d      	orrs	r5, r3
 80070a8:	81a5      	strh	r5, [r4, #12]
 80070aa:	e7cd      	b.n	8007048 <__smakebuf_r+0x18>
 80070ac:	08005481 	.word	0x08005481

080070b0 <__ascii_mbtowc>:
 80070b0:	b082      	sub	sp, #8
 80070b2:	b901      	cbnz	r1, 80070b6 <__ascii_mbtowc+0x6>
 80070b4:	a901      	add	r1, sp, #4
 80070b6:	b142      	cbz	r2, 80070ca <__ascii_mbtowc+0x1a>
 80070b8:	b14b      	cbz	r3, 80070ce <__ascii_mbtowc+0x1e>
 80070ba:	7813      	ldrb	r3, [r2, #0]
 80070bc:	600b      	str	r3, [r1, #0]
 80070be:	7812      	ldrb	r2, [r2, #0]
 80070c0:	1c10      	adds	r0, r2, #0
 80070c2:	bf18      	it	ne
 80070c4:	2001      	movne	r0, #1
 80070c6:	b002      	add	sp, #8
 80070c8:	4770      	bx	lr
 80070ca:	4610      	mov	r0, r2
 80070cc:	e7fb      	b.n	80070c6 <__ascii_mbtowc+0x16>
 80070ce:	f06f 0001 	mvn.w	r0, #1
 80070d2:	e7f8      	b.n	80070c6 <__ascii_mbtowc+0x16>

080070d4 <memmove>:
 80070d4:	4288      	cmp	r0, r1
 80070d6:	b510      	push	{r4, lr}
 80070d8:	eb01 0302 	add.w	r3, r1, r2
 80070dc:	d803      	bhi.n	80070e6 <memmove+0x12>
 80070de:	1e42      	subs	r2, r0, #1
 80070e0:	4299      	cmp	r1, r3
 80070e2:	d10c      	bne.n	80070fe <memmove+0x2a>
 80070e4:	bd10      	pop	{r4, pc}
 80070e6:	4298      	cmp	r0, r3
 80070e8:	d2f9      	bcs.n	80070de <memmove+0xa>
 80070ea:	1881      	adds	r1, r0, r2
 80070ec:	1ad2      	subs	r2, r2, r3
 80070ee:	42d3      	cmn	r3, r2
 80070f0:	d100      	bne.n	80070f4 <memmove+0x20>
 80070f2:	bd10      	pop	{r4, pc}
 80070f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070f8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80070fc:	e7f7      	b.n	80070ee <memmove+0x1a>
 80070fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007102:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007106:	e7eb      	b.n	80070e0 <memmove+0xc>

08007108 <_read_r>:
 8007108:	b538      	push	{r3, r4, r5, lr}
 800710a:	4c07      	ldr	r4, [pc, #28]	; (8007128 <_read_r+0x20>)
 800710c:	4605      	mov	r5, r0
 800710e:	4608      	mov	r0, r1
 8007110:	4611      	mov	r1, r2
 8007112:	2200      	movs	r2, #0
 8007114:	6022      	str	r2, [r4, #0]
 8007116:	461a      	mov	r2, r3
 8007118:	f7fe f914 	bl	8005344 <_read>
 800711c:	1c43      	adds	r3, r0, #1
 800711e:	d102      	bne.n	8007126 <_read_r+0x1e>
 8007120:	6823      	ldr	r3, [r4, #0]
 8007122:	b103      	cbz	r3, 8007126 <_read_r+0x1e>
 8007124:	602b      	str	r3, [r5, #0]
 8007126:	bd38      	pop	{r3, r4, r5, pc}
 8007128:	200034e4 	.word	0x200034e4

0800712c <_realloc_r>:
 800712c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007130:	4682      	mov	sl, r0
 8007132:	460c      	mov	r4, r1
 8007134:	b929      	cbnz	r1, 8007142 <_realloc_r+0x16>
 8007136:	4611      	mov	r1, r2
 8007138:	b003      	add	sp, #12
 800713a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800713e:	f7fe bacf 	b.w	80056e0 <_malloc_r>
 8007142:	9201      	str	r2, [sp, #4]
 8007144:	f7fe fcee 	bl	8005b24 <__malloc_lock>
 8007148:	9a01      	ldr	r2, [sp, #4]
 800714a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800714e:	f102 080b 	add.w	r8, r2, #11
 8007152:	f1b8 0f16 	cmp.w	r8, #22
 8007156:	f1a4 0908 	sub.w	r9, r4, #8
 800715a:	f025 0603 	bic.w	r6, r5, #3
 800715e:	d90a      	bls.n	8007176 <_realloc_r+0x4a>
 8007160:	f038 0807 	bics.w	r8, r8, #7
 8007164:	d509      	bpl.n	800717a <_realloc_r+0x4e>
 8007166:	230c      	movs	r3, #12
 8007168:	f8ca 3000 	str.w	r3, [sl]
 800716c:	2700      	movs	r7, #0
 800716e:	4638      	mov	r0, r7
 8007170:	b003      	add	sp, #12
 8007172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007176:	f04f 0810 	mov.w	r8, #16
 800717a:	4590      	cmp	r8, r2
 800717c:	d3f3      	bcc.n	8007166 <_realloc_r+0x3a>
 800717e:	45b0      	cmp	r8, r6
 8007180:	f340 8145 	ble.w	800740e <_realloc_r+0x2e2>
 8007184:	4ba8      	ldr	r3, [pc, #672]	; (8007428 <_realloc_r+0x2fc>)
 8007186:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800718a:	eb09 0106 	add.w	r1, r9, r6
 800718e:	4571      	cmp	r1, lr
 8007190:	469b      	mov	fp, r3
 8007192:	684b      	ldr	r3, [r1, #4]
 8007194:	d005      	beq.n	80071a2 <_realloc_r+0x76>
 8007196:	f023 0001 	bic.w	r0, r3, #1
 800719a:	4408      	add	r0, r1
 800719c:	6840      	ldr	r0, [r0, #4]
 800719e:	07c7      	lsls	r7, r0, #31
 80071a0:	d447      	bmi.n	8007232 <_realloc_r+0x106>
 80071a2:	f023 0303 	bic.w	r3, r3, #3
 80071a6:	4571      	cmp	r1, lr
 80071a8:	eb06 0703 	add.w	r7, r6, r3
 80071ac:	d119      	bne.n	80071e2 <_realloc_r+0xb6>
 80071ae:	f108 0010 	add.w	r0, r8, #16
 80071b2:	4287      	cmp	r7, r0
 80071b4:	db3f      	blt.n	8007236 <_realloc_r+0x10a>
 80071b6:	eb09 0308 	add.w	r3, r9, r8
 80071ba:	eba7 0708 	sub.w	r7, r7, r8
 80071be:	f047 0701 	orr.w	r7, r7, #1
 80071c2:	f8cb 3008 	str.w	r3, [fp, #8]
 80071c6:	605f      	str	r7, [r3, #4]
 80071c8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	ea43 0308 	orr.w	r3, r3, r8
 80071d4:	f844 3c04 	str.w	r3, [r4, #-4]
 80071d8:	4650      	mov	r0, sl
 80071da:	f7fe fca9 	bl	8005b30 <__malloc_unlock>
 80071de:	4627      	mov	r7, r4
 80071e0:	e7c5      	b.n	800716e <_realloc_r+0x42>
 80071e2:	45b8      	cmp	r8, r7
 80071e4:	dc27      	bgt.n	8007236 <_realloc_r+0x10a>
 80071e6:	68cb      	ldr	r3, [r1, #12]
 80071e8:	688a      	ldr	r2, [r1, #8]
 80071ea:	60d3      	str	r3, [r2, #12]
 80071ec:	609a      	str	r2, [r3, #8]
 80071ee:	eba7 0008 	sub.w	r0, r7, r8
 80071f2:	280f      	cmp	r0, #15
 80071f4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80071f8:	eb09 0207 	add.w	r2, r9, r7
 80071fc:	f240 8109 	bls.w	8007412 <_realloc_r+0x2e6>
 8007200:	eb09 0108 	add.w	r1, r9, r8
 8007204:	f003 0301 	and.w	r3, r3, #1
 8007208:	ea43 0308 	orr.w	r3, r3, r8
 800720c:	f040 0001 	orr.w	r0, r0, #1
 8007210:	f8c9 3004 	str.w	r3, [r9, #4]
 8007214:	6048      	str	r0, [r1, #4]
 8007216:	6853      	ldr	r3, [r2, #4]
 8007218:	f043 0301 	orr.w	r3, r3, #1
 800721c:	6053      	str	r3, [r2, #4]
 800721e:	3108      	adds	r1, #8
 8007220:	4650      	mov	r0, sl
 8007222:	f7ff fcaf 	bl	8006b84 <_free_r>
 8007226:	4650      	mov	r0, sl
 8007228:	f7fe fc82 	bl	8005b30 <__malloc_unlock>
 800722c:	f109 0708 	add.w	r7, r9, #8
 8007230:	e79d      	b.n	800716e <_realloc_r+0x42>
 8007232:	2300      	movs	r3, #0
 8007234:	4619      	mov	r1, r3
 8007236:	07e8      	lsls	r0, r5, #31
 8007238:	f100 8084 	bmi.w	8007344 <_realloc_r+0x218>
 800723c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8007240:	eba9 0505 	sub.w	r5, r9, r5
 8007244:	6868      	ldr	r0, [r5, #4]
 8007246:	f020 0003 	bic.w	r0, r0, #3
 800724a:	4430      	add	r0, r6
 800724c:	2900      	cmp	r1, #0
 800724e:	d076      	beq.n	800733e <_realloc_r+0x212>
 8007250:	4571      	cmp	r1, lr
 8007252:	d150      	bne.n	80072f6 <_realloc_r+0x1ca>
 8007254:	4403      	add	r3, r0
 8007256:	f108 0110 	add.w	r1, r8, #16
 800725a:	428b      	cmp	r3, r1
 800725c:	db6f      	blt.n	800733e <_realloc_r+0x212>
 800725e:	462f      	mov	r7, r5
 8007260:	68ea      	ldr	r2, [r5, #12]
 8007262:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8007266:	60ca      	str	r2, [r1, #12]
 8007268:	6091      	str	r1, [r2, #8]
 800726a:	1f32      	subs	r2, r6, #4
 800726c:	2a24      	cmp	r2, #36	; 0x24
 800726e:	d83b      	bhi.n	80072e8 <_realloc_r+0x1bc>
 8007270:	2a13      	cmp	r2, #19
 8007272:	d936      	bls.n	80072e2 <_realloc_r+0x1b6>
 8007274:	6821      	ldr	r1, [r4, #0]
 8007276:	60a9      	str	r1, [r5, #8]
 8007278:	6861      	ldr	r1, [r4, #4]
 800727a:	60e9      	str	r1, [r5, #12]
 800727c:	2a1b      	cmp	r2, #27
 800727e:	d81c      	bhi.n	80072ba <_realloc_r+0x18e>
 8007280:	f105 0210 	add.w	r2, r5, #16
 8007284:	f104 0108 	add.w	r1, r4, #8
 8007288:	6808      	ldr	r0, [r1, #0]
 800728a:	6010      	str	r0, [r2, #0]
 800728c:	6848      	ldr	r0, [r1, #4]
 800728e:	6050      	str	r0, [r2, #4]
 8007290:	6889      	ldr	r1, [r1, #8]
 8007292:	6091      	str	r1, [r2, #8]
 8007294:	eb05 0208 	add.w	r2, r5, r8
 8007298:	eba3 0308 	sub.w	r3, r3, r8
 800729c:	f043 0301 	orr.w	r3, r3, #1
 80072a0:	f8cb 2008 	str.w	r2, [fp, #8]
 80072a4:	6053      	str	r3, [r2, #4]
 80072a6:	686b      	ldr	r3, [r5, #4]
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	ea43 0308 	orr.w	r3, r3, r8
 80072b0:	606b      	str	r3, [r5, #4]
 80072b2:	4650      	mov	r0, sl
 80072b4:	f7fe fc3c 	bl	8005b30 <__malloc_unlock>
 80072b8:	e759      	b.n	800716e <_realloc_r+0x42>
 80072ba:	68a1      	ldr	r1, [r4, #8]
 80072bc:	6129      	str	r1, [r5, #16]
 80072be:	68e1      	ldr	r1, [r4, #12]
 80072c0:	6169      	str	r1, [r5, #20]
 80072c2:	2a24      	cmp	r2, #36	; 0x24
 80072c4:	bf01      	itttt	eq
 80072c6:	6922      	ldreq	r2, [r4, #16]
 80072c8:	61aa      	streq	r2, [r5, #24]
 80072ca:	6960      	ldreq	r0, [r4, #20]
 80072cc:	61e8      	streq	r0, [r5, #28]
 80072ce:	bf19      	ittee	ne
 80072d0:	f105 0218 	addne.w	r2, r5, #24
 80072d4:	f104 0110 	addne.w	r1, r4, #16
 80072d8:	f105 0220 	addeq.w	r2, r5, #32
 80072dc:	f104 0118 	addeq.w	r1, r4, #24
 80072e0:	e7d2      	b.n	8007288 <_realloc_r+0x15c>
 80072e2:	463a      	mov	r2, r7
 80072e4:	4621      	mov	r1, r4
 80072e6:	e7cf      	b.n	8007288 <_realloc_r+0x15c>
 80072e8:	4621      	mov	r1, r4
 80072ea:	4638      	mov	r0, r7
 80072ec:	9301      	str	r3, [sp, #4]
 80072ee:	f7ff fef1 	bl	80070d4 <memmove>
 80072f2:	9b01      	ldr	r3, [sp, #4]
 80072f4:	e7ce      	b.n	8007294 <_realloc_r+0x168>
 80072f6:	18c7      	adds	r7, r0, r3
 80072f8:	45b8      	cmp	r8, r7
 80072fa:	dc20      	bgt.n	800733e <_realloc_r+0x212>
 80072fc:	68cb      	ldr	r3, [r1, #12]
 80072fe:	688a      	ldr	r2, [r1, #8]
 8007300:	60d3      	str	r3, [r2, #12]
 8007302:	609a      	str	r2, [r3, #8]
 8007304:	4628      	mov	r0, r5
 8007306:	68eb      	ldr	r3, [r5, #12]
 8007308:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800730c:	60d3      	str	r3, [r2, #12]
 800730e:	609a      	str	r2, [r3, #8]
 8007310:	1f32      	subs	r2, r6, #4
 8007312:	2a24      	cmp	r2, #36	; 0x24
 8007314:	d842      	bhi.n	800739c <_realloc_r+0x270>
 8007316:	2a13      	cmp	r2, #19
 8007318:	d93e      	bls.n	8007398 <_realloc_r+0x26c>
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	60ab      	str	r3, [r5, #8]
 800731e:	6863      	ldr	r3, [r4, #4]
 8007320:	60eb      	str	r3, [r5, #12]
 8007322:	2a1b      	cmp	r2, #27
 8007324:	d824      	bhi.n	8007370 <_realloc_r+0x244>
 8007326:	f105 0010 	add.w	r0, r5, #16
 800732a:	f104 0308 	add.w	r3, r4, #8
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	6002      	str	r2, [r0, #0]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	6042      	str	r2, [r0, #4]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	6083      	str	r3, [r0, #8]
 800733a:	46a9      	mov	r9, r5
 800733c:	e757      	b.n	80071ee <_realloc_r+0xc2>
 800733e:	4580      	cmp	r8, r0
 8007340:	4607      	mov	r7, r0
 8007342:	dddf      	ble.n	8007304 <_realloc_r+0x1d8>
 8007344:	4611      	mov	r1, r2
 8007346:	4650      	mov	r0, sl
 8007348:	f7fe f9ca 	bl	80056e0 <_malloc_r>
 800734c:	4607      	mov	r7, r0
 800734e:	2800      	cmp	r0, #0
 8007350:	d0af      	beq.n	80072b2 <_realloc_r+0x186>
 8007352:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007356:	f023 0301 	bic.w	r3, r3, #1
 800735a:	f1a0 0208 	sub.w	r2, r0, #8
 800735e:	444b      	add	r3, r9
 8007360:	429a      	cmp	r2, r3
 8007362:	d11f      	bne.n	80073a4 <_realloc_r+0x278>
 8007364:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8007368:	f027 0703 	bic.w	r7, r7, #3
 800736c:	4437      	add	r7, r6
 800736e:	e73e      	b.n	80071ee <_realloc_r+0xc2>
 8007370:	68a3      	ldr	r3, [r4, #8]
 8007372:	612b      	str	r3, [r5, #16]
 8007374:	68e3      	ldr	r3, [r4, #12]
 8007376:	616b      	str	r3, [r5, #20]
 8007378:	2a24      	cmp	r2, #36	; 0x24
 800737a:	bf01      	itttt	eq
 800737c:	6923      	ldreq	r3, [r4, #16]
 800737e:	61ab      	streq	r3, [r5, #24]
 8007380:	6962      	ldreq	r2, [r4, #20]
 8007382:	61ea      	streq	r2, [r5, #28]
 8007384:	bf19      	ittee	ne
 8007386:	f105 0018 	addne.w	r0, r5, #24
 800738a:	f104 0310 	addne.w	r3, r4, #16
 800738e:	f105 0020 	addeq.w	r0, r5, #32
 8007392:	f104 0318 	addeq.w	r3, r4, #24
 8007396:	e7ca      	b.n	800732e <_realloc_r+0x202>
 8007398:	4623      	mov	r3, r4
 800739a:	e7c8      	b.n	800732e <_realloc_r+0x202>
 800739c:	4621      	mov	r1, r4
 800739e:	f7ff fe99 	bl	80070d4 <memmove>
 80073a2:	e7ca      	b.n	800733a <_realloc_r+0x20e>
 80073a4:	1f32      	subs	r2, r6, #4
 80073a6:	2a24      	cmp	r2, #36	; 0x24
 80073a8:	d82d      	bhi.n	8007406 <_realloc_r+0x2da>
 80073aa:	2a13      	cmp	r2, #19
 80073ac:	d928      	bls.n	8007400 <_realloc_r+0x2d4>
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	6003      	str	r3, [r0, #0]
 80073b2:	6863      	ldr	r3, [r4, #4]
 80073b4:	6043      	str	r3, [r0, #4]
 80073b6:	2a1b      	cmp	r2, #27
 80073b8:	d80e      	bhi.n	80073d8 <_realloc_r+0x2ac>
 80073ba:	f100 0308 	add.w	r3, r0, #8
 80073be:	f104 0208 	add.w	r2, r4, #8
 80073c2:	6811      	ldr	r1, [r2, #0]
 80073c4:	6019      	str	r1, [r3, #0]
 80073c6:	6851      	ldr	r1, [r2, #4]
 80073c8:	6059      	str	r1, [r3, #4]
 80073ca:	6892      	ldr	r2, [r2, #8]
 80073cc:	609a      	str	r2, [r3, #8]
 80073ce:	4621      	mov	r1, r4
 80073d0:	4650      	mov	r0, sl
 80073d2:	f7ff fbd7 	bl	8006b84 <_free_r>
 80073d6:	e76c      	b.n	80072b2 <_realloc_r+0x186>
 80073d8:	68a3      	ldr	r3, [r4, #8]
 80073da:	6083      	str	r3, [r0, #8]
 80073dc:	68e3      	ldr	r3, [r4, #12]
 80073de:	60c3      	str	r3, [r0, #12]
 80073e0:	2a24      	cmp	r2, #36	; 0x24
 80073e2:	bf01      	itttt	eq
 80073e4:	6923      	ldreq	r3, [r4, #16]
 80073e6:	6103      	streq	r3, [r0, #16]
 80073e8:	6961      	ldreq	r1, [r4, #20]
 80073ea:	6141      	streq	r1, [r0, #20]
 80073ec:	bf19      	ittee	ne
 80073ee:	f100 0310 	addne.w	r3, r0, #16
 80073f2:	f104 0210 	addne.w	r2, r4, #16
 80073f6:	f100 0318 	addeq.w	r3, r0, #24
 80073fa:	f104 0218 	addeq.w	r2, r4, #24
 80073fe:	e7e0      	b.n	80073c2 <_realloc_r+0x296>
 8007400:	4603      	mov	r3, r0
 8007402:	4622      	mov	r2, r4
 8007404:	e7dd      	b.n	80073c2 <_realloc_r+0x296>
 8007406:	4621      	mov	r1, r4
 8007408:	f7ff fe64 	bl	80070d4 <memmove>
 800740c:	e7df      	b.n	80073ce <_realloc_r+0x2a2>
 800740e:	4637      	mov	r7, r6
 8007410:	e6ed      	b.n	80071ee <_realloc_r+0xc2>
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	431f      	orrs	r7, r3
 8007418:	f8c9 7004 	str.w	r7, [r9, #4]
 800741c:	6853      	ldr	r3, [r2, #4]
 800741e:	f043 0301 	orr.w	r3, r3, #1
 8007422:	6053      	str	r3, [r2, #4]
 8007424:	e6ff      	b.n	8007226 <_realloc_r+0xfa>
 8007426:	bf00      	nop
 8007428:	20000280 	.word	0x20000280

0800742c <_raise_r>:
 800742c:	291f      	cmp	r1, #31
 800742e:	b538      	push	{r3, r4, r5, lr}
 8007430:	4604      	mov	r4, r0
 8007432:	460d      	mov	r5, r1
 8007434:	d904      	bls.n	8007440 <_raise_r+0x14>
 8007436:	2316      	movs	r3, #22
 8007438:	6003      	str	r3, [r0, #0]
 800743a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800743e:	bd38      	pop	{r3, r4, r5, pc}
 8007440:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007442:	b112      	cbz	r2, 800744a <_raise_r+0x1e>
 8007444:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007448:	b94b      	cbnz	r3, 800745e <_raise_r+0x32>
 800744a:	4620      	mov	r0, r4
 800744c:	f000 f830 	bl	80074b0 <_getpid_r>
 8007450:	462a      	mov	r2, r5
 8007452:	4601      	mov	r1, r0
 8007454:	4620      	mov	r0, r4
 8007456:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800745a:	f000 b817 	b.w	800748c <_kill_r>
 800745e:	2b01      	cmp	r3, #1
 8007460:	d00a      	beq.n	8007478 <_raise_r+0x4c>
 8007462:	1c59      	adds	r1, r3, #1
 8007464:	d103      	bne.n	800746e <_raise_r+0x42>
 8007466:	2316      	movs	r3, #22
 8007468:	6003      	str	r3, [r0, #0]
 800746a:	2001      	movs	r0, #1
 800746c:	bd38      	pop	{r3, r4, r5, pc}
 800746e:	2400      	movs	r4, #0
 8007470:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007474:	4628      	mov	r0, r5
 8007476:	4798      	blx	r3
 8007478:	2000      	movs	r0, #0
 800747a:	bd38      	pop	{r3, r4, r5, pc}

0800747c <raise>:
 800747c:	4b02      	ldr	r3, [pc, #8]	; (8007488 <raise+0xc>)
 800747e:	4601      	mov	r1, r0
 8007480:	6818      	ldr	r0, [r3, #0]
 8007482:	f7ff bfd3 	b.w	800742c <_raise_r>
 8007486:	bf00      	nop
 8007488:	2000018c 	.word	0x2000018c

0800748c <_kill_r>:
 800748c:	b538      	push	{r3, r4, r5, lr}
 800748e:	4c07      	ldr	r4, [pc, #28]	; (80074ac <_kill_r+0x20>)
 8007490:	2300      	movs	r3, #0
 8007492:	4605      	mov	r5, r0
 8007494:	4608      	mov	r0, r1
 8007496:	4611      	mov	r1, r2
 8007498:	6023      	str	r3, [r4, #0]
 800749a:	f7fd ff45 	bl	8005328 <_kill>
 800749e:	1c43      	adds	r3, r0, #1
 80074a0:	d102      	bne.n	80074a8 <_kill_r+0x1c>
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	b103      	cbz	r3, 80074a8 <_kill_r+0x1c>
 80074a6:	602b      	str	r3, [r5, #0]
 80074a8:	bd38      	pop	{r3, r4, r5, pc}
 80074aa:	bf00      	nop
 80074ac:	200034e4 	.word	0x200034e4

080074b0 <_getpid_r>:
 80074b0:	f7fd bf38 	b.w	8005324 <_getpid>

080074b4 <__swbuf_r>:
 80074b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b6:	460e      	mov	r6, r1
 80074b8:	4614      	mov	r4, r2
 80074ba:	4605      	mov	r5, r0
 80074bc:	b118      	cbz	r0, 80074c6 <__swbuf_r+0x12>
 80074be:	6983      	ldr	r3, [r0, #24]
 80074c0:	b90b      	cbnz	r3, 80074c6 <__swbuf_r+0x12>
 80074c2:	f7fe f835 	bl	8005530 <__sinit>
 80074c6:	4b27      	ldr	r3, [pc, #156]	; (8007564 <__swbuf_r+0xb0>)
 80074c8:	429c      	cmp	r4, r3
 80074ca:	d12f      	bne.n	800752c <__swbuf_r+0x78>
 80074cc:	686c      	ldr	r4, [r5, #4]
 80074ce:	69a3      	ldr	r3, [r4, #24]
 80074d0:	60a3      	str	r3, [r4, #8]
 80074d2:	89a3      	ldrh	r3, [r4, #12]
 80074d4:	0719      	lsls	r1, r3, #28
 80074d6:	d533      	bpl.n	8007540 <__swbuf_r+0x8c>
 80074d8:	6923      	ldr	r3, [r4, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d030      	beq.n	8007540 <__swbuf_r+0x8c>
 80074de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074e2:	b2f6      	uxtb	r6, r6
 80074e4:	049a      	lsls	r2, r3, #18
 80074e6:	4637      	mov	r7, r6
 80074e8:	d534      	bpl.n	8007554 <__swbuf_r+0xa0>
 80074ea:	6923      	ldr	r3, [r4, #16]
 80074ec:	6820      	ldr	r0, [r4, #0]
 80074ee:	1ac0      	subs	r0, r0, r3
 80074f0:	6963      	ldr	r3, [r4, #20]
 80074f2:	4298      	cmp	r0, r3
 80074f4:	db04      	blt.n	8007500 <__swbuf_r+0x4c>
 80074f6:	4621      	mov	r1, r4
 80074f8:	4628      	mov	r0, r5
 80074fa:	f7ff fa47 	bl	800698c <_fflush_r>
 80074fe:	bb28      	cbnz	r0, 800754c <__swbuf_r+0x98>
 8007500:	68a3      	ldr	r3, [r4, #8]
 8007502:	3b01      	subs	r3, #1
 8007504:	60a3      	str	r3, [r4, #8]
 8007506:	6823      	ldr	r3, [r4, #0]
 8007508:	1c5a      	adds	r2, r3, #1
 800750a:	6022      	str	r2, [r4, #0]
 800750c:	701e      	strb	r6, [r3, #0]
 800750e:	6963      	ldr	r3, [r4, #20]
 8007510:	3001      	adds	r0, #1
 8007512:	4298      	cmp	r0, r3
 8007514:	d004      	beq.n	8007520 <__swbuf_r+0x6c>
 8007516:	89a3      	ldrh	r3, [r4, #12]
 8007518:	07db      	lsls	r3, r3, #31
 800751a:	d519      	bpl.n	8007550 <__swbuf_r+0x9c>
 800751c:	2e0a      	cmp	r6, #10
 800751e:	d117      	bne.n	8007550 <__swbuf_r+0x9c>
 8007520:	4621      	mov	r1, r4
 8007522:	4628      	mov	r0, r5
 8007524:	f7ff fa32 	bl	800698c <_fflush_r>
 8007528:	b190      	cbz	r0, 8007550 <__swbuf_r+0x9c>
 800752a:	e00f      	b.n	800754c <__swbuf_r+0x98>
 800752c:	4b0e      	ldr	r3, [pc, #56]	; (8007568 <__swbuf_r+0xb4>)
 800752e:	429c      	cmp	r4, r3
 8007530:	d101      	bne.n	8007536 <__swbuf_r+0x82>
 8007532:	68ac      	ldr	r4, [r5, #8]
 8007534:	e7cb      	b.n	80074ce <__swbuf_r+0x1a>
 8007536:	4b0d      	ldr	r3, [pc, #52]	; (800756c <__swbuf_r+0xb8>)
 8007538:	429c      	cmp	r4, r3
 800753a:	bf08      	it	eq
 800753c:	68ec      	ldreq	r4, [r5, #12]
 800753e:	e7c6      	b.n	80074ce <__swbuf_r+0x1a>
 8007540:	4621      	mov	r1, r4
 8007542:	4628      	mov	r0, r5
 8007544:	f7ff f89e 	bl	8006684 <__swsetup_r>
 8007548:	2800      	cmp	r0, #0
 800754a:	d0c8      	beq.n	80074de <__swbuf_r+0x2a>
 800754c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007550:	4638      	mov	r0, r7
 8007552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007554:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007558:	81a3      	strh	r3, [r4, #12]
 800755a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800755c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007560:	6663      	str	r3, [r4, #100]	; 0x64
 8007562:	e7c2      	b.n	80074ea <__swbuf_r+0x36>
 8007564:	08008d78 	.word	0x08008d78
 8007568:	08008d98 	.word	0x08008d98
 800756c:	08008d58 	.word	0x08008d58

08007570 <_wcrtomb_r>:
 8007570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007572:	4605      	mov	r5, r0
 8007574:	b085      	sub	sp, #20
 8007576:	461e      	mov	r6, r3
 8007578:	460f      	mov	r7, r1
 800757a:	4c0f      	ldr	r4, [pc, #60]	; (80075b8 <_wcrtomb_r+0x48>)
 800757c:	b991      	cbnz	r1, 80075a4 <_wcrtomb_r+0x34>
 800757e:	6822      	ldr	r2, [r4, #0]
 8007580:	490e      	ldr	r1, [pc, #56]	; (80075bc <_wcrtomb_r+0x4c>)
 8007582:	6a12      	ldr	r2, [r2, #32]
 8007584:	2a00      	cmp	r2, #0
 8007586:	bf08      	it	eq
 8007588:	460a      	moveq	r2, r1
 800758a:	a901      	add	r1, sp, #4
 800758c:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8007590:	463a      	mov	r2, r7
 8007592:	47a0      	blx	r4
 8007594:	1c43      	adds	r3, r0, #1
 8007596:	bf01      	itttt	eq
 8007598:	2300      	moveq	r3, #0
 800759a:	6033      	streq	r3, [r6, #0]
 800759c:	238a      	moveq	r3, #138	; 0x8a
 800759e:	602b      	streq	r3, [r5, #0]
 80075a0:	b005      	add	sp, #20
 80075a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075a4:	6824      	ldr	r4, [r4, #0]
 80075a6:	4f05      	ldr	r7, [pc, #20]	; (80075bc <_wcrtomb_r+0x4c>)
 80075a8:	6a24      	ldr	r4, [r4, #32]
 80075aa:	2c00      	cmp	r4, #0
 80075ac:	bf08      	it	eq
 80075ae:	463c      	moveq	r4, r7
 80075b0:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 80075b4:	e7ed      	b.n	8007592 <_wcrtomb_r+0x22>
 80075b6:	bf00      	nop
 80075b8:	2000018c 	.word	0x2000018c
 80075bc:	20000690 	.word	0x20000690

080075c0 <__ascii_wctomb>:
 80075c0:	b149      	cbz	r1, 80075d6 <__ascii_wctomb+0x16>
 80075c2:	2aff      	cmp	r2, #255	; 0xff
 80075c4:	bf85      	ittet	hi
 80075c6:	238a      	movhi	r3, #138	; 0x8a
 80075c8:	6003      	strhi	r3, [r0, #0]
 80075ca:	700a      	strbls	r2, [r1, #0]
 80075cc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80075d0:	bf98      	it	ls
 80075d2:	2001      	movls	r0, #1
 80075d4:	4770      	bx	lr
 80075d6:	4608      	mov	r0, r1
 80075d8:	4770      	bx	lr
	...

080075dc <_fstat_r>:
 80075dc:	b538      	push	{r3, r4, r5, lr}
 80075de:	4c07      	ldr	r4, [pc, #28]	; (80075fc <_fstat_r+0x20>)
 80075e0:	2300      	movs	r3, #0
 80075e2:	4605      	mov	r5, r0
 80075e4:	4608      	mov	r0, r1
 80075e6:	4611      	mov	r1, r2
 80075e8:	6023      	str	r3, [r4, #0]
 80075ea:	f7fd fee4 	bl	80053b6 <_fstat>
 80075ee:	1c43      	adds	r3, r0, #1
 80075f0:	d102      	bne.n	80075f8 <_fstat_r+0x1c>
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	b103      	cbz	r3, 80075f8 <_fstat_r+0x1c>
 80075f6:	602b      	str	r3, [r5, #0]
 80075f8:	bd38      	pop	{r3, r4, r5, pc}
 80075fa:	bf00      	nop
 80075fc:	200034e4 	.word	0x200034e4

08007600 <_isatty_r>:
 8007600:	b538      	push	{r3, r4, r5, lr}
 8007602:	4c06      	ldr	r4, [pc, #24]	; (800761c <_isatty_r+0x1c>)
 8007604:	2300      	movs	r3, #0
 8007606:	4605      	mov	r5, r0
 8007608:	4608      	mov	r0, r1
 800760a:	6023      	str	r3, [r4, #0]
 800760c:	f7fd fed8 	bl	80053c0 <_isatty>
 8007610:	1c43      	adds	r3, r0, #1
 8007612:	d102      	bne.n	800761a <_isatty_r+0x1a>
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	b103      	cbz	r3, 800761a <_isatty_r+0x1a>
 8007618:	602b      	str	r3, [r5, #0]
 800761a:	bd38      	pop	{r3, r4, r5, pc}
 800761c:	200034e4 	.word	0x200034e4

08007620 <_init>:
 8007620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007622:	bf00      	nop
 8007624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007626:	bc08      	pop	{r3}
 8007628:	469e      	mov	lr, r3
 800762a:	4770      	bx	lr

0800762c <_fini>:
 800762c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762e:	bf00      	nop
 8007630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007632:	bc08      	pop	{r3}
 8007634:	469e      	mov	lr, r3
 8007636:	4770      	bx	lr
